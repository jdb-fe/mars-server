-- phpMyAdmin SQL Dump
-- version 4.7.7
-- https://www.phpmyadmin.net/
--
-- Host: localhost:3306
-- Generation Time: 2018-04-24 14:25:21
-- 服务器版本： 5.6.38
-- PHP Version: 7.1.12

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `news`
--

-- --------------------------------------------------------

--
-- 表的结构 `comment`
--

CREATE TABLE `comment` (
  `id` int(11) NOT NULL,
  `createAt` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  `updateAt` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  `content` text NOT NULL,
  `postId` int(11) NOT NULL,
  `userId` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- --------------------------------------------------------

--
-- 表的结构 `config`
--

CREATE TABLE `config` (
  `id` int(11) NOT NULL,
  `subscriber` text NOT NULL,
  `mail` text NOT NULL,
  `mercury` varchar(255) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- 转存表中的数据 `config`
--

INSERT INTO `config` (`id`, `subscriber`, `mail`, `mercury`) VALUES
(1, 'yuhz@jiedaibao.com,zhangshibiao@jiedaibao.com,licc@jiedaibao.com,lilei@jiedaibao.com,xujx@jiedaibao.com,zhaohya@jiedaibao.com,zhuzya@jiedaibao.com,s_youyou@jiedaibao.com', '{\"host\":\"smtp.163.com\",\"pass\":\"2010210600\",\"user\":\"ccnuyhz@163.com\"}', 'Ml7VndwAaOIcr92nYGse9Cj6wgpFhJE2y8PaA0Tl');

-- --------------------------------------------------------

--
-- 表的结构 `post`
--

CREATE TABLE `post` (
  `id` int(11) NOT NULL,
  `createAt` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  `updateAt` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  `title` varchar(100) NOT NULL,
  `description` varchar(255) NOT NULL,
  `thumb` varchar(255) NOT NULL,
  `url` varchar(150) NOT NULL,
  `html` text NOT NULL,
  `markdown` text NOT NULL,
  `views` int(11) NOT NULL DEFAULT '0',
  `status` tinyint(4) NOT NULL DEFAULT '1',
  `push` tinyint(4) NOT NULL DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- 转存表中的数据 `post`
--

INSERT INTO `post` (`id`, `createAt`, `updateAt`, `title`, `description`, `thumb`, `url`, `html`, `markdown`, `views`, `status`, `push`) VALUES
(1, '2018-04-23 11:01:40.189930', '2018-04-23 11:01:40.189930', 'Node 定时器详解', 'JavaScript是单线程运行，异步操作特别重要。只要用到引擎之外的功能，就需要跟外部交互，从而形成异步操作。由于异步操作实在太多，JavaScript不得不提供很多异步语法。这就好比，有些人老是受打击，他的抗打击能力必须变得很强，否则他就完蛋了。Node的异步语法比浏览器更复杂，因为它可以跟内核对话，不得不搞了一个专门的库libuv做这件事。这个库负责各种回调函数的执行时间，毕竟异步任务最后还是要回到主线程，一个个排队执行。为了协调异步任务，Node居然提供了四个定时器，让任务可以在指定的时间运行。s', 'http://www.ruanyifeng.com/blogimg/asset/2018/bg2018022301.jpg', 'http://www.ruanyifeng.com/blog/2018/02/node-event-loop.html', '\n\n                                    <!-- div class=\"asset-body\" -->\n                                        <p>JavaScript 是单线程运行，异步操作特别重要。</p>\n\n                                    <!-- /div -->\n\n\n                                    <!-- div id=\"more\" class=\"asset-more\" -->\n                                        <p>只要用到引擎之外的功能，就需要跟外部交互，从而形成异步操作。由于异步操作实在太多，JavaScript 不得不提供很多异步语法。这就好比，有些人老是受打击， 他的抗打击能力必须变得很强，否则他就完蛋了。</p>\n\n<p>Node 的异步语法比浏览器更复杂，因为它可以跟内核对话，不得不搞了一个专门的库 <a href=\"http://thlorenz.com/learnuv/book/history/history_1.html\">libuv</a> 做这件事。这个库负责各种回调函数的执行时间，毕竟异步任务最后还是要回到主线程，一个个排队执行。</p>\n\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2018/bg2018022301.jpg\" alt=\"\" title=\"\"></p>\n\n<p>为了协调异步任务，Node 居然提供了四个定时器，让任务可以在指定的时间运行。</p>\n\n<blockquote>\n  <ul>\n<li>setTimeout()</li>\n<li>setInterval()</li>\n<li>setImmediate()</li>\n<li>process.nextTick()</li>\n</ul>\n</blockquote>\n\n<p>前两个是语言的标准，后两个是 Node 独有的。它们的写法差不多，作用也差不多，不太容易区别。</p>\n\n<p>你能说出下面代码的运行结果吗？</p>\n\n<blockquote><pre><code class=\"language-javascript\">\n// test.js\nsetTimeout(() => console.log(1));\nsetImmediate(() => console.log(2));\nprocess.nextTick(() => console.log(3));\nPromise.resolve().then(() => console.log(4));\n(() => console.log(5))();\n</code></pre></blockquote>\n\n<p>运行结果如下。</p>\n\n<blockquote><pre><code class=\"language-bash\">\n$ node test.js\n5\n3\n4\n1\n2\n</code></pre></blockquote>\n\n<p>如果你能一口说对，可能就不需要再看下去了。本文详细解释，Node 怎么处理各种定时器，或者更广义地说，libuv 库怎么安排异步任务在主线程上执行。</p>\n\n<h2>一、同步任务和异步任务</h2>\n\n<p>首先，同步任务总是比异步任务更早执行。</p>\n\n<p>前面的那段代码，只有最后一行是同步任务，因此最早执行。</p>\n\n<blockquote><pre><code class=\"language-javascript\">\n(() => console.log(5))();\n</code></pre></blockquote>\n\n<h2>二、本轮循环和次轮循环</h2>\n\n<p>异步任务可以分成两种。</p>\n\n<blockquote>\n  <ul>\n<li>追加在<strong>本轮循环</strong>的异步任务</li>\n<li>追加在<strong>次轮循环</strong>的异步任务</li>\n</ul>\n</blockquote>\n\n<p>所谓\"循环\"，指的是事件循环（event loop）。这是 JavaScript 引擎处理异步任务的方式，后文会详细解释。这里只要理解，本轮循环一定早于次轮循环执行即可。</p>\n\n<p>Node 规定，<code>process.nextTick</code>和<code>Promise</code>的回调函数，追加在本轮循环，即同步任务一旦执行完成，就开始执行它们。而<code>setTimeout</code>、<code>setInterval</code>、<code>setImmediate</code>的回调函数，追加在次轮循环。</p>\n\n<p>这就是说，文首那段代码的第三行和第四行，一定比第一行和第二行更早执行。</p>\n\n<blockquote><pre><code class=\"language-javascript\">\n// 下面两行，次轮循环执行\nsetTimeout(() => console.log(1));\nsetImmediate(() => console.log(2));\n// 下面两行，本轮循环执行\nprocess.nextTick(() => console.log(3));\nPromise.resolve().then(() => console.log(4));\n</code></pre></blockquote>\n\n<h2>三、process.nextTick()</h2>\n\n<p><code>process.nextTick</code>这个名字有点误导，它是在本轮循环执行的，而且是所有异步任务里面最快执行的。</p>\n\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2018/bg2018022302.png\" alt=\"\" title=\"\"></p>\n\n<p>Node 执行完所有同步任务，接下来就会执行<code>process.nextTick</code>的任务队列。所以，下面这行代码是第二个输出结果。</p>\n\n<blockquote><pre><code class=\"language-javascript\">\nprocess.nextTick(() => console.log(3));\n</code></pre></blockquote>\n\n<p>基本上，如果你希望异步任务尽可能快地执行，那就使用<code>process.nextTick</code>。</p>\n\n<h2>四、微任务</h2>\n\n<p>根据语言规格，<code>Promise</code>对象的回调函数，会进入异步任务里面的\"微任务\"（microtask）队列。</p>\n\n<p>微任务队列追加在<code>process.nextTick</code>队列的后面，也属于本轮循环。所以，下面的代码总是先输出<code>3</code>，再输出<code>4</code>。</p>\n\n<blockquote><pre><code class=\"language-javascript\">\nprocess.nextTick(() => console.log(3));\nPromise.resolve().then(() => console.log(4));\n// 3\n// 4\n</code></pre></blockquote>\n\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2018/bg2018022303.png\" alt=\"\" title=\"\"></p>\n\n<p>注意，只有前一个队列全部清空以后，才会执行下一个队列。</p>\n\n<blockquote><pre><code class=\"language-javascript\">\nprocess.nextTick(() => console.log(1));\nPromise.resolve().then(() => console.log(2));\nprocess.nextTick(() => console.log(3));\nPromise.resolve().then(() => console.log(4));\n// 1\n// 3\n// 2\n// 4\n</code></pre></blockquote>\n\n<p>上面代码中，全部<code>process.nextTick</code>的回调函数，执行都会早于<code>Promise</code>的。</p>\n\n<p>至此，本轮循环的执行顺序就讲完了。</p>\n\n<blockquote>\n  <ol start=\"1\">\n<li>同步任务</li>\n<li>process.nextTick()</li>\n<li>微任务</li>\n</ol>\n</blockquote>\n\n<h2>五、事件循环的概念</h2>\n\n<p>下面开始介绍次轮循环的执行顺序，这就必须理解什么是事件循环（event loop）了。</p>\n\n<p>Node 的<a href=\"https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/\">官方文档</a>是这样介绍的。</p>\n\n<blockquote>\n  <p>\"When Node.js starts, it initializes the event loop, processes the provided input script  which may make async API calls, schedule timers, or call process.nextTick(), then begins processing the event loop.\"</p>\n</blockquote>\n\n<p>这段话很重要，需要仔细读。它表达了三层意思。</p>\n\n<p>首先，有些人以为，除了主线程，还存在一个单独的事件循环线程。不是这样的，只有一个主线程，事件循环是在主线程上完成的。</p>\n\n<p>其次，Node 开始执行脚本时，会先进行事件循环的初始化，但是这时事件循环还没有开始，会先完成下面的事情。</p>\n\n<blockquote>\n  <ul>\n<li>同步任务</li>\n<li>发出异步请求</li>\n<li>规划定时器生效的时间</li>\n<li>执行<code>process.nextTick()</code>等等</li>\n</ul>\n</blockquote>\n\n<p>最后，上面这些事情都干完了，事件循环就正式开始了。</p>\n\n<h2>六、事件循环的六个阶段</h2>\n\n<p>事件循环会无限次地执行，一轮又一轮。只有异步任务的回调函数队列清空了，才会停止执行。</p>\n\n<p>每一轮的事件循环，分成六个阶段。这些阶段会依次执行。</p>\n\n<blockquote>\n  <ol start=\"1\">\n<li>timers</li>\n<li>I/O callbacks</li>\n<li>idle, prepare</li>\n<li>poll</li>\n<li>check</li>\n<li>close callbacks</li>\n</ol>\n</blockquote>\n\n<p>每个阶段都有一个先进先出的回调函数队列。只有一个阶段的回调函数队列清空了，该执行的回调函数都执行了，事件循环才会进入下一个阶段。</p>\n\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2018/bg2018022304.png\" alt=\"\" title=\"\"></p>\n\n<p>下面简单介绍一下每个阶段的含义，详细介绍可以看<a href=\"https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/\">官方文档</a>，也可以参考 libuv 的<a href=\"https://jsblog.insiderattack.net/handling-io-nodejs-event-loop-part-4-418062f917d1\">源码解读</a>。</p>\n\n<p><strong>（1）timers</strong></p>\n\n<p>这个是定时器阶段，处理<code>setTimeout()</code>和<code>setInterval()</code>的回调函数。进入这个阶段后，主线程会检查一下当前时间，是否满足定时器的条件。如果满足就执行回调函数，否则就离开这个阶段。</p>\n\n<p><strong>（2）I/O callbacks</strong></p>\n\n<p>除了以下操作的回调函数，其他的回调函数都在这个阶段执行。</p>\n\n<blockquote>\n  <ul>\n<li><code>setTimeout()</code>和<code>setInterval()</code>的回调函数</li>\n<li><code>setImmediate()</code>的回调函数</li>\n<li>用于关闭请求的回调函数，比如<code>socket.on(\'close\', ...)</code></li>\n</ul>\n</blockquote>\n\n<p><strong>（3）idle, prepare</strong></p>\n\n<p>该阶段只供 libuv 内部调用，这里可以忽略。</p>\n\n<p><strong>（4）Poll</strong></p>\n\n<p>这个阶段是轮询时间，用于等待还未返回的 I/O 事件，比如服务器的回应、用户移动鼠标等等。</p>\n\n<p>这个阶段的时间会比较长。如果没有其他异步任务要处理（比如到期的定时器），会一直停留在这个阶段，等待 I/O 请求返回结果。</p>\n\n<p><strong>（5）check</strong></p>\n\n<p>该阶段执行<code>setImmediate()</code>的回调函数。</p>\n\n<p><strong>（6）close callbacks</strong></p>\n\n<p>该阶段执行关闭请求的回调函数，比如<code>socket.on(\'close\', ...)</code>。</p>\n\n<h2>七、事件循环的示例</h2>\n\n<p>下面是来自官方文档的一个示例。</p>\n\n<blockquote><pre><code class=\"language-javascript\">\nconst fs = require(\'fs\');\n\nconst timeoutScheduled = Date.now();\n\n// 异步任务一：100ms 后执行的定时器\nsetTimeout(() => {\n  const delay = Date.now() - timeoutScheduled;\n  console.log(`${delay}ms`);\n}, 100);\n\n// 异步任务二：文件读取后，有一个 200ms 的回调函数\nfs.readFile(\'test.js\', () => {\n  const startCallback = Date.now();\n  while (Date.now() - startCallback < 200) {\n    // 什么也不做\n  }\n});\n</code></pre></blockquote>\n\n<p>上面代码有两个异步任务，一个是 100ms 后执行的定时器，一个是文件读取，它的回调函数需要 200ms。请问运行结果是什么？</p>\n\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2018/bg2018022305.jpg\" alt=\"\" title=\"\"></p>\n\n<p>脚本进入第一轮事件循环以后，没有到期的定时器，也没有已经可以执行的 I/O 回调函数，所以会进入 Poll 阶段，等待内核返回文件读取的结果。由于读取小文件一般不会超过 100ms，所以在定时器到期之前，Poll 阶段就会得到结果，因此就会继续往下执行。</p>\n\n<p>第二轮事件循环，依然没有到期的定时器，但是已经有了可以执行的 I/O 回调函数，所以会进入 I/O callbacks 阶段，执行<code>fs.readFile</code>的回调函数。这个回调函数需要 200ms，也就是说，在它执行到一半的时候，100ms 的定时器就会到期。但是，必须等到这个回调函数执行完，才会离开这个阶段。</p>\n\n<p>第三轮事件循环，已经有了到期的定时器，所以会在 timers 阶段执行定时器。最后输出结果大概是200多毫秒。</p>\n\n<h2>八、setTimeout 和 setImmediate</h2>\n\n<p>由于<code>setTimeout</code>在 timers 阶段执行，而<code>setImmediate</code>在 check 阶段执行。所以，<code>setTimeout</code>会早于<code>setImmediate</code>完成。</p>\n\n<blockquote><pre><code class=\"language-javascript\">\nsetTimeout(() => console.log(1));\nsetImmediate(() => console.log(2));\n</code></pre></blockquote>\n\n<p>上面代码应该先输出<code>1</code>，再输出<code>2</code>，但是实际执行的时候，结果却是不确定，有时还会先输出<code>2</code>，再输出<code>1</code>。</p>\n\n<p>这是因为<code>setTimeout</code>的第二个参数默认为<code>0</code>。但是实际上，Node 做不到0毫秒，最少也需要1毫秒，根据<a href=\"https://nodejs.org/api/timers.html#timers_settimeout_callback_delay_args\">官方文档</a>，第二个参数的取值范围在1毫秒到2147483647毫秒之间。也就是说，<code>setTimeout(f, 0)</code>等同于<code>setTimeout(f, 1)</code>。</p>\n\n<p>实际执行的时候，进入事件循环以后，有可能到了1毫秒，也可能还没到1毫秒，取决于系统当时的状况。如果没到1毫秒，那么 timers 阶段就会跳过，进入 check 阶段，先执行<code>setImmediate</code>的回调函数。</p>\n\n<p>但是，下面的代码一定是先输出2，再输出1。</p>\n\n<blockquote><pre><code class=\"language-javascript\">\nconst fs = require(\'fs\');\n\nfs.readFile(\'test.js\', () => {\n  setTimeout(() => console.log(1));\n  setImmediate(() => console.log(2));\n});\n</code></pre></blockquote>\n\n<p>上面代码会先进入 I/O callbacks 阶段，然后是 check 阶段，最后才是 timers 阶段。因此，<code>setImmediate</code>才会早于<code>setTimeout</code>执行。</p>\n\n<h2>九、参考链接</h2>\n\n<ul>\n<li><a href=\"https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/\">The Node.js Event Loop, Timers, and process.nextTick()</a>, by Node.js</li>\n<li><a href=\"https://jsblog.insiderattack.net/handling-io-nodejs-event-loop-part-4-418062f917d1\">Handling IO -- NodeJS Event Loop</a>, by Deepal Jayasekara</li>\n<li><a href=\"http://voidcanvas.com/setimmediate-vs-nexttick-vs-settimeout/\">setImmediate() vs nextTick() vs setTimeout(fn,0) - in depth explanation</a>, by Paul Shan</li>\n<li><a href=\"http://voidcanvas.com/nodejs-event-loop/\">Node.js event loop workflow & lifecycle in low level</a>, by Paul Shan</li>\n</ul>\n\n<p>（完）</p>\n\n                                    <!-- /div -->\n\n                                ', 'JavaScript 是单线程运行，异步操作特别重要。\n\n只要用到引擎之外的功能，就需要跟外部交互，从而形成异步操作。由于异步操作实在太多，JavaScript 不得不提供很多异步语法。这就好比，有些人老是受打击， 他的抗打击能力必须变得很强，否则他就完蛋了。\n\nNode 的异步语法比浏览器更复杂，因为它可以跟内核对话，不得不搞了一个专门的库 [libuv](http://thlorenz.com/learnuv/book/history/history_1.html) 做这件事。这个库负责各种回调函数的执行时间，毕竟异步任务最后还是要回到主线程，一个个排队执行。\n\n![](http://www.ruanyifeng.com/blogimg/asset/2018/bg2018022301.jpg)\n\n为了协调异步任务，Node 居然提供了四个定时器，让任务可以在指定的时间运行。\n\n> *   setTimeout()\n> *   setInterval()\n> *   setImmediate()\n> *   process.nextTick()\n\n前两个是语言的标准，后两个是 Node 独有的。它们的写法差不多，作用也差不多，不太容易区别。\n\n你能说出下面代码的运行结果吗？\n\n>     \n>     // test.js\n>     setTimeout(() => console.log(1));\n>     setImmediate(() => console.log(2));\n>     process.nextTick(() => console.log(3));\n>     Promise.resolve().then(() => console.log(4));\n>     (() => console.log(5))();\n>     \n\n运行结果如下。\n\n>     \n>     $ node test.js\n>     5\n>     3\n>     4\n>     1\n>     2\n>     \n\n如果你能一口说对，可能就不需要再看下去了。本文详细解释，Node 怎么处理各种定时器，或者更广义地说，libuv 库怎么安排异步任务在主线程上执行。\n\n一、同步任务和异步任务\n-----------\n\n首先，同步任务总是比异步任务更早执行。\n\n前面的那段代码，只有最后一行是同步任务，因此最早执行。\n\n>     \n>     (() => console.log(5))();\n>     \n\n二、本轮循环和次轮循环\n-----------\n\n异步任务可以分成两种。\n\n> *   追加在**本轮循环**的异步任务\n> *   追加在**次轮循环**的异步任务\n\n所谓\"循环\"，指的是事件循环（event loop）。这是 JavaScript 引擎处理异步任务的方式，后文会详细解释。这里只要理解，本轮循环一定早于次轮循环执行即可。\n\nNode 规定，`process.nextTick`和`Promise`的回调函数，追加在本轮循环，即同步任务一旦执行完成，就开始执行它们。而`setTimeout`、`setInterval`、`setImmediate`的回调函数，追加在次轮循环。\n\n这就是说，文首那段代码的第三行和第四行，一定比第一行和第二行更早执行。\n\n>     \n>     // 下面两行，次轮循环执行\n>     setTimeout(() => console.log(1));\n>     setImmediate(() => console.log(2));\n>     // 下面两行，本轮循环执行\n>     process.nextTick(() => console.log(3));\n>     Promise.resolve().then(() => console.log(4));\n>     \n\n三、process.nextTick()\n--------------------\n\n`process.nextTick`这个名字有点误导，它是在本轮循环执行的，而且是所有异步任务里面最快执行的。\n\n![](http://www.ruanyifeng.com/blogimg/asset/2018/bg2018022302.png)\n\nNode 执行完所有同步任务，接下来就会执行`process.nextTick`的任务队列。所以，下面这行代码是第二个输出结果。\n\n>     \n>     process.nextTick(() => console.log(3));\n>     \n\n基本上，如果你希望异步任务尽可能快地执行，那就使用`process.nextTick`。\n\n四、微任务\n-----\n\n根据语言规格，`Promise`对象的回调函数，会进入异步任务里面的\"微任务\"（microtask）队列。\n\n微任务队列追加在`process.nextTick`队列的后面，也属于本轮循环。所以，下面的代码总是先输出`3`，再输出`4`。\n\n>     \n>     process.nextTick(() => console.log(3));\n>     Promise.resolve().then(() => console.log(4));\n>     // 3\n>     // 4\n>     \n\n![](http://www.ruanyifeng.com/blogimg/asset/2018/bg2018022303.png)\n\n注意，只有前一个队列全部清空以后，才会执行下一个队列。\n\n>     \n>     process.nextTick(() => console.log(1));\n>     Promise.resolve().then(() => console.log(2));\n>     process.nextTick(() => console.log(3));\n>     Promise.resolve().then(() => console.log(4));\n>     // 1\n>     // 3\n>     // 2\n>     // 4\n>     \n\n上面代码中，全部`process.nextTick`的回调函数，执行都会早于`Promise`的。\n\n至此，本轮循环的执行顺序就讲完了。\n\n> 1.  同步任务\n> 2.  process.nextTick()\n> 3.  微任务\n\n五、事件循环的概念\n---------\n\n下面开始介绍次轮循环的执行顺序，这就必须理解什么是事件循环（event loop）了。\n\nNode 的[官方文档](https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/)是这样介绍的。\n\n> \"When Node.js starts, it initializes the event loop, processes the provided input script which may make async API calls, schedule timers, or call process.nextTick(), then begins processing the event loop.\"\n\n这段话很重要，需要仔细读。它表达了三层意思。\n\n首先，有些人以为，除了主线程，还存在一个单独的事件循环线程。不是这样的，只有一个主线程，事件循环是在主线程上完成的。\n\n其次，Node 开始执行脚本时，会先进行事件循环的初始化，但是这时事件循环还没有开始，会先完成下面的事情。\n\n> *   同步任务\n> *   发出异步请求\n> *   规划定时器生效的时间\n> *   执行`process.nextTick()`等等\n\n最后，上面这些事情都干完了，事件循环就正式开始了。\n\n六、事件循环的六个阶段\n-----------\n\n事件循环会无限次地执行，一轮又一轮。只有异步任务的回调函数队列清空了，才会停止执行。\n\n每一轮的事件循环，分成六个阶段。这些阶段会依次执行。\n\n> 1.  timers\n> 2.  I/O callbacks\n> 3.  idle, prepare\n> 4.  poll\n> 5.  check\n> 6.  close callbacks\n\n每个阶段都有一个先进先出的回调函数队列。只有一个阶段的回调函数队列清空了，该执行的回调函数都执行了，事件循环才会进入下一个阶段。\n\n![](http://www.ruanyifeng.com/blogimg/asset/2018/bg2018022304.png)\n\n下面简单介绍一下每个阶段的含义，详细介绍可以看[官方文档](https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/)，也可以参考 libuv 的[源码解读](https://jsblog.insiderattack.net/handling-io-nodejs-event-loop-part-4-418062f917d1)。\n\n**（1）timers**\n\n这个是定时器阶段，处理`setTimeout()`和`setInterval()`的回调函数。进入这个阶段后，主线程会检查一下当前时间，是否满足定时器的条件。如果满足就执行回调函数，否则就离开这个阶段。\n\n**（2）I/O callbacks**\n\n除了以下操作的回调函数，其他的回调函数都在这个阶段执行。\n\n> *   `setTimeout()`和`setInterval()`的回调函数\n> *   `setImmediate()`的回调函数\n> *   用于关闭请求的回调函数，比如`socket.on(\'close\', ...)`\n\n**（3）idle, prepare**\n\n该阶段只供 libuv 内部调用，这里可以忽略。\n\n**（4）Poll**\n\n这个阶段是轮询时间，用于等待还未返回的 I/O 事件，比如服务器的回应、用户移动鼠标等等。\n\n这个阶段的时间会比较长。如果没有其他异步任务要处理（比如到期的定时器），会一直停留在这个阶段，等待 I/O 请求返回结果。\n\n**（5）check**\n\n该阶段执行`setImmediate()`的回调函数。\n\n**（6）close callbacks**\n\n该阶段执行关闭请求的回调函数，比如`socket.on(\'close\', ...)`。\n\n七、事件循环的示例\n---------\n\n下面是来自官方文档的一个示例。\n\n>     \n>     const fs = require(\'fs\');\n>     \n>     const timeoutScheduled = Date.now();\n>     \n>     // 异步任务一：100ms 后执行的定时器\n>     setTimeout(() => {\n>       const delay = Date.now() - timeoutScheduled;\n>       console.log(`${delay}ms`);\n>     }, 100);\n>     \n>     // 异步任务二：文件读取后，有一个 200ms 的回调函数\n>     fs.readFile(\'test.js\', () => {\n>       const startCallback = Date.now();\n>       while (Date.now() - startCallback < 200) {\n>         // 什么也不做\n>       }\n>     });\n>     \n\n上面代码有两个异步任务，一个是 100ms 后执行的定时器，一个是文件读取，它的回调函数需要 200ms。请问运行结果是什么？\n\n![](http://www.ruanyifeng.com/blogimg/asset/2018/bg2018022305.jpg)\n\n脚本进入第一轮事件循环以后，没有到期的定时器，也没有已经可以执行的 I/O 回调函数，所以会进入 Poll 阶段，等待内核返回文件读取的结果。由于读取小文件一般不会超过 100ms，所以在定时器到期之前，Poll 阶段就会得到结果，因此就会继续往下执行。\n\n第二轮事件循环，依然没有到期的定时器，但是已经有了可以执行的 I/O 回调函数，所以会进入 I/O callbacks 阶段，执行`fs.readFile`的回调函数。这个回调函数需要 200ms，也就是说，在它执行到一半的时候，100ms 的定时器就会到期。但是，必须等到这个回调函数执行完，才会离开这个阶段。\n\n第三轮事件循环，已经有了到期的定时器，所以会在 timers 阶段执行定时器。最后输出结果大概是200多毫秒。\n\n八、setTimeout 和 setImmediate\n---------------------------\n\n由于`setTimeout`在 timers 阶段执行，而`setImmediate`在 check 阶段执行。所以，`setTimeout`会早于`setImmediate`完成。\n\n>     \n>     setTimeout(() => console.log(1));\n>     setImmediate(() => console.log(2));\n>     \n\n上面代码应该先输出`1`，再输出`2`，但是实际执行的时候，结果却是不确定，有时还会先输出`2`，再输出`1`。\n\n这是因为`setTimeout`的第二个参数默认为`0`。但是实际上，Node 做不到0毫秒，最少也需要1毫秒，根据[官方文档](https://nodejs.org/api/timers.html#timers_settimeout_callback_delay_args)，第二个参数的取值范围在1毫秒到2147483647毫秒之间。也就是说，`setTimeout(f, 0)`等同于`setTimeout(f, 1)`。\n\n实际执行的时候，进入事件循环以后，有可能到了1毫秒，也可能还没到1毫秒，取决于系统当时的状况。如果没到1毫秒，那么 timers 阶段就会跳过，进入 check 阶段，先执行`setImmediate`的回调函数。\n\n但是，下面的代码一定是先输出2，再输出1。\n\n>     \n>     const fs = require(\'fs\');\n>     \n>     fs.readFile(\'test.js\', () => {\n>       setTimeout(() => console.log(1));\n>       setImmediate(() => console.log(2));\n>     });\n>     \n\n上面代码会先进入 I/O callbacks 阶段，然后是 check 阶段，最后才是 timers 阶段。因此，`setImmediate`才会早于`setTimeout`执行。\n\n九、参考链接\n------\n\n*   [The Node.js Event Loop, Timers, and process.nextTick()](https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/), by Node.js\n*   [Handling IO -- NodeJS Event Loop](https://jsblog.insiderattack.net/handling-io-nodejs-event-loop-part-4-418062f917d1), by Deepal Jayasekara\n*   [setImmediate() vs nextTick() vs setTimeout(fn,0) - in depth explanation](http://voidcanvas.com/setimmediate-vs-nexttick-vs-settimeout/), by Paul Shan\n*   [Node.js event loop workflow & lifecycle in low level](http://voidcanvas.com/nodejs-event-loop/), by Paul Shan\n\n（完）', 0, 1, 0);
INSERT INTO `post` (`id`, `createAt`, `updateAt`, `title`, `description`, `thumb`, `url`, `html`, `markdown`, `views`, `status`, `push`) VALUES
(2, '2018-04-23 11:01:40.375736', '2018-04-23 11:01:40.375736', 'WeexConf 2018干货系列|Weex + Ui', '侑夕阿里巴巴高级前端工程师本文是2018年WeexConf中议题《Weex+Ui》的内容文档整理，主要给大家介绍飞猪Weex技术体系从无到有的过程，包括WeexUi组件库的开发和发展，重点分享在WeexUi层建设的一些经验。文章较长，首先放上WeexUi的开源地址，欢迎大家提PR，同时也可以通过Star来表示你的喜欢。(https://github.com/alibaba/weex-ui)WhyWeex?WeexvsH5我们为什么选择Weex作为我们首要的跨端开发技术呢？写过H5的同学肯定会被它的简单高效', 'https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnju9YFyWBwuoqan1SNEPFTsjHrsSNMRI9lMnl82SqGDohAn6vK2uQ363I3rB1yicAZYNXsFzfTKQM0fw/640?wx_fmt=jpeg', 'https://mp.weixin.qq.com/s?__biz=MzAxNDEwNjk5OQ==&mid=2650400953&idx=1&sn=c36e11e0ad44d2ca6ea459a98a79bfed&chksm=839520a1b4e2a9b7b13d31e8ff723d1f81c4c', '\n                    \n\n                    \n\n                    \n                    \n                    <p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"font-size: 14px;\"></span></p><p><img class=\"\" data-ratio=\"0.6667900777489819\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnju9YFyWBwuoqan1SNEPFTsjHrsSNMRI9lMnl82SqGDohAn6vK2uQ363I3rB1yicAZYNXsFzfTKQM0fw/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"2701\" height=\"799\" width=\"1199\" style=\"-webkit-user-select: none;display: block;margin: auto;cursor: zoom-in;\" src=\"https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnju9YFyWBwuoqan1SNEPFTsjHrsSNMRI9lMnl82SqGDohAn6vK2uQ363I3rB1yicAZYNXsFzfTKQM0fw/640?wx_fmt=jpeg\"></p><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);text-align: center;\"><span style=\"font-size: 14px;\">侑夕 阿里巴巴高级前端工程师</span></p><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"font-size: 14px;\">本文是2018年 Weex Conf 中议题《Weex + Ui》的内容文档整理，主要给大家介绍飞猪 Weex 技术体系从无到有的过程，包括 Weex Ui 组件库的开发和发展，重点分享在 Weex Ui 层建设的一些经验。</span><br><span style=\"font-size: 14px;\"></span><br></p><p><span style=\"font-size: 14px;\">文章较长，首先放上 Weex Ui 的开源地址，欢迎大家提PR，同时也可以通过 Star 来表示你的喜欢。(https://github.com/alibaba/weex-ui)</span></p><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"font-size: 14px;font-weight: 600;\"><br></span></p><section class=\"_135editor\" data-tools=\"135编辑器\" data-id=\"86516\" style=\"border: 0px none;box-sizing: border-box;\"><section style=\"border-bottom-width: 1px;border-bottom-style: solid;border-bottom-color: rgb(221, 221, 221);margin-right: auto;margin-bottom: 10px;margin-left: auto;box-sizing: border-box;\"><p class=\"135brush\" data-brushtype=\"text\" style=\"padding-right: 5px;padding-bottom: 6px;padding-left: 5px;border-bottom-width: 2px;border-bottom-style: solid;border-bottom-color: rgb(239, 112, 96);display: inline-block;margin-bottom: -1px;line-height: 1.1;font-size: 18px;\"><span style=\"font-size: 18px;\">Why Weex ?</span></p></section></section><h2 style=\"\"></h2><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"box-sizing: inherit;font-weight: 600;font-synthesis: style;font-size: 14px;\">Weex vs H5</span></p><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"font-size: 14px;\">我们为什么选择Weex作为我们首要的跨端开发技术呢？</span></p><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"font-size: 14px;\">写过H5的同学肯定会被它的</span><span style=\"font-size: 14px;box-sizing: inherit;font-weight: 600;font-synthesis: style;\">简单高效</span><span style=\"font-size: 14px;\">、</span><span style=\"font-size: 14px;box-sizing: inherit;font-weight: 600;font-synthesis: style;\">发布即更新</span><span style=\"font-size: 14px;\">、</span><span style=\"font-size: 14px;box-sizing: inherit;font-weight: 600;font-synthesis: style;\">一条URL可适配多端</span><span style=\"font-size: 14px;\">等这些</span><span style=\"font-size: 14px;box-sizing: inherit;font-weight: 600;font-synthesis: style;\">快</span><span style=\"font-size: 14px;\">所吸引，但写过 Native 的同学肯定也会被 Native 的</span><span style=\"font-size: 14px;box-sizing: inherit;font-weight: 600;font-synthesis: style;\">富交互</span><span style=\"font-size: 14px;\">、</span><span style=\"font-size: 14px;box-sizing: inherit;font-weight: 600;font-synthesis: style;\">性能体验</span><span style=\"font-size: 14px;\">、</span><span style=\"font-size: 14px;box-sizing: inherit;font-weight: 600;font-synthesis: style;\">可调用原生能力</span><span style=\"font-size: 14px;\">、</span><span style=\"font-size: 14px;box-sizing: inherit;font-weight: 600;font-synthesis: style;\">可管理内存</span><span style=\"font-size: 14px;\">等特性给我们的业务带来更好的体验。</span></p><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"box-sizing: inherit;font-weight: 600;font-synthesis: style;font-size: 14px;\">快和体验想同时兼得</span></p><figure style=\"box-sizing: inherit;margin-top: 24px;margin-bottom: 24px;color: rgb(51, 51, 51);\"></figure><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"font-size: 14px;\">飞猪前几年也一直在这个方向上面探索。</span></p><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"font-size: 14px;\">包括最开始的 Hybrid 开发，通过 Bridge 提供部分 Native 能⼒来提升 H5 体验，譬如我们在H5里面可以直接获取App的定位信息、使用相机、播放视频、导航跳转等能力，业界也有Cordova、Ionic、Meteor这些成熟的方案。</span></p><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"font-size: 14px;\"><img class=\"\" data-ratio=\"0.5625\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnjuibdbD0UvQhic1XXu4YibPcqynv7ib4OhfxbMjACDcYH9pmdreJibqpJn65PtQgHwpQPYnYuqslfzSmHVw/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"1920\" width=\"800\" src=\"https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnjuibdbD0UvQhic1XXu4YibPcqynv7ib4OhfxbMjACDcYH9pmdreJibqpJn65PtQgHwpQPYnYuqslfzSmHVw/640?wx_fmt=jpeg\"></span></p><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"font-size: 14px;\">还有利用离线包体系通过提前将资源⽂件下载，访问时路由拦截加载本地资源，让我们的H5页面可以达到秒出、动态更新、弱网可用效果，内部有手淘Zcache、飞猪信鸽、支付宝九州这些成熟的系统。</span></p><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"font-size: 14px;\">等到了16年左右，跨平台开发技术逐渐火起来后，一种全新的开发思路吸引这我们，也即用JS来写Native，⽤ Web 的开发体验构建⾼性能、可扩展的 Native 应⽤，同时真正获取上述所说的<span style=\"font-size: 14px;box-sizing: inherit;font-weight: 600;font-synthesis: style;\">快</span>和<span style=\"font-size: 14px;box-sizing: inherit;font-weight: 600;font-synthesis: style;\">体验</span>。</span></p><p><span style=\"font-size: 14px;\"><strong>业务对比分析</strong></span><br></p><p><br></p><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"font-size: 14px;\">那么为什么会选择 Weex 呢？其实和飞猪业务特点很有关系，同时又可以很好解决这些痛点。</span></p><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"font-size: 14px;\">飞猪<span style=\"font-size: 14px;box-sizing: inherit;font-weight: 600;font-synthesis: style;\">业务迭代速度快</span>，也需要快速上线；同时很多时候</span><span style=\"font-size: 14px;box-sizing: inherit;font-weight: 600;font-synthesis: style;\">景点和海外弱网使用</span><span style=\"font-size: 14px;\">，同时要体验良好；</span></p><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"font-size: 14px;\">其中最重要的一点是<span style=\"font-size: 14px;box-sizing: inherit;font-weight: 600;font-synthesis: style;\">多容器接入，适配飞猪、手淘、天猫、支付宝</span>，也即我们一次重要业务的开发需要一个iOS、一个Android同学来开发两端，同时由一个H5同学来开发兼容手淘、支付宝、UC的 Web 版本，也即一次业务发布涉及到多端同时开发、上线。</span></p><figure style=\"box-sizing: inherit;margin-top: 24px;margin-bottom: 24px;color: rgb(51, 51, 51);\"></figure><p><img class=\"\" data-ratio=\"0.5625\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnjuibdbD0UvQhic1XXu4YibPcqyn24lrIGibkWNxTpMzLThrXGhpPWL9k6GbLxq6CqrvQmCWCpiaVib1yFicGA/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"1920\" width=\"800\" src=\"https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnjuibdbD0UvQhic1XXu4YibPcqyn24lrIGibkWNxTpMzLThrXGhpPWL9k6GbLxq6CqrvQmCWCpiaVib1yFicGA/640?wx_fmt=jpeg\"></p><p><br></p><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"font-size: 14px;\">Weex 其实很好的解决了上述的一些问题，包括在飞猪、手淘、天猫 Weex环境下完全 <span style=\"font-size: 14px;box-sizing: inherit;font-weight: 600;font-synthesis: style;\">Native体验</span>，同时Bundle 资源大小<span style=\"font-size: 14px;box-sizing: inherit;font-weight: 600;font-synthesis: style;\">较 H5 小很多</span>，加上富交互体验、长列表性能好非常适合商品列表页面和双十一场景，最重要的是真正让我们从3个人的开发减少到了1个人，其他2个人可以去做更多有意义的事情。</span></p><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"font-size: 14px;\">接下来我们可以从下面这个展示来看Weex和H5业务的一个展示、数据对比：</span></p><p><iframe class=\"video_iframe\" data-vidtype=\"2\" allowfullscreen frameborder=\"0\" data-ratio=\"1.7647058823529411\" data-w=\"480\" data-src=\"https://v.qq.com/iframe/preview.html?vid=y1332rhi7np&width=500&height=375&auto=0\" src=\"https://v.qq.com/iframe/preview.html?vid=y1332rhi7np&width=500&height=375&auto=0\" style=\"dispaly:block;max-width:100%;\" width=\"500\" height=\"375\"></iframe><br></p><p><span style=\"font-size: 14px;\"><br></span></p><p><span style=\"font-size: 14px;color: rgb(51, 51, 51);\">这是一个业务逻辑复杂的页面，包括筛选、排序、日历选择、收藏、长列表、业务逻辑也很复杂的页面，重构成Weex以后，我们首屏可用时间降级68%、Bundle大小直接减少了73%，由于体验变好变快、让我们页面转化率居然提升了14.5%。</span><br></p><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"font-size: 14px;\">以上也就是我们为什么选择Weex作为我们跨端开发的一些重要原因，接下来介绍的是飞猪的weex 技术体系。</span></p><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"font-size: 14px;\"><br></span></p><section class=\"_135editor\" data-tools=\"135编辑器\" data-id=\"86516\" style=\"border: 0px none;box-sizing: border-box;\"><section style=\"border-bottom-width: 1px;border-bottom-style: solid;border-bottom-color: rgb(221, 221, 221);margin-right: auto;margin-bottom: 10px;margin-left: auto;box-sizing: border-box;\"><p class=\"135brush\" data-brushtype=\"text\" style=\"padding-right: 5px;padding-bottom: 6px;padding-left: 5px;border-bottom-width: 2px;border-bottom-style: solid;border-bottom-color: rgb(239, 112, 96);display: inline-block;margin-bottom: -1px;line-height: 1.1;font-size: 18px;\">飞猪 Weex 技术体系</p></section></section><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"box-sizing: inherit;font-weight: 600;font-synthesis: style;font-size: 14px;\">架构图</span></p><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><img class=\"\" data-ratio=\"0.5625\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnjuibdbD0UvQhic1XXu4YibPcqynqybXzlqDa8x7wo2Qib0JNXOu644FBdfIAWibCb6JE3VkWPUX4WAdj9dA/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"1920\" style=\"font-size: 14px;\" width=\"800\" src=\"https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnjuibdbD0UvQhic1XXu4YibPcqynqybXzlqDa8x7wo2Qib0JNXOu644FBdfIAWibCb6JE3VkWPUX4WAdj9dA/640?wx_fmt=jpeg\"></p><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"font-size: 14px;\">可以从底层一直往上看，底层由我们APP的Framework / Libraries / OS Kernel等组成，我们在Weex的上下层和手淘、天猫一起设计出一套统一的Api设计，包括接口请求、数据埋点、路由跳转、网络状态、支付功能、导航栏定制等这一系列的通用服务，在 Weex 上面我们封装了Weex Ui组件库、业务组件库、UPX搭建营销模块、还有抹平多端差异的 Util 函数库，这样在我们上层可以长出我们众多的业务。</span></p><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"font-size: 14px;\">由于 Weex 在我们这边和 H5 一样，都是当做页面来发布、而不是一个 View 里面写很多子View来组织，同时也很不建议大家使用vue-router来管理，更多的使用多页面来跳转体验会更好。</span></p><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"font-size: 14px;\">说到构建发布流程，我们统一通过Clam来对我们项目进行初始化、构建、debug、预发、发布等工作，同时在上线方面直接通过Awpp命令来直接发布页面到CND，同时可以通过信鸽将离线资源推送到APP，运营同学也可以直接通过搭建的方式将页面发布出去。</span></p><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"font-size: 14px;font-weight: 600;\">Weex 页面如何在飞猪、手淘、支付宝进行多端投放 ?</span><br></p><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"font-size: 14px;\">那你可能会问 Weex 页面如何在飞猪、手淘、支付宝进行多端投放呢 ?</span></p><figure style=\"box-sizing: inherit;margin-top: 24px;margin-bottom: 24px;color: rgb(51, 51, 51);\"></figure><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"font-size: 14px;\"><img class=\"origin_image zh-lightbox-thumb lazy\" data-backh=\"314\" data-backw=\"558\" data-ratio=\"0.5625\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnjuibdbD0UvQhic1XXu4YibPcqyna4QRicepEjUVMDZKIHT0rhuMxjzIeicwUh0EA9z7q0cz9sSTia7G6qyFw/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"720\" style=\"width: 100%;height: auto;\" width=\"1920\" src=\"https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnjuibdbD0UvQhic1XXu4YibPcqyna4QRicepEjUVMDZKIHT0rhuMxjzIeicwUh0EA9z7q0cz9sSTia7G6qyFw/640?wx_fmt=jpeg\"></span></p><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"font-size: 14px;\">第一种为<span style=\"font-size: 14px;box-sizing: inherit;font-weight: 600;font-synthesis: style;\">通过前端 URL 参数决定渲染为 Weex 还是 H5</span></span></p><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><code style=\"box-sizing: inherit;margin-right: 2px;margin-left: 2px;padding: 3px 4px;border-top-left-radius: 3px;border-top-right-radius: 3px;border-bottom-right-radius: 3px;border-bottom-left-radius: 3px;\"><span style=\"font-size: 14px;\">xxxx.html?_wx_tpl=xxxx.js</span></code><span style=\"font-size: 14px;\">：前面为降级时的 H5 地址， 后面 </span><code style=\"box-sizing: inherit;margin-right: 2px;margin-left: 2px;padding: 3px 4px;border-top-left-radius: 3px;border-top-right-radius: 3px;border-bottom-right-radius: 3px;border-bottom-left-radius: 3px;\"><span style=\"font-size: 14px;\">_wx_tpl</span></code><span style=\"font-size: 14px;\"> 带的参数代表 Weex JS 地址， 当容器发现 URL 带有 </span><code style=\"box-sizing: inherit;margin-right: 2px;margin-left: 2px;padding: 3px 4px;border-top-left-radius: 3px;border-top-right-radius: 3px;border-bottom-right-radius: 3px;border-bottom-left-radius: 3px;\"><span style=\"font-size: 14px;\">_wx_tpl</span></code><span style=\"font-size: 14px;\"> 参数时, 会下载后面的 JS 地址然后用 Weex 容器渲染。</span></p><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"font-size: 14px;\">第二种为<span style=\"font-size: 14px;box-sizing: inherit;font-weight: 600;font-synthesis: style;\">通过服务端返回内容决定渲染为 Weex 还是 H5</span></span></p><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><code style=\"box-sizing: inherit;margin-right: 2px;margin-left: 2px;padding: 3px 4px;border-top-left-radius: 3px;border-top-right-radius: 3px;border-bottom-right-radius: 3px;border-bottom-left-radius: 3px;\"><span style=\"font-size: 14px;\">xxxx?wh_weex=true</span></code><span style=\"font-size: 14px;\">：前面可以是 JS 地址也可以是 H5 地址，后面是固定的参数 </span><code style=\"box-sizing: inherit;margin-right: 2px;margin-left: 2px;padding: 3px 4px;border-top-left-radius: 3px;border-top-right-radius: 3px;border-bottom-right-radius: 3px;border-bottom-left-radius: 3px;\"><span style=\"font-size: 14px;\">wh_weex=true</span></code><span style=\"font-size: 14px;\">，当容器发现 URL 带有 </span><code style=\"box-sizing: inherit;margin-right: 2px;margin-left: 2px;padding: 3px 4px;border-top-left-radius: 3px;border-top-right-radius: 3px;border-bottom-right-radius: 3px;border-bottom-left-radius: 3px;\"><span style=\"font-size: 14px;\">wh_weex=true</span></code><span style=\"font-size: 14px;\"> 时, 会请求前面的 xxxx 地址， 如果发现响应的 mime type（HTTP header content-type）为 </span><code style=\"box-sizing: inherit;margin-right: 2px;margin-left: 2px;padding: 3px 4px;border-top-left-radius: 3px;border-top-right-radius: 3px;border-bottom-right-radius: 3px;border-bottom-left-radius: 3px;\"><span style=\"font-size: 14px;\">application/javascript</span></code><span style=\"font-size: 14px;\">，则使用 Weex 渲染返回的内容， 否则使用 WebView 渲染成 H5。</span></p><p><strong><span style=\"font-size: 14px;\">飞猪 Weex 业务大盘</span></strong><img class=\"\" data-copyright=\"0\" data-ratio=\"0.5614886731391586\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnjuibdbD0UvQhic1XXu4YibPcqynnOrJuwttJzID6ZUoibcWDHy9NJ30MUHCjBF3dZ14yqj30Tmd6kpSGqw/640?wx_fmt=png\" data-type=\"png\" data-w=\"618\" src=\"https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnjuibdbD0UvQhic1XXu4YibPcqynnOrJuwttJzID6ZUoibcWDHy9NJ30MUHCjBF3dZ14yqj30Tmd6kpSGqw/640?wx_fmt=png\"></p><p><br></p><p><span style=\"font-size: 14px;\">Weex 并不是像外界某些人传言说没有什么公司在使用Weex的，反而是超过你的想象，以上是我们这边17年12月份前的一个相关weex页面的一览，大家可以在飞猪、手淘、支付宝里面找到这些页面，均是一份页面同时投放到多端的。</span></p><p><br></p><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"box-sizing: inherit;font-weight: 600;font-synthesis: style;font-size: 14px;\">什么业务适合用 Weex ？</span></p><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"font-size: 14px;\">包括众多的营销业务、首页、频道、搜索列表、正向流程、简单详情、富交互页面都是很适合使用Weex来开发的，同时在我们这边也有一个对应的原则包括 展示类项目优先使用 Weex、重构/新项目优先使用 Weex、深度垂直类目尝试使用 Weex。</span></p><p><strong><span style=\"font-size: 14px;\">Weex 不适合复杂场景 ？</span></strong></p><p><strong><span style=\"font-size: 14px;\"><br></span></strong></p><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"font-size: 14px;\">大家可以看下如下这几个场景的视频演示:</span><iframe class=\"video_iframe\" data-vidtype=\"2\" allowfullscreen frameborder=\"0\" data-ratio=\"1.7647058823529411\" data-w=\"480\" data-src=\"https://v.qq.com/iframe/preview.html?vid=s1332k5jde5&width=500&height=375&auto=0\" src=\"https://v.qq.com/iframe/preview.html?vid=s1332k5jde5&width=500&height=375&auto=0\" style=\"dispaly:block;max-width:100%;\" width=\"500\" height=\"375\"></iframe></p><p><span style=\"font-size: 14px;color: rgb(51, 51, 51);\">大家可能会觉得Weex不适合复杂的场景，其实也不一定，通过很多方式是可以做到复杂场景的支持，包括</span><span style=\"font-size: 14px;color: rgb(51, 51, 51);box-sizing: inherit;font-weight: 600;font-synthesis: style;\">双11</span><span style=\"font-size: 14px;color: rgb(51, 51, 51);\">超长列表滚动，30多屏数据，快速滚动很顺滑。</span><br></p><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"font-size: 14px;\">同时包括逻辑异常复杂、多组件的国际机票列表页，Weex 同样也可以胜任；包括图3富交互的使用场景，粘手效果的丝滑拖动，快速滑动，动态隐藏头部等等功能都是可以做到的。</span></p><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"font-size: 14px;\">通过在我们这边很多业务场景的使用 Weex 踩坑 最佳实践的积累，其实有很多东西可以沉淀下来 通过封装的方式给后续其他业务使用，这样让后面的业务可以达到快速生产，这也是我们建议Weex Ui 组件体系一个很大的原因。</span></p><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"font-size: 14px;\"><br></span></p><section class=\"_135editor\" data-tools=\"135编辑器\" data-id=\"86516\" style=\"border: 0px none;box-sizing: border-box;\"><section style=\"border-bottom-width: 1px;border-bottom-style: solid;border-bottom-color: rgb(221, 221, 221);margin-right: auto;margin-bottom: 10px;margin-left: auto;box-sizing: border-box;\"><p class=\"135brush\" data-brushtype=\"text\" style=\"padding-right: 5px;padding-bottom: 6px;padding-left: 5px;border-bottom-width: 2px;border-bottom-style: solid;border-bottom-color: rgb(239, 112, 96);display: inline-block;margin-bottom: -1px;line-height: 1.1;font-size: 18px;\">Weex Ui 的发展和开源</p></section></section><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"box-sizing: inherit;font-weight: 600;font-synthesis: style;font-size: 14px;\">为什么要建立 Weex Ui 组件库体系 ？</span></p><ul style=\"\" class=\" list-paddingleft-2\"><li><p><span style=\"font-size: 14px;\">在引入 Weex 初期，通过 Weex Ui 让未接触 Weex 的同学对其编写有<span style=\"font-size: 14px;box-sizing: inherit;font-weight: 600;font-synthesis: style;\">借鉴作用</span></span></p></li><li><p><span style=\"font-size: 14px;\">提炼业务中的公共组件，便于直接引用，<span style=\"font-size: 14px;box-sizing: inherit;font-weight: 600;font-synthesis: style;\">提高大家开发效率</span></span></p></li><li><p><span style=\"font-size: 14px;\">业务规范、视觉规范、<span style=\"font-size: 14px;box-sizing: inherit;font-weight: 600;font-synthesis: style;\">最佳实践</span>的及时同步</span></p></li><li><p><span style=\"font-size: 14px;\">将 Weex 业务中的<span style=\"font-size: 14px;box-sizing: inherit;font-weight: 600;font-synthesis: style;\">疑难杂症</span>通过组件封装，对外只暴露简单逻辑</span></p><p><span style=\"font-size: 14px;\"></span></p></li></ul><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"font-size: 14px;font-weight: 600;\"><br></span></p><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"font-size: 14px;font-weight: 600;\">Weex Ui 一览</span><br></p><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"font-size: 14px;\">经过一年多的建设，我们一步一步将 Weex Ui 优化，整理，最终于20170930进行了开源，通过下图可以看到 Weex Ui 是怎么来的.</span></p><figure style=\"box-sizing: inherit;margin-top: 24px;margin-bottom: 24px;color: rgb(51, 51, 51);\"><img class=\"origin_image zh-lightbox-thumb lazy\" data-ratio=\"0.5625\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnjuibdbD0UvQhic1XXu4YibPcqynUuKEj2SzjbRrJ9JMPTLx3ZBbOicdHhR94pTiaF2uwZBCqG7bUA5I7sgw/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"720\" style=\"box-sizing: inherit;overflow: hidden;display: block;margin-right: auto;margin-left: auto;cursor: -webkit-zoom-in;\" width=\"1920\" src=\"https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnjuibdbD0UvQhic1XXu4YibPcqynUuKEj2SzjbRrJ9JMPTLx3ZBbOicdHhR94pTiaF2uwZBCqG7bUA5I7sgw/640?wx_fmt=jpeg\"></figure><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"font-size: 14px;\">目前 Weex Ui 组件库包括7大类31个成熟的组件，同时并不是直接开源给大家使用，而是在内部已经使用了1年多后稳定后开源给大家使用，大家可以通过手淘、飞猪、任何浏览器扫码进行预览.</span></p><figure style=\"box-sizing: inherit;margin-top: 24px;margin-bottom: 24px;color: rgb(51, 51, 51);\"><img class=\"\" data-ratio=\"0.5625\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju9YFyWBwuoqan1SNEPFTsjHC66zCzxjicmwia1f7VSEOrUXUgaRxoT29Xr70FxwLK9ibEtVk5HHQ6avg/640?wx_fmt=png\" data-type=\"png\" data-w=\"1920\" src=\"https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju9YFyWBwuoqan1SNEPFTsjHC66zCzxjicmwia1f7VSEOrUXUgaRxoT29Xr70FxwLK9ibEtVk5HHQ6avg/640?wx_fmt=png\"></figure><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"font-size: 14px;\">同时一个开源库的文档其实是后续发展中用户是否能快速上手的一个很大因素，Weex UI</span><br></p><p><span style=\"font-size: 14px;\">包括组件说明、使用规则、Demo展示、详细使用API、升级文档等等，可以让你快速使用。</span></p><p><span style=\"font-size: 14px;\"><br></span></p><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"box-sizing: inherit;font-weight: 600;font-synthesis: style;font-size: 14px;\">Weex Ui 是不是只适合电商体系呢？</span></p><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"font-size: 14px;\">近期我们队 Weex Ui的使用者做过一次问卷调查，结果让我们很惊喜，并不是只有电商在使用，还很很多其他的体系在使用，包括工具类、企业应用、文娱、自媒体、新闻这些其实都是有使用的。</span></p><figure style=\"box-sizing: inherit;margin-top: 24px;margin-bottom: 24px;color: rgb(51, 51, 51);\"><img class=\"origin_image zh-lightbox-thumb lazy\" data-ratio=\"0.5625\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnjuibdbD0UvQhic1XXu4YibPcqynZqBTL2BSKECslM66XtiakxHnB5qFAar8J3LgjGoE3kuzTdXd4mibbUtw/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"720\" style=\"box-sizing: inherit;overflow: hidden;display: block;margin-right: auto;margin-left: auto;cursor: -webkit-zoom-in;\" width=\"1920\" src=\"https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnjuibdbD0UvQhic1XXu4YibPcqynZqBTL2BSKECslM66XtiakxHnB5qFAar8J3LgjGoE3kuzTdXd4mibbUtw/640?wx_fmt=jpeg\"></figure><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"box-sizing: inherit;font-weight: 600;font-synthesis: style;font-size: 14px;\">组件化搭建你的 Weex 页面</span></p><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"font-size: 14px;\">很多时候基础建设，其实为了给业务开发来加速，譬如接下来这个飞猪专线的页面就是通过我们的Weex Ui组件库来搭建起来的</span></p><figure style=\"box-sizing: inherit;margin-top: 24px;margin-bottom: 24px;color: rgb(51, 51, 51);\"><img class=\"origin_image zh-lightbox-thumb lazy\" data-ratio=\"0.5625\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnjuibdbD0UvQhic1XXu4YibPcqynwKWls3icoPI8S2Vc9Wtygf8PSUaAdq2fibFtibBficm9QmSTwoLSWSbkjg/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"720\" style=\"box-sizing: inherit;overflow: hidden;display: block;margin-right: auto;margin-left: auto;cursor: -webkit-zoom-in;\" width=\"1920\" src=\"https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnjuibdbD0UvQhic1XXu4YibPcqynwKWls3icoPI8S2Vc9Wtygf8PSUaAdq2fibFtibBficm9QmSTwoLSWSbkjg/640?wx_fmt=jpeg\"></figure><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"font-size: 14px;\">然而基础组件只能够解决通用组件的问题，其实还包括业务组件这一块，也即上图中的</span><code style=\"box-sizing: inherit;margin-right: 2px;margin-left: 2px;padding: 3px 4px;border-top-left-radius: 3px;border-top-right-radius: 3px;border-bottom-right-radius: 3px;border-bottom-left-radius: 3px;\"><span style=\"font-size: 14px;\">your-item</span></code><span style=\"font-size: 14px;\">组件, 也即我们下面要说的 Weex 业务组件化.</span></p><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"font-size: 14px;\"><br></span></p><h2 style=\"box-sizing: inherit;margin-top: 20px;margin-bottom: 20px;\"><span style=\"font-size: 14px;\"></span></h2><section class=\"_135editor\" data-tools=\"135编辑器\" data-id=\"86516\" style=\"border: 0px none;box-sizing: border-box;\"><section style=\"border-bottom-width: 1px;border-bottom-style: solid;border-bottom-color: rgb(221, 221, 221);margin-right: auto;margin-bottom: 10px;margin-left: auto;box-sizing: border-box;\"><p class=\"135brush\" data-brushtype=\"text\" style=\"padding-right: 5px;padding-bottom: 6px;padding-left: 5px;border-bottom-width: 2px;border-bottom-style: solid;border-bottom-color: rgb(239, 112, 96);display: inline-block;margin-bottom: -1px;line-height: 1.1;font-size: 18px;\">除了基础库，在 Weex Ui 层还可以做什么 </p></section></section><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"box-sizing: inherit;font-weight: 600;font-synthesis: style;font-size: 14px;\">Weex 业务组件化</span></p><figure style=\"box-sizing: inherit;margin-top: 24px;margin-bottom: 24px;color: rgb(51, 51, 51);\"><img class=\"origin_image zh-lightbox-thumb lazy\" data-ratio=\"0.5625\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnjuibdbD0UvQhic1XXu4YibPcqynnvp2a6FPO4aSiaKAyDtoUrPy52Q4L26nlvmhRIvuY8lsW5YiaiaHVvjQw/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"720\" style=\"box-sizing: inherit;overflow: hidden;display: block;margin-right: auto;margin-left: auto;cursor: -webkit-zoom-in;\" width=\"1920\" src=\"https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnjuibdbD0UvQhic1XXu4YibPcqynnvp2a6FPO4aSiaKAyDtoUrPy52Q4L26nlvmhRIvuY8lsW5YiaiaHVvjQw/640?wx_fmt=jpeg\"></figure><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"font-size: 14px;\">业务组件库更多是前端、后端、设计师之间的一个“约定”，通过一定规范共同让业务组件变得可复用。</span></p><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"font-size: 14px;\">也即Weex代码中直接引入此组件，直接插入后端返回的原始数据，就可以生成设计师所设计出的商品卡片，最终可以做到<span style=\"font-size: 14px;box-sizing: inherit;font-weight: 600;font-synthesis: style;\">支撑任意 Weex 业务模块 投放到 任意 Weex 页面 中 任意位置 的能力</span>。</span></p><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><strong><span style=\"font-size: 14px;\">那么应该怎么做呢？</span></strong></p><figure style=\"box-sizing: inherit;margin-top: 24px;margin-bottom: 24px;color: rgb(51, 51, 51);\"><img class=\"\" data-ratio=\"0.5625\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju9YFyWBwuoqan1SNEPFTsjHSlU1U16VxL6xKfgwkXFwl43oxdIdx52q53AiaspyUepDDKH669GLHfw/640?wx_fmt=png\" data-type=\"png\" data-w=\"1920\" src=\"https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju9YFyWBwuoqan1SNEPFTsjHSlU1U16VxL6xKfgwkXFwl43oxdIdx52q53AiaspyUepDDKH669GLHfw/640?wx_fmt=png\"></figure><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"box-sizing: inherit;font-weight: 600;font-synthesis: style;font-size: 14px;\">可以自动化测试 Weex 吗 ？</span></p><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"font-size: 14px;\">答案是可以的，之前通过macacajs测试框架和Weex结合来弄，通过自定义一连串的手势、事件，最后通过用json来表明执行的顺序，可以做到: </span></p><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"font-size: 14px;\">1、安装app</span></p><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"font-size: 14px;\">2、自动打开native页面</span></p><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"font-size: 14px;\">3、登录，自动输入</span></p><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"font-size: 14px;\">4、自动测试飞猪度假首页，包括点击、跳转、滑动、下拉刷新等操作</span></p><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"font-size: 14px;\">5、自动测试飞猪专线、包括左滑、右滑操作</span></p><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"font-size: 14px;\">6、自动测试Weex Ui，包括打开组件、点击交互逻辑</span></p><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"font-size: 14px;\">7、自动各个页面运行截图，并将测试情况邮件给测试方</span></p><p><iframe class=\"video_iframe\" data-vidtype=\"2\" allowfullscreen frameborder=\"0\" data-ratio=\"1.7058823529411764\" data-w=\"464\" data-src=\"https://v.qq.com/iframe/preview.html?vid=i13326ti1y6&width=500&height=375&auto=0\" src=\"https://v.qq.com/iframe/preview.html?vid=i13326ti1y6&width=500&height=375&auto=0\" style=\"dispaly:block;max-width:100%;\" width=\"500\" height=\"375\"></iframe><br></p><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"font-size: 14px;font-weight: 600;\"><br></span></p><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"font-size: 14px;font-weight: 600;\">Weex 无障碍优化</span><br></p><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"font-size: 14px;\">Weex 其实也是支持无障碍的，也即让盲人在最短的时间内通过最快的方式找到自己想要的信息。</span></p><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"font-size: 14px;\">同时当盲人访问我们Weex页面时候，让他们对 Weex 是可感知的、可操作的、可理解的、同时页面也是鲁棒的。</span></p><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"font-size: 14px;\"></span></p><p><img class=\"\" data-copyright=\"0\" data-ratio=\"1.7807486631016043\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnjuibdbD0UvQhic1XXu4YibPcqynE93Mz9KknzibESvHgcoq2TWibatmqHmSDllZTr1fVJlcI4L7g4ibo1qtg/640?wx_fmt=png\" data-type=\"png\" data-w=\"374\" style=\"\" src=\"https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnjuibdbD0UvQhic1XXu4YibPcqynE93Mz9KknzibESvHgcoq2TWibatmqHmSDllZTr1fVJlcI4L7g4ibo1qtg/640?wx_fmt=png\"></p><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"font-size: 14px;\"><br></span></p><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"font-size: 14px;\">无障碍在Weex实现起来是很简单的，譬如如下实现：</span></p><figure style=\"box-sizing: inherit;margin-top: 24px;margin-bottom: 24px;color: rgb(51, 51, 51);\"><img class=\"origin_image zh-lightbox-thumb lazy\" data-ratio=\"0.6625\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnjuibdbD0UvQhic1XXu4YibPcqynCJZEibicdxJficmsIIWZR2HDpxnt6h6AWXLicu41Xj0QnoRwHcELKUJmzA/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"720\" style=\"box-sizing: inherit;overflow: hidden;display: block;margin-right: auto;margin-left: auto;cursor: -webkit-zoom-in;\" width=\"1662\" src=\"https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnjuibdbD0UvQhic1XXu4YibPcqynCJZEibicdxJficmsIIWZR2HDpxnt6h6AWXLicu41Xj0QnoRwHcELKUJmzA/640?wx_fmt=jpeg\"></figure><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"box-sizing: inherit;font-weight: 600;font-synthesis: style;font-size: 14px;\">飞猪 Weex 双十一性能优化</span></p><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"font-size: 14px;\">每年的双十一也就是我们Weex的一个战场，几乎所有会场页面均由Weex实现，如何让用户丝滑的逛我们的页面呢？期间我们也将之前很多经验包括优化技巧放到了双十一的会场页面，包括一些经验的整理。</span></p><p><img class=\"origin_image zh-lightbox-thumb lazy\" data-ratio=\"0.42083333333333334\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnjuibdbD0UvQhic1XXu4YibPcqynaQHFxdAQPZeMq1cPic7XVv7iarNhE3NqQLNyPBSicgUwQERRULAASgGlg/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"720\" width=\"2052\" style=\"color: rgb(51, 51, 51);box-sizing: inherit;overflow: hidden;display: block;margin-right: auto;margin-left: auto;cursor: -webkit-zoom-in;\" src=\"https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnjuibdbD0UvQhic1XXu4YibPcqynaQHFxdAQPZeMq1cPic7XVv7iarNhE3NqQLNyPBSicgUwQERRULAASgGlg/640?wx_fmt=jpeg\"></p><p><br></p><h2 style=\"box-sizing: inherit;margin-top: 20px;margin-bottom: 20px;\"><strong><span style=\"font-size: 14px;\"></span></strong></h2><section class=\"_135editor\" data-tools=\"135编辑器\" data-id=\"86516\" style=\"border: 0px none;box-sizing: border-box;\"><section style=\"border-bottom-width: 1px;border-bottom-style: solid;border-bottom-color: rgb(221, 221, 221);margin-right: auto;margin-bottom: 10px;margin-left: auto;box-sizing: border-box;\"><p class=\"135brush\" data-brushtype=\"text\" style=\"padding-right: 5px;padding-bottom: 6px;padding-left: 5px;border-bottom-width: 2px;border-bottom-style: solid;border-bottom-color: rgb(239, 112, 96);display: inline-block;margin-bottom: -1px;line-height: 1.1;font-size: 18px;\">回到开源</p></section></section><h2 style=\"\"><strong><span style=\"font-size: 14px;\"></span></strong></h2><p><span style=\"color: rgb(51, 51, 51);font-size: 14px;\">其实 Weex 可以在很多很多地方使用，包括各种应用场景，这也是我们开源Weex Ui 的一个很大原因，给大家更多 Weex 可实现功能的输入，最佳实践实现的参考。</span><br></p><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"font-size: 14px;\">同时外部开发者也急需要一套成熟组件库来提高开发效率。</span>https://github.com/alibaba/weex-ui</p><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"font-size: 14px;\">从2017年9月30号开始，我们一直在弄Weex Ui 的开源发展，包括共建 weex-toolkit 让其更好支持Weex Ui、欠缺组件的补全 + 现有组件的增强、继续扩展边界 + 轻舟解决方案 UI 库、引入更多富交互体验 + 组件的无障碍优化、简易的使用方式 + 详细的中英文档等等工作。</span><br></p><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"font-size: 14px;\">其实更多的是想大家一起参与进来，共同促进我们 Weex 的发展，说到共同促进，那么你可以做什么呢？ 其实可以做很多很多事情:</span></p><figure style=\"box-sizing: inherit;margin-top: 24px;margin-bottom: 24px;color: rgb(51, 51, 51);\"><img class=\"origin_image zh-lightbox-thumb lazy\" data-ratio=\"0.5625\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnjuibdbD0UvQhic1XXu4YibPcqynoahusSTw4nuWbgiajyCgfDP4LoDJLjZhLcYItXkdy73ZBxNd4gMDQtQ/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"720\" style=\"box-sizing: inherit;overflow: hidden;display: block;margin-right: auto;margin-left: auto;cursor: -webkit-zoom-in;\" width=\"1920\" src=\"https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnjuibdbD0UvQhic1XXu4YibPcqynoahusSTw4nuWbgiajyCgfDP4LoDJLjZhLcYItXkdy73ZBxNd4gMDQtQ/640?wx_fmt=jpeg\"></figure><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><br style=\"box-sizing: inherit;\"></p><h2 style=\"box-sizing: inherit;margin-top: 20px;margin-bottom: 20px;\"><strong><span style=\"font-size: 14px;\">晚上圆桌会议 - Weex 组件方向讨论总结</span></strong></h2><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"box-sizing: inherit;font-weight: 600;font-synthesis: style;font-size: 14px;\">1. Weex 原生组件的封装应该注意什么？</span></p><ul style=\"\" class=\" list-paddingleft-2\"><li><p><span style=\"font-size: 14px;\"><span style=\"font-size: 14px;box-sizing: inherit;font-weight: 600;font-synthesis: style;\">通用性</span>，只有多个业务同时在使用，同时具备可抽离性特性的组件，譬如Video/TabBar/TitleBar/ImageUpload 这些在 Native中成熟的组件</span></p></li><li><p><span style=\"font-size: 14px;\"><span style=\"font-size: 14px;box-sizing: inherit;font-weight: 600;font-synthesis: style;\">稳定性</span>，Native 组件不像 weex 上层的组件可调节性大，所以需要注意好 Native 组件一定需要没有Bug，<span style=\"font-size: 14px;box-sizing: inherit;font-weight: 600;font-synthesis: style;\">防止修复和更新麻烦</span>，同时 Native 组件一开始应该将大部分情况做成可配置化，防止频繁更新，<span style=\"font-size: 14px;box-sizing: inherit;font-weight: 600;font-synthesis: style;\">导致需要适配很多版本</span></span></p></li><li><p><span style=\"font-size: 14px;\"><span style=\"font-size: 14px;box-sizing: inherit;font-weight: 600;font-synthesis: style;\">原子性</span>，不建议一个组件同时做很多事情，应该是单一的功能，然后通过<span style=\"font-size: 14px;box-sizing: inherit;font-weight: 600;font-synthesis: style;\">搭配的方式来得到更多功能</span></span></p><p><span style=\"font-size: 14px;box-sizing: inherit;font-weight: 600;font-synthesis: style;\"></span></p></li></ul><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"box-sizing: inherit;font-weight: 600;font-synthesis: style;font-size: 14px;\"><br></span></p><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"box-sizing: inherit;font-weight: 600;font-synthesis: style;font-size: 14px;\">2.weex 组件开发和实践过程中的一些经验？</span></p><ul style=\"\" class=\" list-paddingleft-2\"><li><p><span style=\"font-size: 14px;\"><span style=\"font-size: 14px;box-sizing: inherit;font-weight: 600;font-synthesis: style;\">811原则</span>，默认80%的功能应该是不需要用户配置很多参数，10%的地方用户可以通过配置一些参数来达到目的，10%的稀有情况可以暂时不考虑，可能这里会花费很多时间开发，所以可以等到有业务需要使用时候，再更新上去</span></p></li><li><p><span style=\"font-size: 14px;\"><span style=\"font-size: 14px;box-sizing: inherit;font-weight: 600;font-synthesis: style;\">统一收口原则</span>，为了避免后续组件变成一个大杂烩，后续迭代视觉交互、新功能的增加需要将通用性考虑进去，这里需要一个人统一来收口、开发维护此组件，可以避免很多“业务特性”来干扰组件的可用性</span></p></li><li><p><span style=\"font-size: 14px;\"><span style=\"font-size: 14px;box-sizing: inherit;font-weight: 600;font-synthesis: style;\">性能体验的优化</span>，Weex 组件比页面的编写更应该保证他的性能体验</span></p></li><li><p><span style=\"font-size: 14px;\"><span style=\"font-size: 14px;box-sizing: inherit;font-weight: 600;font-synthesis: style;\">信任机制</span>：很多时候别人使用你的组件一个很大原因是由于相信你的组件没有问题，是稳定的，同时后续会常常维护的</span></p><p><span style=\"font-size: 14px;\"></span></p></li></ul><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"box-sizing: inherit;font-weight: 600;font-synthesis: style;font-size: 14px;\"><br></span></p><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"box-sizing: inherit;font-weight: 600;font-synthesis: style;font-size: 14px;\">3. 大家认为Weex Ui组件还缺少什么？</span></p><ul style=\"\" class=\" list-paddingleft-2\"><li><p><span style=\"font-size: 14px;\">缺少一些汇集起来使用的场景，目前单个组件的使用文档已经详细说明，但是对于多个组件的一些使用，或者页面层面的开发缺少相关案例，后期需要逐步补上weex-ui-demo</span></p></li><li><p><span style=\"font-size: 14px;\">主题配置灵活性上需要考虑进行，目前更多是通过参数配置的方式来更改主题颜色，其实是可以通过一个统一外部参数的配置来使它修改</span></p></li></ul><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"box-sizing: inherit;font-weight: 600;font-synthesis: style;font-size: 14px;\"><br></span></p><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"box-sizing: inherit;font-weight: 600;font-synthesis: style;font-size: 14px;\">4.未来跨端开发会是怎么样的？</span></p><ul style=\"\" class=\" list-paddingleft-2\"><li><p><span style=\"font-size: 14px;\">Native的布局方式需要向H5的开发灵活性学习，逐步使用自动布局来实现，同时引入弹性思路开发，避免绝对计算</span></p></li><li><p><span style=\"font-size: 14px;\">数据绑定方面会越来越便捷，譬如和MVVM思路一样，数据变化后，视图立马修改，而不是手动去触发</span></p></li></ul><h2 style=\"box-sizing: inherit;margin-top: 20px;margin-bottom: 20px;\"><span style=\"font-size: 14px;\"></span></h2><section class=\"_135editor\" data-tools=\"135编辑器\" data-id=\"86516\" style=\"border: 0px none;box-sizing: border-box;\"><section style=\"border-bottom-width: 1px;border-bottom-style: solid;border-bottom-color: rgb(221, 221, 221);margin-right: auto;margin-bottom: 10px;margin-left: auto;box-sizing: border-box;\"><p class=\"135brush\" data-brushtype=\"text\" style=\"padding-right: 5px;padding-bottom: 6px;padding-left: 5px;border-bottom-width: 2px;border-bottom-style: solid;border-bottom-color: rgb(239, 112, 96);display: inline-block;margin-bottom: -1px;line-height: 1.1;font-size: 18px;\">More</p></section></section><h2 style=\"\"><span style=\"font-size: 14px;\"></span></h2><p><span style=\"color: rgb(51, 51, 51);font-size: 14px;\">大家可以通过用钉钉扫一扫如下二维码，大家一起来讨论交流：</span><img class=\"\" data-ratio=\"1.3189102564102564\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnjuibdbD0UvQhic1XXu4YibPcqynYLSUiap2NdgKufHaG4WDklGeJn6pmx7mLrnoc81a4r1Obibv43VGPSwQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"624\" style=\"font-size: 14px;color: rgb(51, 51, 51);\" width=\"300\" src=\"https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnjuibdbD0UvQhic1XXu4YibPcqynYLSUiap2NdgKufHaG4WDklGeJn6pmx7mLrnoc81a4r1Obibv43VGPSwQ/640?wx_fmt=png\"></p><p><span style=\"font-size: 14px;\">官网地址：https://alibaba.github.io/weex-ui</span></p><p><span style=\"font-size: 14px;\">Github地址：https://github.com/alibaba/weex-ui</span></p><p><br></p><p style=\"line-height: 24px;background-color: white;\"><span style=\"font-size:14px;font-family:Helvetica;color:#262626;letter-spacing:.73px;\"><br></span></p><section class=\"\" data-tools=\"135编辑器\" data-id=\"91642\" style=\"max-width: 100%;box-sizing: border-box;font-size: 16px;white-space: normal;border: 0px none;word-wrap: break-word !important;\"><section style=\"margin-right: auto;margin-left: auto;max-width: 100%;box-sizing: border-box;border: 0px none;text-align: center;word-wrap: break-word !important;\"><section style=\"margin-right: auto;margin-left: auto;max-width: 100%;box-sizing: border-box;display: inline-block;border-style: solid;-webkit-border-image: url(http://mmbiz.qpic.cn/mmbiz_png/fgnkxfGnnkT48ydcKOYjHqc1pDNia5ZqRhkxNSeIohMBvo4NCbW0ziaFBZ6hHWHhTGEvO8GrcnUibzLGyGeBWtRKg/0?wx_fmt=png) 26 100 32 fill;border-width: 13px 50px 16px;word-wrap: break-word !important;\"><section style=\"max-width: 100%;box-sizing: border-box;font-size: 14px;line-height: 30px;word-wrap: break-word !important;\"><p class=\"\" data-brushtype=\"text\" style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"color:#ff4c00;\"><strong>号外</strong></span></p></section></section></section></section><section class=\"\" data-tools=\"135编辑器\" data-id=\"88403\" style=\"max-width: 100%;box-sizing: border-box;font-size: 16px;white-space: normal;border: 0px none;word-wrap: break-word !important;\"><section style=\"max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;\"><section style=\"color: rgb(62, 62, 62);margin-top: 0.5em;margin-bottom: 0.5em;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;\"><section class=\"\" style=\"max-width: 100%;box-sizing: border-box;border-top-width: 3px;border-top-style: dashed;border-top-color: rgb(147, 122, 122);word-wrap: break-word !important;\"></section></section><section class=\"\" style=\"margin-top: 20px;margin-bottom: 20px;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;\"><section class=\"\" data-style=\"font-size: 15px; color: rgb(120, 114, 114); line-height: 1.8;\" style=\"max-width: 100%;font-size: 15px;line-height: 1.8;box-sizing: border-box !important;word-wrap: break-word !important;\"><p style=\"max-width: 100%;min-height: 1em;line-height: 1.8;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"color:#ff4c00;\">接下来的几天, 我们将继续给大家带来本次WeexConf 2018的精彩干货分享.</span></p><p style=\"max-width: 100%;min-height: 1em;line-height: 1.8;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"color:#ff4c00;\">主讲嘉宾的PPT等资料,可点击【原文链接<span style=\"color: rgb(255, 76, 0);font-size: 15px;\">】至<span style=\"color: rgb(255, 76, 0);font-size: 15px;\">WeexConf 2018官网查看,建议pc端查看下载哦.</span></span></span></p></section></section><section class=\"\" style=\"color: rgb(62, 62, 62);margin-top: 0.5em;margin-bottom: 0.5em;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;\"><section class=\"\" style=\"max-width: 100%;box-sizing: border-box;border-top-width: 5px;border-top-style: dashed;border-top-color: rgb(147, 122, 122);word-wrap: break-word !important;\"></section></section></section></section><section data-role=\"paragraph\" class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(62, 62, 62);font-size: 16px;white-space: normal;border: 0px none;word-wrap: break-word !important;\"><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><br style=\"max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;\"></p></section><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><span style=\"box-sizing: inherit;color: transparent;border-bottom-width: 1px;border-bottom-style: solid;border-bottom-color: rgba(68, 68, 68, 0.721569);word-break: break-all;cursor: pointer;font-stretch: normal;font-size: 0px;line-height: 0;font-family: a;text-shadow: none;\"></span></p><section class=\"\" data-brushtype=\"text\" data-width=\"100%\" style=\"max-width: 100%;white-space: normal;width: 670px;font-size: 20px;color: rgb(114, 114, 114);text-align: center;font-weight: bold;box-sizing: border-box !important;word-wrap: break-word !important;\">往期<span style=\"max-width: 100%;color: rgb(255, 120, 39);box-sizing: border-box !important;word-wrap: break-word !important;\">精彩</span>回顾</section><section data-width=\"100%\" style=\"max-width: 100%;color: rgb(62, 62, 62);font-size: 16px;white-space: normal;width: 670px;text-align: center;box-sizing: border-box !important;word-wrap: break-word !important;\"><section style=\"padding-right: 10px;padding-left: 10px;max-width: 100%;box-sizing: border-box;overflow: hidden;display: inline-block;background-color: rgb(254, 254, 254);word-wrap: break-word !important;\"><img class=\"\" data-ratio=\"0.9375\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/fgnkxfGnnkQJsfHzk0g4uu7Oout4kXavwIic9jfUkqsJ3kVjyFcic0icWTHEnMCv7E8h7ciclOmNpspcnduk5PJia3w/640?wx_fmt=png\" data-type=\"png\" data-w=\"16\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;width: auto !important;visibility: visible !important;\" src=\"https://mmbiz.qpic.cn/mmbiz_png/fgnkxfGnnkQJsfHzk0g4uu7Oout4kXavwIic9jfUkqsJ3kVjyFcic0icWTHEnMCv7E8h7ciclOmNpspcnduk5PJia3w/640?wx_fmt=png\"></section></section><section data-width=\"100%\" style=\"margin-top: -20px;max-width: 100%;box-sizing: border-box;color: rgb(62, 62, 62);font-size: 16px;white-space: normal;width: 670px;border-bottom-width: 1px;border-bottom-style: solid;border-bottom-color: rgb(114, 114, 114);word-wrap: break-word !important;\"></section><section class=\"\" data-width=\"100%\" style=\"margin-top: 15px;max-width: 100%;white-space: normal;width: 670px;font-size: 14px;color: rgb(101, 170, 206);text-decoration: underline;text-align: center;line-height: 25px;box-sizing: border-box !important;word-wrap: break-word !important;\"><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><br></p><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><img class=\"\" data-croporisrc=\"https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnju8rXOt6UYPCp5tEvOxtpEsgknc9vpAGnFmviakYws9AD3OuWHtpibZia4ib9exBicQZiap4o5acFwBxlQiag/0?wx_fmt=jpeg\" data-cropx1=\"0\" data-cropx2=\"1280\" data-cropy1=\"71.11111111111111\" data-cropy2=\"736.3440860215055\" data-ratio=\"0.51953125\" data-s=\"300,640\" data-src=\"http://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnju8rXOt6UYPCp5tEvOxtpEsgH5Qfz5jKjomaXLb6mBPOkcQmAlHDjFvWtMqHwvY1tHhiagndp43g1Qg/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"1280\" style=\"width: 558px !important;visibility: visible !important;\" width=\"558px\" src=\"http://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnju8rXOt6UYPCp5tEvOxtpEsgH5Qfz5jKjomaXLb6mBPOkcQmAlHDjFvWtMqHwvY1tHhiagndp43g1Qg/640?wx_fmt=jpeg\"></p><p style=\"font-stretch: normal;font-size: 12px;line-height: normal;\"><span style=\"font-size: 14px;\"><a href=\"http://mp.weixin.qq.com/s?__biz=MzAxNDEwNjk5OQ==&mid=2650400922&idx=1&sn=852cd77194df28b77d1aa9360b36ec8d&chksm=83952082b4e2a994473f055b717b2cb8d0d01047f222bca09b4f55d0d4a73c6d4b9de146bf66&scene=21#wechat_redirect\" target=\"_blank\"><span style=\"font-stretch: normal;line-height: normal;\">参加</span> WeexConf 2018 <span style=\"font-stretch: normal;line-height: normal;\">是一种什么体验</span>?</a></span></p><p style=\"font-stretch: normal;font-size: 12px;line-height: normal;\"><br></p><p style=\"font-stretch: normal;font-size: 12px;line-height: normal;\"><br></p><p style=\"font-stretch: normal;font-size: 12px;line-height: normal;\"><img class=\"\" data-croporisrc=\"https://mmbiz.qpic.cn/mmbiz_jpg/Z6bicxIx5naJIc0hPrqk8gpiamlLChMCG85jlQvOAYMMqxKxXHvPxExQ4d5qyxadGvb8lJOoXnMzSVAAu1c3B8ew/640?wx_fmt=jpeg\" data-cropx1=\"0\" data-cropx2=\"600\" data-cropy1=\"0\" data-cropy2=\"316.1290322580645\" data-ratio=\"0.5266666666666666\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnju9YFyWBwuoqan1SNEPFTsjHqf7q0E5NdkjxEU81Wnanhj0Uv1lyMTHdzaSULE3tcrWMBIt6rDc3sA/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"600\" style=\"white-space: normal;visibility: visible !important;width: 558px;height: 294px;\" width=\"auto\" src=\"https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnju9YFyWBwuoqan1SNEPFTsjHqf7q0E5NdkjxEU81Wnanhj0Uv1lyMTHdzaSULE3tcrWMBIt6rDc3sA/640?wx_fmt=jpeg\"></p><p style=\"font-stretch: normal;font-size: 12px;line-height: normal;\"><span style=\"font-size: 14px;\"><span style=\"font-stretch: normal;line-height: normal;\">Weex</span>如何支撑<span style=\"font-stretch: normal;line-height: normal;\">200w+</span>同时在线的优酷猫晚直播？</span></p><p style=\"font-stretch: normal;font-size: 12px;line-height: normal;\"><span style=\"font-size: 14px;\"><br></span></p><p style=\"font-stretch: normal;font-size: 12px;line-height: normal;\"><br></p><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><img class=\"\" data-backh=\"164\" data-backw=\"500\" data-copyright=\"0\" data-ratio=\"0.328\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnju88ic0shw7SrzkoHibq0577MqdjnuQPsDrM5lcEp5TKFSRbCwrcE7O9fuwRup8urlibSpZrLJJocv4Xw/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"500\" style=\"width: 670px;box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;\" width=\"100%\" src=\"https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnju88ic0shw7SrzkoHibq0577MqdjnuQPsDrM5lcEp5TKFSRbCwrcE7O9fuwRup8urlibSpZrLJJocv4Xw/640?wx_fmt=jpeg\"></p><p style=\"max-width: 100%;min-height: 1em;font-stretch: normal;font-size: 12px;line-height: normal;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 14px;box-sizing: border-box !important;word-wrap: break-word !important;\"><a href=\"http://mp.weixin.qq.com/s?__biz=MzAxNDEwNjk5OQ==&mid=2650400859&idx=1&sn=710559e961469b0efcac8fb257d8e02e&chksm=83952043b4e2a9555f6bb885bb25a63a2097903aed12c0dc49a126d34e7b9186ce7b2c9b95a8&scene=21#wechat_redirect\" target=\"_blank\" style=\"max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;\">【干货】<span style=\"max-width: 100%;font-stretch: normal;line-height: normal;box-sizing: border-box !important;word-wrap: break-word !important;\">|800</span>份实战经验<span style=\"max-width: 100%;font-stretch: normal;line-height: normal;box-sizing: border-box !important;word-wrap: break-word !important;\">PPT</span>免费下载</a></span></p><p style=\"max-width: 100%;min-height: 1em;font-stretch: normal;font-size: 12px;line-height: normal;box-sizing: border-box !important;word-wrap: break-word !important;\"><br style=\"max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;\"></p><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><img class=\"\" data-croporisrc=\"https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnju88ic0shw7SrzkoHibq0577MqB1Zp1tu75iauIiaK5Tj1laKO45L5PmDrFXLlFmaNicKaYicsouG63QQ5nw/0?wx_fmt=jpeg\" data-cropx1=\"0\" data-cropx2=\"1125\" data-cropy1=\"0\" data-cropy2=\"548.3870967741935\" data-ratio=\"0.4871111111111111\" data-s=\"300,640\" data-src=\"http://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnjuib4SbnQR1TxuQ7qTFtfP7kzPOEpGicfUHpk0iaVRfDiadBVgWnibLfXtbd8JR6mpqTxmGQjoY7dp8S70w/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"1125\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;width: 558px !important;visibility: visible !important;\" width=\"558px\" src=\"http://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnjuib4SbnQR1TxuQ7qTFtfP7kzPOEpGicfUHpk0iaVRfDiadBVgWnibLfXtbd8JR6mpqTxmGQjoY7dp8S70w/640?wx_fmt=jpeg\"></p><p style=\"max-width: 100%;min-height: 1em;font-stretch: normal;font-size: 12px;line-height: normal;box-sizing: border-box !important;word-wrap: break-word !important;\"><a href=\"http://mp.weixin.qq.com/s?__biz=MzAxNDEwNjk5OQ==&mid=2650400852&idx=1&sn=b983c27327f992ba969662edd6ce15c7&chksm=8395204cb4e2a95a813efd73b1cf5d47fad2bbef3da49886348f627261485d98eb6cf7641a10&scene=21#wechat_redirect\" target=\"_blank\" style=\"max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 14px;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-stretch: normal;line-height: normal;\">手淘</span>Android<span style=\"max-width: 100%;font-stretch: normal;line-height: normal;\">容器架构</span>——Atlas<span style=\"max-width: 100%;font-stretch: normal;line-height: normal;\">的前世今生</span></span></a></p><p style=\"max-width: 100%;min-height: 1em;font-stretch: normal;font-size: 12px;line-height: normal;box-sizing: border-box !important;word-wrap: break-word !important;\"><br style=\"max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;\"></p><p style=\"max-width: 100%;min-height: 1em;font-stretch: normal;font-size: 12px;line-height: normal;box-sizing: border-box !important;word-wrap: break-word !important;\"><br style=\"max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;\"></p></section><p style=\"max-width: 100%;min-height: 1em;color: rgb(62, 62, 62);font-size: 16px;white-space: normal;box-sizing: border-box !important;word-wrap: break-word !important;\"><img class=\"\" data-copyright=\"0\" data-ratio=\"0.5555555555555556\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnju88ic0shw7SrzkoHibq0577MqtyaI66UCR7saFiaCWLH7lZGrxQECID3t9nskCgANzdQXsk5icJoXWv6w/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"720\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;width: auto !important;visibility: visible !important;\" src=\"https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnju88ic0shw7SrzkoHibq0577MqtyaI66UCR7saFiaCWLH7lZGrxQECID3t9nskCgANzdQXsk5icJoXWv6w/640?wx_fmt=jpeg\"></p><p style=\"box-sizing: inherit;margin-bottom: 20px;color: rgb(51, 51, 51);\"><br><span style=\"box-sizing: inherit;color: transparent;border-bottom-width: 1px;border-bottom-style: solid;border-bottom-color: rgba(68, 68, 68, 0.721569);word-break: break-all;cursor: pointer;font-stretch: normal;font-size: 0px;line-height: 0;font-family: a;text-shadow: none;\"><br></span></p>\n                ', '![](https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnju9YFyWBwuoqan1SNEPFTsjHrsSNMRI9lMnl82SqGDohAn6vK2uQ363I3rB1yicAZYNXsFzfTKQM0fw/640?wx_fmt=jpeg)\n\n侑夕 阿里巴巴高级前端工程师\n\n本文是2018年 Weex Conf 中议题《Weex + Ui》的内容文档整理，主要给大家介绍飞猪 Weex 技术体系从无到有的过程，包括 Weex Ui 组件库的开发和发展，重点分享在 Weex Ui 层建设的一些经验。  \n  \n\n文章较长，首先放上 Weex Ui 的开源地址，欢迎大家提PR，同时也可以通过 Star 来表示你的喜欢。(https://github.com/alibaba/weex-ui)\n\n  \n\nWhy Weex ?\n\nWeex vs H5\n\n我们为什么选择Weex作为我们首要的跨端开发技术呢？\n\n写过H5的同学肯定会被它的简单高效、发布即更新、一条URL可适配多端等这些快所吸引，但写过 Native 的同学肯定也会被 Native 的富交互、性能体验、可调用原生能力、可管理内存等特性给我们的业务带来更好的体验。\n\n快和体验想同时兼得\n\n飞猪前几年也一直在这个方向上面探索。\n\n包括最开始的 Hybrid 开发，通过 Bridge 提供部分 Native 能⼒来提升 H5 体验，譬如我们在H5里面可以直接获取App的定位信息、使用相机、播放视频、导航跳转等能力，业界也有Cordova、Ionic、Meteor这些成熟的方案。\n\n![](https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnjuibdbD0UvQhic1XXu4YibPcqynv7ib4OhfxbMjACDcYH9pmdreJibqpJn65PtQgHwpQPYnYuqslfzSmHVw/640?wx_fmt=jpeg)\n\n还有利用离线包体系通过提前将资源⽂件下载，访问时路由拦截加载本地资源，让我们的H5页面可以达到秒出、动态更新、弱网可用效果，内部有手淘Zcache、飞猪信鸽、支付宝九州这些成熟的系统。\n\n等到了16年左右，跨平台开发技术逐渐火起来后，一种全新的开发思路吸引这我们，也即用JS来写Native，⽤ Web 的开发体验构建⾼性能、可扩展的 Native 应⽤，同时真正获取上述所说的快和体验。\n\n**业务对比分析**  \n\n  \n\n那么为什么会选择 Weex 呢？其实和飞猪业务特点很有关系，同时又可以很好解决这些痛点。\n\n飞猪业务迭代速度快，也需要快速上线；同时很多时候景点和海外弱网使用，同时要体验良好；\n\n其中最重要的一点是多容器接入，适配飞猪、手淘、天猫、支付宝，也即我们一次重要业务的开发需要一个iOS、一个Android同学来开发两端，同时由一个H5同学来开发兼容手淘、支付宝、UC的 Web 版本，也即一次业务发布涉及到多端同时开发、上线。\n\n![](https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnjuibdbD0UvQhic1XXu4YibPcqyn24lrIGibkWNxTpMzLThrXGhpPWL9k6GbLxq6CqrvQmCWCpiaVib1yFicGA/640?wx_fmt=jpeg)\n\n  \n\nWeex 其实很好的解决了上述的一些问题，包括在飞猪、手淘、天猫 Weex环境下完全 Native体验，同时Bundle 资源大小较 H5 小很多，加上富交互体验、长列表性能好非常适合商品列表页面和双十一场景，最重要的是真正让我们从3个人的开发减少到了1个人，其他2个人可以去做更多有意义的事情。\n\n接下来我们可以从下面这个展示来看Weex和H5业务的一个展示、数据对比：\n\n  \n\n  \n\n这是一个业务逻辑复杂的页面，包括筛选、排序、日历选择、收藏、长列表、业务逻辑也很复杂的页面，重构成Weex以后，我们首屏可用时间降级68%、Bundle大小直接减少了73%，由于体验变好变快、让我们页面转化率居然提升了14.5%。  \n\n以上也就是我们为什么选择Weex作为我们跨端开发的一些重要原因，接下来介绍的是飞猪的weex 技术体系。\n\n  \n\n飞猪 Weex 技术体系\n\n架构图\n\n![](https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnjuibdbD0UvQhic1XXu4YibPcqynqybXzlqDa8x7wo2Qib0JNXOu644FBdfIAWibCb6JE3VkWPUX4WAdj9dA/640?wx_fmt=jpeg)\n\n可以从底层一直往上看，底层由我们APP的Framework / Libraries / OS Kernel等组成，我们在Weex的上下层和手淘、天猫一起设计出一套统一的Api设计，包括接口请求、数据埋点、路由跳转、网络状态、支付功能、导航栏定制等这一系列的通用服务，在 Weex 上面我们封装了Weex Ui组件库、业务组件库、UPX搭建营销模块、还有抹平多端差异的 Util 函数库，这样在我们上层可以长出我们众多的业务。\n\n由于 Weex 在我们这边和 H5 一样，都是当做页面来发布、而不是一个 View 里面写很多子View来组织，同时也很不建议大家使用vue-router来管理，更多的使用多页面来跳转体验会更好。\n\n说到构建发布流程，我们统一通过Clam来对我们项目进行初始化、构建、debug、预发、发布等工作，同时在上线方面直接通过Awpp命令来直接发布页面到CND，同时可以通过信鸽将离线资源推送到APP，运营同学也可以直接通过搭建的方式将页面发布出去。\n\nWeex 页面如何在飞猪、手淘、支付宝进行多端投放 ?  \n\n那你可能会问 Weex 页面如何在飞猪、手淘、支付宝进行多端投放呢 ?\n\n![](https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnjuibdbD0UvQhic1XXu4YibPcqyna4QRicepEjUVMDZKIHT0rhuMxjzIeicwUh0EA9z7q0cz9sSTia7G6qyFw/640?wx_fmt=jpeg)\n\n第一种为通过前端 URL 参数决定渲染为 Weex 还是 H5\n\n`xxxx.html?_wx_tpl=xxxx.js`：前面为降级时的 H5 地址， 后面 `_wx_tpl` 带的参数代表 Weex JS 地址， 当容器发现 URL 带有 `_wx_tpl` 参数时, 会下载后面的 JS 地址然后用 Weex 容器渲染。\n\n第二种为通过服务端返回内容决定渲染为 Weex 还是 H5\n\n`xxxx?wh_weex=true`：前面可以是 JS 地址也可以是 H5 地址，后面是固定的参数 `wh_weex=true`，当容器发现 URL 带有 `wh_weex=true` 时, 会请求前面的 xxxx 地址， 如果发现响应的 mime type（HTTP header content-type）为 `application/javascript`，则使用 Weex 渲染返回的内容， 否则使用 WebView 渲染成 H5。\n\n**飞猪 Weex 业务大盘**![](https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnjuibdbD0UvQhic1XXu4YibPcqynnOrJuwttJzID6ZUoibcWDHy9NJ30MUHCjBF3dZ14yqj30Tmd6kpSGqw/640?wx_fmt=png)\n\n  \n\nWeex 并不是像外界某些人传言说没有什么公司在使用Weex的，反而是超过你的想象，以上是我们这边17年12月份前的一个相关weex页面的一览，大家可以在飞猪、手淘、支付宝里面找到这些页面，均是一份页面同时投放到多端的。\n\n  \n\n什么业务适合用 Weex ？\n\n包括众多的营销业务、首页、频道、搜索列表、正向流程、简单详情、富交互页面都是很适合使用Weex来开发的，同时在我们这边也有一个对应的原则包括 展示类项目优先使用 Weex、重构/新项目优先使用 Weex、深度垂直类目尝试使用 Weex。\n\n**Weex 不适合复杂场景 ？**\n\n大家可以看下如下这几个场景的视频演示:\n\n大家可能会觉得Weex不适合复杂的场景，其实也不一定，通过很多方式是可以做到复杂场景的支持，包括双11超长列表滚动，30多屏数据，快速滚动很顺滑。  \n\n同时包括逻辑异常复杂、多组件的国际机票列表页，Weex 同样也可以胜任；包括图3富交互的使用场景，粘手效果的丝滑拖动，快速滑动，动态隐藏头部等等功能都是可以做到的。\n\n通过在我们这边很多业务场景的使用 Weex 踩坑 最佳实践的积累，其实有很多东西可以沉淀下来 通过封装的方式给后续其他业务使用，这样让后面的业务可以达到快速生产，这也是我们建议Weex Ui 组件体系一个很大的原因。\n\n  \n\nWeex Ui 的发展和开源\n\n为什么要建立 Weex Ui 组件库体系 ？\n\n*   在引入 Weex 初期，通过 Weex Ui 让未接触 Weex 的同学对其编写有借鉴作用\n    \n*   提炼业务中的公共组件，便于直接引用，提高大家开发效率\n    \n*   业务规范、视觉规范、最佳实践的及时同步\n    \n*   将 Weex 业务中的疑难杂症通过组件封装，对外只暴露简单逻辑\n    \n\n  \n\nWeex Ui 一览  \n\n经过一年多的建设，我们一步一步将 Weex Ui 优化，整理，最终于20170930进行了开源，通过下图可以看到 Weex Ui 是怎么来的.\n\n![](https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnjuibdbD0UvQhic1XXu4YibPcqynUuKEj2SzjbRrJ9JMPTLx3ZBbOicdHhR94pTiaF2uwZBCqG7bUA5I7sgw/640?wx_fmt=jpeg)\n\n目前 Weex Ui 组件库包括7大类31个成熟的组件，同时并不是直接开源给大家使用，而是在内部已经使用了1年多后稳定后开源给大家使用，大家可以通过手淘、飞猪、任何浏览器扫码进行预览.\n\n![](https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju9YFyWBwuoqan1SNEPFTsjHC66zCzxjicmwia1f7VSEOrUXUgaRxoT29Xr70FxwLK9ibEtVk5HHQ6avg/640?wx_fmt=png)\n\n同时一个开源库的文档其实是后续发展中用户是否能快速上手的一个很大因素，Weex UI  \n\n包括组件说明、使用规则、Demo展示、详细使用API、升级文档等等，可以让你快速使用。\n\n  \n\nWeex Ui 是不是只适合电商体系呢？\n\n近期我们队 Weex Ui的使用者做过一次问卷调查，结果让我们很惊喜，并不是只有电商在使用，还很很多其他的体系在使用，包括工具类、企业应用、文娱、自媒体、新闻这些其实都是有使用的。\n\n![](https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnjuibdbD0UvQhic1XXu4YibPcqynZqBTL2BSKECslM66XtiakxHnB5qFAar8J3LgjGoE3kuzTdXd4mibbUtw/640?wx_fmt=jpeg)\n\n组件化搭建你的 Weex 页面\n\n很多时候基础建设，其实为了给业务开发来加速，譬如接下来这个飞猪专线的页面就是通过我们的Weex Ui组件库来搭建起来的\n\n![](https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnjuibdbD0UvQhic1XXu4YibPcqynwKWls3icoPI8S2Vc9Wtygf8PSUaAdq2fibFtibBficm9QmSTwoLSWSbkjg/640?wx_fmt=jpeg)\n\n然而基础组件只能够解决通用组件的问题，其实还包括业务组件这一块，也即上图中的`your-item`组件, 也即我们下面要说的 Weex 业务组件化.\n\n  \n\n除了基础库，在 Weex Ui 层还可以做什么 \n\nWeex 业务组件化\n\n![](https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnjuibdbD0UvQhic1XXu4YibPcqynnvp2a6FPO4aSiaKAyDtoUrPy52Q4L26nlvmhRIvuY8lsW5YiaiaHVvjQw/640?wx_fmt=jpeg)\n\n业务组件库更多是前端、后端、设计师之间的一个“约定”，通过一定规范共同让业务组件变得可复用。\n\n也即Weex代码中直接引入此组件，直接插入后端返回的原始数据，就可以生成设计师所设计出的商品卡片，最终可以做到支撑任意 Weex 业务模块 投放到 任意 Weex 页面 中 任意位置 的能力。\n\n**那么应该怎么做呢？**\n\n![](https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju9YFyWBwuoqan1SNEPFTsjHSlU1U16VxL6xKfgwkXFwl43oxdIdx52q53AiaspyUepDDKH669GLHfw/640?wx_fmt=png)\n\n可以自动化测试 Weex 吗 ？\n\n答案是可以的，之前通过macacajs测试框架和Weex结合来弄，通过自定义一连串的手势、事件，最后通过用json来表明执行的顺序，可以做到: \n\n1、安装app\n\n2、自动打开native页面\n\n3、登录，自动输入\n\n4、自动测试飞猪度假首页，包括点击、跳转、滑动、下拉刷新等操作\n\n5、自动测试飞猪专线、包括左滑、右滑操作\n\n6、自动测试Weex Ui，包括打开组件、点击交互逻辑\n\n7、自动各个页面运行截图，并将测试情况邮件给测试方\n\n  \n\n  \n\nWeex 无障碍优化  \n\nWeex 其实也是支持无障碍的，也即让盲人在最短的时间内通过最快的方式找到自己想要的信息。\n\n同时当盲人访问我们Weex页面时候，让他们对 Weex 是可感知的、可操作的、可理解的、同时页面也是鲁棒的。\n\n![](https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnjuibdbD0UvQhic1XXu4YibPcqynE93Mz9KknzibESvHgcoq2TWibatmqHmSDllZTr1fVJlcI4L7g4ibo1qtg/640?wx_fmt=png)\n\n  \n\n无障碍在Weex实现起来是很简单的，譬如如下实现：\n\n![](https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnjuibdbD0UvQhic1XXu4YibPcqynCJZEibicdxJficmsIIWZR2HDpxnt6h6AWXLicu41Xj0QnoRwHcELKUJmzA/640?wx_fmt=jpeg)\n\n飞猪 Weex 双十一性能优化\n\n每年的双十一也就是我们Weex的一个战场，几乎所有会场页面均由Weex实现，如何让用户丝滑的逛我们的页面呢？期间我们也将之前很多经验包括优化技巧放到了双十一的会场页面，包括一些经验的整理。\n\n![](https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnjuibdbD0UvQhic1XXu4YibPcqynaQHFxdAQPZeMq1cPic7XVv7iarNhE3NqQLNyPBSicgUwQERRULAASgGlg/640?wx_fmt=jpeg)\n\n  \n\n回到开源\n\n其实 Weex 可以在很多很多地方使用，包括各种应用场景，这也是我们开源Weex Ui 的一个很大原因，给大家更多 Weex 可实现功能的输入，最佳实践实现的参考。  \n\n同时外部开发者也急需要一套成熟组件库来提高开发效率。https://github.com/alibaba/weex-ui\n\n从2017年9月30号开始，我们一直在弄Weex Ui 的开源发展，包括共建 weex-toolkit 让其更好支持Weex Ui、欠缺组件的补全 + 现有组件的增强、继续扩展边界 + 轻舟解决方案 UI 库、引入更多富交互体验 + 组件的无障碍优化、简易的使用方式 + 详细的中英文档等等工作。  \n\n其实更多的是想大家一起参与进来，共同促进我们 Weex 的发展，说到共同促进，那么你可以做什么呢？ 其实可以做很多很多事情:\n\n![](https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnjuibdbD0UvQhic1XXu4YibPcqynoahusSTw4nuWbgiajyCgfDP4LoDJLjZhLcYItXkdy73ZBxNd4gMDQtQ/640?wx_fmt=jpeg)\n\n  \n\n**晚上圆桌会议 \\- Weex 组件方向讨论总结**\n---------------------------\n\n1\\. Weex 原生组件的封装应该注意什么？\n\n*   通用性，只有多个业务同时在使用，同时具备可抽离性特性的组件，譬如Video/TabBar/TitleBar/ImageUpload 这些在 Native中成熟的组件\n    \n*   稳定性，Native 组件不像 weex 上层的组件可调节性大，所以需要注意好 Native 组件一定需要没有Bug，防止修复和更新麻烦，同时 Native 组件一开始应该将大部分情况做成可配置化，防止频繁更新，导致需要适配很多版本\n    \n*   原子性，不建议一个组件同时做很多事情，应该是单一的功能，然后通过搭配的方式来得到更多功能\n    \n\n  \n\n2.weex 组件开发和实践过程中的一些经验？\n\n*   811原则，默认80%的功能应该是不需要用户配置很多参数，10%的地方用户可以通过配置一些参数来达到目的，10%的稀有情况可以暂时不考虑，可能这里会花费很多时间开发，所以可以等到有业务需要使用时候，再更新上去\n    \n*   统一收口原则，为了避免后续组件变成一个大杂烩，后续迭代视觉交互、新功能的增加需要将通用性考虑进去，这里需要一个人统一来收口、开发维护此组件，可以避免很多“业务特性”来干扰组件的可用性\n    \n*   性能体验的优化，Weex 组件比页面的编写更应该保证他的性能体验\n    \n*   信任机制：很多时候别人使用你的组件一个很大原因是由于相信你的组件没有问题，是稳定的，同时后续会常常维护的\n    \n\n  \n\n3\\. 大家认为Weex Ui组件还缺少什么？\n\n*   缺少一些汇集起来使用的场景，目前单个组件的使用文档已经详细说明，但是对于多个组件的一些使用，或者页面层面的开发缺少相关案例，后期需要逐步补上weex-ui-demo\n    \n*   主题配置灵活性上需要考虑进行，目前更多是通过参数配置的方式来更改主题颜色，其实是可以通过一个统一外部参数的配置来使它修改\n    \n\n  \n\n4.未来跨端开发会是怎么样的？\n\n*   Native的布局方式需要向H5的开发灵活性学习，逐步使用自动布局来实现，同时引入弹性思路开发，避免绝对计算\n    \n*   数据绑定方面会越来越便捷，譬如和MVVM思路一样，数据变化后，视图立马修改，而不是手动去触发\n    \n\nMore\n\n大家可以通过用钉钉扫一扫如下二维码，大家一起来讨论交流：![](https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnjuibdbD0UvQhic1XXu4YibPcqynYLSUiap2NdgKufHaG4WDklGeJn6pmx7mLrnoc81a4r1Obibv43VGPSwQ/640?wx_fmt=png)\n\n官网地址：https://alibaba.github.io/weex-ui\n\nGithub地址：https://github.com/alibaba/weex-ui\n\n  \n\n  \n\n**号外**\n\n接下来的几天, 我们将继续给大家带来本次WeexConf 2018的精彩干货分享.\n\n主讲嘉宾的PPT等资料,可点击【原文链接】至WeexConf 2018官网查看,建议pc端查看下载哦.\n\n  \n\n往期精彩回顾\n\n![](https://mmbiz.qpic.cn/mmbiz_png/fgnkxfGnnkQJsfHzk0g4uu7Oout4kXavwIic9jfUkqsJ3kVjyFcic0icWTHEnMCv7E8h7ciclOmNpspcnduk5PJia3w/640?wx_fmt=png)\n\n  \n\n![](http://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnju8rXOt6UYPCp5tEvOxtpEsgH5Qfz5jKjomaXLb6mBPOkcQmAlHDjFvWtMqHwvY1tHhiagndp43g1Qg/640?wx_fmt=jpeg)\n\n[参加 WeexConf 2018 是一种什么体验?](http://mp.weixin.qq.com/s?__biz=MzAxNDEwNjk5OQ==&mid=2650400922&idx=1&sn=852cd77194df28b77d1aa9360b36ec8d&chksm=83952082b4e2a994473f055b717b2cb8d0d01047f222bca09b4f55d0d4a73c6d4b9de146bf66&scene=21#wechat_redirect)\n\n  \n\n  \n\n![](https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnju9YFyWBwuoqan1SNEPFTsjHqf7q0E5NdkjxEU81Wnanhj0Uv1lyMTHdzaSULE3tcrWMBIt6rDc3sA/640?wx_fmt=jpeg)\n\nWeex如何支撑200w+同时在线的优酷猫晚直播？\n\n  \n\n  \n\n![](https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnju88ic0shw7SrzkoHibq0577MqdjnuQPsDrM5lcEp5TKFSRbCwrcE7O9fuwRup8urlibSpZrLJJocv4Xw/640?wx_fmt=jpeg)\n\n[【干货】|800份实战经验PPT免费下载](http://mp.weixin.qq.com/s?__biz=MzAxNDEwNjk5OQ==&mid=2650400859&idx=1&sn=710559e961469b0efcac8fb257d8e02e&chksm=83952043b4e2a9555f6bb885bb25a63a2097903aed12c0dc49a126d34e7b9186ce7b2c9b95a8&scene=21#wechat_redirect)\n\n  \n\n![](http://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnjuib4SbnQR1TxuQ7qTFtfP7kzPOEpGicfUHpk0iaVRfDiadBVgWnibLfXtbd8JR6mpqTxmGQjoY7dp8S70w/640?wx_fmt=jpeg)\n\n[手淘Android容器架构——Atlas的前世今生](http://mp.weixin.qq.com/s?__biz=MzAxNDEwNjk5OQ==&mid=2650400852&idx=1&sn=b983c27327f992ba969662edd6ce15c7&chksm=8395204cb4e2a95a813efd73b1cf5d47fad2bbef3da49886348f627261485d98eb6cf7641a10&scene=21#wechat_redirect)\n\n  \n\n  \n\n![](https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnju88ic0shw7SrzkoHibq0577MqtyaI66UCR7saFiaCWLH7lZGrxQECID3t9nskCgANzdQXsk5icJoXWv6w/640?wx_fmt=jpeg)', 0, 1, 0);
INSERT INTO `post` (`id`, `createAt`, `updateAt`, `title`, `description`, `thumb`, `url`, `html`, `markdown`, `views`, `status`, `push`) VALUES
(3, '2018-04-23 11:01:40.413179', '2018-04-23 11:01:40.413179', '从零开始写一个Javascript解析器', '最近在研究AST,之前有一篇文章面试官:你了解过Babel吗？写过Babel插件吗?答:没有。卒为什么要去了解它?因为懂得AST真的可以为所欲为简单点说，使用Javascript运行Javascript代码。这篇文章来告诉你，如何写一个最简单的解析器。前言(如果你很清楚如何执行自定义js代码，请跳过)在大家的认知中，有几种执行自定义脚本的方法？我们来列举一下：Web创建script脚本，并插入文档流functionrunJavascriptCode(code){constscript=document.c', 'https://user-images.githubusercontent.com/9758711/37197849-4df2acb2-23b7-11e8-855b-8cb7ebdd2203.png', 'https://cnodejs.org/topic/5aa2a128ce4a27f867526f7e', '<blockquote>\n<p>最近在研究 AST, 之前有一篇文章 <a href=\"http://axetroy.xyz/#/post/170\">面试官: 你了解过 Babel 吗？写过 Babel 插件吗? 答: 没有。卒</a>\n为什么要去了解它? 因为懂得 AST 真的可以为所欲为</p>\n</blockquote>\n<p>简单点说，使用 Javascript 运行Javascript代码。</p>\n<p>这篇文章来告诉你，如何写一个最简单的解析器。</p>\n<h2>前言(如果你很清楚如何执行自定义 js 代码，请跳过)</h2>\n<p>在大家的认知中，有几种执行自定义脚本的方法？我们来列举一下：</p>\n<h3>Web</h3>\n<h4>创建 script 脚本，并插入文档流</h4>\n<pre class=\"prettyprint language-javascript\"><code>function runJavascriptCode(code) {\n  const script = document.createElement(\"script\");\n  script.innerText = code;\n  document.body.appendChild(script);\n}\n\nrunJavascriptCode(\"alert(\'hello world\')\");\n</code></pre><h4>eval</h4>\n<p>无数人都在说，不要使用<code>eval</code>，虽然它可以执行自定义脚本</p>\n<pre class=\"prettyprint language-javascript\"><code>eval(\"alert(\'hello world\')\");\n</code></pre><p>参考链接: <a href=\"https://stackoverflow.com/questions/86513/why-is-using-the-javascript-eval-function-a-bad-idea\">Why is using the JavaScript eval function a bad idea?</a></p>\n<h4>setTimeout</h4>\n<p>setTimeout 同样能执行，不过会把相关的操作，推到下一个事件循环中执行</p>\n<pre class=\"prettyprint language-javascript\"><code>setTimeout(\"console.log(\'hello world\')\");\nconsole.log(\"I should run first\");\n\n// 输出\n// I should run first\n// hello world\'\n</code></pre><h4>new Function</h4>\n<pre class=\"prettyprint language-javascript\"><code>new Function(\"alert(\'hello world\')\")();\n</code></pre><p>参考链接: <a href=\"https://stackoverflow.com/questions/4599857/are-eval-and-new-function-the-same-thing\">Are eval() and new Function() the same thing?</a></p>\n<h3>NodeJs</h3>\n<h4>require</h4>\n<p>可以把 Javascript 代码写进一个 Js 文件，然后在其他文件 require 它，达到执行的效果。</p>\n<p>NodeJs 会缓存模块，如果你执行 N 个这样的文件，可能会消耗很多内存. 需要执行完毕后，手动清除缓存。</p>\n<h4>Vm</h4>\n<pre class=\"prettyprint language-javascript\"><code>const vm = require(\"vm\");\n\nconst sandbox = {\n  animal: \"cat\",\n  count: 2\n};\n\nvm.runInNewContext(\'count += 1; name = \"kitty\"\', sandbox);\n</code></pre><p>以上方式，除了 Node 能优雅的执行以外，其他都不行，API 都需要依赖宿主环境。</p>\n<h2>解释器用途</h2>\n<p>在能任何执行 Javascript 的代码的平台，执行自定义代码。</p>\n<p>比如小程序，屏蔽了以上执行自定义代码的途径</p>\n<p>那就真的不能执行自定义代码了吗？</p>\n<p>非也</p>\n<h3>工作原理</h3>\n<p>基于 AST(抽象语法树)，找到对应的对象/方法, 然后执行对应的表达式。</p>\n<p>这怎么说的有点绕口呢，举个栗子<code>console.log(\"hello world\");</code></p>\n<p>原理: 通过 AST 找到<code>console</code>对象，再找到它<code>log</code>函数，最后运行函数，参数为<code>hello world</code></p>\n<h3>准备工具</h3>\n<ul>\n<li>Babylon, 用于解析代码，生成 AST</li>\n<li>babel-types, 判断节点类型</li>\n<li><a href=\"https://astexplorer.net/\">astexplorer</a>, 随时查看抽象语法树</li>\n</ul>\n<h3>开始撸代码</h3>\n<p>我们以运行<code>console.log(\"hello world\")</code>为例</p>\n<p>打开<a href=\"https://astexplorer.net/\">astexplorer</a>， 查看对应的 AST</p>\n<p><img src=\"https://user-images.githubusercontent.com/9758711/37197849-4df2acb2-23b7-11e8-855b-8cb7ebdd2203.png\" alt=\"1\"></p>\n<p>由图中看到，我们要找到<code>console.log(\"hello world\")</code>，必须要向下遍历节点的方式，经过<code>File</code>、<code>Program</code>、<code>ExpressionStatement</code>、<code>CallExpression</code>、<code>MemberExpression</code>节点，其中涉及到<code>Identifier</code>、<code>StringLiteral</code>节点</p>\n<p>我们先定义<code>visitors</code>, <code>visitors</code>是对于不同节点的处理方式</p>\n<pre class=\"prettyprint language-javascript\"><code>const visitors = {\n  File(){},\n  Program(){},\n  ExpressionStatement(){},\n  CallExpression(){},\n  MemberExpression(){},\n  Identifier(){},\n  StringLiteral(){}\n};\n</code></pre><p>再定义一个遍历节点的函数</p>\n<pre class=\"prettyprint language-javascript\"><code>/**\n * 遍历一个节点\n * @param {Node} node 节点对象\n * @param {*} scope 作用域\n */\nfunction evaluate(node, scope) {\n  const _evalute = visitors[node.type];\n  // 如果该节点不存在处理函数，那么抛出错误\n  if (!_evalute) {\n    throw new Error(`Unknown visitors of ${node.type}`);\n  }\n  // 执行该节点对应的处理函数\n  return _evalute(node, scope);\n}\n</code></pre><p>下面是对各个节点的处理实现</p>\n<pre class=\"prettyprint language-javascript\"><code>const babylon = require(\"babylon\");\nconst types = require(\"babel-types\");\n\nconst visitors = {\n  File(node, scope) {\n    evaluate(node.program, scope);\n  },\n  Program(program, scope) {\n    for (const node of program.body) {\n      evaluate(node, scope);\n    }\n  },\n  ExpressionStatement(node, scope) {\n    return evaluate(node.expression, scope);\n  },\n  CallExpression(node, scope) {\n    // 获取调用者对象\n    const func = evaluate(node.callee, scope);\n\n    // 获取函数的参数\n    const funcArguments = node.arguments.map(arg => evaluate(arg, scope));\n\n    // 如果是获取属性的话: console.log\n    if (types.isMemberExpression(node.callee)) {\n      const object = evaluate(node.callee.object, scope);\n      return func.apply(object, funcArguments);\n    }\n  },\n  MemberExpression(node, scope) {\n    const { object, property } = node;\n\n    // 找到对应的属性名\n    const propertyName = property.name;\n\n    // 找对对应的对象\n    const obj = evaluate(object, scope);\n\n    // 获取对应的值\n    const target = obj[propertyName];\n\n    // 返回这个值，如果这个值是function的话，那么应该绑定上下文this\n    return typeof target === \"function\" ? target.bind(obj) : target;\n  },\n  Identifier(node, scope) {\n    // 获取变量的值\n    return scope[node.name];\n  },\n  StringLiteral(node) {\n    return node.value;\n  }\n};\n\nfunction evaluate(node, scope) {\n  const _evalute = visitors[node.type];\n  if (!_evalute) {\n    throw new Error(`Unknown visitors of ${node.type}`);\n  }\n  // 递归调用\n  return _evalute(node, scope);\n}\n\nconst code = \"console.log(\'hello world\')\";\n\n// 生成AST树\nconst ast = babylon.parse(code);\n\n// 解析AST\n// 需要传入执行上下文，否则找不到``console``对象\nevaluate(ast, { console: console });\n</code></pre><p>在 Nodejs 中运行试试看</p>\n<pre class=\"prettyprint language-bash\"><code>$ node ./index.js\nhello world\n</code></pre><p>然后我们更改下运行的代码 <code>const code = \"console.log(Math.pow(2, 2))\";</code></p>\n<p>因为上下文没有<code>Math</code>对象，那么会得出这样的错误 <code>TypeError: Cannot read property \'pow\' of undefined</code></p>\n<p>记得传入上下文<code>evaluate(ast, {console, Math});</code></p>\n<p>再运行，又得出一个错误<code>Error: Unknown visitors of NumericLiteral</code></p>\n<p>原来<code>Math.pow(2, 2)</code>中的 2，是数字字面量</p>\n<p><img src=\"https://user-images.githubusercontent.com/9758711/37199318-4068cafe-23bc-11e8-96e8-c72fb151c967.png\" alt=\"2\"></p>\n<p>节点是<code>NumericLiteral</code>, 但是在<code>visitors</code>中，我们却没有定义这个节点的处理方式.</p>\n<p>那么我们就加上这么个节点:</p>\n<pre class=\"prettyprint language-javascript\"><code>NumericLiteral(node){\n    return node.value;\n  }\n</code></pre><p>再次运行，就跟预期结果一致了</p>\n<pre class=\"prettyprint language-bash\"><code>$ node ./index.js\n4\n</code></pre><p>到这里，已经实现了最最基本的函数调用了</p>\n<h3>进阶</h3>\n<p>既然是解释器，难道只能运行 hello world 吗？显然不是</p>\n<h4>我们来声明个变量吧</h4>\n<pre class=\"prettyprint language-javascript\"><code>var name = \"hello world\";\nconsole.log(name);\n</code></pre><p>先看下 AST 结构</p>\n<p><img src=\"https://user-images.githubusercontent.com/9758711/37199679-503e3198-23bd-11e8-97a9-76b86b8513bb.png\" alt=\"3\"></p>\n<p><code>visitors</code>中缺少<code>VariableDeclaration</code>和<code>VariableDeclarator</code>节点的处理，我们给加上</p>\n<pre class=\"prettyprint language-javascript\"><code>VariableDeclaration(node, scope) {\n    const kind = node.kind;\n    for (const declartor of node.declarations) {\n      const {name} = declartor.id;\n      const value = declartor.init\n        ? evaluate(declartor.init, scope)\n        : undefined;\n      scope[name] = value;\n    }\n  },\n  VariableDeclarator(node, scope) {\n    scope[node.id.name] = evaluate(node.init, scope);\n  }\n</code></pre><p>运行下代码，已经打印出<code>hello world</code></p>\n<h4>我们再来声明函数</h4>\n<pre class=\"prettyprint language-javascript\"><code>function test() {\n  var name = \"hello world\";\n  console.log(name);\n}\ntest();\n</code></pre><p>根据上面的步骤，新增了几个节点</p>\n<pre class=\"prettyprint language-javascript\"><code>BlockStatement(block, scope) {\n    for (const node of block.body) {\n      // 执行代码块中的内容\n      evaluate(node, scope);\n    }\n  },\n  FunctionDeclaration(node, scope) {\n    // 获取function\n    const func = visitors.FunctionExpression(node, scope);\n\n    // 在作用域中定义function\n    scope[node.id.name] = func;\n  },\n  FunctionExpression(node, scope) {\n    // 自己构造一个function\n    const func = function() {\n      // TODO: 获取函数的参数\n      // 执行代码块中的内容\n      evaluate(node.body, scope);\n    };\n\n    // 返回这个function\n    return func;\n  }\n</code></pre><p>然后修改下<code>CallExpression</code></p>\n<pre class=\"prettyprint language-javascript\"><code>// 如果是获取属性的话: console.log\nif (types.isMemberExpression(node.callee)) {\n  const object = evaluate(node.callee.object, scope);\n  return func.apply(object, funcArguments);\n} else if (types.isIdentifier(node.callee)) {\n  // 新增\n  func.apply(scope, funcArguments); // 新增\n}\n</code></pre><p>运行也能过打印出<code>hello world</code></p>\n<p><a href=\"https://gist.github.com/axetroy/9388f7a1f2f6a46ed0bed78a44d5f603\">完整示例代码</a></p>\n<h2>其他</h2>\n<p>限于篇幅，我不会讲怎么处理所有的节点，以上已经讲解了基本的原理。</p>\n<p>对于其他节点，你依旧可以这么来，其中需要注意的是: <strong>上文中，作用域我统一用了一个 scope，没有父级/子级作用域之分</strong></p>\n<p>也就意味着这样的代码是可以运行的</p>\n<pre class=\"prettyprint language-javascript\"><code>var a = 1;\nfunction test() {\n  var b = 2;\n}\ntest();\nconsole.log(b); // 2\n</code></pre><p>处理方法: 在递归 AST 树的时候，遇到一些会产生子作用域的节点，应该使用新的作用域，比如说<code>function</code>，<code>for in</code>等</p>\n<h2>最后</h2>\n<p>以上只是一个简单的模型，它连玩具都算不上，依旧有很多的坑。比如:</p>\n<ul>\n<li>变量提升, 作用域应该有预解析阶段</li>\n<li>作用域有很多问题</li>\n<li>特定节点，必须嵌套在某节点下。比如 super()就必须在 Class 节点内，无论嵌套多少层</li>\n<li>this 绑定</li>\n<li>…</li>\n</ul>\n<p>连续几个晚上的熬夜之后，我写了一个比较完善的库<a href=\"https://github.com/axetroy/vm.js\">vm.js</a>，基于<a href=\"https://github.com/bramblex/jsjs\">jsjs</a>修改而来，站在巨人的肩膀上。</p>\n<p>与它不同的是:</p>\n<ul>\n<li>重构了递归方式，解决了一些没法解决的问题</li>\n<li>修复了多项 bug</li>\n<li>添加了测试用例</li>\n<li>支持 es6 以及其他语法糖</li>\n</ul>\n<p>目前正在开发中, 等待更加完善之后，会发布第一个版本。</p>\n<p>欢迎大佬们拍砖和 PR.</p>\n<blockquote>\n<p>小程序今后变成大程序，业务代码通过 Websocket 推送过来执行，小程序源码只是一个空壳，想想都刺激.</p>\n</blockquote>\n<p>项目地址: <a href=\"https://github.com/axetroy/vm.js\">https://github.com/axetroy/vm.js</a></p>\n<p>在线预览: <a href=\"http://axetroy.github.io/vm.js/\">http://axetroy.github.io/vm.js/</a></p>\n<p>原文: <a href=\"http://axetroy.xyz/#/post/172\">http://axetroy.xyz/#/post/172</a></p>\n', '> 最近在研究 AST, 之前有一篇文章 [面试官: 你了解过 Babel 吗？写过 Babel 插件吗? 答: 没有。卒](http://axetroy.xyz/#/post/170) 为什么要去了解它? 因为懂得 AST 真的可以为所欲为\n\n简单点说，使用 Javascript 运行Javascript代码。\n\n这篇文章来告诉你，如何写一个最简单的解析器。\n\n前言(如果你很清楚如何执行自定义 js 代码，请跳过)\n---------------------------\n\n在大家的认知中，有几种执行自定义脚本的方法？我们来列举一下：\n\n### Web\n\n#### 创建 script 脚本，并插入文档流\n\n    function runJavascriptCode(code) {\n      const script = document.createElement(\"script\");\n      script.innerText = code;\n      document.body.appendChild(script);\n    }\n    \n    runJavascriptCode(\"alert(\'hello world\')\");\n    \n\n#### eval\n\n无数人都在说，不要使用`eval`，虽然它可以执行自定义脚本\n\n    eval(\"alert(\'hello world\')\");\n    \n\n参考链接: [Why is using the JavaScript eval function a bad idea?](https://stackoverflow.com/questions/86513/why-is-using-the-javascript-eval-function-a-bad-idea)\n\n#### setTimeout\n\nsetTimeout 同样能执行，不过会把相关的操作，推到下一个事件循环中执行\n\n    setTimeout(\"console.log(\'hello world\')\");\n    console.log(\"I should run first\");\n    \n    // 输出\n    // I should run first\n    // hello world\'\n    \n\n#### new Function\n\n    new Function(\"alert(\'hello world\')\")();\n    \n\n参考链接: [Are eval() and new Function() the same thing?](https://stackoverflow.com/questions/4599857/are-eval-and-new-function-the-same-thing)\n\n### NodeJs\n\n#### require\n\n可以把 Javascript 代码写进一个 Js 文件，然后在其他文件 require 它，达到执行的效果。\n\nNodeJs 会缓存模块，如果你执行 N 个这样的文件，可能会消耗很多内存. 需要执行完毕后，手动清除缓存。\n\n#### Vm\n\n    const vm = require(\"vm\");\n    \n    const sandbox = {\n      animal: \"cat\",\n      count: 2\n    };\n    \n    vm.runInNewContext(\'count += 1; name = \"kitty\"\', sandbox);\n    \n\n以上方式，除了 Node 能优雅的执行以外，其他都不行，API 都需要依赖宿主环境。\n\n解释器用途\n-----\n\n在能任何执行 Javascript 的代码的平台，执行自定义代码。\n\n比如小程序，屏蔽了以上执行自定义代码的途径\n\n那就真的不能执行自定义代码了吗？\n\n非也\n\n### 工作原理\n\n基于 AST(抽象语法树)，找到对应的对象/方法, 然后执行对应的表达式。\n\n这怎么说的有点绕口呢，举个栗子`console.log(\"hello world\");`\n\n原理: 通过 AST 找到`console`对象，再找到它`log`函数，最后运行函数，参数为`hello world`\n\n### 准备工具\n\n*   Babylon, 用于解析代码，生成 AST\n*   babel-types, 判断节点类型\n*   [astexplorer](https://astexplorer.net/), 随时查看抽象语法树\n\n### 开始撸代码\n\n我们以运行`console.log(\"hello world\")`为例\n\n打开[astexplorer](https://astexplorer.net/)， 查看对应的 AST\n\n![1](https://user-images.githubusercontent.com/9758711/37197849-4df2acb2-23b7-11e8-855b-8cb7ebdd2203.png)\n\n由图中看到，我们要找到`console.log(\"hello world\")`，必须要向下遍历节点的方式，经过`File`、`Program`、`ExpressionStatement`、`CallExpression`、`MemberExpression`节点，其中涉及到`Identifier`、`StringLiteral`节点\n\n我们先定义`visitors`, `visitors`是对于不同节点的处理方式\n\n    const visitors = {\n      File(){},\n      Program(){},\n      ExpressionStatement(){},\n      CallExpression(){},\n      MemberExpression(){},\n      Identifier(){},\n      StringLiteral(){}\n    };\n    \n\n再定义一个遍历节点的函数\n\n    /**\n     * 遍历一个节点\n     * @param {Node} node 节点对象\n     * @param {*} scope 作用域\n     */\n    function evaluate(node, scope) {\n      const _evalute = visitors[node.type];\n      // 如果该节点不存在处理函数，那么抛出错误\n      if (!_evalute) {\n        throw new Error(`Unknown visitors of ${node.type}`);\n      }\n      // 执行该节点对应的处理函数\n      return _evalute(node, scope);\n    }\n    \n\n下面是对各个节点的处理实现\n\n    const babylon = require(\"babylon\");\n    const types = require(\"babel-types\");\n    \n    const visitors = {\n      File(node, scope) {\n        evaluate(node.program, scope);\n      },\n      Program(program, scope) {\n        for (const node of program.body) {\n          evaluate(node, scope);\n        }\n      },\n      ExpressionStatement(node, scope) {\n        return evaluate(node.expression, scope);\n      },\n      CallExpression(node, scope) {\n        // 获取调用者对象\n        const func = evaluate(node.callee, scope);\n    \n        // 获取函数的参数\n        const funcArguments = node.arguments.map(arg => evaluate(arg, scope));\n    \n        // 如果是获取属性的话: console.log\n        if (types.isMemberExpression(node.callee)) {\n          const object = evaluate(node.callee.object, scope);\n          return func.apply(object, funcArguments);\n        }\n      },\n      MemberExpression(node, scope) {\n        const { object, property } = node;\n    \n        // 找到对应的属性名\n        const propertyName = property.name;\n    \n        // 找对对应的对象\n        const obj = evaluate(object, scope);\n    \n        // 获取对应的值\n        const target = obj[propertyName];\n    \n        // 返回这个值，如果这个值是function的话，那么应该绑定上下文this\n        return typeof target === \"function\" ? target.bind(obj) : target;\n      },\n      Identifier(node, scope) {\n        // 获取变量的值\n        return scope[node.name];\n      },\n      StringLiteral(node) {\n        return node.value;\n      }\n    };\n    \n    function evaluate(node, scope) {\n      const _evalute = visitors[node.type];\n      if (!_evalute) {\n        throw new Error(`Unknown visitors of ${node.type}`);\n      }\n      // 递归调用\n      return _evalute(node, scope);\n    }\n    \n    const code = \"console.log(\'hello world\')\";\n    \n    // 生成AST树\n    const ast = babylon.parse(code);\n    \n    // 解析AST\n    // 需要传入执行上下文，否则找不到``console``对象\n    evaluate(ast, { console: console });\n    \n\n在 Nodejs 中运行试试看\n\n    $ node ./index.js\n    hello world\n    \n\n然后我们更改下运行的代码 `const code = \"console.log(Math.pow(2, 2))\";`\n\n因为上下文没有`Math`对象，那么会得出这样的错误 `TypeError: Cannot read property \'pow\' of undefined`\n\n记得传入上下文`evaluate(ast, {console, Math});`\n\n再运行，又得出一个错误`Error: Unknown visitors of NumericLiteral`\n\n原来`Math.pow(2, 2)`中的 2，是数字字面量\n\n![2](https://user-images.githubusercontent.com/9758711/37199318-4068cafe-23bc-11e8-96e8-c72fb151c967.png)\n\n节点是`NumericLiteral`, 但是在`visitors`中，我们却没有定义这个节点的处理方式.\n\n那么我们就加上这么个节点:\n\n    NumericLiteral(node){\n        return node.value;\n      }\n    \n\n再次运行，就跟预期结果一致了\n\n    $ node ./index.js\n    4\n    \n\n到这里，已经实现了最最基本的函数调用了\n\n### 进阶\n\n既然是解释器，难道只能运行 hello world 吗？显然不是\n\n#### 我们来声明个变量吧\n\n    var name = \"hello world\";\n    console.log(name);\n    \n\n先看下 AST 结构\n\n![3](https://user-images.githubusercontent.com/9758711/37199679-503e3198-23bd-11e8-97a9-76b86b8513bb.png)\n\n`visitors`中缺少`VariableDeclaration`和`VariableDeclarator`节点的处理，我们给加上\n\n    VariableDeclaration(node, scope) {\n        const kind = node.kind;\n        for (const declartor of node.declarations) {\n          const {name} = declartor.id;\n          const value = declartor.init\n            ? evaluate(declartor.init, scope)\n            : undefined;\n          scope[name] = value;\n        }\n      },\n      VariableDeclarator(node, scope) {\n        scope[node.id.name] = evaluate(node.init, scope);\n      }\n    \n\n运行下代码，已经打印出`hello world`\n\n#### 我们再来声明函数\n\n    function test() {\n      var name = \"hello world\";\n      console.log(name);\n    }\n    test();\n    \n\n根据上面的步骤，新增了几个节点\n\n    BlockStatement(block, scope) {\n        for (const node of block.body) {\n          // 执行代码块中的内容\n          evaluate(node, scope);\n        }\n      },\n      FunctionDeclaration(node, scope) {\n        // 获取function\n        const func = visitors.FunctionExpression(node, scope);\n    \n        // 在作用域中定义function\n        scope[node.id.name] = func;\n      },\n      FunctionExpression(node, scope) {\n        // 自己构造一个function\n        const func = function() {\n          // TODO: 获取函数的参数\n          // 执行代码块中的内容\n          evaluate(node.body, scope);\n        };\n    \n        // 返回这个function\n        return func;\n      }\n    \n\n然后修改下`CallExpression`\n\n    // 如果是获取属性的话: console.log\n    if (types.isMemberExpression(node.callee)) {\n      const object = evaluate(node.callee.object, scope);\n      return func.apply(object, funcArguments);\n    } else if (types.isIdentifier(node.callee)) {\n      // 新增\n      func.apply(scope, funcArguments); // 新增\n    }\n    \n\n运行也能过打印出`hello world`\n\n[完整示例代码](https://gist.github.com/axetroy/9388f7a1f2f6a46ed0bed78a44d5f603)\n\n其他\n--\n\n限于篇幅，我不会讲怎么处理所有的节点，以上已经讲解了基本的原理。\n\n对于其他节点，你依旧可以这么来，其中需要注意的是: **上文中，作用域我统一用了一个 scope，没有父级/子级作用域之分**\n\n也就意味着这样的代码是可以运行的\n\n    var a = 1;\n    function test() {\n      var b = 2;\n    }\n    test();\n    console.log(b); // 2\n    \n\n处理方法: 在递归 AST 树的时候，遇到一些会产生子作用域的节点，应该使用新的作用域，比如说`function`，`for in`等\n\n最后\n--\n\n以上只是一个简单的模型，它连玩具都算不上，依旧有很多的坑。比如:\n\n*   变量提升, 作用域应该有预解析阶段\n*   作用域有很多问题\n*   特定节点，必须嵌套在某节点下。比如 super()就必须在 Class 节点内，无论嵌套多少层\n*   this 绑定\n*   …\n\n连续几个晚上的熬夜之后，我写了一个比较完善的库[vm.js](https://github.com/axetroy/vm.js)，基于[jsjs](https://github.com/bramblex/jsjs)修改而来，站在巨人的肩膀上。\n\n与它不同的是:\n\n*   重构了递归方式，解决了一些没法解决的问题\n*   修复了多项 bug\n*   添加了测试用例\n*   支持 es6 以及其他语法糖\n\n目前正在开发中, 等待更加完善之后，会发布第一个版本。\n\n欢迎大佬们拍砖和 PR.\n\n> 小程序今后变成大程序，业务代码通过 Websocket 推送过来执行，小程序源码只是一个空壳，想想都刺激.\n\n项目地址: [https://github.com/axetroy/vm.js](https://github.com/axetroy/vm.js)\n\n在线预览: [http://axetroy.github.io/vm.js/](http://axetroy.github.io/vm.js/)\n\n原文: [http://axetroy.xyz/#/post/172](http://axetroy.xyz/#/post/172)', 0, 1, 0),
(4, '2018-04-23 11:01:40.436352', '2018-04-23 11:01:40.436352', '网页性能 CaseStudy：以 PressOne 首页为例', '', 'https://pic3.zhimg.com/v2-87c1d48dddd3fd7471573df7395157c6_1200x500.jpg', 'https://zhuanlan.zhihu.com/p/34726467', '<blockquote>通常来说，工程师熟悉某个系统会只要搞清楚其数据结构和数据流转过程基本足够了，但从商业的角度来看，前后端工程师都应该关注的另一个重要维度是系统性能，纯技术角度来看性能可以认为是系统的响应速度（实际上还可以认为是执行效率等），而从用户角度来看性能就是使用体验。</blockquote><h2>网页性能为什么重要？</h2><p>页面性能差的直接后果是用户需要等待，而等待，尤其是不确定要多长时间的等待会给用户带来焦虑，为了尽早的结束这种焦虑，除非访问网页是刚需，用户通常会选择直接关闭页面。从实际数据来看，性能差是页面高跳出率的重要原因之一。</p><p>为了搞清楚页面性能对业务目标的影响，诸如 Yahoo、Google、Amazon 等科技公司都投入了不少资源去研究和优化，比如下面是 ThinkWithGoogle 运用神经网络分析 2017 年 1100 万广告落地页<a href=\"https://link.zhihu.com/?target=https%3A//www.thinkwithgoogle.com/marketing-resources/data-measurement/mobile-page-speed-new-industry-benchmarks/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">加载速度和页面跳出率关系所得到的结论</a>：</p><figure><noscript>&lt;img src=\"https://pic1.zhimg.com/v2-08bdccd75c9ce75b9962d2854fe54632_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"865\" data-rawheight=\"590\" class=\"origin_image zh-lightbox-thumb\" width=\"865\" data-original=\"https://pic1.zhimg.com/v2-08bdccd75c9ce75b9962d2854fe54632_r.jpg\"&gt;</noscript><img src=\"https://pic1.zhimg.com/80/v2-08bdccd75c9ce75b9962d2854fe54632_hd.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"865\" data-rawheight=\"590\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"865\" data-original=\"https://pic1.zhimg.com/v2-08bdccd75c9ce75b9962d2854fe54632_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-08bdccd75c9ce75b9962d2854fe54632_b.jpg\"></figure><p>结论显而易见：<b>越快越好，少即是多</b>。</p><p>实际上，最近几年来大型互联网公司在页面性能优化研发中产出了不少工具和文档，方便工程师给网站做性能分析和优化。</p><p>其中文档方面比较经典的当属三本书：</p><ul><li><a href=\"https://link.zhihu.com/?target=http%3A//shop.oreilly.com/product/9780596529307.do\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">High Performance Websites</a>，早期在 Yahoo 性能团队工作的 Steve Souders 所著；</li><li><a href=\"https://link.zhihu.com/?target=https%3A//www.amazon.com/Even-Faster-Web-Sites-Performance/dp/0596522304\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">Even Faster Websites</a>，同上，在上册的基础上，列出了很多行之有效的细节优化手段；</li><li><a href=\"https://link.zhihu.com/?target=https%3A//hpbn.co/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">High Performance Browser Networks</a>，Google 性能工程师 Ilya Grigorik 所著，可以免费在线阅读，当然如果想支持读者，可以选择购买；</li></ul><p>而工具则非常多，尤其是 2015 年开始爆发的各种应用性能管理（APM，如 New Relic）工具，对工程师来说，比较经典易用的有：</p><ul><li><a href=\"https://link.zhihu.com/?target=http%3A//www.webpagetest.org/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">WebPageTest</a>，可以认为是网页性能分析工具中的 Vim 了，纯开源项目，在全球都有节点，分析思路基本与 Yahoo 性能黄金法则相贴合；</li><li><a href=\"https://link.zhihu.com/?target=https%3A//developers.google.com/web/tools/lighthouse/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">LightHouse</a>，已经集成在 Chrome 开发者工具中，能够从现代 WEB 应用比较重要的几个维度给出分析结果，比如加载速度、PWA、可用性、SEO 等，工具易用性、可得性都高于 WebPageTest，个人强烈建议；</li></ul><h2>网页性能该怎么衡量？</h2><p>要清晰、准确的衡量网页性能，我们先要定义页面性能，如何定义页面性能？</p><ol><li>从后端角度看，可以是<b>首字节时间</b>，即页面发起请求到浏览器收到第一个响应字节的时间，英文 Time to First Byte；</li><li>从浏览器角度看，可以是页面所依赖的全部静态资源加载完成所需要的时间，即常说的<b>完全加载时间</b>；</li><li>从用户角度看，可以是敲回车键开始到看到页面开始渲染的过程所需的时间，即常说的<b>首次渲染时间</b>，此概念还可以细分，比如 WebPageTest 和 LightHouse 都有的 FirstMeaningfulPaint；</li></ol><p>性能优化工作处在不同阶段，或者业务场景不同，上面不同定义视角的适用性是不同的，也有把上面 3 种衡量方法加权求和得到综合的性能指数。</p><p>要想真正开始做优化，需要搞清楚从发起请求到浏览器渲染页面并呈现给用户的过程中有哪些关键环节，好在现代浏览器提供的 <a href=\"https://link.zhihu.com/?target=https%3A//www.w3.org/TR/navigation-timing/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">Navigation Timing API</a> 已经把这个过程标准化，方便我们做性能指标的计算，如下图：</p><figure><noscript>&lt;img src=\"https://pic1.zhimg.com/v2-7e63b0174961f257d375e7f12ca790fe_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1473\" data-rawheight=\"879\" class=\"origin_image zh-lightbox-thumb\" width=\"1473\" data-original=\"https://pic1.zhimg.com/v2-7e63b0174961f257d375e7f12ca790fe_r.jpg\"&gt;</noscript><span><img data-reactroot=\"\" class=\"VagueImage origin_image zh-lightbox-thumb\" src=\"https://pic1.zhimg.com/80/v2-7e63b0174961f257d375e7f12ca790fe_hd.jpg\" style=\"width: 690px; height: 411.752px;\"><div class=\"VagueImage-mask is-active\"></div></div></span></figure><p>举例来说上面提到的首字节时间和完全加载时间可以用如下公式计算：</p><blockquote>首字节时间 = responseStart - navigationStart<br>  完全加载时间 = loadEventEnd - navigationStart</blockquote><p>至于首次渲染时间，准确的计算方式需要结合录屏，篇幅原因，这里不做展开。</p><h2>PressOne 首页性能 CaseStudy</h2><p>PressOne 是基于区块链的内容分发公链，而 <a href=\"https://link.zhihu.com/?target=https%3A//press.one\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\"><span class=\"invisible\">https://</span><span class=\"visible\">press.one</span><span class=\"invisible\"></span></a> 则是项目入口，目前功能还比较简单，主要包括账户创建、用户登录、三方账号绑定、用户主页、内容签名等功能。首页是任何网站的门户，确保其访问速度和体验的重要性不言而喻，而 press.one 给笔者的初体验除了新奇还包括慢，新用户加载页面平均需要 6s 以上，即使内容渲染之前有加载中提示，还是有明显的等待感。</p><p>虽然 press.one 是基于 angular 开发的单页应用，适用于传统页面的大部分性能优化方法同样适用，下面结合 LightHouse 对 press.one 首页做简单的性能分析，并列出行之有效的优化行动清单。</p><p>LightHouse 可以独立安装使用，也可以在 Google Chrome 中使用，因为集成到了开发者工具的 Audits 面板中，使用方法比较简单，建议直接阅读<a href=\"https://link.zhihu.com/?target=https%3A//developers.google.com/web/tools/lighthouse/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\" data-za-detail-view-id=\"1043\">文档</a>。</p><p>下面是使用 Google Chrome 做性能诊断的结果：</p><figure><noscript>&lt;img src=\"https://pic4.zhimg.com/v2-28c3d51fb1355ff0350d15ce1d89f6fd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"970\" data-rawheight=\"1315\" class=\"origin_image zh-lightbox-thumb\" width=\"970\" data-original=\"https://pic4.zhimg.com/v2-28c3d51fb1355ff0350d15ce1d89f6fd_r.jpg\"&gt;</noscript><span><img data-reactroot=\"\" class=\"VagueImage origin_image zh-lightbox-thumb\" src=\"https://pic4.zhimg.com/80/v2-28c3d51fb1355ff0350d15ce1d89f6fd_hd.jpg\" style=\"width: 690px; height: 935.412px;\"><div class=\"VagueImage-mask is-active\"></div></div></span></figure><p><b>百分制的性能指数结果是 18 分</b>，3G 网络下的完全可交互时间长达 20S，通常到 10S 用户基本都以为网站坏掉了，可见优化的空间是巨大的。</p><p>LightHouse 列出的优化手段（Opportunities）和可能的原因诊断（Diagnostics）都比较直观：</p><ul><li>Enable text compression，启用文本压缩，针对 JS、CSS 等静态资源是非常有效的优化手段，通常可节省 60% 以上，实施成本低，收益巨大，如果加上适当的缓存，可以对重复访问用户更加友好；</li><li>Reduce render-blocking stylesheets，减少阻塞渲染的样式，需要把首屏渲染的样式从整体样式中剥离出来优先加载，实施成本偏高，收益中等；</li><li>Unused CSS rules 是针对 CSS 文件的优化，减少传输实际上不需要的代码，我仔细拔了下代码，项目引入的 fontawesome 貌似确实没用到，实际上这个库却不小，实施成本小，收益中等；</li><li>Serve images in next-gen formats，使用更好的压缩算法压缩图片，实施成本低，收益大；</li><li>Proper size images，请求的图片和使用尺寸对应，避免缩放，造成浪费，实施成本低，收益看情况；</li></ul><p>如果上面的优化手段都落地实施，重新评估性能指数大概率可以达到<b>及格线</b>。</p><p>结合瀑布流分析，我们也不难发现更进一步的优化点，关键资源加载链条（Critical Request Chain）太长了，如下图：</p><figure><noscript>&lt;img src=\"https://pic3.zhimg.com/v2-f6e4cdfd99603683cde7219f85e2c4e4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"857\" data-rawheight=\"405\" class=\"origin_image zh-lightbox-thumb\" width=\"857\" data-original=\"https://pic3.zhimg.com/v2-f6e4cdfd99603683cde7219f85e2c4e4_r.jpg\"&gt;</noscript><span><img data-reactroot=\"\" class=\"VagueImage origin_image zh-lightbox-thumb\" src=\"https://pic3.zhimg.com/80/v2-f6e4cdfd99603683cde7219f85e2c4e4_hd.jpg\" style=\"width: 690px; height: 326.079px;\"><div class=\"VagueImage-mask is-active\"></div></div></span></figure><p>要开始首次渲染（对应如下瀑布流图右侧蓝色的竖线）除主文档外，我们还需要额外下载 5 个 JS 文件，1 个 CSS 文件：</p><figure><noscript>&lt;img src=\"https://pic2.zhimg.com/v2-752a846fbea83ffef1ce172f88649e10_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1278\" data-rawheight=\"564\" class=\"origin_image zh-lightbox-thumb\" width=\"1278\" data-original=\"https://pic2.zhimg.com/v2-752a846fbea83ffef1ce172f88649e10_r.jpg\"&gt;</noscript><span><img data-reactroot=\"\" class=\"VagueImage origin_image zh-lightbox-thumb\" src=\"https://pic2.zhimg.com/80/v2-752a846fbea83ffef1ce172f88649e10_hd.jpg\" style=\"width: 690px; height: 304.507px;\"><div class=\"VagueImage-mask is-active\"></div></div></span></figure><p>关键资源加载链条太长的问题怎么优化呢？</p><ul><li>合并资源请求，比如 elliptic 和 keythereum 的三方依赖可以直接合并，更激进的可以和 polyfill 也合并；</li><li>合理使用懒加载，首次渲染不需要的资源做适当的拆分，SPA 和传统页面都可以实现，不让非关键资源阻塞页面首次渲染；</li><li>合理使用 CDN，因为通常 CDN 是地理位置离用户更近的节点，可以大大节省网络传输的 RTT；</li></ul><p>关键资源加载链条的问题解决之后，重新评估的性能指数大概率能达到 80 分。</p><p>那么接下来呢？<b>理论上看起来性能优化是无止境的，实际上任何一个领域花 20% 的时间能达到 80% 的目的（比如把页面首次渲染时间降到 3s 以内），然后可以收手去解决更重要的问题</b>，当然时间允许的话，有追求的工程师会不断的问自己，这是我能做到的极致么？</p><p>继续往下优化则要从页面渲染的角度去考虑，毕竟我们已经尽可能快的把渲染页面所需的各种资源交给了浏览器，怎么让它更快、更流畅的渲染出可交互的页面是接下来需要重点考虑的。而渲染速度跟 DOM 节点的组织、JS 的组织、JS 和 DOM 交互的优化都有关系，篇幅原因，可以单独写文章介绍。</p><p>以上，希望对你有用。</p>', '> 通常来说，工程师熟悉某个系统会只要搞清楚其数据结构和数据流转过程基本足够了，但从商业的角度来看，前后端工程师都应该关注的另一个重要维度是系统性能，纯技术角度来看性能可以认为是系统的响应速度（实际上还可以认为是执行效率等），而从用户角度来看性能就是使用体验。\n\n网页性能为什么重要？\n----------\n\n页面性能差的直接后果是用户需要等待，而等待，尤其是不确定要多长时间的等待会给用户带来焦虑，为了尽早的结束这种焦虑，除非访问网页是刚需，用户通常会选择直接关闭页面。从实际数据来看，性能差是页面高跳出率的重要原因之一。\n\n为了搞清楚页面性能对业务目标的影响，诸如 Yahoo、Google、Amazon 等科技公司都投入了不少资源去研究和优化，比如下面是 ThinkWithGoogle 运用神经网络分析 2017 年 1100 万广告落地页[加载速度和页面跳出率关系所得到的结论](https://link.zhihu.com/?target=https%3A//www.thinkwithgoogle.com/marketing-resources/data-measurement/mobile-page-speed-new-industry-benchmarks/)：\n\n&lt;img src=\"https://pic1.zhimg.com/v2-08bdccd75c9ce75b9962d2854fe54632\\_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"865\" data-rawheight=\"590\" class=\"origin\\_image zh-lightbox-thumb\" width=\"865\" data-original=\"https://pic1.zhimg.com/v2-08bdccd75c9ce75b9962d2854fe54632_r.jpg\"&gt;\n\n![](https://pic1.zhimg.com/80/v2-08bdccd75c9ce75b9962d2854fe54632_hd.jpg)\n\n结论显而易见：**越快越好，少即是多**。\n\n实际上，最近几年来大型互联网公司在页面性能优化研发中产出了不少工具和文档，方便工程师给网站做性能分析和优化。\n\n其中文档方面比较经典的当属三本书：\n\n*   [High Performance Websites](https://link.zhihu.com/?target=http%3A//shop.oreilly.com/product/9780596529307.do)，早期在 Yahoo 性能团队工作的 Steve Souders 所著；\n*   [Even Faster Websites](https://link.zhihu.com/?target=https%3A//www.amazon.com/Even-Faster-Web-Sites-Performance/dp/0596522304)，同上，在上册的基础上，列出了很多行之有效的细节优化手段；\n*   [High Performance Browser Networks](https://link.zhihu.com/?target=https%3A//hpbn.co/)，Google 性能工程师 Ilya Grigorik 所著，可以免费在线阅读，当然如果想支持读者，可以选择购买；\n\n而工具则非常多，尤其是 2015 年开始爆发的各种应用性能管理（APM，如 New Relic）工具，对工程师来说，比较经典易用的有：\n\n*   [WebPageTest](https://link.zhihu.com/?target=http%3A//www.webpagetest.org/)，可以认为是网页性能分析工具中的 Vim 了，纯开源项目，在全球都有节点，分析思路基本与 Yahoo 性能黄金法则相贴合；\n*   [LightHouse](https://link.zhihu.com/?target=https%3A//developers.google.com/web/tools/lighthouse/)，已经集成在 Chrome 开发者工具中，能够从现代 WEB 应用比较重要的几个维度给出分析结果，比如加载速度、PWA、可用性、SEO 等，工具易用性、可得性都高于 WebPageTest，个人强烈建议；\n\n网页性能该怎么衡量？\n----------\n\n要清晰、准确的衡量网页性能，我们先要定义页面性能，如何定义页面性能？\n\n1.  从后端角度看，可以是**首字节时间**，即页面发起请求到浏览器收到第一个响应字节的时间，英文 Time to First Byte；\n2.  从浏览器角度看，可以是页面所依赖的全部静态资源加载完成所需要的时间，即常说的**完全加载时间**；\n3.  从用户角度看，可以是敲回车键开始到看到页面开始渲染的过程所需的时间，即常说的**首次渲染时间**，此概念还可以细分，比如 WebPageTest 和 LightHouse 都有的 FirstMeaningfulPaint；\n\n性能优化工作处在不同阶段，或者业务场景不同，上面不同定义视角的适用性是不同的，也有把上面 3 种衡量方法加权求和得到综合的性能指数。\n\n要想真正开始做优化，需要搞清楚从发起请求到浏览器渲染页面并呈现给用户的过程中有哪些关键环节，好在现代浏览器提供的 [Navigation Timing API](https://link.zhihu.com/?target=https%3A//www.w3.org/TR/navigation-timing/) 已经把这个过程标准化，方便我们做性能指标的计算，如下图：\n\n&lt;img src=\"https://pic1.zhimg.com/v2-7e63b0174961f257d375e7f12ca790fe\\_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1473\" data-rawheight=\"879\" class=\"origin\\_image zh-lightbox-thumb\" width=\"1473\" data-original=\"https://pic1.zhimg.com/v2-7e63b0174961f257d375e7f12ca790fe_r.jpg\"&gt;\n\n![](https://pic1.zhimg.com/80/v2-7e63b0174961f257d375e7f12ca790fe_hd.jpg)\n\n举例来说上面提到的首字节时间和完全加载时间可以用如下公式计算：\n\n> 首字节时间 = responseStart - navigationStart  \n> 完全加载时间 = loadEventEnd - navigationStart\n\n至于首次渲染时间，准确的计算方式需要结合录屏，篇幅原因，这里不做展开。\n\nPressOne 首页性能 CaseStudy\n-----------------------\n\nPressOne 是基于区块链的内容分发公链，而 [https://press.one](https://link.zhihu.com/?target=https%3A//press.one) 则是项目入口，目前功能还比较简单，主要包括账户创建、用户登录、三方账号绑定、用户主页、内容签名等功能。首页是任何网站的门户，确保其访问速度和体验的重要性不言而喻，而 press.one 给笔者的初体验除了新奇还包括慢，新用户加载页面平均需要 6s 以上，即使内容渲染之前有加载中提示，还是有明显的等待感。\n\n虽然 press.one 是基于 angular 开发的单页应用，适用于传统页面的大部分性能优化方法同样适用，下面结合 LightHouse 对 press.one 首页做简单的性能分析，并列出行之有效的优化行动清单。\n\nLightHouse 可以独立安装使用，也可以在 Google Chrome 中使用，因为集成到了开发者工具的 Audits 面板中，使用方法比较简单，建议直接阅读[文档](https://link.zhihu.com/?target=https%3A//developers.google.com/web/tools/lighthouse/)。\n\n下面是使用 Google Chrome 做性能诊断的结果：\n\n&lt;img src=\"https://pic4.zhimg.com/v2-28c3d51fb1355ff0350d15ce1d89f6fd\\_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"970\" data-rawheight=\"1315\" class=\"origin\\_image zh-lightbox-thumb\" width=\"970\" data-original=\"https://pic4.zhimg.com/v2-28c3d51fb1355ff0350d15ce1d89f6fd_r.jpg\"&gt;\n\n![](https://pic4.zhimg.com/80/v2-28c3d51fb1355ff0350d15ce1d89f6fd_hd.jpg)\n\n**百分制的性能指数结果是 18 分**，3G 网络下的完全可交互时间长达 20S，通常到 10S 用户基本都以为网站坏掉了，可见优化的空间是巨大的。\n\nLightHouse 列出的优化手段（Opportunities）和可能的原因诊断（Diagnostics）都比较直观：\n\n*   Enable text compression，启用文本压缩，针对 JS、CSS 等静态资源是非常有效的优化手段，通常可节省 60% 以上，实施成本低，收益巨大，如果加上适当的缓存，可以对重复访问用户更加友好；\n*   Reduce render-blocking stylesheets，减少阻塞渲染的样式，需要把首屏渲染的样式从整体样式中剥离出来优先加载，实施成本偏高，收益中等；\n*   Unused CSS rules 是针对 CSS 文件的优化，减少传输实际上不需要的代码，我仔细拔了下代码，项目引入的 fontawesome 貌似确实没用到，实际上这个库却不小，实施成本小，收益中等；\n*   Serve images in next-gen formats，使用更好的压缩算法压缩图片，实施成本低，收益大；\n*   Proper size images，请求的图片和使用尺寸对应，避免缩放，造成浪费，实施成本低，收益看情况；\n\n如果上面的优化手段都落地实施，重新评估性能指数大概率可以达到**及格线**。\n\n结合瀑布流分析，我们也不难发现更进一步的优化点，关键资源加载链条（Critical Request Chain）太长了，如下图：\n\n&lt;img src=\"https://pic3.zhimg.com/v2-f6e4cdfd99603683cde7219f85e2c4e4\\_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"857\" data-rawheight=\"405\" class=\"origin\\_image zh-lightbox-thumb\" width=\"857\" data-original=\"https://pic3.zhimg.com/v2-f6e4cdfd99603683cde7219f85e2c4e4_r.jpg\"&gt;\n\n![](https://pic3.zhimg.com/80/v2-f6e4cdfd99603683cde7219f85e2c4e4_hd.jpg)\n\n要开始首次渲染（对应如下瀑布流图右侧蓝色的竖线）除主文档外，我们还需要额外下载 5 个 JS 文件，1 个 CSS 文件：\n\n&lt;img src=\"https://pic2.zhimg.com/v2-752a846fbea83ffef1ce172f88649e10\\_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1278\" data-rawheight=\"564\" class=\"origin\\_image zh-lightbox-thumb\" width=\"1278\" data-original=\"https://pic2.zhimg.com/v2-752a846fbea83ffef1ce172f88649e10_r.jpg\"&gt;\n\n![](https://pic2.zhimg.com/80/v2-752a846fbea83ffef1ce172f88649e10_hd.jpg)\n\n关键资源加载链条太长的问题怎么优化呢？\n\n*   合并资源请求，比如 elliptic 和 keythereum 的三方依赖可以直接合并，更激进的可以和 polyfill 也合并；\n*   合理使用懒加载，首次渲染不需要的资源做适当的拆分，SPA 和传统页面都可以实现，不让非关键资源阻塞页面首次渲染；\n*   合理使用 CDN，因为通常 CDN 是地理位置离用户更近的节点，可以大大节省网络传输的 RTT；\n\n关键资源加载链条的问题解决之后，重新评估的性能指数大概率能达到 80 分。\n\n那么接下来呢？**理论上看起来性能优化是无止境的，实际上任何一个领域花 20% 的时间能达到 80% 的目的（比如把页面首次渲染时间降到 3s 以内），然后可以收手去解决更重要的问题**，当然时间允许的话，有追求的工程师会不断的问自己，这是我能做到的极致么？\n\n继续往下优化则要从页面渲染的角度去考虑，毕竟我们已经尽可能快的把渲染页面所需的各种资源交给了浏览器，怎么让它更快、更流畅的渲染出可交互的页面是接下来需要重点考虑的。而渲染速度跟 DOM 节点的组织、JS 的组织、JS 和 DOM 交互的优化都有关系，篇幅原因，可以单独写文章介绍。\n\n以上，希望对你有用。', 0, 1, 0),
(5, '2018-04-23 11:01:40.443916', '2018-04-23 11:01:40.443916', '饿了么快应用初体验', '作者：饿了么顾诚为什么我们选择了快应用在很长一段时间里，原生饿了么应用对于新用户来说体验成本略高，对于迫切想要点餐的老用户操作有点繁琐；而Web版的饿了么应用在体验、速度、功能支持上都无法达到原生应用的水平，因此迫切需要一个功能上足够支撑饿了么服务体验、体验上足够轻量化的平台，而快应用恰好满足了我们的需求。因为由厂商（小米等）直接引导、推广，在系统平台上拥有足够的支持，各类系统接口、服务完善，也可以轻松实现和原生应用一样的功能逻辑。轻量化、免安装的模式使得不管是新用户想要体验，还是老用户想要快速点餐，都可', '', 'https://juejin.im/post/5ab119ef51882555712c3372', '<p>作者：饿了么 顾诚</p>\n<h3 class=\"heading\" data-id=\"heading-0\">为什么我们选择了快应用</h3>\n<p>在很长一段时间里，原生饿了么应用对于新用户来说体验成本略高，对于迫切想要点餐的老用户操作有点繁琐；而 Web 版的饿了么应用在体验、速度、功能支持上都无法达到原生应用的水平，因此迫切需要一个功能上足够支撑饿了么服务体验、体验上足够轻量化的平台，而快应用恰好满足了我们的需求。</p>\n<ol>\n<li>因为由厂商（小米等）直接引导、推广，在系统平台上拥有足够的支持，各类系统接口、服务完善， 也可以轻松实现和原生应用一样的功能逻辑。</li>\n<li>轻量化、免安装的模式使得不管是新用户想要体验，还是老用户想要快速点餐，都可以在很短的时间内，以极低的成本快速点餐。</li>\n<li>与厂商系统平台的紧密结合使得新应用成为原生应用、Web 应用之外一个有效、可靠的流量渠道。</li>\n</ol>\n<h3 class=\"heading\" data-id=\"heading-1\">新应用对比原生应用、Web 应用</h3>\n<p>新应用在开发的角度来说，开发过程更接近于 Web 应用，然而从应用架构设计上，应该更接近于原生应用。</p>\n<ol>\n<li>\n<p>开发过程\n新应用选择了类 Vue/Weex 的技术体系，因此熟悉这一块技术的开发人员可以非常轻松的进入开发状态，语法简单清晰，系统接口完备、功能明确，并且整个服务平台对应用内部架构也非常宽容，可以最大程度按照开发者自己的思路来实现。\n以饿了么应用为例，在开发饿了么新应用应用的过程中，很多逻辑都直接复用了原先 Web 应用（基于 Vue 的体系）的逻辑、代码，迁移、改造过程非常平滑，甚至部分组件直接有原先的 Vue 组件转换而来，开发体验非常好。\n而在接入各项系统服务的过程中，最需要的数据存储、地理位置、网络服务、消息提醒以及支付等服务、接口都非常完备，并且对接非常简单，接口设计符合 Web 开发人员认知，对接过程基本没有遇到阻碍。\n基于以上因素，对于一名 Web 开发人员，完成一个新应用的应用开发，是非常轻松、高效的过程。</p>\n</li>\n<li>\n<p>应用设计\n前面提到，新应用在应用架构设计上，更加接近于原生应用，这是非常有趣的一点，也要求开发人员主动去思考。</p>\n</li>\n<li>\n<p>系统层面，有效利用快应用平台的各项系统功能、接口。\n如利用数据存储实现应用的初始化加速、用户信息缓存，节约用户时间成本。\n利用地理位置服务实现更加精确的用户定位。</p>\n</li>\n<li>\n<p>组件层面，按照原生应用的设计形式实现组件视图层、逻辑层。\n虽然继承了了类 Vue 形式的模板，但是实际在视图层布局上，也应当有正确的布局思路。\n以服务提供的 <code>stack</code> 组件为例，对于普通 Web 开发者来说，可能很难有层的概念，例如浮动导航栏，在 Web 开发中我们习惯于使用 <code>fixed</code>, <code>sticky</code> 这样的全局定位属性来实现，在非必要情况下，对于 zIndex 这样的属性，很难意识到各个 Web 组件之间的层级关系。而在快应用中，stack 用来实现类似的布局，其实就是要求组件层级的合理利用。\n同样的还有长列表组件 <code>List</code>，在长列表场景下，优先考虑使用 List 组件实现，能够获得更好的性能和体验。\n另外在实现视图、逻辑的过程中，更多地按照原生应用的形式去考量，使得用户体验更加接近于原生应用也是非常重要的。</p>\n</li>\n</ol>\n<h3 class=\"heading\" data-id=\"heading-2\">问题举例</h3>\n<p>在开发快应用的过程中，也遇到过一些问题，这里列举几个。</p>\n<ol>\n<li>\n<p>遮罩层的实现\n在弹窗等场景，需要实现一个遮罩层，而我们尝试了绝对定位、stack 层叠等几种形式，遇到了包括部分机型样式异常（绝对定位）、层叠关系异常（stack）等等问题。</p>\n</li>\n<li>\n<p>系统服务调用的统一管理\n针对定位、网络等常见系统调用，为了兼顾开发的高效和实际业务逻辑的适配，对接口调用做了一定封装，在完善封装的过程中，也遇到了如错误信息的处理、不同组件调用数据的共享等等问题。</p>\n</li>\n<li>\n<p>storage 与 <code>$app</code> 的取舍\n在记录用户使用状态的过程中，一些需要全局共享的信息，我们也遇到了存储到数据系统还是挂载到 <code>$app</code> 对象上的抉择。存储到数据系统更加可靠，同时可以离线，不受用户和应用状态的影响，缺点是不够灵活；而挂载到 <code>$app</code> 对象上，天生与应用生命周期捆绑，对于只在本次生命周期内共享的数据显然更加适合，并且结合生命周期的各阶段钩子，也可以随时存储到数据系统，更加灵活。</p>\n</li>\n</ol>\n<h3 class=\"heading\" data-id=\"heading-3\">小结</h3>\n<p>总体而言，经过多次版本迭代之后，个人认为快应用是一个非常优秀的原生应用、Web 应用之外的选择，兼顾了原生应用的高性能、良好体验和 Web 应用的轻量化、低成本。</p>\n', '作者：饿了么 顾诚\n\n### 为什么我们选择了快应用\n\n在很长一段时间里，原生饿了么应用对于新用户来说体验成本略高，对于迫切想要点餐的老用户操作有点繁琐；而 Web 版的饿了么应用在体验、速度、功能支持上都无法达到原生应用的水平，因此迫切需要一个功能上足够支撑饿了么服务体验、体验上足够轻量化的平台，而快应用恰好满足了我们的需求。\n\n1.  因为由厂商（小米等）直接引导、推广，在系统平台上拥有足够的支持，各类系统接口、服务完善， 也可以轻松实现和原生应用一样的功能逻辑。\n2.  轻量化、免安装的模式使得不管是新用户想要体验，还是老用户想要快速点餐，都可以在很短的时间内，以极低的成本快速点餐。\n3.  与厂商系统平台的紧密结合使得新应用成为原生应用、Web 应用之外一个有效、可靠的流量渠道。\n\n### 新应用对比原生应用、Web 应用\n\n新应用在开发的角度来说，开发过程更接近于 Web 应用，然而从应用架构设计上，应该更接近于原生应用。\n\n1.  开发过程 新应用选择了类 Vue/Weex 的技术体系，因此熟悉这一块技术的开发人员可以非常轻松的进入开发状态，语法简单清晰，系统接口完备、功能明确，并且整个服务平台对应用内部架构也非常宽容，可以最大程度按照开发者自己的思路来实现。 以饿了么应用为例，在开发饿了么新应用应用的过程中，很多逻辑都直接复用了原先 Web 应用（基于 Vue 的体系）的逻辑、代码，迁移、改造过程非常平滑，甚至部分组件直接有原先的 Vue 组件转换而来，开发体验非常好。 而在接入各项系统服务的过程中，最需要的数据存储、地理位置、网络服务、消息提醒以及支付等服务、接口都非常完备，并且对接非常简单，接口设计符合 Web 开发人员认知，对接过程基本没有遇到阻碍。 基于以上因素，对于一名 Web 开发人员，完成一个新应用的应用开发，是非常轻松、高效的过程。\n    \n2.  应用设计 前面提到，新应用在应用架构设计上，更加接近于原生应用，这是非常有趣的一点，也要求开发人员主动去思考。\n    \n3.  系统层面，有效利用快应用平台的各项系统功能、接口。 如利用数据存储实现应用的初始化加速、用户信息缓存，节约用户时间成本。 利用地理位置服务实现更加精确的用户定位。\n    \n4.  组件层面，按照原生应用的设计形式实现组件视图层、逻辑层。 虽然继承了了类 Vue 形式的模板，但是实际在视图层布局上，也应当有正确的布局思路。 以服务提供的 `stack` 组件为例，对于普通 Web 开发者来说，可能很难有层的概念，例如浮动导航栏，在 Web 开发中我们习惯于使用 `fixed`, `sticky` 这样的全局定位属性来实现，在非必要情况下，对于 zIndex 这样的属性，很难意识到各个 Web 组件之间的层级关系。而在快应用中，stack 用来实现类似的布局，其实就是要求组件层级的合理利用。 同样的还有长列表组件 `List`，在长列表场景下，优先考虑使用 List 组件实现，能够获得更好的性能和体验。 另外在实现视图、逻辑的过程中，更多地按照原生应用的形式去考量，使得用户体验更加接近于原生应用也是非常重要的。\n    \n\n### 问题举例\n\n在开发快应用的过程中，也遇到过一些问题，这里列举几个。\n\n1.  遮罩层的实现 在弹窗等场景，需要实现一个遮罩层，而我们尝试了绝对定位、stack 层叠等几种形式，遇到了包括部分机型样式异常（绝对定位）、层叠关系异常（stack）等等问题。\n    \n2.  系统服务调用的统一管理 针对定位、网络等常见系统调用，为了兼顾开发的高效和实际业务逻辑的适配，对接口调用做了一定封装，在完善封装的过程中，也遇到了如错误信息的处理、不同组件调用数据的共享等等问题。\n    \n3.  storage 与 `$app` 的取舍 在记录用户使用状态的过程中，一些需要全局共享的信息，我们也遇到了存储到数据系统还是挂载到 `$app` 对象上的抉择。存储到数据系统更加可靠，同时可以离线，不受用户和应用状态的影响，缺点是不够灵活；而挂载到 `$app` 对象上，天生与应用生命周期捆绑，对于只在本次生命周期内共享的数据显然更加适合，并且结合生命周期的各阶段钩子，也可以随时存储到数据系统，更加灵活。\n    \n\n### 小结\n\n总体而言，经过多次版本迭代之后，个人认为快应用是一个非常优秀的原生应用、Web 应用之外的选择，兼顾了原生应用的高性能、良好体验和 Web 应用的轻量化、低成本。', 0, 1, 0);
INSERT INTO `post` (`id`, `createAt`, `updateAt`, `title`, `description`, `thumb`, `url`, `html`, `markdown`, `views`, `status`, `push`) VALUES
(6, '2018-04-23 11:01:40.635367', '2018-04-23 11:01:40.635367', '为什么小米、OV 等 9 大手机厂商发起「快应用」项目？会对微信小程序以及  App 生态有何影响？ - 知乎用户标识', '', '', 'https://www.zhihu.com/question/268663484', '<!DOCTYPE html><html lang=\"zh\" data-hairline=\"true\" data-theme=\"light\"><head><meta charset=\"utf-8\"><title data-react-helmet=\"true\">为什么小米、OV 等 9 大手机厂商发起「快应用」项目？会对微信小程序以及  App 生态有何影响？ - 知乎</title><meta name=\"viewport\" content=\"width=device-width,initial-scale=1,maximum-scale=1\"><meta name=\"renderer\" content=\"webkit\"><meta name=\"force-rendering\" content=\"webkit\"><meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\"><meta name=\"google-site-verification\" content=\"FTeR0c8arOPKh8c5DYh_9uu98_zJbaWw53J-Sch9MTg\"><meta data-react-helmet=\"true\" name=\"apple-itunes-app\" content=\"app-id=432274380, app-argument=zhihu://questions/268663484\"><link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"https://static.zhihu.com/static/favicon.ico\"><link rel=\"dns-prefetch\" href=\"//static.zhimg.com\"><link rel=\"dns-prefetch\" href=\"//pic1.zhimg.com\"><link rel=\"dns-prefetch\" href=\"//pic2.zhimg.com\"><link rel=\"dns-prefetch\" href=\"//pic3.zhimg.com\"><link rel=\"dns-prefetch\" href=\"//pic4.zhimg.com\"><link href=\"https://static.zhihu.com/heifetz/main.app.12690db8b52f7999278d.css\" rel=\"stylesheet\"></head><body class=\"Entry-body Body--isAppleDevice\"><div id=\"root\"><div data-zop-usertoken=\"{}\" data-reactroot=\"\" data-reactid=\"1\" data-react-checksum=\"-1000220753\"><!-- react-empty: 2 --><div class=\"LoadingBar\" data-reactid=\"3\"></div><!-- react-empty: 4 --><div data-reactid=\"5\"><header role=\"banner\" class=\"Sticky AppHeader\" data-za-module=\"TopNavBar\" data-reactid=\"6\"><!-- react-empty: 7 --><div class=\"AppHeader-inner\" data-reactid=\"8\"><a href=\"//www.zhihu.com\" aria-label=\"知乎\" data-reactid=\"9\"><svg viewBox=\"0 0 200 91\" class=\"Icon ZhihuLogo Icon--logo\" style=\"height:30px;width:64px;\" width=\"64\" height=\"30\" aria-hidden=\"true\" data-reactid=\"10\"><title data-reactid=\"11\"/><g data-reactid=\"12\"><path d=\"M53.29 80.035l7.32.002 2.41 8.24 13.128-8.24h15.477v-67.98H53.29v67.978zm7.79-60.598h22.756v53.22h-8.73l-8.718 5.473-1.587-5.46-3.72-.012v-53.22zM46.818 43.162h-16.35c.545-8.467.687-16.12.687-22.955h15.987s.615-7.05-2.68-6.97H16.807c1.09-4.1 2.46-8.332 4.1-12.708 0 0-7.523 0-10.085 6.74-1.06 2.78-4.128 13.48-9.592 24.41 1.84-.2 7.927-.37 11.512-6.94.66-1.84.785-2.08 1.605-4.54h9.02c0 3.28-.374 20.9-.526 22.95H6.51c-3.67 0-4.863 7.38-4.863 7.38H22.14C20.765 66.11 13.385 79.24 0 89.62c6.403 1.828 12.784-.29 15.937-3.094 0 0 7.182-6.53 11.12-21.64L43.92 85.18s2.473-8.402-.388-12.496c-2.37-2.788-8.768-10.33-11.496-13.064l-4.57 3.627c1.363-4.368 2.183-8.61 2.46-12.71H49.19s-.027-7.38-2.372-7.38zm128.752-.502c6.51-8.013 14.054-18.302 14.054-18.302s-5.827-4.625-8.556-1.27c-1.874 2.548-11.51 15.063-11.51 15.063l6.012 4.51zm-46.903-18.462c-2.814-2.577-8.096.667-8.096.667s12.35 17.2 12.85 17.953l6.08-4.29s-8.02-11.752-10.83-14.33zM199.99 46.5c-6.18 0-40.908.292-40.953.292v-31.56c1.503 0 3.882-.124 7.14-.376 12.773-.753 21.914-1.25 27.427-1.504 0 0 3.817-8.496-.185-10.45-.96-.37-7.24 1.43-7.24 1.43s-51.63 5.153-72.61 5.64c.5 2.756 2.38 5.336 4.93 6.11 4.16 1.087 7.09.53 15.36.277 7.76-.5 13.65-.76 17.66-.76v31.19h-41.71s.88 6.97 7.97 7.14h33.73v22.16c0 4.364-3.498 6.87-7.65 6.6-4.4.034-8.15-.36-13.027-.566.623 1.24 1.977 4.496 6.035 6.824 3.087 1.502 5.054 2.053 8.13 2.053 9.237 0 14.27-5.4 14.027-14.16V53.93h38.235c3.026 0 2.72-7.432 2.72-7.432z\" fill-rule=\"evenodd\"/></g></svg></a><nav role=\"navigation\" class=\"AppHeader-nav\" data-reactid=\"13\"><a class=\"AppHeader-navItem\" href=\"//www.zhihu.com/\" data-reactid=\"14\">首页</a><a class=\"AppHeader-navItem\" href=\"//www.zhihu.com/explore\" data-reactid=\"15\">发现</a><a href=\"//www.zhihu.com/topic\" class=\"AppHeader-navItem\" data-reactid=\"16\">话题</a></nav><div class=\"SearchBar\" role=\"search\" data-reactid=\"17\"><div class=\"SearchBar-toolWrapper\" data-reactid=\"18\"><form class=\"SearchBar-tool\" data-reactid=\"19\"><div data-reactid=\"20\"><div class=\"Popover\" data-reactid=\"21\"><div class=\"SearchBar-input Input-wrapper Input-wrapper--grey\" data-reactid=\"22\"><input type=\"text\" maxlength=\"100\" value=\"\" autocomplete=\"off\" role=\"combobox\" aria-expanded=\"false\" aria-autocomplete=\"list\" aria-activedescendant=\"null--1\" id=\"null-toggle\" aria-haspopup=\"true\" aria-owns=\"null-content\" class=\"Input\" placeholder=\"搜索你感兴趣的内容…\" data-reactid=\"23\"><div class=\"Input-after\" data-reactid=\"24\"><button class=\"Button SearchBar-searchIcon Button--primary\" aria-label=\"搜索\" type=\"button\" data-reactid=\"25\"><svg viewBox=\"0 0 16 16\" class=\"Icon Icon--search\" style=\"height:16px;width:16px;\" width=\"16\" height=\"16\" aria-hidden=\"true\" data-reactid=\"26\"><title data-reactid=\"27\"/><g data-reactid=\"28\"><path d=\"M12.054 10.864c.887-1.14 1.42-2.57 1.42-4.127C13.474 3.017 10.457 0 6.737 0S0 3.016 0 6.737c0 3.72 3.016 6.737 6.737 6.737 1.556 0 2.985-.533 4.127-1.42l3.103 3.104c.765.46 1.705-.37 1.19-1.19l-3.103-3.104zm-5.317.925c-2.786 0-5.053-2.267-5.053-5.053S3.95 1.684 6.737 1.684 11.79 3.95 11.79 6.737 9.522 11.79 6.736 11.79z\"/></g></svg></button></div></div><!-- react-empty: 29 --></div></div></form></div></div><div class=\"AppHeader-userInfo\" data-reactid=\"30\"><!-- react-empty: 31 --><div class=\"AppHeader-profile\" data-reactid=\"32\"><div data-reactid=\"33\"><button class=\"Button AppHeader-login Button--blue\" type=\"button\" data-reactid=\"34\"><!-- react-text: 35 -->登录<!-- /react-text --></button><button class=\"Button Button--primary Button--blue\" type=\"button\" data-reactid=\"36\"><!-- react-text: 37 -->加入知乎<!-- /react-text --></button></div></div></div></div><!-- react-empty: 38 --></header></div><!-- react-empty: 39 --><main role=\"main\" class=\"App-main\" data-reactid=\"40\"><div class=\"QuestionPage\" itemscope=\"\" itemtype=\"http://schema.org/Question\" data-reactid=\"41\"><!-- react-empty: 42 --><meta itemprop=\"name\" content=\"为什么小米、OV 等 9 大手机厂商发起「快应用」项目？会对微信小程序以及  App 生态有何影响？\" data-reactid=\"43\"><meta itemprop=\"url\" content=\"https://www.zhihu.com/question/268663484\" data-reactid=\"44\"><meta itemprop=\"keywords\" content=\"小米科技,魅族科技,微信,华为,微信小程序\" data-reactid=\"45\"><meta itemprop=\"answerCount\" content=\"111\" data-reactid=\"46\"><meta itemprop=\"commentCount\" content=\"9\" data-reactid=\"47\"><meta itemprop=\"dateCreated\" content=\"2018-03-12T15:09:45.000Z\" data-reactid=\"48\"><meta itemprop=\"dateModified\" content=\"2018-03-16T07:38:25.000Z\" data-reactid=\"49\"><meta itemprop=\"zhihu:visitsCount\" data-reactid=\"50\"><meta itemprop=\"zhihu:followerCount\" content=\"1728\" data-reactid=\"51\"><div data-zop-question=\"{\"title\":\"为什么小米、OV 等 9 大手机厂商发起「快应用」项目？会对微信小程序以及  App 生态有何影响？\",\"topics\":[{\"name\":\"小米科技\",\"id\":\"19552883\"},{\"name\":\"魅族科技\",\"id\":\"19552917\"},{\"name\":\"微信\",\"id\":\"19554470\"},{\"name\":\"华为\",\"id\":\"19565956\"},{\"name\":\"微信小程序\",\"id\":\"20061410\"}],\"id\":268663484,\"isEditable\":false}\" data-reactid=\"52\"><!-- react-empty: 53 --><div class=\"QuestionHeader\" data-reactid=\"54\"><div class=\"QuestionHeader-content\" data-reactid=\"55\"><div class=\"QuestionHeader-main\" data-reactid=\"56\"><div class=\"QuestionHeader-tags\" data-reactid=\"57\"><div class=\"QuestionHeader-topics\" data-reactid=\"58\"><div class=\"Tag QuestionTopic\" data-reactid=\"59\"><span class=\"Tag-content\" data-reactid=\"60\"><a class=\"TopicLink\" href=\"//www.zhihu.com/topic/19552883\" target=\"_blank\" data-reactid=\"61\"><div class=\"Popover\" data-reactid=\"62\"><div id=\"null-toggle\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-owns=\"null-content\" data-reactid=\"63\">小米科技</div><!-- react-empty: 64 --></div></a></span></div><div class=\"Tag QuestionTopic\" data-reactid=\"65\"><span class=\"Tag-content\" data-reactid=\"66\"><a class=\"TopicLink\" href=\"//www.zhihu.com/topic/19552917\" target=\"_blank\" data-reactid=\"67\"><div class=\"Popover\" data-reactid=\"68\"><div id=\"null-toggle\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-owns=\"null-content\" data-reactid=\"69\">魅族科技</div><!-- react-empty: 70 --></div></a></span></div><div class=\"Tag QuestionTopic\" data-reactid=\"71\"><span class=\"Tag-content\" data-reactid=\"72\"><a class=\"TopicLink\" href=\"//www.zhihu.com/topic/19554470\" target=\"_blank\" data-reactid=\"73\"><div class=\"Popover\" data-reactid=\"74\"><div id=\"null-toggle\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-owns=\"null-content\" data-reactid=\"75\">微信</div><!-- react-empty: 76 --></div></a></span></div><div class=\"Tag QuestionTopic\" data-reactid=\"77\"><span class=\"Tag-content\" data-reactid=\"78\"><a class=\"TopicLink\" href=\"//www.zhihu.com/topic/19565956\" target=\"_blank\" data-reactid=\"79\"><div class=\"Popover\" data-reactid=\"80\"><div id=\"null-toggle\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-owns=\"null-content\" data-reactid=\"81\">华为</div><!-- react-empty: 82 --></div></a></span></div><div class=\"Tag QuestionTopic\" data-reactid=\"83\"><span class=\"Tag-content\" data-reactid=\"84\"><a class=\"TopicLink\" href=\"//www.zhihu.com/topic/20061410\" target=\"_blank\" data-reactid=\"85\"><div class=\"Popover\" data-reactid=\"86\"><div id=\"null-toggle\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-owns=\"null-content\" data-reactid=\"87\">微信小程序</div><!-- react-empty: 88 --></div></a></span></div></div></div><h1 class=\"QuestionHeader-title\" data-reactid=\"89\"><!-- react-text: 90 -->为什么小米、OV 等 9 大手机厂商发起「快应用」项目？会对微信小程序以及  App 生态有何影响？<!-- /react-text --></h1><!-- react-empty: 91 --><div data-reactid=\"92\"><!-- react-text: 93 --><!-- /react-text --><div class=\"QuestionHeader-detail\" data-reactid=\"94\"><div class=\"QuestionRichText QuestionRichText--expandable QuestionRichText--collapsed\" data-reactid=\"95\"><div data-reactid=\"96\"><span class=\"RichText\" itemprop=\"text\" data-reactid=\"97\">1. 九大厂商联合推动这个项目意义何在？ 2. 快应用对微信小程序是否会造成影响？ 3. 快应用对APP应用生态是否有更大影响？快应用标准是由主流智能手机厂商发起，在相关行业协会指导监督下，共同推出的硬件新生态标准。旨在赋能开发者拓展场景未来，以标准化的方式接入，促进新生态发展。快应用是基于硬件厂商OS的新型生态，用户即点即用，打破传统流失转化瓶颈，与手机系统深度整合，达到用户需求与场景完美融合，并促使开发者一…</span><button class=\"Button QuestionRichText-more Button--plain\" type=\"button\" data-reactid=\"98\"><!-- react-text: 99 -->显示全部<!-- /react-text --><svg viewBox=\"0 0 10 6\" class=\"Icon QuestionRichText-more-icon Icon--arrow\" style=\"height:16px;width:10px;\" width=\"10\" height=\"16\" aria-hidden=\"true\" data-reactid=\"100\"><title data-reactid=\"101\"/><g data-reactid=\"102\"><path d=\"M8.716.217L5.002 4 1.285.218C.99-.072.514-.072.22.218c-.294.29-.294.76 0 1.052l4.25 4.512c.292.29.77.29 1.063 0L9.78 1.27c.293-.29.293-.76 0-1.052-.295-.29-.77-.29-1.063 0z\"/></g></svg></button></div></div></div></div></div><div class=\"QuestionHeader-side\" data-reactid=\"103\"><div class=\"QuestionHeader-follow-status\" data-reactid=\"104\"><div class=\"QuestionFollowStatus\" data-reactid=\"105\"><div class=\"NumberBoard QuestionFollowStatus-counts NumberBoard--divider\" data-reactid=\"106\"><div class=\"NumberBoard-item\" data-reactid=\"107\"><div class=\"NumberBoard-itemInner\" data-reactid=\"108\"><div class=\"NumberBoard-itemName\" data-reactid=\"109\">关注者</div><strong class=\"NumberBoard-itemValue\" title=\"1728\" data-reactid=\"110\">1,728</strong></div></div><div class=\"NumberBoard-item\" data-reactid=\"111\"><div class=\"NumberBoard-itemInner\" data-reactid=\"112\"><div class=\"NumberBoard-itemName\" data-reactid=\"113\">被浏览</div><strong class=\"NumberBoard-itemValue\" title=\"467220\" data-reactid=\"114\">467,220</strong></div></div></div><!-- react-empty: 115 --></div></div></div></div><div class=\"QuestionHeader-footer\" data-reactid=\"116\"><div class=\"QuestionHeader-footer-inner\" data-reactid=\"117\"><div class=\"QuestionHeader-main QuestionHeader-footer-main\" data-reactid=\"118\"><div class=\"QuestionButtonGroup\" data-reactid=\"119\"><button class=\"Button FollowButton Button--primary Button--blue\" type=\"button\" data-reactid=\"120\"><!-- react-text: 121 -->关注问题<!-- /react-text --></button><button class=\"Button Button--blue\" type=\"button\" data-reactid=\"122\"><svg viewBox=\"0 0 12 12\" class=\"Icon Button-icon Icon--modify\" style=\"height:16px;width:14px;\" width=\"14\" height=\"16\" aria-hidden=\"true\" data-reactid=\"123\"><title data-reactid=\"124\"/><g data-reactid=\"125\"><path d=\"M.423 10.32L0 12l1.667-.474 1.55-.44-2.4-2.33-.394 1.564zM10.153.233c-.327-.318-.85-.31-1.17.018l-.793.817 2.49 2.414.792-.814c.318-.328.312-.852-.017-1.17l-1.3-1.263zM3.84 10.536L1.35 8.122l6.265-6.46 2.49 2.414-6.265 6.46z\" fill-rule=\"evenodd\"/></g></svg><!-- react-text: 126 -->写回答<!-- /react-text --></button></div><div class=\"QuestionHeaderActions\" data-reactid=\"127\"><div class=\"QuestionHeader-Comment\" data-reactid=\"128\"><button class=\"Button Button--plain Button--withIcon Button--withLabel\" type=\"button\" data-reactid=\"129\"><span style=\"display:inline-flex;align-items:center;\" data-reactid=\"130\"><!-- react-text: 131 -->​<!-- /react-text --><svg class=\"Zi Zi--Comment Button-zi\" fill=\"currentColor\" viewBox=\"0 0 24 24\" width=\"1.2em\" height=\"1.2em\" data-reactid=\"132\"><path d=\"M10.241 19.313a.97.97 0 0 0-.77.2 7.908 7.908 0 0 1-3.772 1.482.409.409 0 0 1-.38-.637 5.825 5.825 0 0 0 1.11-2.237.605.605 0 0 0-.227-.59A7.935 7.935 0 0 1 3 11.25C3 6.7 7.03 3 12 3s9 3.7 9 8.25-4.373 9.108-10.759 8.063z\" fill-rule=\"evenodd\" data-reactid=\"133\"/></svg></span><!-- react-text: 134 -->9 条评论<!-- /react-text --><!-- react-empty: 135 --></button></div><div class=\"Popover ShareMenu\" data-reactid=\"136\"><div class=\"\" id=\"null-toggle\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-owns=\"null-content\" data-reactid=\"137\"><button class=\"Button Button--plain Button--withIcon Button--withLabel\" type=\"button\" data-reactid=\"138\"><span style=\"display:inline-flex;align-items:center;\" data-reactid=\"139\"><!-- react-text: 140 -->​<!-- /react-text --><svg class=\"Zi Zi--Share Button-zi\" fill=\"currentColor\" viewBox=\"0 0 24 24\" width=\"1.2em\" height=\"1.2em\" data-reactid=\"141\"><path d=\"M2.931 7.89c-1.067.24-1.275 1.669-.318 2.207l5.277 2.908 8.168-4.776c.25-.127.477.198.273.39L9.05 14.66l.927 5.953c.18 1.084 1.593 1.376 2.182.456l9.644-15.242c.584-.892-.212-2.029-1.234-1.796L2.93 7.89z\" fill-rule=\"evenodd\" data-reactid=\"142\"/></svg></span><!-- react-text: 143 -->分享<!-- /react-text --></button></div><!-- react-empty: 144 --></div><button class=\"Button Button--plain Button--withIcon Button--withLabel\" type=\"button\" data-reactid=\"145\"><span style=\"display:inline-flex;align-items:center;\" data-reactid=\"146\"><!-- react-text: 147 -->​<!-- /react-text --><svg class=\"Zi Zi--Star Button-zi\" fill=\"currentColor\" viewBox=\"0 0 24 24\" width=\"1.2em\" height=\"1.2em\" data-reactid=\"148\"><path d=\"M5.515 19.64l.918-5.355-3.89-3.792c-.926-.902-.639-1.784.64-1.97L8.56 7.74l2.404-4.871c.572-1.16 1.5-1.16 2.072 0L15.44 7.74l5.377.782c1.28.186 1.566 1.068.64 1.97l-3.89 3.793.918 5.354c.219 1.274-.532 1.82-1.676 1.218L12 18.33l-4.808 2.528c-1.145.602-1.896.056-1.677-1.218z\" fill-rule=\"evenodd\" data-reactid=\"149\"/></svg></span><!-- react-text: 150 -->邀请回答<!-- /react-text --></button><div class=\"Popover\" data-reactid=\"151\"><button class=\"Button Button--plain Button--withIcon Button--iconOnly\" aria-label=\"更多\" type=\"button\" id=\"null-toggle\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-owns=\"null-content\" data-reactid=\"152\"><span style=\"display:inline-flex;align-items:center;\" data-reactid=\"153\"><!-- react-text: 154 -->​<!-- /react-text --><svg class=\"Zi Zi--Dots Button-zi\" fill=\"currentColor\" viewBox=\"0 0 24 24\" width=\"1.2em\" height=\"1.2em\" data-reactid=\"155\"><path d=\"M5 14a2 2 0 1 1 0-4 2 2 0 0 1 0 4zm7 0a2 2 0 1 1 0-4 2 2 0 0 1 0 4zm7 0a2 2 0 1 1 0-4 2 2 0 0 1 0 4z\" fill-rule=\"evenodd\" data-reactid=\"156\"/></svg></span></button><!-- react-empty: 157 --></div><!-- react-empty: 158 --><!-- react-empty: 159 --><!-- react-empty: 160 --><!-- react-empty: 161 --><!-- react-empty: 162 --></div><div class=\"QuestionHeader-actions\" data-reactid=\"163\"></div></div></div></div></div><div data-reactid=\"164\"><div data-reactid=\"165\"><div class=\"Sticky\" data-reactid=\"166\"></div></div></div></div><div class=\"Question-main\" data-reactid=\"167\"><div class=\"Question-mainColumn\" data-reactid=\"168\"><div data-reactid=\"169\"><!-- react-empty: 170 --><div id=\"QuestionAnswers-answers\" class=\"QuestionAnswers-answers\" data-zop-feedlistmap=\"0,0,1,0\" data-reactid=\"171\"><div class=\"Card\" data-reactid=\"172\"><div class=\"List\" data-reactid=\"173\"><div class=\"List-header\" data-reactid=\"174\"><h4 class=\"List-headerText\" data-reactid=\"175\"><span data-reactid=\"176\"><!-- react-text: 177 -->111<!-- /react-text --><!-- react-text: 178 --> 个回答<!-- /react-text --></span></h4><div class=\"List-headerOptions\" data-reactid=\"179\"><div class=\"Popover\" data-reactid=\"180\"><button class=\"Button Select-button Select-plainButton Button--plain\" role=\"combobox\" aria-expanded=\"false\" type=\"button\" id=\"null-toggle\" aria-haspopup=\"true\" aria-owns=\"null-content\" data-reactid=\"181\"><!-- react-text: 182 -->默认排序<!-- /react-text --><span style=\"display:inline-flex;align-items:center;\" data-reactid=\"183\"><!-- react-text: 184 -->​<!-- /react-text --><svg class=\"Zi Zi--Select Select-arrow\" fill=\"currentColor\" viewBox=\"0 0 24 24\" width=\"24\" height=\"24\" data-reactid=\"185\"><path d=\"M12 16.183l2.716-2.966a.757.757 0 0 1 1.064.001.738.738 0 0 1 0 1.052l-3.247 3.512a.758.758 0 0 1-1.064 0L8.22 14.27a.738.738 0 0 1 0-1.052.758.758 0 0 1 1.063 0L12 16.183zm0-9.365L9.284 9.782a.758.758 0 0 1-1.064 0 .738.738 0 0 1 0-1.052l3.248-3.512a.758.758 0 0 1 1.065 0L15.78 8.73a.738.738 0 0 1 0 1.052.757.757 0 0 1-1.063.001L12 6.818z\" fill-rule=\"evenodd\" data-reactid=\"186\"/></svg></span></button><!-- react-empty: 187 --></div></div></div><div data-reactid=\"188\"><div class=\"\" data-reactid=\"189\"><div class=\"List-item\" data-reactid=\"190\"><div class=\"ContentItem AnswerItem\" data-za-index=\"0\" data-zop=\"{\"authorName\":\"知晓程序\",\"itemId\":343010272,\"title\":\"为什么小米、OV 等 9 大手机厂商发起「快应用」项目？会对微信小程序以及  App 生态有何影响？\",\"type\":\"answer\"}\" name=\"343010272\" itemprop=\"acceptedAnswer\" itemtype=\"http://schema.org/Answer\" itemscope=\"\" data-reactid=\"191\"><div class=\"ContentItem-meta\" data-reactid=\"192\"><div class=\"AuthorInfo AnswerItem-authorInfo AnswerItem-authorInfo--related\" itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\" data-reactid=\"193\"><meta itemprop=\"name\" content=\"知晓程序\" data-reactid=\"194\"><meta itemprop=\"image\" content=\"https://pic2.zhimg.com/v2-59ea678ab943faab0c4dfbb89832027b_is.jpg\" data-reactid=\"195\"><meta itemprop=\"url\" content=\"https://www.zhihu.com/people/zhi-xiao-cheng-xu\" data-reactid=\"196\"><meta itemprop=\"zhihu:followerCount\" content=\"3622\" data-reactid=\"197\"><span class=\"UserLink AuthorInfo-avatarWrapper\" data-reactid=\"198\"><div class=\"Popover\" data-reactid=\"199\"><div id=\"null-toggle\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-owns=\"null-content\" data-reactid=\"200\"><a class=\"UserLink-link\" data-za-detail-view-element_name=\"User\" target=\"_blank\" href=\"//www.zhihu.com/org/zhi-xiao-cheng-xu\" data-reactid=\"201\"><img class=\"Avatar AuthorInfo-avatar\" width=\"38\" height=\"38\" src=\"https://pic2.zhimg.com/v2-59ea678ab943faab0c4dfbb89832027b_xs.jpg\" srcset=\"https://pic2.zhimg.com/v2-59ea678ab943faab0c4dfbb89832027b_l.jpg 2x\" alt=\"知晓程序\" data-reactid=\"202\"></a></div><!-- react-empty: 203 --></div></span><div class=\"AuthorInfo-content\" data-reactid=\"204\"><div class=\"AuthorInfo-head\" data-reactid=\"205\"><span class=\"UserLink AuthorInfo-name\" data-reactid=\"206\"><div class=\"Popover\" data-reactid=\"207\"><div id=\"null-toggle\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-owns=\"null-content\" data-reactid=\"208\"><a class=\"UserLink-link\" data-za-detail-view-element_name=\"User\" target=\"_blank\" href=\"//www.zhihu.com/org/zhi-xiao-cheng-xu\" data-reactid=\"209\">知晓程序</a></div><!-- react-empty: 210 --></div><a class=\"UserLink-badge\" data-tooltip=\"已认证的官方帐号\" href=\"/question/48510028\" target=\"_blank\" data-reactid=\"211\"><svg viewBox=\"0 0 20 20\" class=\"Icon Icon--badgeCert\" style=\"height:16px;width:16px;\" width=\"16\" height=\"16\" aria-hidden=\"true\" data-reactid=\"212\"><title data-reactid=\"213\">用户标识</title><g data-reactid=\"214\"><g fill=\"none\" fill-rule=\"evenodd\">     <path d=\"M.64 11.39c1.068.895 1.808 2.733 1.66 4.113l.022-.196c-.147 1.384.856 2.4 2.24 2.278l-.198.016c1.387-.12 3.21.656 4.083 1.735l-.125-.154c.876 1.085 2.304 1.093 3.195.028l-.127.152c.895-1.068 2.733-1.808 4.113-1.66l-.198-.022c1.386.147 2.402-.856 2.28-2.238l.016.197c-.12-1.388.656-3.212 1.735-4.084l-.154.125c1.084-.876 1.093-2.304.028-3.195l.152.127c-1.068-.895-1.808-2.732-1.66-4.113l-.022.198c.147-1.386-.856-2.4-2.24-2.28l.198-.016c-1.387.122-3.21-.655-4.083-1.734l.125.153C10.802-.265 9.374-.274 8.483.79L8.61.64c-.895 1.068-2.733 1.808-4.113 1.662l.198.02c-1.386-.147-2.4.857-2.28 2.24L2.4 4.363c.12 1.387-.656 3.21-1.735 4.084l.154-.126C-.265 9.2-.274 10.626.79 11.517L.64 11.39z\" fill=\"#0F88EB\"/>     <path d=\"M7.78 13.728l-2.633-3s-.458-.704.242-1.36c.7-.658 1.327-.22 1.327-.22L8.67 11.28l4.696-4.93s.663-.35 1.3.197c.635.545.27 1.382.27 1.382s-3.467 3.857-5.377 5.78c-.98.93-1.78.018-1.78.018z\" fill=\"#FFF\"/>1   </g></g></svg></a></span></div><div class=\"AuthorInfo-detail\" data-reactid=\"215\"><div class=\"AuthorInfo-badge\" data-reactid=\"216\"><div class=\"AuthorInfo-badgeText\" data-reactid=\"217\">已认证的官方帐号</div></div></div></div></div><div class=\"AnswerItem-extraInfo\" data-reactid=\"218\"><span class=\"Voters\" data-reactid=\"219\"><span data-reactid=\"220\"><button class=\"Button Button--plain\" type=\"button\" data-reactid=\"221\"><!-- react-text: 222 -->468 人赞同了该回答<!-- /react-text --></button></span><!-- react-empty: 223 --></span></div></div><meta itemprop=\"image\" content=\"https://pic3.zhimg.com/v2-53e99fc884e5bea5997dfce2b542d24d_200x112.jpg\" data-reactid=\"224\"><meta itemprop=\"upvoteCount\" content=\"468\" data-reactid=\"225\"><meta itemprop=\"url\" content=\"https://www.zhihu.com/question/268663484/answer/343010272\" data-reactid=\"226\"><meta itemprop=\"dateCreated\" content=\"2018-03-16T06:38:00.000Z\" data-reactid=\"227\"><meta itemprop=\"dateModified\" content=\"2018-03-19T06:08:36.000Z\" data-reactid=\"228\"><meta itemprop=\"commentCount\" content=\"56\" data-reactid=\"229\"><div class=\"RichContent RichContent--unescapable\" data-reactid=\"230\"><div class=\"RichContent-inner\" data-reactid=\"231\"><span class=\"RichText CopyrightRichText-richText\" itemprop=\"text\" data-reactid=\"232\"><p><b>针对本问题，我们于昨日深度剖析了一下「快应用」出现的前因后果，由此对市场变化的推测，以及趋势变化的一些思考。</b></p><hr><h2>市场变化及猜测</h2><p>继 2017 年小米推出「直达服务」、魅族推出「快捷应用」、金立推出「秒开应用」之后，如今，手机厂商将基于安卓生态合力进击，试图重新拿回应用分发上的主导权。</p><p>而整个小程序生态历经一整年风风雨雨，2018 年势必迎来全面爆发。作为新一代移动端应用分发入口，小程序的趋势明朗化，竞争也在急剧激烈化。战线从手机 QQ、QQ 浏览器、支付宝、手机淘宝，再拉到了谷歌的 Instant App 和 PWA、Facebook 的 React Native。</p><p>此外，<b>行业还一度盛传今日头条或将发力小程序，百度类似直达号的轻型应用也可能曲线回归，一场围绕移动互联网下半场的关键战役已经全面打响。</b></p><h2>「快应用」对标「小程序」，手机厂商究竟在做什么？</h2><p>在公众号「小米开放平台」当天的推送文章中，我们可以看到这样的段落：</p><blockquote>快应用使用前端技术栈开发，原生渲染，同时具备 HTML 5 页面和原生应用的双重优点。用户无需下载安装，即点即用，享受原生应用的性能体验。</blockquote><p>这个说法是不是似曾相识？没错，这些都是微信小程序的卖点：同样使用前端技术栈，同样具备 HTML 5 与 Native App 的双重优势，用户使用微信小程序和快应用，也皆可以「即点即用」。</p><p><br></p><figure><noscript><img src=\"https://pic3.zhimg.com/50/v2-53e99fc884e5bea5997dfce2b542d24d_hd.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"640\" class=\"origin_image zh-lightbox-thumb\" width=\"1024\" data-original=\"https://pic3.zhimg.com/v2-53e99fc884e5bea5997dfce2b542d24d_r.jpg\"></noscript><img src=\"data:image/svg+xml;utf8,<svg%20xmlns=\'http://www.w3.org/2000/svg\'%20width=\'1024\'%20height=\'640\'></svg>\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"640\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1024\" data-original=\"https://pic3.zhimg.com/v2-53e99fc884e5bea5997dfce2b542d24d_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/50/v2-53e99fc884e5bea5997dfce2b542d24d_hd.jpg\"></figure><p><br></p><p>回过头看看同样拥有这些卖点的支付宝小程序吧。</p><p>对比微信与支付宝两个小程序平台的开发文档，除了一些特定接口因业务需要而有所差异之外，二者的接口、组件相似度极高；实际上手中，开发者也完全可以做到将小程序几乎零成本地从微信移植到支付宝。</p><p><br></p><figure><noscript><img src=\"https://pic3.zhimg.com/50/v2-ce803c05d798ebef0cd5ab260edcd81a_hd.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"512\" data-rawheight=\"1024\" class=\"origin_image zh-lightbox-thumb\" width=\"512\" data-original=\"https://pic3.zhimg.com/v2-ce803c05d798ebef0cd5ab260edcd81a_r.jpg\"></noscript><img src=\"data:image/svg+xml;utf8,<svg%20xmlns=\'http://www.w3.org/2000/svg\'%20width=\'512\'%20height=\'1024\'></svg>\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"512\" data-rawheight=\"1024\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"512\" data-original=\"https://pic3.zhimg.com/v2-ce803c05d798ebef0cd5ab260edcd81a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/50/v2-ce803c05d798ebef0cd5ab260edcd81a_hd.jpg\"></figure><p><br></p><p>知晓程序认为，虽然目前详细的开发文档尚未流出，但同样使用前端技术的快应用，没有理由自己再建立一套开发标准，否则在标准、开发者培训以及技术栈构建上都会出现较大问题，大大削弱快应用平台的竞争力。</p><p>因此，<b>快应用极有可能与支付宝一样，使用与微信小程序看齐的开发标准</b>，尽最大可能，降低开发者的开发门槛，进一步吸引更多小程序，特别是微信小程序，移植到快应用平台。</p><p>大家可以持续关注「知晓程序」公众号，我们会在 20 号发布会之后为大家带来第一时间的开发文档解读。</p><h2>微信和手机厂商，谁能抢占手机桌面？</h2><p>实际上，9 大具有广泛的硬件销售竞争关系的手机厂商能够合推快应用标准，首先得益于此前已经建立的联盟关系。</p><p>早在 2014 年 8 月 1 日，国内一线手机制造商就曾经成立了一个叫「硬核联盟」的组织，又称「安卓智能手机生态系统联盟」，由玩咖传媒联手当时的 6 大手机制造商共同成立。</p><p><br></p><figure><noscript><img src=\"https://pic4.zhimg.com/50/v2-9047a236932e56b1c67e7cea3ade9382_hd.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"664\" class=\"origin_image zh-lightbox-thumb\" width=\"1000\" data-original=\"https://pic4.zhimg.com/v2-9047a236932e56b1c67e7cea3ade9382_r.jpg\"></noscript><img src=\"data:image/svg+xml;utf8,<svg%20xmlns=\'http://www.w3.org/2000/svg\'%20width=\'1000\'%20height=\'664\'></svg>\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"664\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1000\" data-original=\"https://pic4.zhimg.com/v2-9047a236932e56b1c67e7cea3ade9382_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/50/v2-9047a236932e56b1c67e7cea3ade9382_hd.jpg\"></figure><p><br></p><p>「硬核联盟」施行商务共享，一家可以代表联盟共同谈判，提高 CP 的分发及渠道效率，通过一个接口实现与多个手机厂商的合作。主要针对优秀的游戏和应用产品，进行众推或者联合首发。<b>而此次的标准仍然由「硬核联盟」所推动，从而让手机厂商具有行动一致，以及平台化分发的基础。</b></p><p>随着小程序的强势崛起，事实上，小米和魅族等之所以急于上线各自的轻型应用，不仅在于微信在自有的 App 内部搭建了完整的互联网应用生态，<b>也因为微信利用安卓的系统规则，将小程序直接触达到了手机桌面。</b></p><p><br></p><figure><noscript><img src=\"https://pic3.zhimg.com/50/v2-3ffbf4ae4cca9b0b3dc1f06371392d22_hd.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"887\" class=\"origin_image zh-lightbox-thumb\" width=\"1000\" data-original=\"https://pic3.zhimg.com/v2-3ffbf4ae4cca9b0b3dc1f06371392d22_r.jpg\"></noscript><img src=\"data:image/svg+xml;utf8,<svg%20xmlns=\'http://www.w3.org/2000/svg\'%20width=\'1000\'%20height=\'887\'></svg>\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"887\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1000\" data-original=\"https://pic3.zhimg.com/v2-3ffbf4ae4cca9b0b3dc1f06371392d22_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/50/v2-3ffbf4ae4cca9b0b3dc1f06371392d22_hd.jpg\"></figure><p><br></p><p>「快应用」的推出，看似是手机厂商的底层革命，实际上却是针对微信已经反攻到了手机桌面端的被动应对。</p><p>手机桌面小程序「快捷方式」的意义，对于微信而言，已经不只是便于用户使用的入口，也在最大程度上延伸了微信的触角，<b>每一个布置在手机桌面的小程序，都会是用户快速回到微信的入口，换言之，每个小程序不是在消耗微信流量，而是在为微信引流！</b>利用手机桌面，微信已经在这种导流与回流当中，形成了非常稳定的闭环关系。</p><p><br></p><figure><noscript><img src=\"https://pic1.zhimg.com/50/v2-9b3c9ec8a3f13527bc232a052cabd8a5_hd.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"640\" class=\"origin_image zh-lightbox-thumb\" width=\"1024\" data-original=\"https://pic1.zhimg.com/v2-9b3c9ec8a3f13527bc232a052cabd8a5_r.jpg\"></noscript><img src=\"data:image/svg+xml;utf8,<svg%20xmlns=\'http://www.w3.org/2000/svg\'%20width=\'1024\'%20height=\'640\'></svg>\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"640\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1024\" data-original=\"https://pic1.zhimg.com/v2-9b3c9ec8a3f13527bc232a052cabd8a5_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/50/v2-9b3c9ec8a3f13527bc232a052cabd8a5_hd.jpg\"></figure><p><br></p><p>而手机厂商为此不仅失去了应用分发的价值，也被截断了预装和广告营销的红利。为此，手机厂商必须建立一种新的规则重构应用分发机制。这就成为「快应用」推出的根本原因。</p><p>而现在看来，用户体验上的最大不确定性，就是快应用和小程序如何在手机桌面共存？会不会在桌面端出现两个图标，由此对用户造成干扰？</p><h2>场景化流量大于搜索，「快应用」如何逆袭？</h2><p>的确，微信、支付宝小程序要求用户安装、注册相应 App 才能使用。快应用则不需要，只需拥有一台支持快应用标准的机器（甚至连手机都不用换，只需要升级、更换系统固件），就能使用快应用，而且，快应用还能直接从系统桌面直接启动。</p><p>这使得用户使用快应用的成本与使用路径，要比使用小程序短得多。同时，由于减少了微信、支付宝这层中间媒介，改为由系统直接运行快应用，<b>理论上快应用的性能运行表现，一定是优于小程序平台的。</b></p><p><br></p><figure><noscript><img src=\"https://pic1.zhimg.com/50/v2-74d0d70c82ec25142b113dcc55c2fbed_hd.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"994\" class=\"origin_image zh-lightbox-thumb\" width=\"1000\" data-original=\"https://pic1.zhimg.com/v2-74d0d70c82ec25142b113dcc55c2fbed_r.jpg\"></noscript><img src=\"data:image/svg+xml;utf8,<svg%20xmlns=\'http://www.w3.org/2000/svg\'%20width=\'1000\'%20height=\'994\'></svg>\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"994\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1000\" data-original=\"https://pic1.zhimg.com/v2-74d0d70c82ec25142b113dcc55c2fbed_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/50/v2-74d0d70c82ec25142b113dcc55c2fbed_hd.jpg\"></figure><p><br></p><p>不过，尽管如此，但快应用要想推广开来仍然充满挑战。</p><p>最大的挑战不是来自应用本身，而是用户对应用分发不可逆转的习惯趋势。</p><p>微信所形成的巨大流量场效应被谈及最多，这是手机应用商店所无法达到的指数级体量差距。但这却并非最主要的，根本原因在于，手机厂商的另一杀手锏，也就是桌面端的直达搜索功能可能也没办法达到预期。</p><p><br></p><figure><noscript><img src=\"https://pic7.zhimg.com/50/v2-d117f084d45228c9a024552f818c8da5_hd.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"512\" class=\"origin_image zh-lightbox-thumb\" width=\"1024\" data-original=\"https://pic7.zhimg.com/v2-d117f084d45228c9a024552f818c8da5_r.jpg\"></noscript><img src=\"data:image/svg+xml;utf8,<svg%20xmlns=\'http://www.w3.org/2000/svg\'%20width=\'1024\'%20height=\'512\'></svg>\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"512\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1024\" data-original=\"https://pic7.zhimg.com/v2-d117f084d45228c9a024552f818c8da5_r.jpg\" data-actualsrc=\"https://pic7.zhimg.com/50/v2-d117f084d45228c9a024552f818c8da5_hd.jpg\"></figure><p><br></p><p>一直以来，微信小程序为何会弱化搜索，却打通了近 50 个入口？其实是因为微信已经看准了<b>接下来应用分发的核心趋势，不是搜索，而是场景化分发。</b></p><p>微信颠覆了应用分发的基本逻辑。如果说移动互联网上半场的分发规律是搜索，依赖用户主观能动性去寻找应用；那么下半场的分发规律就是场景化体验。所以，轻应用还是「重应用」的问题是第二位的，<b>首要问题是用户除了记忆一些头部应用之外，大量应用会在偶遇之中用完即走，</b>这是手机应用极大丰富以后，不可违逆的用户习惯。</p><p><br></p><figure><noscript><img src=\"https://pic4.zhimg.com/50/v2-9dfa9a4fc5ae5b74ed06611f5b68b9c2_hd.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"515\" class=\"origin_image zh-lightbox-thumb\" width=\"1000\" data-original=\"https://pic4.zhimg.com/v2-9dfa9a4fc5ae5b74ed06611f5b68b9c2_r.jpg\"></noscript><img src=\"data:image/svg+xml;utf8,<svg%20xmlns=\'http://www.w3.org/2000/svg\'%20width=\'1000\'%20height=\'515\'></svg>\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"515\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1000\" data-original=\"https://pic4.zhimg.com/v2-9dfa9a4fc5ae5b74ed06611f5b68b9c2_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/50/v2-9dfa9a4fc5ae5b74ed06611f5b68b9c2_hd.jpg\"></figure><p><br></p><p><b>而在目前看来，真正的场景化其实只存在于微信、支付宝等头部应用。</b></p><p>作为社交应用的微信、交易工具的支付宝，它们的小程序平台自然会提供带有平台特色的接口，例如，微信小程序的分享群聊功能、支付宝的读取芝麻信用分等功能，以及两个小程序平台都拥有的支付功能。这些功能都是快应用天生所缺乏的。</p><h2>布局线下，「小程序码」是否还有一战？</h2><p>如果说，线上缺乏场景，那么在线下，快应用能否扳回一城呢。</p><p>事实上，<b>短期来看，小程序和快应用的争夺集中在线上，但未来真正的战场却在线下。</b>这从微信小程序今年的发力重点也可以看出端倪。</p><p>如今，微信通过整合小程序、微信支付、扫码和卡包等能力，已经将小程序广布到大街小巷、酒店商超、医院机场等各个角落，小程序并不只是一个线上应用，而是变成了 OMO （线上与线下融合）的连接器。</p><p><br></p><figure><noscript><img src=\"https://pic3.zhimg.com/50/v2-03108ba2be0ee581dfa0f705a3e28bc0_hd.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"667\" class=\"origin_image zh-lightbox-thumb\" width=\"1000\" data-original=\"https://pic3.zhimg.com/v2-03108ba2be0ee581dfa0f705a3e28bc0_r.jpg\"></noscript><img src=\"data:image/svg+xml;utf8,<svg%20xmlns=\'http://www.w3.org/2000/svg\'%20width=\'1000\'%20height=\'667\'></svg>\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"667\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1000\" data-original=\"https://pic3.zhimg.com/v2-03108ba2be0ee581dfa0f705a3e28bc0_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/50/v2-03108ba2be0ee581dfa0f705a3e28bc0_hd.jpg\"></figure><p><br></p><p>相比较线上，线下其实有更多的服务与应用的场景，而线下直接触达用户的方式就是「码」，无论是微信的二维码、小程序码，还是支付宝的二维码，都成为了直接入口。</p><p>相比较微信和支付宝，其实<b>手机厂商所沉淀的线下商户以及拓展线下商业的能力更不可小觑。</b>特别是众多手机厂商共同发力，可以迅速完成大量的快应用的物料落地，而一旦形成了用户触达，用户会选择哪种「码」进行扫描就可能充满变数。</p><p>然而，尽管手机厂商的地推能力是强项所在，但如果要想真正服务线下，快应用形态又会显得太轻了一些，<b>毕竟小程序里面所包含的将不只是应用体验那么简单，而是充满整合多能力的一个功能信息集，</b>而即将上线的快应用，是否能够支持支付、扫码、用户数据、LBS、广告投放等功能，仍然无法得知。</p><p><br></p><figure><noscript><img src=\"https://pic4.zhimg.com/50/v2-5a9bf8dcde8c9cf93dd05b4b9c0d19a3_hd.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"750\" class=\"origin_image zh-lightbox-thumb\" width=\"1000\" data-original=\"https://pic4.zhimg.com/v2-5a9bf8dcde8c9cf93dd05b4b9c0d19a3_r.jpg\"></noscript><img src=\"data:image/svg+xml;utf8,<svg%20xmlns=\'http://www.w3.org/2000/svg\'%20width=\'1000\'%20height=\'750\'></svg>\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"750\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1000\" data-original=\"https://pic4.zhimg.com/v2-5a9bf8dcde8c9cf93dd05b4b9c0d19a3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/50/v2-5a9bf8dcde8c9cf93dd05b4b9c0d19a3_hd.jpg\"></figure><p><br></p><p>此外，就线下而言，<b>调取扫码功能与用户扫码习惯也会是微信小程序的关键优势，</b>特别是当微信和支付宝已经牢牢占据用户心智之后，要想再挤进来一个「码」的位置也不太大。</p><p>而最后，推进现在，也非常考验快应用标准联盟的凝聚力和决心。对于手机厂商而言，如果只是想在线上构建一种纯粹的轻量化的应用体验，那么机会实在不多；但如果想在线上线下全面开战，就必须把推进「快应用」的决心和战略意志，放到和销售手机设备一样的高度上来。</p><p><br></p><p><b>我的其他回答：</b></p><p><a href=\"https://www.zhihu.com/question/50907897/answer/268867404\" class=\"internal\">如何入门微信小程序开发，有哪些学习资料？</a></p><p><a href=\"https://www.zhihu.com/question/39791312/answer/268333656\" class=\"internal\">有哪些常人不知道的「常识」？</a></p><p><a href=\"https://www.zhihu.com/question/28281611/answer/271704031\" class=\"internal\">有哪些送给 20 岁的年轻人的建议？</a></p></span><!-- react-empty: 233 --></div><div data-reactid=\"234\"><div class=\"ContentItem-time\" data-reactid=\"235\"><a target=\"_blank\" href=\"/question/268663484/answer/343010272\" data-reactid=\"236\"><span data-tooltip=\"发布于 2018-03-16 14:38\" data-reactid=\"237\">编辑于 2018-03-19</span></a></div></div><div class=\"ContentItem-actions RichContent-actions\" data-reactid=\"238\"><span data-reactid=\"239\"><button class=\"Button VoteButton VoteButton--up\" aria-label=\"赞同\" type=\"button\" data-reactid=\"240\"><svg viewBox=\"0 0 20 18\" class=\"Icon VoteButton-upIcon Icon--triangle\" style=\"height:16px;width:9px;\" width=\"9\" height=\"16\" aria-hidden=\"true\" data-reactid=\"241\"><title data-reactid=\"242\"/><g data-reactid=\"243\"><path d=\"M0 15.243c0-.326.088-.533.236-.896l7.98-13.204C8.57.57 9.086 0 10 0s1.43.57 1.784 1.143l7.98 13.204c.15.363.236.57.236.896 0 1.386-.875 1.9-1.955 1.9H1.955c-1.08 0-1.955-.517-1.955-1.9z\"/></g></svg><!-- react-text: 244 -->468<!-- /react-text --></button><button class=\"Button VoteButton VoteButton--down\" aria-label=\"反对\" type=\"button\" data-reactid=\"245\"><svg viewBox=\"0 0 20 18\" class=\"Icon VoteButton-downIcon Icon--triangle\" style=\"height:16px;width:9px;\" width=\"9\" height=\"16\" aria-hidden=\"true\" data-reactid=\"246\"><title data-reactid=\"247\"/><g data-reactid=\"248\"><path d=\"M0 15.243c0-.326.088-.533.236-.896l7.98-13.204C8.57.57 9.086 0 10 0s1.43.57 1.784 1.143l7.98 13.204c.15.363.236.57.236.896 0 1.386-.875 1.9-1.955 1.9H1.955c-1.08 0-1.955-.517-1.955-1.9z\"/></g></svg></button></span><button class=\"Button ContentItem-action Button--plain Button--withIcon Button--withLabel\" type=\"button\" data-reactid=\"249\"><span style=\"display:inline-flex;align-items:center;\" data-reactid=\"250\"><!-- react-text: 251 -->​<!-- /react-text --><svg class=\"Zi Zi--Comment Button-zi\" fill=\"currentColor\" viewBox=\"0 0 24 24\" width=\"1.2em\" height=\"1.2em\" data-reactid=\"252\"><path d=\"M10.241 19.313a.97.97 0 0 0-.77.2 7.908 7.908 0 0 1-3.772 1.482.409.409 0 0 1-.38-.637 5.825 5.825 0 0 0 1.11-2.237.605.605 0 0 0-.227-.59A7.935 7.935 0 0 1 3 11.25C3 6.7 7.03 3 12 3s9 3.7 9 8.25-4.373 9.108-10.759 8.063z\" fill-rule=\"evenodd\" data-reactid=\"253\"/></svg></span><!-- react-text: 254 -->56 条评论<!-- /react-text --></button><div class=\"Popover ShareMenu ContentItem-action\" data-reactid=\"255\"><div class=\"\" id=\"null-toggle\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-owns=\"null-content\" data-reactid=\"256\"><button class=\"Button Button--plain Button--withIcon Button--withLabel\" type=\"button\" data-reactid=\"257\"><span style=\"display:inline-flex;align-items:center;\" data-reactid=\"258\"><!-- react-text: 259 -->​<!-- /react-text --><svg class=\"Zi Zi--Share Button-zi\" fill=\"currentColor\" viewBox=\"0 0 24 24\" width=\"1.2em\" height=\"1.2em\" data-reactid=\"260\"><path d=\"M2.931 7.89c-1.067.24-1.275 1.669-.318 2.207l5.277 2.908 8.168-4.776c.25-.127.477.198.273.39L9.05 14.66l.927 5.953c.18 1.084 1.593 1.376 2.182.456l9.644-15.242c.584-.892-.212-2.029-1.234-1.796L2.93 7.89z\" fill-rule=\"evenodd\" data-reactid=\"261\"/></svg></span><!-- react-text: 262 -->分享<!-- /react-text --></button></div><!-- react-empty: 263 --></div><button class=\"Button ContentItem-action Button--plain Button--withIcon Button--withLabel\" type=\"button\" data-reactid=\"264\"><span style=\"display:inline-flex;align-items:center;\" data-reactid=\"265\"><!-- react-text: 266 -->​<!-- /react-text --><svg class=\"Zi Zi--Star Button-zi\" fill=\"currentColor\" viewBox=\"0 0 24 24\" width=\"1.2em\" height=\"1.2em\" data-reactid=\"267\"><path d=\"M5.515 19.64l.918-5.355-3.89-3.792c-.926-.902-.639-1.784.64-1.97L8.56 7.74l2.404-4.871c.572-1.16 1.5-1.16 2.072 0L15.44 7.74l5.377.782c1.28.186 1.566 1.068.64 1.97l-3.89 3.793.918 5.354c.219 1.274-.532 1.82-1.676 1.218L12 18.33l-4.808 2.528c-1.145.602-1.896.056-1.677-1.218z\" fill-rule=\"evenodd\" data-reactid=\"268\"/></svg></span><!-- react-text: 269 -->收藏<!-- /react-text --></button><button class=\"Button ContentItem-action Button--plain Button--withIcon Button--withLabel\" type=\"button\" data-reactid=\"270\"><span style=\"display:inline-flex;align-items:center;\" data-reactid=\"271\"><!-- react-text: 272 -->​<!-- /react-text --><svg class=\"Zi Zi--Heart Button-zi\" fill=\"currentColor\" viewBox=\"0 0 24 24\" width=\"1.2em\" height=\"1.2em\" data-reactid=\"273\"><path d=\"M2 8.437C2 5.505 4.294 3.094 7.207 3 9.243 3 11.092 4.19 12 6c.823-1.758 2.649-3 4.651-3C19.545 3 22 5.507 22 8.432 22 16.24 13.842 21 12 21 10.158 21 2 16.24 2 8.437z\" fill-rule=\"evenodd\" data-reactid=\"274\"/></svg></span><!-- react-text: 275 -->感谢<!-- /react-text --></button><button class=\"Button ContentItem-action ContentItem-rightButton Button--plain\" data-zop-retract-question=\"true\" type=\"button\" data-reactid=\"276\"><span class=\"RichContent-collapsedText\" data-reactid=\"277\">收起</span><svg viewBox=\"0 0 10 6\" class=\"Icon ContentItem-arrowIcon is-active Icon--arrow\" style=\"height:16px;width:10px;\" width=\"10\" height=\"16\" aria-hidden=\"true\" data-reactid=\"278\"><title data-reactid=\"279\"/><g data-reactid=\"280\"><path d=\"M8.716.217L5.002 4 1.285.218C.99-.072.514-.072.22.218c-.294.29-.294.76 0 1.052l4.25 4.512c.292.29.77.29 1.063 0L9.78 1.27c.293-.29.293-.76 0-1.052-.295-.29-.77-.29-1.063 0z\"/></g></svg></button></div></div><!-- react-empty: 281 --><!-- react-empty: 282 --><!-- react-empty: 283 --><!-- react-empty: 284 --><!-- react-empty: 285 --><!-- react-empty: 286 --></div></div><div class=\"List-item\" data-reactid=\"287\"><div class=\"ContentItem AnswerItem\" data-za-index=\"1\" data-zop=\"{\"authorName\":\"急性子怪脾气\",\"itemId\":343792088,\"title\":\"为什么小米、OV 等 9 大手机厂商发起「快应用」项目？会对微信小程序以及  App 生态有何影响？\",\"type\":\"answer\"}\" name=\"343792088\" itemprop=\"suggestedAnswer\" itemtype=\"http://schema.org/Answer\" itemscope=\"\" data-reactid=\"288\"><div class=\"ContentItem-meta\" data-reactid=\"289\"><div class=\"AuthorInfo AnswerItem-authorInfo AnswerItem-authorInfo--related\" itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\" data-reactid=\"290\"><meta itemprop=\"name\" content=\"急性子怪脾气\" data-reactid=\"291\"><meta itemprop=\"image\" content=\"https://pic4.zhimg.com/3b458a00fc07dfe5f0ba5ed73692691b_is.jpg\" data-reactid=\"292\"><meta itemprop=\"url\" content=\"https://www.zhihu.com/people/chu-zhao-jun-3\" data-reactid=\"293\"><meta itemprop=\"zhihu:followerCount\" content=\"682\" data-reactid=\"294\"><span class=\"UserLink AuthorInfo-avatarWrapper\" data-reactid=\"295\"><div class=\"Popover\" data-reactid=\"296\"><div id=\"null-toggle\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-owns=\"null-content\" data-reactid=\"297\"><a class=\"UserLink-link\" data-za-detail-view-element_name=\"User\" target=\"_blank\" href=\"//www.zhihu.com/people/chu-zhao-jun-3\" data-reactid=\"298\"><img class=\"Avatar AuthorInfo-avatar\" width=\"38\" height=\"38\" src=\"https://pic4.zhimg.com/3b458a00fc07dfe5f0ba5ed73692691b_xs.jpg\" srcset=\"https://pic4.zhimg.com/3b458a00fc07dfe5f0ba5ed73692691b_l.jpg 2x\" alt=\"急性子怪脾气\" data-reactid=\"299\"></a></div><!-- react-empty: 300 --></div></span><div class=\"AuthorInfo-content\" data-reactid=\"301\"><div class=\"AuthorInfo-head\" data-reactid=\"302\"><span class=\"UserLink AuthorInfo-name\" data-reactid=\"303\"><div class=\"Popover\" data-reactid=\"304\"><div id=\"null-toggle\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-owns=\"null-content\" data-reactid=\"305\"><a class=\"UserLink-link\" data-za-detail-view-element_name=\"User\" target=\"_blank\" href=\"//www.zhihu.com/people/chu-zhao-jun-3\" data-reactid=\"306\">急性子怪脾气</a></div><!-- react-empty: 307 --></div><!-- react-empty: 308 --></span></div><div class=\"AuthorInfo-detail\" data-reactid=\"309\"><div class=\"AuthorInfo-badge\" data-reactid=\"310\"><div class=\"RichText AuthorInfo-badgeText\" data-reactid=\"311\">人工智能研究 米粉</div></div></div></div></div><div class=\"AnswerItem-extraInfo\" data-reactid=\"312\"><span class=\"Voters\" data-reactid=\"313\"><span data-reactid=\"314\"><button class=\"Button Button--plain\" type=\"button\" data-reactid=\"315\"><!-- react-text: 316 -->391 人赞同了该回答<!-- /react-text --></button></span><!-- react-empty: 317 --></span></div></div><meta itemprop=\"image\" content=\"https://pic1.zhimg.com/v2-2ba83f90f97bf064ca80b4f1523ef0dd_200x112.jpg\" data-reactid=\"318\"><meta itemprop=\"upvoteCount\" content=\"391\" data-reactid=\"319\"><meta itemprop=\"url\" content=\"https://www.zhihu.com/question/268663484/answer/343792088\" data-reactid=\"320\"><meta itemprop=\"dateCreated\" content=\"2018-03-17T07:48:45.000Z\" data-reactid=\"321\"><meta itemprop=\"dateModified\" content=\"2018-03-17T07:48:45.000Z\" data-reactid=\"322\"><meta itemprop=\"commentCount\" content=\"28\" data-reactid=\"323\"><div class=\"RichContent RichContent--unescapable\" data-reactid=\"324\"><div class=\"RichContent-inner\" data-reactid=\"325\"><span class=\"RichText CopyrightRichText-richText\" itemprop=\"text\" data-reactid=\"326\"><p><b>一、九大厂商为何要做这个项目？</b></p><p>诺贝尔获得者赫伯特-西蒙有一句名言，完美诠释这次九大厂商合纵连横共抗微信的深层含义：</p><p><b>“随着信息的发展，有价值的不是信息，而是注意力。”</b></p><p>据此发展出的就是注意力经济：在互联网时代信息是极大过剩甚至是泛滥的，相对于过剩的信息，人的注意力反而是有限的、稀缺的资源。</p><p><b>注意力经济是一种新型的商业模式，它是互联网厂商重要的商业资产，我们甚至可以把所有的互联网厂商都定义成——注意力商人。</b></p><figure><noscript><img src=\"https://pic1.zhimg.com/50/v2-2ba83f90f97bf064ca80b4f1523ef0dd_hd.jpg\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"750\" class=\"origin_image zh-lightbox-thumb\" width=\"500\" data-original=\"https://pic1.zhimg.com/v2-2ba83f90f97bf064ca80b4f1523ef0dd_r.jpg\"></noscript><img src=\"data:image/svg+xml;utf8,<svg%20xmlns=\'http://www.w3.org/2000/svg\'%20width=\'500\'%20height=\'750\'></svg>\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"750\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"500\" data-original=\"https://pic1.zhimg.com/v2-2ba83f90f97bf064ca80b4f1523ef0dd_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/50/v2-2ba83f90f97bf064ca80b4f1523ef0dd_hd.jpg\"><figcaption>注意力商人</figcaption></figure><p><b>回到这次“九大门派围攻光明顶”，真正挑起战争的那方不是九大门派，而是微信。我个人把这场战争称之为——注意力战争。</b></p><p>张小龙说微信的产品哲学是“用完就走，微信只是一个工具”，你要真信了那就呵呵了。</p><p>你看公众号，你看朋友圈，还有本文的主题——小程序。他所谓的用完就走，其实你根本走不出门口，不过是从微信的一个房间走到另一个房间。</p><p><b>微信是国内的超级APP，小程序出来的时候就有人说它要成 wechat OS，但这背后其实是在抢夺MIUI，EMUEI等国产操作系统的注意力经济。</b></p><figure><noscript><img src=\"https://pic4.zhimg.com/50/v2-1f168e82f01be7daf358a36b7fd5e7b5_hd.jpg\" data-size=\"normal\" data-rawwidth=\"360\" data-rawheight=\"480\" class=\"content_image\" width=\"360\"></noscript><img src=\"data:image/svg+xml;utf8,<svg%20xmlns=\'http://www.w3.org/2000/svg\'%20width=\'360\'%20height=\'480\'></svg>\" data-size=\"normal\" data-rawwidth=\"360\" data-rawheight=\"480\" class=\"content_image lazy\" width=\"360\" data-actualsrc=\"https://pic4.zhimg.com/50/v2-1f168e82f01be7daf358a36b7fd5e7b5_hd.jpg\"><figcaption>谁动了我的奶酪？</figcaption></figure><p>好嘛，用户在微信里把什么都干了——能购物也能点餐，新闻信息也能看，吃喝拉撒全包圆。偶尔出去玩个游戏，还是腾讯游戏，一大片国土上有一个超大建筑，所有商户和用户都住在里面，关键这个建筑的产权还是别人的。这谁能受得了？</p><p><b>从这个逻辑进行反推，你会发现小程序对于微信的意义，比之快应用对于操作系统的意义要重要的多。</b></p><p>无需下载、点开即用对于厂商来说重要，但比现在APP对用户体验的提升也没那么大。在这之前，也有小米的直达应用等类似服务，一直都是不温不火。但微信的小程序一出，基本上是逼着这些手机厂商必须要做出什么事情来共同应对，这就是本次【快应用】推出的背景。</p><figure><noscript><img src=\"https://pic1.zhimg.com/50/v2-a7299ab0413956f2846bc011f5ec9b45_hd.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"368\" class=\"origin_image zh-lightbox-thumb\" width=\"1024\" data-original=\"https://pic1.zhimg.com/v2-a7299ab0413956f2846bc011f5ec9b45_r.jpg\"></noscript><img src=\"data:image/svg+xml;utf8,<svg%20xmlns=\'http://www.w3.org/2000/svg\'%20width=\'1024\'%20height=\'368\'></svg>\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"368\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1024\" data-original=\"https://pic1.zhimg.com/v2-a7299ab0413956f2846bc011f5ec9b45_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/50/v2-a7299ab0413956f2846bc011f5ec9b45_hd.jpg\"></figure><p><b>快应用的推出也宣告着，手机厂商VS微信战争的序章。</b>但这只是其中一条战线，还有另一条战线，我们在文末再说。</p><p><br></p><p><b>二、快应用是否会对微信小程序造成影响？</b></p><p>我的答案是一定会的，下面是我做的SWOT分析内容：<br></p><figure><noscript><img src=\"https://pic4.zhimg.com/50/v2-5d27bf2cf5c8dbb2c22e1a427a4e24ba_hd.jpg\" data-size=\"normal\" data-rawwidth=\"1294\" data-rawheight=\"636\" class=\"origin_image zh-lightbox-thumb\" width=\"1294\" data-original=\"https://pic4.zhimg.com/v2-5d27bf2cf5c8dbb2c22e1a427a4e24ba_r.jpg\"></noscript><img src=\"data:image/svg+xml;utf8,<svg%20xmlns=\'http://www.w3.org/2000/svg\'%20width=\'1294\'%20height=\'636\'></svg>\" data-size=\"normal\" data-rawwidth=\"1294\" data-rawheight=\"636\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1294\" data-original=\"https://pic4.zhimg.com/v2-5d27bf2cf5c8dbb2c22e1a427a4e24ba_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/50/v2-5d27bf2cf5c8dbb2c22e1a427a4e24ba_hd.jpg\"><figcaption>快应用相对小程序的SWOT分析</figcaption></figure><p><b>说白了，小程序其实就是微信的功能延展。它使得微信在除了社交之外，几乎可以做所有事情。但是本应该可以任何事情的那个人，应该是操作系统，它做这件事更有优势。</b></p><p>操作系统的优势在于，它离用户近，更方便的让用户触发快应用，运行速度也快。同时在后台的管理服务上也会优于小程序。</p><p>而小程序的核心优势还是在于腾讯的社交链条，社交中是很容易触发场景的，同时在玩法上也更丰富，例如跳一跳这个游戏，在微信里可以多人参与进去，看谁先失败，在操作系统层面就是很难实现的一个痛点。</p><p>更多信息在SWOT图中，我就不一一解读。</p><p><b>所以影响是一定有的，首先我认为前端的技术来代替APP是潮流，这点无需质疑。其次快应用推出就是给互联网服务提供商一个选择，而且对于大部分人来说是更好的选择，稍次一点的话两个都做不也挺好？</b></p><p><br></p><p><b>三、这场注意力之战将会是场景之战</b></p><p>前面说的其实都是线上的一些东西，但真正的战场可能还在线下，而且这个层面上，快应用似乎已经失去了争夺的资本。</p><p>我们为什么说小程序和快应用是未来？</p><p>无需下载只是表象，真正的核心是它更易触发和获得。在随地WiFi，流量便宜的时代，下载APP其实不是什么困难，真正困难的是时间和等待。</p><p><b>而小程序和快应用作为更轻便的形态，才更能实现当下大火的——场景式分发。</b></p><p>所以你看微信和支付宝去年为什么猛推线下，因为线上的场景其实还是有限，但是在线下能触发的场景简直不要太多。</p><figure><noscript><img src=\"https://pic4.zhimg.com/50/v2-74e05d9a6ecf3dfcf7b4673b1657cc76_hd.jpg\" data-size=\"normal\" data-rawwidth=\"586\" data-rawheight=\"440\" class=\"origin_image zh-lightbox-thumb\" width=\"586\" data-original=\"https://pic4.zhimg.com/v2-74e05d9a6ecf3dfcf7b4673b1657cc76_r.jpg\"></noscript><img src=\"data:image/svg+xml;utf8,<svg%20xmlns=\'http://www.w3.org/2000/svg\'%20width=\'586\'%20height=\'440\'></svg>\" data-size=\"normal\" data-rawwidth=\"586\" data-rawheight=\"440\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"586\" data-original=\"https://pic4.zhimg.com/v2-74e05d9a6ecf3dfcf7b4673b1657cc76_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/50/v2-74e05d9a6ecf3dfcf7b4673b1657cc76_hd.jpg\"><figcaption>加油小程序</figcaption></figure><p>你去餐馆吃饭，如果有这么一个小程序或者快应用代替现在的纸质菜单，这就是未来。</p><p>手机以后可能不光会消耗你在线上的注意力，线下的注意力也会被它吸走。<b>而从这个角度说，快应用相对小程序的差距实在是不要太大。</b></p><p><br></p><p><b>四、注意力之战的番外篇</b></p><p>前面说了，快应用是微信反攻手机厂商操作系统。但其实，手机厂商有没有想搞微信的呢？也有……</p><figure><noscript><img src=\"https://pic1.zhimg.com/50/v2-e638979806e7ff0a1eda395730a34dd5_hd.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"644\" data-rawheight=\"279\" class=\"origin_image zh-lightbox-thumb\" width=\"644\" data-original=\"https://pic1.zhimg.com/v2-e638979806e7ff0a1eda395730a34dd5_r.jpg\"></noscript><img src=\"data:image/svg+xml;utf8,<svg%20xmlns=\'http://www.w3.org/2000/svg\'%20width=\'644\'%20height=\'279\'></svg>\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"644\" data-rawheight=\"279\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"644\" data-original=\"https://pic1.zhimg.com/v2-e638979806e7ff0a1eda395730a34dd5_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/50/v2-e638979806e7ff0a1eda395730a34dd5_hd.jpg\"></figure><p>这就是这场注意力之战的另一个战线，不过……可能就掀不起什么风浪。</p><p>因为……</p><a target=\"_blank\" href=\"https://link.zhihu.com/?target=https%3A//www.cnbeta.com/articles/tech/697333.htm\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-fc77165f13d70e2ca62cba696ec80413_180x120.jpg\" data-image-width=\"600\" data-image-height=\"383\" class=\"LinkCard LinkCard--hasImage\"><span class=\"LinkCard-backdrop\" style=\"background-image:url(https://pic4.zhimg.com/v2-fc77165f13d70e2ca62cba696ec80413_180x120.jpg);\"></span><span class=\"LinkCard-content\"><span><span class=\"LinkCard-title\" data-text=\"true\">小米锤子中枪：微信封禁传送门、Onestep - WeChat 腾讯微信 - cnBeta.COM</span><span class=\"LinkCard-meta\"><span style=\"display:inline-flex;align-items:center;\">​<svg class=\"Zi Zi--InsertLink\" fill=\"currentColor\" viewBox=\"0 0 24 24\" width=\"17\" height=\"17\"><path d=\"M6.77 17.23c-.905-.904-.94-2.333-.08-3.193l3.059-3.06-1.192-1.19-3.059 3.058c-1.489 1.489-1.427 3.954.138 5.519s4.03 1.627 5.519.138l3.059-3.059-1.192-1.192-3.059 3.06c-.86.86-2.289.824-3.193-.08zm3.016-8.673l1.192 1.192 3.059-3.06c.86-.86 2.289-.824 3.193.08.905.905.94 2.334.08 3.194l-3.059 3.06 1.192 1.19 3.059-3.058c1.489-1.489 1.427-3.954-.138-5.519s-4.03-1.627-5.519-.138L9.786 8.557zm-1.023 6.68c.33.33.863.343 1.177.029l5.34-5.34c.314-.314.3-.846-.03-1.176-.33-.33-.862-.344-1.176-.03l-5.34 5.34c-.314.314-.3.846.03 1.177z\" fill-rule=\"evenodd\"/></svg></span>www.cnbeta.com</span></span><span class=\"LinkCard-imageCell\"><img class=\"LinkCard-image LinkCard-image--horizontal\" alt=\"图标\" src=\"https://pic4.zhimg.com/v2-fc77165f13d70e2ca62cba696ec80413_180x120.jpg\"></span></span></a><p>这件事的逻辑在于</p><p><b>传送门的话，能把微信里的场景通过关键词连接出来，连到其它应用里面去。例如通过一本书的名字，可以很快的跳转到豆瓣。</b></p><p>仔细想想还挺符合“用完就走”的逻辑的，然而你真的想走？</p><p>一巴掌就给你拍回来！</p><p><br></p><p>本文花费了我极大的精力，看完请帮忙点个赞和关注呗……</p></span><!-- react-empty: 327 --></div><div data-reactid=\"328\"><div class=\"ContentItem-time\" data-reactid=\"329\"><a target=\"_blank\" href=\"/question/268663484/answer/343792088\" data-reactid=\"330\"><span data-tooltip=\"发布于 2018-03-17 15:48\" data-reactid=\"331\">发布于 2018-03-17</span></a></div></div><div class=\"ContentItem-actions RichContent-actions\" data-reactid=\"332\"><span data-reactid=\"333\"><button class=\"Button VoteButton VoteButton--up\" aria-label=\"赞同\" type=\"button\" data-reactid=\"334\"><svg viewBox=\"0 0 20 18\" class=\"Icon VoteButton-upIcon Icon--triangle\" style=\"height:16px;width:9px;\" width=\"9\" height=\"16\" aria-hidden=\"true\" data-reactid=\"335\"><title data-reactid=\"336\"/><g data-reactid=\"337\"><path d=\"M0 15.243c0-.326.088-.533.236-.896l7.98-13.204C8.57.57 9.086 0 10 0s1.43.57 1.784 1.143l7.98 13.204c.15.363.236.57.236.896 0 1.386-.875 1.9-1.955 1.9H1.955c-1.08 0-1.955-.517-1.955-1.9z\"/></g></svg><!-- react-text: 338 -->391<!-- /react-text --></button><button class=\"Button VoteButton VoteButton--down\" aria-label=\"反对\" type=\"button\" data-reactid=\"339\"><svg viewBox=\"0 0 20 18\" class=\"Icon VoteButton-downIcon Icon--triangle\" style=\"height:16px;width:9px;\" width=\"9\" height=\"16\" aria-hidden=\"true\" data-reactid=\"340\"><title data-reactid=\"341\"/><g data-reactid=\"342\"><path d=\"M0 15.243c0-.326.088-.533.236-.896l7.98-13.204C8.57.57 9.086 0 10 0s1.43.57 1.784 1.143l7.98 13.204c.15.363.236.57.236.896 0 1.386-.875 1.9-1.955 1.9H1.955c-1.08 0-1.955-.517-1.955-1.9z\"/></g></svg></button></span><button class=\"Button ContentItem-action Button--plain Button--withIcon Button--withLabel\" type=\"button\" data-reactid=\"343\"><span style=\"display:inline-flex;align-items:center;\" data-reactid=\"344\"><!-- react-text: 345 -->​<!-- /react-text --><svg class=\"Zi Zi--Comment Button-zi\" fill=\"currentColor\" viewBox=\"0 0 24 24\" width=\"1.2em\" height=\"1.2em\" data-reactid=\"346\"><path d=\"M10.241 19.313a.97.97 0 0 0-.77.2 7.908 7.908 0 0 1-3.772 1.482.409.409 0 0 1-.38-.637 5.825 5.825 0 0 0 1.11-2.237.605.605 0 0 0-.227-.59A7.935 7.935 0 0 1 3 11.25C3 6.7 7.03 3 12 3s9 3.7 9 8.25-4.373 9.108-10.759 8.063z\" fill-rule=\"evenodd\" data-reactid=\"347\"/></svg></span><!-- react-text: 348 -->28 条评论<!-- /react-text --></button><div class=\"Popover ShareMenu ContentItem-action\" data-reactid=\"349\"><div class=\"\" id=\"null-toggle\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-owns=\"null-content\" data-reactid=\"350\"><button class=\"Button Button--plain Button--withIcon Button--withLabel\" type=\"button\" data-reactid=\"351\"><span style=\"display:inline-flex;align-items:center;\" data-reactid=\"352\"><!-- react-text: 353 -->​<!-- /react-text --><svg class=\"Zi Zi--Share Button-zi\" fill=\"currentColor\" viewBox=\"0 0 24 24\" width=\"1.2em\" height=\"1.2em\" data-reactid=\"354\"><path d=\"M2.931 7.89c-1.067.24-1.275 1.669-.318 2.207l5.277 2.908 8.168-4.776c.25-.127.477.198.273.39L9.05 14.66l.927 5.953c.18 1.084 1.593 1.376 2.182.456l9.644-15.242c.584-.892-.212-2.029-1.234-1.796L2.93 7.89z\" fill-rule=\"evenodd\" data-reactid=\"355\"/></svg></span><!-- react-text: 356 -->分享<!-- /react-text --></button></div><!-- react-empty: 357 --></div><button class=\"Button ContentItem-action Button--plain Button--withIcon Button--withLabel\" type=\"button\" data-reactid=\"358\"><span style=\"display:inline-flex;align-items:center;\" data-reactid=\"359\"><!-- react-text: 360 -->​<!-- /react-text --><svg class=\"Zi Zi--Star Button-zi\" fill=\"currentColor\" viewBox=\"0 0 24 24\" width=\"1.2em\" height=\"1.2em\" data-reactid=\"361\"><path d=\"M5.515 19.64l.918-5.355-3.89-3.792c-.926-.902-.639-1.784.64-1.97L8.56 7.74l2.404-4.871c.572-1.16 1.5-1.16 2.072 0L15.44 7.74l5.377.782c1.28.186 1.566 1.068.64 1.97l-3.89 3.793.918 5.354c.219 1.274-.532 1.82-1.676 1.218L12 18.33l-4.808 2.528c-1.145.602-1.896.056-1.677-1.218z\" fill-rule=\"evenodd\" data-reactid=\"362\"/></svg></span><!-- react-text: 363 -->收藏<!-- /react-text --></button><button class=\"Button ContentItem-action Button--plain Button--withIcon Button--withLabel\" type=\"button\" data-reactid=\"364\"><span style=\"display:inline-flex;align-items:center;\" data-reactid=\"365\"><!-- react-text: 366 -->​<!-- /react-text --><svg class=\"Zi Zi--Heart Button-zi\" fill=\"currentColor\" viewBox=\"0 0 24 24\" width=\"1.2em\" height=\"1.2em\" data-reactid=\"367\"><path d=\"M2 8.437C2 5.505 4.294 3.094 7.207 3 9.243 3 11.092 4.19 12 6c.823-1.758 2.649-3 4.651-3C19.545 3 22 5.507 22 8.432 22 16.24 13.842 21 12 21 10.158 21 2 16.24 2 8.437z\" fill-rule=\"evenodd\" data-reactid=\"368\"/></svg></span><!-- react-text: 369 -->感谢<!-- /react-text --></button><button class=\"Button ContentItem-action ContentItem-rightButton Button--plain\" data-zop-retract-question=\"true\" type=\"button\" data-reactid=\"370\"><span class=\"RichContent-collapsedText\" data-reactid=\"371\">收起</span><svg viewBox=\"0 0 10 6\" class=\"Icon ContentItem-arrowIcon is-active Icon--arrow\" style=\"height:16px;width:10px;\" width=\"10\" height=\"16\" aria-hidden=\"true\" data-reactid=\"372\"><title data-reactid=\"373\"/><g data-reactid=\"374\"><path d=\"M8.716.217L5.002 4 1.285.218C.99-.072.514-.072.22.218c-.294.29-.294.76 0 1.052l4.25 4.512c.292.29.77.29 1.063 0L9.78 1.27c.293-.29.293-.76 0-1.052', '为什么小米、OV 等 9 大手机厂商发起「快应用」项目？会对微信小程序以及 App 生态有何影响？ - 知乎\n\n[](//www.zhihu.com)\n\n[首页](//www.zhihu.com/)[发现](//www.zhihu.com/explore)[话题](//www.zhihu.com/topic)\n\n登录加入知乎\n\n[\n\n小米科技\n\n\n\n](//www.zhihu.com/topic/19552883)\n\n[\n\n魅族科技\n\n\n\n](//www.zhihu.com/topic/19552917)\n\n[\n\n微信\n\n\n\n](//www.zhihu.com/topic/19554470)\n\n[\n\n华为\n\n\n\n](//www.zhihu.com/topic/19565956)\n\n[\n\n微信小程序\n\n\n\n](//www.zhihu.com/topic/20061410)\n\n为什么小米、OV 等 9 大手机厂商发起「快应用」项目？会对微信小程序以及 App 生态有何影响？\n=================================================\n\n1\\. 九大厂商联合推动这个项目意义何在？ 2. 快应用对微信小程序是否会造成影响？ 3. 快应用对APP应用生态是否有更大影响？快应用标准是由主流智能手机厂商发起，在相关行业协会指导监督下，共同推出的硬件新生态标准。旨在赋能开发者拓展场景未来，以标准化的方式接入，促进新生态发展。快应用是基于硬件厂商OS的新型生态，用户即点即用，打破传统流失转化瓶颈，与手机系统深度整合，达到用户需求与场景完美融合，并促使开发者一…显示全部\n\n关注者\n\n**1,728**\n\n被浏览\n\n**467,220**\n\n关注问题写回答\n\n​9 条评论\n\n​分享\n\n​邀请回答\n\n​\n\n#### 111 个回答\n\n默认排序​\n\n[![知晓程序](https://pic2.zhimg.com/v2-59ea678ab943faab0c4dfbb89832027b_xs.jpg)](//www.zhihu.com/org/zhi-xiao-cheng-xu)\n\n[知晓程序](//www.zhihu.com/org/zhi-xiao-cheng-xu)\n\n[用户标识 1](/question/48510028)\n\n已认证的官方帐号\n\n468 人赞同了该回答\n\n**针对本问题，我们于昨日深度剖析了一下「快应用」出现的前因后果，由此对市场变化的推测，以及趋势变化的一些思考。**\n\n* * *\n\n市场变化及猜测\n-------\n\n继 2017 年小米推出「直达服务」、魅族推出「快捷应用」、金立推出「秒开应用」之后，如今，手机厂商将基于安卓生态合力进击，试图重新拿回应用分发上的主导权。\n\n而整个小程序生态历经一整年风风雨雨，2018 年势必迎来全面爆发。作为新一代移动端应用分发入口，小程序的趋势明朗化，竞争也在急剧激烈化。战线从手机 QQ、QQ 浏览器、支付宝、手机淘宝，再拉到了谷歌的 Instant App 和 PWA、Facebook 的 React Native。\n\n此外，**行业还一度盛传今日头条或将发力小程序，百度类似直达号的轻型应用也可能曲线回归，一场围绕移动互联网下半场的关键战役已经全面打响。**\n\n「快应用」对标「小程序」，手机厂商究竟在做什么？\n------------------------\n\n在公众号「小米开放平台」当天的推送文章中，我们可以看到这样的段落：\n\n> 快应用使用前端技术栈开发，原生渲染，同时具备 HTML 5 页面和原生应用的双重优点。用户无需下载安装，即点即用，享受原生应用的性能体验。\n\n这个说法是不是似曾相识？没错，这些都是微信小程序的卖点：同样使用前端技术栈，同样具备 HTML 5 与 Native App 的双重优势，用户使用微信小程序和快应用，也皆可以「即点即用」。\n\n  \n\n<img src=\"https://pic3.zhimg.com/50/v2-53e99fc884e5bea5997dfce2b542d24d\\_hd.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"640\" class=\"origin\\_image zh-lightbox-thumb\" width=\"1024\" data-original=\"https://pic3.zhimg.com/v2-53e99fc884e5bea5997dfce2b542d24d_r.jpg\">\n\n![](data:image/svg+xml;utf8,<svg%20xmlns=\'http://www.w3.org/2000/svg\'%20width=\'1024\'%20height=\'640\'></svg>)\n\n  \n\n回过头看看同样拥有这些卖点的支付宝小程序吧。\n\n对比微信与支付宝两个小程序平台的开发文档，除了一些特定接口因业务需要而有所差异之外，二者的接口、组件相似度极高；实际上手中，开发者也完全可以做到将小程序几乎零成本地从微信移植到支付宝。\n\n  \n\n<img src=\"https://pic3.zhimg.com/50/v2-ce803c05d798ebef0cd5ab260edcd81a\\_hd.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"512\" data-rawheight=\"1024\" class=\"origin\\_image zh-lightbox-thumb\" width=\"512\" data-original=\"https://pic3.zhimg.com/v2-ce803c05d798ebef0cd5ab260edcd81a_r.jpg\">\n\n![](data:image/svg+xml;utf8,<svg%20xmlns=\'http://www.w3.org/2000/svg\'%20width=\'512\'%20height=\'1024\'></svg>)\n\n  \n\n知晓程序认为，虽然目前详细的开发文档尚未流出，但同样使用前端技术的快应用，没有理由自己再建立一套开发标准，否则在标准、开发者培训以及技术栈构建上都会出现较大问题，大大削弱快应用平台的竞争力。\n\n因此，**快应用极有可能与支付宝一样，使用与微信小程序看齐的开发标准**，尽最大可能，降低开发者的开发门槛，进一步吸引更多小程序，特别是微信小程序，移植到快应用平台。\n\n大家可以持续关注「知晓程序」公众号，我们会在 20 号发布会之后为大家带来第一时间的开发文档解读。\n\n微信和手机厂商，谁能抢占手机桌面？\n-----------------\n\n实际上，9 大具有广泛的硬件销售竞争关系的手机厂商能够合推快应用标准，首先得益于此前已经建立的联盟关系。\n\n早在 2014 年 8 月 1 日，国内一线手机制造商就曾经成立了一个叫「硬核联盟」的组织，又称「安卓智能手机生态系统联盟」，由玩咖传媒联手当时的 6 大手机制造商共同成立。\n\n  \n\n<img src=\"https://pic4.zhimg.com/50/v2-9047a236932e56b1c67e7cea3ade9382\\_hd.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"664\" class=\"origin\\_image zh-lightbox-thumb\" width=\"1000\" data-original=\"https://pic4.zhimg.com/v2-9047a236932e56b1c67e7cea3ade9382_r.jpg\">\n\n![](data:image/svg+xml;utf8,<svg%20xmlns=\'http://www.w3.org/2000/svg\'%20width=\'1000\'%20height=\'664\'></svg>)\n\n  \n\n「硬核联盟」施行商务共享，一家可以代表联盟共同谈判，提高 CP 的分发及渠道效率，通过一个接口实现与多个手机厂商的合作。主要针对优秀的游戏和应用产品，进行众推或者联合首发。**而此次的标准仍然由「硬核联盟」所推动，从而让手机厂商具有行动一致，以及平台化分发的基础。**\n\n随着小程序的强势崛起，事实上，小米和魅族等之所以急于上线各自的轻型应用，不仅在于微信在自有的 App 内部搭建了完整的互联网应用生态，**也因为微信利用安卓的系统规则，将小程序直接触达到了手机桌面。**\n\n  \n\n<img src=\"https://pic3.zhimg.com/50/v2-3ffbf4ae4cca9b0b3dc1f06371392d22\\_hd.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"887\" class=\"origin\\_image zh-lightbox-thumb\" width=\"1000\" data-original=\"https://pic3.zhimg.com/v2-3ffbf4ae4cca9b0b3dc1f06371392d22_r.jpg\">\n\n![](data:image/svg+xml;utf8,<svg%20xmlns=\'http://www.w3.org/2000/svg\'%20width=\'1000\'%20height=\'887\'></svg>)\n\n  \n\n「快应用」的推出，看似是手机厂商的底层革命，实际上却是针对微信已经反攻到了手机桌面端的被动应对。\n\n手机桌面小程序「快捷方式」的意义，对于微信而言，已经不只是便于用户使用的入口，也在最大程度上延伸了微信的触角，**每一个布置在手机桌面的小程序，都会是用户快速回到微信的入口，换言之，每个小程序不是在消耗微信流量，而是在为微信引流！**利用手机桌面，微信已经在这种导流与回流当中，形成了非常稳定的闭环关系。\n\n  \n\n<img src=\"https://pic1.zhimg.com/50/v2-9b3c9ec8a3f13527bc232a052cabd8a5\\_hd.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"640\" class=\"origin\\_image zh-lightbox-thumb\" width=\"1024\" data-original=\"https://pic1.zhimg.com/v2-9b3c9ec8a3f13527bc232a052cabd8a5_r.jpg\">\n\n![](data:image/svg+xml;utf8,<svg%20xmlns=\'http://www.w3.org/2000/svg\'%20width=\'1024\'%20height=\'640\'></svg>)\n\n  \n\n而手机厂商为此不仅失去了应用分发的价值，也被截断了预装和广告营销的红利。为此，手机厂商必须建立一种新的规则重构应用分发机制。这就成为「快应用」推出的根本原因。\n\n而现在看来，用户体验上的最大不确定性，就是快应用和小程序如何在手机桌面共存？会不会在桌面端出现两个图标，由此对用户造成干扰？\n\n场景化流量大于搜索，「快应用」如何逆袭？\n--------------------\n\n的确，微信、支付宝小程序要求用户安装、注册相应 App 才能使用。快应用则不需要，只需拥有一台支持快应用标准的机器（甚至连手机都不用换，只需要升级、更换系统固件），就能使用快应用，而且，快应用还能直接从系统桌面直接启动。\n\n这使得用户使用快应用的成本与使用路径，要比使用小程序短得多。同时，由于减少了微信、支付宝这层中间媒介，改为由系统直接运行快应用，**理论上快应用的性能运行表现，一定是优于小程序平台的。**\n\n  \n\n<img src=\"https://pic1.zhimg.com/50/v2-74d0d70c82ec25142b113dcc55c2fbed\\_hd.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"994\" class=\"origin\\_image zh-lightbox-thumb\" width=\"1000\" data-original=\"https://pic1.zhimg.com/v2-74d0d70c82ec25142b113dcc55c2fbed_r.jpg\">\n\n![](data:image/svg+xml;utf8,<svg%20xmlns=\'http://www.w3.org/2000/svg\'%20width=\'1000\'%20height=\'994\'></svg>)\n\n  \n\n不过，尽管如此，但快应用要想推广开来仍然充满挑战。\n\n最大的挑战不是来自应用本身，而是用户对应用分发不可逆转的习惯趋势。\n\n微信所形成的巨大流量场效应被谈及最多，这是手机应用商店所无法达到的指数级体量差距。但这却并非最主要的，根本原因在于，手机厂商的另一杀手锏，也就是桌面端的直达搜索功能可能也没办法达到预期。\n\n  \n\n<img src=\"https://pic7.zhimg.com/50/v2-d117f084d45228c9a024552f818c8da5\\_hd.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"512\" class=\"origin\\_image zh-lightbox-thumb\" width=\"1024\" data-original=\"https://pic7.zhimg.com/v2-d117f084d45228c9a024552f818c8da5_r.jpg\">\n\n![](data:image/svg+xml;utf8,<svg%20xmlns=\'http://www.w3.org/2000/svg\'%20width=\'1024\'%20height=\'512\'></svg>)\n\n  \n\n一直以来，微信小程序为何会弱化搜索，却打通了近 50 个入口？其实是因为微信已经看准了**接下来应用分发的核心趋势，不是搜索，而是场景化分发。**\n\n微信颠覆了应用分发的基本逻辑。如果说移动互联网上半场的分发规律是搜索，依赖用户主观能动性去寻找应用；那么下半场的分发规律就是场景化体验。所以，轻应用还是「重应用」的问题是第二位的，**首要问题是用户除了记忆一些头部应用之外，大量应用会在偶遇之中用完即走，**这是手机应用极大丰富以后，不可违逆的用户习惯。\n\n  \n\n<img src=\"https://pic4.zhimg.com/50/v2-9dfa9a4fc5ae5b74ed06611f5b68b9c2\\_hd.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"515\" class=\"origin\\_image zh-lightbox-thumb\" width=\"1000\" data-original=\"https://pic4.zhimg.com/v2-9dfa9a4fc5ae5b74ed06611f5b68b9c2_r.jpg\">\n\n![](data:image/svg+xml;utf8,<svg%20xmlns=\'http://www.w3.org/2000/svg\'%20width=\'1000\'%20height=\'515\'></svg>)\n\n  \n\n**而在目前看来，真正的场景化其实只存在于微信、支付宝等头部应用。**\n\n作为社交应用的微信、交易工具的支付宝，它们的小程序平台自然会提供带有平台特色的接口，例如，微信小程序的分享群聊功能、支付宝的读取芝麻信用分等功能，以及两个小程序平台都拥有的支付功能。这些功能都是快应用天生所缺乏的。\n\n布局线下，「小程序码」是否还有一战？\n------------------\n\n如果说，线上缺乏场景，那么在线下，快应用能否扳回一城呢。\n\n事实上，**短期来看，小程序和快应用的争夺集中在线上，但未来真正的战场却在线下。**这从微信小程序今年的发力重点也可以看出端倪。\n\n如今，微信通过整合小程序、微信支付、扫码和卡包等能力，已经将小程序广布到大街小巷、酒店商超、医院机场等各个角落，小程序并不只是一个线上应用，而是变成了 OMO （线上与线下融合）的连接器。\n\n  \n\n<img src=\"https://pic3.zhimg.com/50/v2-03108ba2be0ee581dfa0f705a3e28bc0\\_hd.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"667\" class=\"origin\\_image zh-lightbox-thumb\" width=\"1000\" data-original=\"https://pic3.zhimg.com/v2-03108ba2be0ee581dfa0f705a3e28bc0_r.jpg\">\n\n![](data:image/svg+xml;utf8,<svg%20xmlns=\'http://www.w3.org/2000/svg\'%20width=\'1000\'%20height=\'667\'></svg>)\n\n  \n\n相比较线上，线下其实有更多的服务与应用的场景，而线下直接触达用户的方式就是「码」，无论是微信的二维码、小程序码，还是支付宝的二维码，都成为了直接入口。\n\n相比较微信和支付宝，其实**手机厂商所沉淀的线下商户以及拓展线下商业的能力更不可小觑。**特别是众多手机厂商共同发力，可以迅速完成大量的快应用的物料落地，而一旦形成了用户触达，用户会选择哪种「码」进行扫描就可能充满变数。\n\n然而，尽管手机厂商的地推能力是强项所在，但如果要想真正服务线下，快应用形态又会显得太轻了一些，**毕竟小程序里面所包含的将不只是应用体验那么简单，而是充满整合多能力的一个功能信息集，**而即将上线的快应用，是否能够支持支付、扫码、用户数据、LBS、广告投放等功能，仍然无法得知。\n\n  \n\n<img src=\"https://pic4.zhimg.com/50/v2-5a9bf8dcde8c9cf93dd05b4b9c0d19a3\\_hd.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"750\" class=\"origin\\_image zh-lightbox-thumb\" width=\"1000\" data-original=\"https://pic4.zhimg.com/v2-5a9bf8dcde8c9cf93dd05b4b9c0d19a3_r.jpg\">\n\n![](data:image/svg+xml;utf8,<svg%20xmlns=\'http://www.w3.org/2000/svg\'%20width=\'1000\'%20height=\'750\'></svg>)\n\n  \n\n此外，就线下而言，**调取扫码功能与用户扫码习惯也会是微信小程序的关键优势，**特别是当微信和支付宝已经牢牢占据用户心智之后，要想再挤进来一个「码」的位置也不太大。\n\n而最后，推进现在，也非常考验快应用标准联盟的凝聚力和决心。对于手机厂商而言，如果只是想在线上构建一种纯粹的轻量化的应用体验，那么机会实在不多；但如果想在线上线下全面开战，就必须把推进「快应用」的决心和战略意志，放到和销售手机设备一样的高度上来。\n\n  \n\n**我的其他回答：**\n\n[如何入门微信小程序开发，有哪些学习资料？](https://www.zhihu.com/question/50907897/answer/268867404)\n\n[有哪些常人不知道的「常识」？](https://www.zhihu.com/question/39791312/answer/268333656)\n\n[有哪些送给 20 岁的年轻人的建议？](https://www.zhihu.com/question/28281611/answer/271704031)\n\n[编辑于 2018-03-19](/question/268663484/answer/343010272)\n\n468​56 条评论\n\n​分享\n\n​收藏​感谢收起\n\n[![急性子怪脾气](https://pic4.zhimg.com/3b458a00fc07dfe5f0ba5ed73692691b_xs.jpg)](//www.zhihu.com/people/chu-zhao-jun-3)\n\n[急性子怪脾气](//www.zhihu.com/people/chu-zhao-jun-3)\n\n人工智能研究 米粉\n\n391 人赞同了该回答\n\n**一、九大厂商为何要做这个项目？**\n\n诺贝尔获得者赫伯特-西蒙有一句名言，完美诠释这次九大厂商合纵连横共抗微信的深层含义：\n\n**“随着信息的发展，有价值的不是信息，而是注意力。”**\n\n据此发展出的就是注意力经济：在互联网时代信息是极大过剩甚至是泛滥的，相对于过剩的信息，人的注意力反而是有限的、稀缺的资源。\n\n**注意力经济是一种新型的商业模式，它是互联网厂商重要的商业资产，我们甚至可以把所有的互联网厂商都定义成——注意力商人。**\n\n<img src=\"https://pic1.zhimg.com/50/v2-2ba83f90f97bf064ca80b4f1523ef0dd\\_hd.jpg\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"750\" class=\"origin\\_image zh-lightbox-thumb\" width=\"500\" data-original=\"https://pic1.zhimg.com/v2-2ba83f90f97bf064ca80b4f1523ef0dd_r.jpg\">\n\n![](data:image/svg+xml;utf8,<svg%20xmlns=\'http://www.w3.org/2000/svg\'%20width=\'500\'%20height=\'750\'></svg>)\n\n注意力商人\n\n**回到这次“九大门派围攻光明顶”，真正挑起战争的那方不是九大门派，而是微信。我个人把这场战争称之为——注意力战争。**\n\n张小龙说微信的产品哲学是“用完就走，微信只是一个工具”，你要真信了那就呵呵了。\n\n你看公众号，你看朋友圈，还有本文的主题——小程序。他所谓的用完就走，其实你根本走不出门口，不过是从微信的一个房间走到另一个房间。\n\n**微信是国内的超级APP，小程序出来的时候就有人说它要成 wechat OS，但这背后其实是在抢夺MIUI，EMUEI等国产操作系统的注意力经济。**\n\n<img src=\"https://pic4.zhimg.com/50/v2-1f168e82f01be7daf358a36b7fd5e7b5\\_hd.jpg\" data-size=\"normal\" data-rawwidth=\"360\" data-rawheight=\"480\" class=\"content\\_image\" width=\"360\">\n\n![](data:image/svg+xml;utf8,<svg%20xmlns=\'http://www.w3.org/2000/svg\'%20width=\'360\'%20height=\'480\'></svg>)\n\n谁动了我的奶酪？\n\n好嘛，用户在微信里把什么都干了——能购物也能点餐，新闻信息也能看，吃喝拉撒全包圆。偶尔出去玩个游戏，还是腾讯游戏，一大片国土上有一个超大建筑，所有商户和用户都住在里面，关键这个建筑的产权还是别人的。这谁能受得了？\n\n**从这个逻辑进行反推，你会发现小程序对于微信的意义，比之快应用对于操作系统的意义要重要的多。**\n\n无需下载、点开即用对于厂商来说重要，但比现在APP对用户体验的提升也没那么大。在这之前，也有小米的直达应用等类似服务，一直都是不温不火。但微信的小程序一出，基本上是逼着这些手机厂商必须要做出什么事情来共同应对，这就是本次【快应用】推出的背景。\n\n<img src=\"https://pic1.zhimg.com/50/v2-a7299ab0413956f2846bc011f5ec9b45\\_hd.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"368\" class=\"origin\\_image zh-lightbox-thumb\" width=\"1024\" data-original=\"https://pic1.zhimg.com/v2-a7299ab0413956f2846bc011f5ec9b45_r.jpg\">\n\n![](data:image/svg+xml;utf8,<svg%20xmlns=\'http://www.w3.org/2000/svg\'%20width=\'1024\'%20height=\'368\'></svg>)\n\n**快应用的推出也宣告着，手机厂商VS微信战争的序章。**但这只是其中一条战线，还有另一条战线，我们在文末再说。\n\n  \n\n**二、快应用是否会对微信小程序造成影响？**\n\n我的答案是一定会的，下面是我做的SWOT分析内容：  \n\n<img src=\"https://pic4.zhimg.com/50/v2-5d27bf2cf5c8dbb2c22e1a427a4e24ba\\_hd.jpg\" data-size=\"normal\" data-rawwidth=\"1294\" data-rawheight=\"636\" class=\"origin\\_image zh-lightbox-thumb\" width=\"1294\" data-original=\"https://pic4.zhimg.com/v2-5d27bf2cf5c8dbb2c22e1a427a4e24ba_r.jpg\">\n\n![](data:image/svg+xml;utf8,<svg%20xmlns=\'http://www.w3.org/2000/svg\'%20width=\'1294\'%20height=\'636\'></svg>)\n\n快应用相对小程序的SWOT分析\n\n**说白了，小程序其实就是微信的功能延展。它使得微信在除了社交之外，几乎可以做所有事情。但是本应该可以任何事情的那个人，应该是操作系统，它做这件事更有优势。**\n\n操作系统的优势在于，它离用户近，更方便的让用户触发快应用，运行速度也快。同时在后台的管理服务上也会优于小程序。\n\n而小程序的核心优势还是在于腾讯的社交链条，社交中是很容易触发场景的，同时在玩法上也更丰富，例如跳一跳这个游戏，在微信里可以多人参与进去，看谁先失败，在操作系统层面就是很难实现的一个痛点。\n\n更多信息在SWOT图中，我就不一一解读。\n\n**所以影响是一定有的，首先我认为前端的技术来代替APP是潮流，这点无需质疑。其次快应用推出就是给互联网服务提供商一个选择，而且对于大部分人来说是更好的选择，稍次一点的话两个都做不也挺好？**\n\n  \n\n**三、这场注意力之战将会是场景之战**\n\n前面说的其实都是线上的一些东西，但真正的战场可能还在线下，而且这个层面上，快应用似乎已经失去了争夺的资本。\n\n我们为什么说小程序和快应用是未来？\n\n无需下载只是表象，真正的核心是它更易触发和获得。在随地WiFi，流量便宜的时代，下载APP其实不是什么困难，真正困难的是时间和等待。\n\n**而小程序和快应用作为更轻便的形态，才更能实现当下大火的——场景式分发。**\n\n所以你看微信和支付宝去年为什么猛推线下，因为线上的场景其实还是有限，但是在线下能触发的场景简直不要太多。\n\n<img src=\"https://pic4.zhimg.com/50/v2-74e05d9a6ecf3dfcf7b4673b1657cc76\\_hd.jpg\" data-size=\"normal\" data-rawwidth=\"586\" data-rawheight=\"440\" class=\"origin\\_image zh-lightbox-thumb\" width=\"586\" data-original=\"https://pic4.zhimg.com/v2-74e05d9a6ecf3dfcf7b4673b1657cc76_r.jpg\">\n\n![](data:image/svg+xml;utf8,<svg%20xmlns=\'http://www.w3.org/2000/svg\'%20width=\'586\'%20height=\'440\'></svg>)\n\n加油小程序\n\n你去餐馆吃饭，如果有这么一个小程序或者快应用代替现在的纸质菜单，这就是未来。\n\n手机以后可能不光会消耗你在线上的注意力，线下的注意力也会被它吸走。**而从这个角度说，快应用相对小程序的差距实在是不要太大。**\n\n  \n\n**四、注意力之战的番外篇**\n\n前面说了，快应用是微信反攻手机厂商操作系统。但其实，手机厂商有没有想搞微信的呢？也有……\n\n<img src=\"https://pic1.zhimg.com/50/v2-e638979806e7ff0a1eda395730a34dd5\\_hd.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"644\" data-rawheight=\"279\" class=\"origin\\_image zh-lightbox-thumb\" width=\"644\" data-original=\"https://pic1.zhimg.com/v2-e638979806e7ff0a1eda395730a34dd5_r.jpg\">\n\n![](data:image/svg+xml;utf8,<svg%20xmlns=\'http://www.w3.org/2000/svg\'%20width=\'644\'%20height=\'279\'></svg>)\n\n这就是这场注意力之战的另一个战线，不过……可能就掀不起什么风浪。\n\n因为……\n\n[小米锤子中枪：微信封禁传送门、Onestep - WeChat 腾讯微信 - cnBeta.COM​www.cnbeta.com![图标](https://pic4.zhimg.com/v2-fc77165f13d70e2ca62cba696ec80413_180x120.jpg)](https://link.zhihu.com/?target=https%3A//www.cnbeta.com/articles/tech/697333.htm)\n\n这件事的逻辑在于\n\n**传送门的话，能把微信里的场景通过关键词连接出来，连到其它应用里面去。例如通过一本书的名字，可以很快的跳转到豆瓣。**\n\n仔细想想还挺符合“用完就走”的逻辑的，然而你真的想走？\n\n一巴掌就给你拍回来！\n\n  \n\n本文花费了我极大的精力，看完请帮忙点个赞和关注呗……\n\n[发布于 2018-03-17](/question/268663484/answer/343792088)\n\n391​28 条评论\n\n​分享\n\n​收藏​感谢收起\n\n创立之初，魅族通过三年时间成为中国最知名的音乐播放器品牌，2006 年全面转型进入智能手机领域，陆续发布M8、M9、MX、MX2、MX3、MX4、MX5、魅蓝 note2、魅蓝2、PRO 5 及魅蓝metal 等多款智能手机；并推出基于Android，自主深度优化的操作系统——Flyme。  \n2015 年，魅族完成智能手机品牌布局，细分为 PRO（高端）、MX（中端）、魅蓝（超高性价比）三个品牌。\",\"avatarUrl\":\"https://pic1.zhimg.com/7549aca1e238c450bbf75063f3a295dd_is.jpg\",\"name\":\"魅族科技\",\"url\":\"http://www.zhihu.com/api/v4/topics/19552917\",\"type\":\"topic\",\"excerpt\":\"魅族科技由黄章于 2003 年创立 ，公司以设计研发优雅易用的智能设备和系统为依托，致力于打造开放共赢的移动互联网智能生态。 创立之初，魅族通过三年时间成为中国最知名的音乐播放器品牌，2006 年全面转型进入智能手机领域，陆续发布M8、M9、MX、MX2、MX3、MX4、MX5、魅蓝 note2、魅蓝2、PRO 5 及魅蓝metal 等多款智能手机；并推出基于Android，自主深度优化的操作系统——Flyme。 2015 年，魅族完成智能手机品牌布局，细分为 P…\",\"id\":\"19552917\"},{\"introduction\":\"**微信**（**WeChat**）是腾讯公司（Tencent Inc.）旗下的一款移动端为主的即时通讯（IM）应用。\",\"avatarUrl\":\"https://pic3.zhimg.com/v2-16c7fa49636459f804f61b8bfeb56945\\_is.jpg\",\"name\":\"微信\",\"url\":\"http://www.zhihu.com/api/v4/topics/19554470\",\"type\":\"topic\",\"excerpt\":\"微信（WeChat）是腾讯公司（Tencent Inc.）旗下的一款移动端为主的即时通讯（IM）应用。\",\"id\":\"19554470\"},{\"introduction\":\"信息与通信解决方案供应商。\",\"avatarUrl\":\"https://pic4.zhimg.com/bcb72d538\\_is.jpg\",\"name\":\"华为\",\"url\":\"http://www.zhihu.com/api/v4/topics/19565956\",\"type\":\"topic\",\"excerpt\":\"信息与通信解决方案供应商。\",\"id\":\"19565956\"},{\"introduction\":\"2017年1月9日，微信小程序正式上线。微信小程序无需下载，无需安装，即扫即用，属于轻量型应用。\",\"avatarUrl\":\"https://pic4.zhimg.com/v2-3a55e9006af87ca31c15ceec36e2e464_is.jpg\",\"name\":\"微信小程序\",\"url\":\"http://www.zhihu.com/api/v4/topics/20061410\",\"type\":\"topic\",\"excerpt\":\"2017年1月9日，微信小程序正式上线。微信小程序无需下载，无需安装，即扫即用，属于轻量型应用。\",\"id\":\"20061410\"}\\],\"excerpt\":\"1. 九大厂商联合推动这个项目意义何在？ 2. 快应用对微信小程序是否会造成影响？ 3. 快应用对APP应用生态是否有更大影响？快应用标准是由主流智能手机厂商发起，在相关行业协会指导监督下，共同推出的硬件新生态标准。旨在赋能开发者拓展场景未来，以标准化的方式接入，促进新生态发展。快应用是基于硬件厂商OS的新型生态，用户即点即用，打破传统流失转化瓶颈，与手机系统深度整合，达到用户需求与场景完美融合，并促使开发者一…\",\"adminClosedComment\":false,\"isEditable\":false,\"reviewInfo\":{\"isReviewing\":false,\"tips\":\"\",\"editTips\":\"\",\"type\":\"\"},\"answerCount\":111,\"editableDetail\":\"\n\n1\\. 九大厂商联合推动这个项目意义何在？  \n2\\. 快应用对微信小程序是否会造成影响？  \n3\\. 快应用对APP应用生态是否有更大影响？\n\n> 快应用标准是由主流智能手机厂商发起，在相关行业协会指导监督下，共同推出的硬件新生态标准。旨在赋能开发者拓展场景未来，以标准化的方式接入，促进新生态发展。快应用是基于硬件厂商OS的新型生态，用户即点即用，打破传统流失转化瓶颈，与手机系统深度整合，达到用户需求与场景完美融合，并促使开发者一站式接入，实现主流厂商覆盖及海量曝光展示。\n\n  \n\n[快应用标准启动发布会H5](\\\"http://quickapp.legendh5.com/h5/ba11d9af-4292-2298-26f3-56881580f638.html\\\")\n\n![](\\\"https://pic1.zhimg.com/50/v2-ad837161e886b30015f18a36e918ffc4_hd.jpg\\\")\n\n\",\"visitCount\":467220,\"id\":268663484,\"collapsedAnswerCount\":14,\"author\":{\"avatarUrlTemplate\":\"https://pic2.zhimg.com/5f0b4486c_{size}.jpg\",\"badge\":\\[\\],\"type\":\"people\",\"name\":\"龙翎\",\"url\":\"http://www.zhihu.com/api/v4/people/9baba2c6fe4c976be2b41ade1348afd5\",\"gender\":1,\"userType\":\"people\",\"isAdvertiser\":false,\"avatarUrl\":\"https://pic2.zhimg.com/5f0b4486c_is.jpg\",\"isFollowing\":false,\"isOrg\":false,\"headline\":\"文艺，技术，宅\",\"urlToken\":\"long-ling-48\",\"id\":\"9baba2c6fe4c976be2b41ade1348afd5\"},\"url\":\"http://www.zhihu.com/api/v4/questions/268663484\",\"commentPermission\":\"all\",\"created\":1520867385,\"detail\":\"\n\n1\\. 九大厂商联合推动这个项目意义何在？  \n2\\. 快应用对微信小程序是否会造成影响？  \n3\\. 快应用对APP应用生态是否有更大影响？\n\n> 快应用标准是由主流智能手机厂商发起，在相关行业协会指导监督下，共同推出的硬件新生态标准。旨在赋能开发者拓展场景未来，以标准化的方式接入，促进新生态发展。快应用是基于硬件厂商OS的新型生态，用户即点即用，打破传统流失转化瓶颈，与手机系统深度整合，达到用户需求与场景完美融合，并促使开发者一站式接入，实现主流厂商覆盖及海量曝光展示。\n\n  \n\n[快应用标准启动发布会H5](\\\"https://link.zhihu.com/?target=http%3A//quickapp.legendh5.com/h5/ba11d9af-4292-2298-26f3-56881580f638.html\\\")\n\n![](\\\"https://pic1.zhimg.com/50/v2-ad837161e886b30015f18a36e918ffc4_hd.jpg\\\")\n\n\",\"updatedTime\":1521185905,\"hasPublishingDraft\":false,\"commentCount\":9,\"questionType\":\"normal\",\"followerCount\":1728,\"title\":\"为什么小米、OV 等 9 大手机厂商发起「快应用」项目？会对微信小程序以及 App 生态有何影响？\",\"canComment\":{\"status\":true,\"reason\":\"\"},\"type\":\"question\",\"isNormal\":true}},\"answers\":{\"343010272\":{\"relevantInfo\":{\"isRelevant\":false},\"suggestEdit\":{\"status\":false,\"reason\":\"\",\"title\":\"\",\"url\":\"\",\"unnormalDetails\":{},\"tip\":\"\"},\"relationship\":{\"upvotedFollowees\":\\[\\],\"isAuthor\":false,\"isNothelp\":false,\"isAuthorized\":false,\"voting\":0,\"isThanked\":false},\"editableContent\":\"\",\"markInfos\":\\[\\],\"excerpt\":\"**针对本问题，我们于昨日深度剖析了一下「快应用」出现的前因后果，由此对市场变化的推测，以及趋势变化的一些思考。**市场变化及猜测继 2017 年小米推出「直达服务」、魅族推出「快捷应用」、金立推出「秒开应用」之后，如今，手机厂商将基于安卓生态合力进击…\",\"annotationAction\":\\[\\],\"adminClosedComment\":false,\"collapsedBy\":\"nobody\",\"canComment\":{\"status\":true,\"reason\":\"\"},\"createdTime\":1521182280,\"id\":343010272,\"voteupCount\":468,\"collapseReason\":\"\",\"isCollapsed\":false,\"isSticky\":false,\"url\":\"http://www.zhihu.com/api/v4/answers/343010272\",\"commentPermission\":\"all\",\"author\":{\"avatarUrlTemplate\":\"https://pic2.zhimg.com/v2-59ea678ab943faab0c4dfbb89832027b_{size}.jpg\",\"badge\":\\[{\"type\":\"identity\",\"description\":\"已认证的官方帐号\"}\\],\"type\":\"people\",\"name\":\"知晓程序\",\"url\":\"http://www.zhihu.com/api/v4/people/bd647a6fe7e9d1da50ac79c8478a65c0\",\"gender\":-1,\"userType\":\"organization\",\"isAdvertiser\":false,\"avatarUrl\":\"https://pic2.zhimg.com/v2-59ea678ab943faab0c4dfbb89832027b_is.jpg\",\"isOrg\":true,\"headline\":\"关注「知晓程序」微信公众号，获取最新小程序资讯、推荐。\",\"followerCount\":3622,\"urlToken\":\"zhi-xiao-cheng-xu\",\"id\":\"bd647a6fe7e9d1da50ac79c8478a65c0\"},\"question\":{\"questionType\":\"normal\",\"created\":1520867385,\"url\":\"http://www.zhihu.com/api/v4/questions/268663484\",\"title\":\"为什么小米、OV 等 9 大手机厂商发起「快应用」项目？会对微信小程序以及 App 生态有何影响？\",\"type\":\"question\",\"id\":268663484,\"updatedTime\":1521185905},\"updatedTime\":1521439716,\"content\":\"\n\n**针对本问题，我们于昨日深度剖析了一下「快应用」出现的前因后果，由此对市场变化的推测，以及趋势变化的一些思考。**\n\n* * *\n\n市场变化及猜测\n-------\n\n继 2017 年小米推出「直达服务」、魅族推出「快捷应用」、金立推出「秒开应用」之后，如今，手机厂商将基于安卓生态合力进击，试图重新拿回应用分发上的主导权。\n\n而整个小程序生态历经一整年风风雨雨，2018 年势必迎来全面爆发。作为新一代移动端应用分发入口，小程序的趋势明朗化，竞争也在急剧激烈化。战线从手机 QQ、QQ 浏览器、支付宝、手机淘宝，再拉到了谷歌的 Instant App 和 PWA、Facebook 的 React Native。\n\n此外，**行业还一度盛传今日头条或将发力小程序，百度类似直达号的轻型应用也可能曲线回归，一场围绕移动互联网下半场的关键战役已经全面打响。**\n\n「快应用」对标「小程序」，手机厂商究竟在做什么？\n------------------------\n\n在公众号「小米开放平台」当天的推送文章中，我们可以看到这样的段落：\n\n> 快应用使用前端技术栈开发，原生渲染，同时具备 HTML 5 页面和原生应用的双重优点。用户无需下载安装，即点即用，享受原生应用的性能体验。\n\n这个说法是不是似曾相识？没错，这些都是微信小程序的卖点：同样使用前端技术栈，同样具备 HTML 5 与 Native App 的双重优势，用户使用微信小程序和快应用，也皆可以「即点即用」。\n\n  \n\n<img src=\\\\\"https://pic3.zhimg.com/50/v2-53e99fc884e5bea5997dfce2b542d24d\\_hd.jpg\\\\\" data-caption=\\\\\"\\\\\" data-size=\\\\\"normal\\\\\" data-rawwidth=\\\\\"1024\\\\\" data-rawheight=\\\\\"640\\\\\" class=\\\\\"origin\\_image zh-lightbox-thumb\\\\\" width=\\\\\"1024\\\\\" data-original=\\\\\"https://pic3.zhimg.com/v2-53e99fc884e5bea5997dfce2b542d24d_r.jpg\\\\\">\n\n![](\\\"data:image/svg+xml;utf8,<svg%20xmlns=\'http://www.w3.org/2000/svg\'%20width=\'1024\'%20height=\'640\'></svg>\\\")\n\n  \n\n回过头看看同样拥有这些卖点的支付宝小程序吧。\n\n对比微信与支付宝两个小程序平台的开发文档，除了一些特定接口因业务需要而有所差异之外，二者的接口、组件相似度极高；实际上手中，开发者也完全可以做到将小程序几乎零成本地从微信移植到支付宝。\n\n  \n\n<img src=\\\\\"https://pic3.zhimg.com/50/v2-ce803c05d798ebef0cd5ab260edcd81a\\_hd.jpg\\\\\" data-caption=\\\\\"\\\\\" data-size=\\\\\"normal\\\\\" data-rawwidth=\\\\\"512\\\\\" data-rawheight=\\\\\"1024\\\\\" class=\\\\\"origin\\_image zh-lightbox-thumb\\\\\" width=\\\\\"512\\\\\" data-original=\\\\\"https://pic3.zhimg.com/v2-ce803c05d798ebef0cd5ab260edcd81a_r.jpg\\\\\">\n\n![](\\\"data:image/svg+xml;utf8,<svg%20xmlns=\'http://www.w3.org/2000/svg\'%20width=\'512\'%20height=\'1024\'></svg>\\\")\n\n  \n\n知晓程序认为，虽然目前详细的开发文档尚未流出，但同样使用前端技术的快应用，没有理由自己再建立一套开发标准，否则在标准、开发者培训以及技术栈构建上都会出现较大问题，大大削弱快应用平台的竞争力。\n\n因此，**快应用极有可能与支付宝一样，使用与微信小程序看齐的开发标准**，尽最大可能，降低开发者的开发门槛，进一步吸引更多小程序，特别是微信小程序，移植到快应用平台。\n\n大家可以持续关注「知晓程序」公众号，我们会在 20 号发布会之后为大家带来第一时间的开发文档解读。\n\n微信和手机厂商，谁能抢占手机桌面？\n-----------------\n\n实际上，9 大具有广泛的硬件销售竞争关系的手机厂商能够合推快应用标准，首先得益于此前已经建立的联盟关系。\n\n早在 2014 年 8 月 1 日，国内一线手机制造商就曾经成立了一个叫「硬核联盟」的组织，又称「安卓智能手机生态系统联盟」，由玩咖传媒联手当时的 6 大手机制造商共同成立。\n\n  \n\n<img src=\\\\\"https://pic4.zhimg.com/50/v2-9047a236932e56b1c67e7cea3ade9382\\_hd.jpg\\\\\" data-caption=\\\\\"\\\\\" data-size=\\\\\"normal\\\\\" data-rawwidth=\\\\\"1000\\\\\" data-rawheight=\\\\\"664\\\\\" class=\\\\\"origin\\_image zh-lightbox-thumb\\\\\" width=\\\\\"1000\\\\\" data-original=\\\\\"https://pic4.zhimg.com/v2-9047a236932e56b1c67e7cea3ade9382_r.jpg\\\\\">\n\n![](\\\"data:image/svg+xml;utf8,<svg%20xmlns=\'http://www.w3.org/2000/svg\'%20width=\'1000\'%20height=\'664\'></svg>\\\")\n\n  \n\n「硬核联盟」施行商务共享，一家可以代表联盟共同谈判，提高 CP 的分发及渠道效率，通过一个接口实现与多个手机厂商的合作。主要针对优秀的游戏和应用产品，进行众推或者联合首发。**而此次的标准仍然由「硬核联盟」所推动，从而让手机厂商具有行动一致，以及平台化分发的基础。**\n\n随着小程序的强势崛起，事实上，小米和魅族等之所以急于上线各自的轻型应用，不仅在于微信在自有的 App 内部搭建了完整的互联网应用生态，**也因为微信利用安卓的系统规则，将小程序直接触达到了手机桌面。**\n\n  \n\n<img src=\\\\\"https://pic3.zhimg.com/50/v2-3ffbf4ae4cca9b0b3dc1f06371392d22\\_hd.jpg\\\\\" data-caption=\\\\\"\\\\\" data-size=\\\\\"normal\\\\\" data-rawwidth=\\\\\"1000\\\\\" data-rawheight=\\\\\"887\\\\\" class=\\\\\"origin\\_image zh-lightbox-thumb\\\\\" width=\\\\\"1000\\\\\" data-original=\\\\\"https://pic3.zhimg.com/v2-3ffbf4ae4cca9b0b3dc1f06371392d22_r.jpg\\\\\">\n\n![](\\\"data:image/svg+xml;utf8,<svg%20xmlns=\'http://www.w3.org/2000/svg\'%20width=\'1000\'%20height=\'887\'></svg>\\\")\n\n  \n\n「快应用」的推出，看似是手机厂商的底层革命，实际上却是针对微信已经反攻到了手机桌面端的被动应对。\n\n手机桌面小程序「快捷方式」的意义，对于微信而言，已经不只是便于用户使用的入口，也在最大程度上延伸了微信的触角，**每一个布置在手机桌面的小程序，都会是用户快速回到微信的入口，换言之，每个小程序不是在消耗微信流量，而是在为微信引流！**利用手机桌面，微信已经在这种导流与回流当中，形成了非常稳定的闭环关系。\n\n  \n\n<img src=\\\\\"https://pic1.zhimg.com/50/v2-9b3c9ec8a3f13527bc232a052cabd8a5\\_hd.jpg\\\\\" data-caption=\\\\\"\\\\\" data-size=\\\\\"normal\\\\\" data-rawwidth=\\\\\"1024\\\\\" data-rawheight=\\\\\"640\\\\\" class=\\\\\"origin\\_image zh-lightbox-thumb\\\\\" width=\\\\\"1024\\\\\" data-original=\\\\\"https://pic1.zhimg.com/v2-9b3c9ec8a3f13527bc232a052cabd8a5_r.jpg\\\\\">\n\n![](\\\"data:image/svg+xml;utf8,<svg%20xmlns=\'http://www.w3.org/2000/svg\'%20width=\'1024\'%20height=\'640\'></svg>\\\")\n\n  \n\n而手机厂商为此不仅失去了应用分发的价值，也被截断了预装和广告营销的红利。为此，手机厂商必须建立一种新的规则重构应用分发机制。这就成为「快应用」推出的根本原因。\n\n而现在看来，用户体验上的最大不确定性，就是快应用和小程序如何在手机桌面共存？会不会在桌面端出现两个图标，由此对用户造成干扰？\n\n场景化流量大于搜索，「快应用」如何逆袭？\n--------------------\n\n的确，微信、支付宝小程序要求用户安装、注册相应 App 才能使用。快应用则不需要，只需拥有一台支持快应用标准的机器（甚至连手机都不用换，只需要升级、更换系统固件），就能使用快应用，而且，快应用还能直接从系统桌面直接启动。\n\n这使得用户使用快应用的成本与使用路径，要比使用小程序短得多。同时，由于减少了微信、支付宝这层中间媒介，改为由系统直接运行快应用，**理论上快应用的性能运行表现，一定是优于小程序平台的。**\n\n  \n\n<img src=\\\\\"https://pic1.zhimg.com/50/v2-74d0d70c82ec25142b113dcc55c2fbed\\_hd.jpg\\\\\" data-caption=\\\\\"\\\\\" data-size=\\\\\"normal\\\\\" data-rawwidth=\\\\\"1000\\\\\" data-rawheight=\\\\\"994\\\\\" class=\\\\\"origin\\_image zh-lightbox-thumb\\\\\" width=\\\\\"1000\\\\\" data-original=\\\\\"https://pic1.zhimg.com/v2-74d0d70c82ec25142b113dcc55c2fbed_r.jpg\\\\\">\n\n![](\\\"data:image/svg+xml;utf8,<svg%20xmlns=\'http://www.w3.org/2000/svg\'%20width=\'1000\'%20height=\'994\'></svg>\\\")\n\n  \n\n不过，尽管如此，但快应用要想推广开来仍然充满挑战。\n\n最大的挑战不是来自应用本身，而是用户对应用分发不可逆转的习惯趋势。\n\n微信所形成的巨大流量场效应被谈及最多，这是手机应用商店所无法达到的指数级体量差距。但这却并非最主要的，根本原因在于，手机厂商的另一杀手锏，也就是桌面端的直达搜索功能可能也没办法达到预期。\n\n  \n\n<img src=\\\\\"https://pic7.zhimg.com/50/v2-d117f084d45228c9a024552f818c8da5\\_hd.jpg\\\\\" data-caption=\\\\\"\\\\\" data-size=\\\\\"normal\\\\\" data-rawwidth=\\\\\"1024\\\\\" data-rawheight=\\\\\"512\\\\\" class=\\\\\"origin\\_image zh-lightbox-thumb\\\\\" width=\\\\\"1024\\\\\" data-original=\\\\\"https://pic7.zhimg.com/v2-d117f084d45228c9a024552f818c8da5_r.jpg\\\\\">\n\n![](\\\"data:image/svg+xml;utf8,<svg%20xmlns=\'http://www.w3.org/2000/svg\'%20width=\'1024\'%20height=\'512\'></svg>\\\")\n\n  \n\n一直以来，微信小程序为何会弱化搜索，却打通了近 50 个入口？其实是因为微信已经看准了**接下来应用分发的核心趋势，不是搜索，而是场景化分发。**\n\n微信颠覆了应用分发的基本逻辑。如果说移动互联网上半场的分发规律是搜索，依赖用户主观能动性去寻找应用；那么下半场的分发规律就是场景化体验。所以，轻应用还是「重应用」的问题是第二位的，**首要问题是用户除了记忆一些头部应用之外，大量应用会在偶遇之中用完即走，**这是手机应用极大丰富以后，不可违逆的用户习惯。\n\n  \n\n<img src=\\\\\"https://pic4.zhimg.com/50/v2-9dfa9a4fc5ae5b74ed06611f5b68b9c2\\_hd.jpg\\\\\" data-caption=\\\\\"\\\\\" data-size=\\\\\"normal\\\\\" data-rawwidth=\\\\\"1000\\\\\" data-rawheight=\\\\\"515\\\\\" class=\\\\\"origin\\_image zh-lightbox-thumb\\\\\" width=\\\\\"1000\\\\\" data-original=\\\\\"https://pic4.zhimg.com/v2-9dfa9a4fc5ae5b74ed06611f5b68b9c2_r.jpg\\\\\">\n\n![](\\\"data:image/svg+xml;utf8,<svg%20xmlns=\'http://www.w3.org/2000/svg\'%20width=\'1000\'%20height=\'515\'></svg>\\\")\n\n  \n\n**而在目前看来，真正的场景化其实只存在于微信、支付宝等头部应用。**\n\n作为社交应用的微信、交易工具的支付宝，它们的小程序平台自然会提供带有平台特色的接口，例如，微信小程序的分享群聊功能、支付宝的读取芝麻信用分等功能，以及两个小程序平台都拥有的支付功能。这些功能都是快应用天生所缺乏的。\n\n布局线下，「小程序码」是否还有一战？\n------------------\n\n如果说，线上缺乏场景，那么在线下，快应用能否扳回一城呢。\n\n事实上，**短期来看，小程序和快应用的争夺集中在线上，但未来真正的战场却在线下。**这从微信小程序今年的发力重点也可以看出端倪。\n\n如今，微信通过整合小程序、微信支付、扫码和卡包等能力，已经将小程序广布到大街小巷、酒店商超、医院机场等各个角落，小程序并不只是一个线上应用，而是变成了 OMO （线上与线下融合）的连接器。\n\n  \n\n<img src=\\\\\"https://pic3.zhimg.com/50/v2-03108ba2be0ee581dfa0f705a3e28bc0\\_hd.jpg\\\\\" data-caption=\\\\\"\\\\\" data-size=\\\\\"normal\\\\\" data-rawwidth=\\\\\"1000\\\\\" data-rawheight=\\\\\"667\\\\\" class=\\\\\"origin\\_image zh-lightbox-thumb\\\\\" width=\\\\\"1000\\\\\" data-original=\\\\\"https://pic3.zhimg.com/v2-03108ba2be0ee581dfa0f705a3e28bc0_r.jpg\\\\\">\n\n![](\\\"data:image/svg+xml;utf8,<svg%20xmlns=\'http://www.w3.org/2000/svg\'%20width=\'1000\'%20height=\'667\'></svg>\\\")\n\n  \n\n相比较线上，线下其实有更多的服务与应用的场景，而线下直接触达用户的方式就是「码」，无论是微信的二维码、小程序码，还是支付宝的二维码，都成为了直接入口。\n\n相比较微信和支付宝，其实**手机厂商所沉淀的线下商户以及拓展线下商业的能力更不可小觑。**特别是众多手机厂商共同发力，可以迅速完成大量的快应用的物料落地，而一旦形成了用户触达，用户会选择哪种「码」进行扫描就可能充满变数。\n\n然而，尽管手机厂商的地推能力是强项所在，但如果要想真正服务线下，快应用形态又会显得太轻了一些，**毕竟小程序里面所包含的将不只是应用体验那么简单，而是充满整合多能力的一个功能信息集，**而即将上线的快应用，是否能够支持支付、扫码、用户数据、LBS、广告投放等功能，仍然无法得知。\n\n  \n\n<img src=\\\\\"https://pic4.zhimg.com/50/v2-5a9bf8dcde8c9cf93dd05b4b9c0d19a3\\_hd.jpg\\\\\" data-caption=\\\\\"\\\\\" data-size=\\\\\"normal\\\\\" data-rawwidth=\\\\\"1000\\\\\" data-rawheight=\\\\\"750\\\\\" class=\\\\\"origin\\_image zh-lightbox-thumb\\\\\" width=\\\\\"1000\\\\\" data-original=\\\\\"https://pic4.zhimg.com/v2-5a9bf8dcde8c9cf93dd05b4b9c0d19a3_r.jpg\\\\\">\n\n![](\\\"data:image/svg+xml;utf8,<svg%20xmlns=\'http://www.w3.org/2000/svg\'%20width=\'1000\'%20height=\'750\'></svg>\\\")\n\n  \n\n此外，就线下而言，**调取扫码功能与用户扫码习惯也会是微信小程序的关键优势，**特别是当微信和支付宝已经牢牢占据用户心智之后，要想再挤进来一个「码」的位置也不太大。\n\n而最后，推进现在，也非常考验快应用标准联盟的凝聚力和决心。对于手机厂商而言，如果只是想在线上构建一种纯粹的轻量化的应用体验，那么机会实在不多；但如果想在线上线下全面开战，就必须把推进「快应用」的决心和战略意志，放到和销售手机设备一样的高度上来。\n\n  \n\n**我的其他回答：**\n\n[如何入门微信小程序开发，有哪些学习资料？](\\\"https://www.zhihu.com/question/50907897/answer/268867404\\\")\n\n[有哪些常人不知道的「常识」？](\\\"https://www.zhihu.com/question/39791312/answer/268333656\\\")\n\n[有哪些送给 20 岁的年轻人的建议？](\\\"https://www.zhihu.com/question/28281611/answer/271704031\\\")\n\n\",\"commentCount\":56,\"extras\":\"\",\"reshipmentSettings\":\"allowed\",\"rewardInfo\":{\"rewardMemberCount\":0,\"tagline\":\"\",\"rewardTotalMoney\":0,\"canOpenReward\":false,\"isRewardable\":false},\"isCopyable\":true,\"type\":\"answer\",\"thumbnail\":\"https://pic3.zhimg.com/v2-53e99fc884e5bea5997dfce2b542d24d\\_200x112.jpg\",\"isNormal\":true},\"343071872\":{\"relevantInfo\":{\"isRelevant\":false},\"suggestEdit\":{\"status\":false,\"reason\":\"\",\"title\":\"\",\"url\":\"\",\"unnormalDetails\":{},\"tip\":\"\"},\"relationship\":{\"upvotedFollowees\":\\[\\],\"isAuthor\":false,\"isNothelp\":false,\"isAuthorized\":false,\"voting\":0,\"isThanked\":false},\"editableContent\":\"\",\"markInfos\":\\[\\],\"excerpt\":\"今天中国的移动互联网市场上，微信是秦，小米华为苹果OV三桑等一干厂商是赵韩魏楚齐燕六国。合纵和连横，是未来三年中国手机市场上最有意思的热闹。无论是事不关己还是置身其中，都有不少乐趣。\",\"annotationAction\":\\[\\],\"adminClosedComment\":false,\"collapsedBy\":\"nobody\",\"canComment\":{\"status\":true,\"reason\":\"\"},\"createdTime\":1521187123,\"id\":343071872,\"voteupCount\":128,\"collapseReason\":\"\",\"isCollapsed\":false,\"isSticky\":false,\"url\":\"http://www.zhihu.com/api/v4/answers/343071872\",\"commentPermission\":\"all\",\"author\":{\"avatarUrlTemplate\":\"https://pic3.zhimg.com/370dc9710\\_{size}.jpg\",\"badge\":\\[\\],\"type\":\"people\",\"name\":\"赵刚-零零发\",\"url\":\"http://www.zhihu.com/api/v4/people/27f63822c962ec772b09de6164089d69\",\"gender\":1,\"userType\":\"people\",\"isAdvertiser\":false,\"avatarUrl\":\"https://pic3.zhimg.com/370dc9710_is.jpg\",\"isOrg\":false,\"headline\":\"小米手机相关问题非正式首席解答官\",\"followerCount\":33215,\"urlToken\":\"linglingfa\",\"id\":\"27f63822c962ec772b09de6164089d69\"},\"question\":{\"questionType\":\"normal\",\"created\":1520867385,\"url\":\"http://www.zhihu.com/api/v4/questions/268663484\",\"title\":\"为什么小米、OV 等 9 大手机厂商发起「快应用」项目？会对微信小程序以及 App 生态有何影响？\",\"type\":\"question\",\"id\":268663484,\"updatedTime\":1521185905},\"updatedTime\":1521187123,\"content\":\"\n\n今天中国的移动互联网市场上，微信是秦，小米华为苹果OV三桑等一干厂商是赵韩魏楚齐燕六国。\n\n合纵和连横，是未来三年中国手机市场上最有意思的热闹。\n\n无论是事不关己还是置身其中，都有不少乐趣。\n\n\",\"commentCount\":28,\"extras\":\"\",\"reshipmentSettings\":\"need\\_payment\",\"rewardInfo\":{\"rewardMemberCount\":0,\"tagline\":\"\",\"rewardTotalMoney\":0,\"canOpenReward\":false,\"isRewardable\":false},\"isCopyable\":true,\"type\":\"answer\",\"thumbnail\":\"\",\"isNormal\":true},\"343105401\":{\"relevantInfo\":{\"isRelevant\":false},\"suggestEdit\":{\"status\":false,\"reason\":\"\",\"title\":\"\",\"url\":\"\",\"unnormalDetails\":{},\"tip\":\"\"},\"relationship\":{\"upvotedFollowees\":\\[\\],\"isAuthor\":false,\"isNothelp\":false,\"isAuthorized\":false,\"voting\":0,\"isThanked\":false},\"editableContent\":\"\",\"markInfos\":\\[\\],\"excerpt\":\"有点难赢。 因为小程序优势不仅仅是轻。还有社交赋予的场景加成。 比如说，某某和你聊天，说某个东西好便宜。这就创造出了一个购物的场景，然后分享给你比如京东之类的小程序。你也就顺理成章地使用了。 又比如，你的学校班级群，老师在群里说，投票决定举…\",\"annotationAction\":\\[\\],\"adminClosedComment\":false,\"collapsedBy\":\"nobody\",\"canComment\":{\"status\":true,\"reason\":\"\"},\"createdTime\":1521189598,\"id\":343105401,\"voteupCount\":77,\"collapseReason\":\"\",\"isCollapsed\":false,\"isSticky\":false,\"url\":\"http://www.zhihu.com/api/v4/answers/343105401\",\"commentPermission\":\"censor\",\"author\":{\"avatarUrlTemplate\":\"https://pic4.zhimg.com/0b026b356a332758b2c8475131abe71d\\_{size}.jpg\",\"badge\":\\[\\],\"type\":\"people\",\"name\":\"石昊\",\"url\":\"http://www.zhihu.com/api/v4/people/f0769647ce3b9d67b5f9f323d11d04c0\",\"gender\":1,\"userType\":\"people\",\"isAdvertiser\":false,\"avatarUrl\":\"https://pic4.zhimg.com/0b026b356a332758b2c8475131abe71d_is.jpg\",\"isOrg\":false,\"headline\":\"公众号:石昊，shihao-wx\",\"followerCount\":14997,\"urlToken\":\"shi-hao-9-77\",\"id\":\"f0769647ce3b9d67b5f9f323d11d04c0\"},\"question\":{\"questionType\":\"normal\",\"created\":1520867385,\"url\":\"http://www.zhihu.com/api/v4/questions/268663484\",\"title\":\"为什么小米、OV 等 9 大手机厂商发起「快应用」项目？会对微信小程序以及 App 生态有何影响？\",\"type\":\"question\",\"id\":268663484,\"updatedTime\":1521185905},\"updatedTime\":1521189684,\"content\":\"有点难赢。  \n  \n因为小程序优势不仅仅是轻。还有社交赋予的场景加成。  \n  \n比如说，某某和你聊天，说某个东西好便宜。这就创造出了一个购物的场景，然后分享给你比如京东之类的小程序。你也就顺理成章地使用了。  \n  \n又比如，你的学校班级群，老师在群里说，投票决定举办什么活动之类的。然后分享了一个投票小程序，顺理成章就出现了投票的场景。  \n  \n比如，某某分享给你某个小游戏，说一起来玩游戏吧。然后社交又给小游戏曝光加成。  \n  \n社交可以创造无数种场景，和无数种入口。因此腾讯才有底气说连接一切。  \n  \n  \n而这快应用，恐怕很难创造出场景加成吧，也没有社交优势。恐怕最多就是节省了下载功夫和内存负担。。。  \n  \n社交本身就可以创造无数的场景加成。和无数种入口方式提供给各个小程序。手机硬件企业恐怕很难和互联网顶尖巨头抗衡。最终只是个小众的玩意。  \n  \n只能节省下载成本，这对小程序基本上优势不大。\",\"commentCount\":9,\"extras\":\"\",\"reshipmentSettings\":\"allowed\",\"rewardInfo\":{\"rewardMemberCount\":0,\"tagline\":\"\",\"rewardTotalMoney\":0,\"canOpenReward\":false,\"isRewardable\":false},\"isCopyable\":true,\"type\":\"answer\",\"thumbnail\":\"\",\"isNormal\":true},\"343110144\":{\"relevantInfo\":{\"isRelevant\":false},\"suggestEdit\":{\"status\":false,\"reason\":\"\",\"title\":\"\",\"url\":\"\",\"unnormalDetails\":{},\"tip\":\"\"},\"relationship\":{\"upvotedFollowees\":\\[\\],\"isAuthor\":false,\"isNothelp\":false,\"isAuthorized\":false,\"voting\":0,\"isThanked\":false},\"editableContent\":\"\",\"markInfos\":\\[\\],\"excerpt\":\"开战是迟早的事，我看到小程序的第一天我就知道迟早要打两场仗。分别是**1、微信 VS 苹果****2、微信 VS Android手机厂商**现在看来，只不过Android手机厂商先坐不住了，干脆直接联合起来先试试，苹果嘛，就看鹅厂能不能处理好了。其实移动应用领域前端化**已经是常态了**…\",\"annotationAction\":\\[\\],\"adminClosedComment\":false,\"collapsedBy\":\"nobody\",\"canComment\":{\"status\":true,\"reason\":\"\"},\"createdTime\":1521189935,\"id\":343110144,\"voteupCount\":259,\"collapseReason\":\"\",\"isCollapsed\":false,\"isSticky\":false,\"url\":\"http://www.zhihu.com/api/v4/answers/343110144\",\"commentPermission\":\"all\",\"author\":{\"avatarUrlTemplate\":\"https://pic4.zhimg.com/v2-7f397e430a8e1e3e0eac4cdc5105b4f5_{size}.jpg\",\"badge\":\\[\\],\"type\":\"people\",\"name\":\"FrankLee\",\"url\":\"http://www.zhihu.com/api/v4/people/d7248f2ed1cdb451f7fb5513464f469b\",\"gender\":-1,\"userType\":\"people\",\"isAdvertiser\":false,\"avatarUrl\":\"https://pic4.zhimg.com/v2-7f397e430a8e1e3e0eac4cdc5105b4f5_is.jpg\",\"isOrg\":false,\"headline\":\"公众号: IT大学生\",\"followerCount\":1666,\"urlToken\":\"li-lin-41-30-41\",\"id\":\"d7248f2ed1cdb451f7fb5513464f469b\"},\"question\":{\"questionType\":\"normal\",\"created\":1520867385,\"url\":\"http://www.zhihu.com/api/v4/questions/268663484\",\"title\":\"为什么小米、OV 等 9 大手机厂商发起「快应用」项目？会对微信小程序以及 App 生态有何影响？\",\"type\":\"question\",\"id\":268663484,\"updatedTime\":1521185905},\"updatedTime\":1521452531,\"content\":\"\n\n开战是迟早的事，我看到小程序的第一天我就知道迟早要打两场仗。分别是\n\n**1、微信 VS 苹果**\n\n**2、微信 VS Android手机厂商**\n\n现在看来，只不过Android手机厂商先坐不住了，干脆直接联合起来先试试，苹果嘛，就看鹅厂能不能处理好了。\n\n其实移动应用领域前端化**已经是常态了**，H5的天下肯定是会到来的，特别是现在流量越来越不值钱，性能越来越好的情况下，这个是大势所趋，毕竟谁愿意一点小改动就发版本走流程？这个很明显是落后于现在这个App爆炸的时代的产物。\n\n  \n\n但是，这场战争没那么简单，我们分三点来说\n\n**一、小程序：腾讯的试探**\n---------------\n\n小程序的到来，实际上是腾讯在自己这个领域的一次尝试，你也可以说是试探，微信是当之无愧的流量王者，这个是不争的事实，可是的流量再多，你的功能有限，所以传统的流量怎么使用呢？\n\n**很简单：引流。**\n\n引流是最简单的，说白了就是通过这么大的流量入口给你做支撑，毕竟也是在鹅厂待过的人，什么游戏你给微信带你引流一下，随随便便就给你导进来百万初始用户，这个能力可是一般小公司想都不敢想的。这也是微信最核心的用处之一了，通过这个流量巨无霸，盘活了京东，又扶持了一众小弟，这个能力也只有微信有了。\n\n但是引流没有解决最根本的问题，就是入口。用户再习惯用微信，但点外卖还是打开美团，打车还是打开滴滴，说到底和你微信没关系，你只是做了一个嫁衣，但是之后的事情和你关系真的不大。微信的目标当然不会仅限于此，所以才有了小程序，霸占的不是流量（因为本身已经是霸占了流量了），**霸占的是入口。**\n\n而这个入口之前是谁的？是ROM厂商的和苹果的。\n\n所以我说这是一次试探，从小程序发布当初，到后来风靡的“跳一跳”以及直接到一级操作的下拉，这都是一次试探，看看这个入口到底能不能**占得到**。\n\n  \n\n**二、互联网转型：蠢蠢欲动的厂商**\n-------------------\n\n按道理，手机厂商和App为主要媒介的互联网公司，此前一直是互利共生的关系，说白了完全是两个行业。一边是利润率动辄3成、4成的互联网行业，另一边是利润率低到2%的传统行业，你做你的我做我的，关系起码不能算差。\n\n但是，你说说一边是利润率2%、3%，一边是30%、40%，**你不眼红吗？**\n\n**眼红怎么办？当然是转型了**\n\n我们看一组数据：\n\n> 从一份小米的融资推介材料中获悉，**小米的日活跃用户达1.32亿**，月活跃用户1.65亿，日均用户使用时间为5.2小时，甚至，报告称，这一指标已经超过了微信  \n> 2016年，小米的收入组成中，79%来自于硬件，21%来自于互联网服务业务。硬件业务的净利润率仅为2.8%，**而互联网服务业务的净利润率则超过40%**。小米正在扩大互联网服务业务收入比例，2017年，预计互联网服务业务的收入占比为68.3%，预计到2019年，互联网服务业务的收入占比将超过硬件收入。\n\n日活1亿是什么概念？（当然，数据可能有吹嘘的成分），但这可已经秒杀市面90%的成熟互联网公司了，这个是基础也是资本。而另外一点，是大家发现，互联网服务才是真赚钱啊！\n\n那这些手机厂商，特别是小米，本来自己的想法就是**互联网服务转型**，依靠自己强大的市场份额和硬件终端，这个大家也能从数据中看到。现在小程序一来，讲起来是提供用户方便，实际上是革命啊。革谁的？革终端厂商们、特别是想着转型的终端厂商们的命。\n\n所以说，蠢蠢欲动们的厂商当然也要做出行动了，毕竟我掌握终端，比你更近一步。\n\n  \n\n**三、这场战争的发展与苹果**\n----------------\n\n现在看来，战争是不可避免的，苹果之前也是禁了一批热更新框架，估计后面也要坐不住了（当然，说到底是利益问题）。现在只是2018年，流量费用不贵，但也不能算便宜，这场战争的高潮就是流量费用和手机下一个阶段的发展，当我们只要花20块就可以流量无限用，H5的流畅性也能和native媲美的时候，H5必将会代替native应用，这个是大势所趋。\n\n不过说到底，这场入口之争，**那是利益问题**。入口+流量的蛋糕就这么大，10亿日活的微信基本上占据了流量的头把交椅，那剩下的玩家肯定是不会放弃入口这个流量的爸爸，就看各方之间的博弈了。**当然，别忘了，还有一个大玩家：苹果。**\n\n如果说Android是百家争鸣，七国争霸，那苹果就是另一个时代的产物了。毕竟相对于Android，iOS的生态还要更加封闭和自制，如果哪一天苹果觉得小程序也动了自己的蛋糕，那么肯定是不会善罢甘休的，毕竟几大手机厂商得联合起来才能和微信掰掰手腕，**但苹果一个人就可以和你叫板了。**\n\n**神仙打架，我们吃瓜。**\n\n\",\"commentCount\":84,\"extras\":\"\",\"reshipmentSettings\":\"allowed\",\"rewardInfo\":{\"rewardMemberCount\":0,\"tagline\":\"\",\"rewardTotalMoney\":0,\"canOpenReward\":false,\"isRewardable\":false},\"isCopyable\":true,\"type\":\"answer\",\"thumbnail\":\"\",\"isNormal\":true},\"343792088\":{\"relevantInfo\":{\"isRelevant\":false},\"suggestEdit\":{\"status\":false,\"reason\":\"\",\"title\":\"\",\"url\":\"\",\"unnormalDetails\":{},\"tip\":\"\"},\"relationship\":{\"upvotedFollowees\":\\[\\],\"isAuthor\":false,\"isNothelp\":false,\"isAuthorized\":false,\"voting\":0,\"isThanked\":false},\"editableContent\":\"\",\"markInfos\":\\[\\],\"excerpt\":\"**一、九大厂商为何要做这个项目？**诺贝尔获得者赫伯特-西蒙有一句名言，完美诠释这次九大厂商合纵连横共抗微信的深层含义：**“随着信息的发展，有价值的不是信息，而是注意力。”**据此发展出的就是注意力经济：在互联网时代信息是极大过剩甚至是泛滥的，相对于…\",\"annotationAction\":\\[\\],\"adminClosedComment\":false,\"collapsedBy\":\"nobody\",\"canComment\":{\"status\":true,\"reason\":\"\"},\"createdTime\":1521272925,\"id\":343792088,\"voteupCount\":391,\"collapseReason\":\"\",\"isCollapsed\":false,\"isSticky\":false,\"url\":\"http://www.zhihu.com/api/v4/answers/343792088\",\"commentPermission\":\"all\",\"author\":{\"avatarUrlTemplate\":\"https://pic4.zhimg.com/3b458a00fc07dfe5f0ba5ed73692691b_{size}.jpg\",\"badge\":\\[\\],\"type\":\"people\",\"name\":\"急性子怪脾气\",\"url\":\"http://www.zhihu.com/api/v4/people/552ab6d2927644f58decf2065df8ecbe\",\"gender\":1,\"userType\":\"people\",\"isAdvertiser\":false,\"avatarUrl\":\"https://pic4.zhimg.com/3b458a00fc07dfe5f0ba5ed73692691b_is.jpg\",\"isOrg\":false,\"headline\":\"人工智能研究 米粉\",\"followerCount\":682,\"urlToken\":\"chu-zhao-jun-3\",\"id\":\"552ab6d2927644f58decf2065df8ecbe\"},\"question\":{\"questionType\":\"normal\",\"created\":1520867385,\"url\":\"http://www.zhihu.com/api/v4/questions/268663484\",\"title\":\"为什么小米、OV 等 9 大手机厂商发起「快应用」项目？会对微信小程序以及 App 生态有何影响？\",\"type\":\"question\",\"id\":268663484,\"updatedTime\":1521185905},\"updatedTime\":1521272925,\"content\":\"\n\n**一、九大厂商为何要做这个项目？**\n\n诺贝尔获得者赫伯特-西蒙有一句名言，完美诠释这次九大厂商合纵连横共抗微信的深层含义：\n\n**“随着信息的发展，有价值的不是信息，而是注意力。”**\n\n据此发展出的就是注意力经济：在互联网时代信息是极大过剩甚至是泛滥的，相对于过剩的信息，人的注意力反而是有限的、稀缺的资源。\n\n**注意力经济是一种新型的商业模式，它是互联网厂商重要的商业资产，我们甚至可以把所有的互联网厂商都定义成——注意力商人。**\n\n<img src=\\\\\"https://pic1.zhimg.com/50/v2-2ba83f90f97bf064ca80b4f1523ef0dd\\_hd.jpg\\\\\" data-size=\\\\\"normal\\\\\" data-rawwidth=\\\\\"500\\\\\" data-rawheight=\\\\\"750\\\\\" class=\\\\\"origin\\_image zh-lightbox-thumb\\\\\" width=\\\\\"500\\\\\" data-original=\\\\\"https://pic1.zhimg.com/v2-2ba83f90f97bf064ca80b4f1523ef0dd_r.jpg\\\\\">\n\n![](\\\"data:image/svg+xml;utf8,<svg%20xmlns=\'http://www.w3.org/2000/svg\'%20width=\'500\'%20height=\'750\'></svg>\\\")\n\n注意力商人\n\n**回到这次“九大门派围攻光明顶”，真正挑起战争的那方不是九大门派，而是微信。我个人把这场战争称之为——注意力战争。**\n\n张小龙说微信的产品哲学是“用完就走，微信只是一个工具”，你要真信了那就呵呵了。\n\n你看公众号，你看朋友圈，还有本文的主题——小程序。他所谓的用完就走，其实你根本走不出门口，不过是从微信的一个房间走到另一个房间。\n\n**微信是国内的超级APP，小程序出来的时候就有人说它要成 wechat OS，但这背后其实是在抢夺MIUI，EMUEI等国产操作系统的注意力经济。**\n\n<img src=\\\\\"https://pic4.zhimg.com/50/v2-1f168e82f01be7daf358a36b7fd5e7b5\\_hd.jpg\\\\\" data-size=\\\\\"normal\\\\\" data-rawwidth=\\\\\"360\\\\\" data-rawheight=\\\\\"480\\\\\" class=\\\\\"content\\_image\\\\\" width=\\\\\"360\\\\\">\n\n![](\\\"data:image/svg+xml;utf8,<svg%20xmlns=\'http://www.w3.org/2000/svg\'%20width=\'360\'%20height=\'480\'></svg>\\\")\n\n谁动了我的奶酪？\n\n好嘛，用户在微信里把什么都干了——能购物也能点餐，新闻信息也能看，吃喝拉撒全包圆。偶尔出去玩个游戏，还是腾讯游戏，一大片国土上有一个超大建筑，所有商户和用户都住在里面，关键这个建筑的产权还是别人的。这谁能受得了？\n\n**从这个逻辑进行反推，你会发现小程序对于微信的意义，比之快应用对于操作系统的意义要重要的多。**\n\n无需下载、点开即用对于厂商来说重要，但比现在APP对用户体验的提升也没那么大。在这之前，也有小米的直达应用等类似服务，一直都是不温不火。但微信的小程序一出，基本上是逼着这些手机厂商必须要做出什么事情来共同应对，这就是本次【快应用】推出的背景。\n\n<img src=\\\\\"https://pic1.zhimg.com/50/v2-a7299ab0413956f2846bc011f5ec9b45\\_hd.jpg\\\\\" data-caption=\\\\\"\\\\\" data-size=\\\\\"normal\\\\\" data-rawwidth=\\\\\"1024\\\\\" data-rawheight=\\\\\"368\\\\\" class=\\\\\"origin\\_image zh-lightbox-thumb\\\\\" width=\\\\\"1024\\\\\" data-original=\\\\\"https://pic1.zhimg.com/v2-a7299ab0413956f2846bc011f5ec9b45_r.jpg\\\\\">\n\n![](\\\"data:image/svg+xml;utf8,<svg%20xmlns=\'http://www.w3.org/2000/svg\'%20width=\'1024\'%20height=\'368\'></svg>\\\")\n\n**快应用的推出也宣告着，手机厂商VS微信战争的序章。**但这只是其中一条战线，还有另一条战线，我们在文末再说。\n\n  \n\n**二、快应用是否会对微信小程序造成影响？**\n\n我的答案是一定会的，下面是我做的SWOT分析内容：  \n\n<img src=\\\\\"https://pic4.zhimg.com/50/v2-5d27bf2cf5c8dbb2c22e1a427a4e24ba\\_hd.jpg\\\\\" data-size=\\\\\"normal\\\\\" data-rawwidth=\\\\\"1294\\\\\" data-rawheight=\\\\\"636\\\\\" class=\\\\\"origin\\_image zh-lightbox-thumb\\\\\" width=\\\\\"1294\\\\\" data-original=\\\\\"https://pic4.zhimg.com/v2-5d27bf2cf5c8dbb2c22e1a427a4e24ba_r.jpg\\\\\">\n\n![](\\\"data:image/svg+xml;utf8,<svg%20xmlns=\'http://www.w3.org/2000/svg\'%20width=\'1294\'%20height=\'636\'></svg>\\\")\n\n快应用相对小程序的SWOT分析\n\n**说白了，小程序其实就是微信的功能延展。它使得微信在除了社交之外，几乎可以做所有事情。但是本应该可以任何事情的那个人，应该是操作系统，它做这件事更有优势。**\n\n操作系统的优势在于，它离用户近，更方便的让用户触发快应用，运行速度也快。同时在后台的管理服务上也会优于小程序。\n\n而小程序的核心优势还是在于腾讯的社交链条，社交中是很容易触发场景的，同时在玩法上也更丰富，例如跳一跳这个游戏，在微信里可以多人参与进去，看谁先失败，在操作系统层面就是很难实现的一个痛点。\n\n更多信息在SWOT图中，我就不一一解读。\n\n**所以影响是一定有的，首先我认为前端的技术来代替APP是潮流，这点无需质疑。其次快应用推出就是给互联网服务提供商一个选择，而且对于大部分人来说是更好的选择，稍次一点的话两个都做不', 0, 0, 0);
INSERT INTO `post` (`id`, `createAt`, `updateAt`, `title`, `description`, `thumb`, `url`, `html`, `markdown`, `views`, `status`, `push`) VALUES
(7, '2018-04-23 11:01:40.659604', '2018-04-23 11:01:40.659604', '想快速开发快应用？你需要知道这4大神器', '快应用，是包括华为、小米、OPPO、VIVO等十家中国手机厂商共同推出的新一代应用生态。去年微信小程序日活从0增长到1.7亿，抓住这拨红利的创业者都拿到了各种高估值融资。除了微信和快应用联盟，包括百度在内的所有巨头今年都会推出自己的动态App平台，整体动态App市场的日活预计增长到4亿。在红利匮乏的移动互联网，动态App的红利再不把握，移动互联网下半场就跟你没关系了。而前端开发者，也会迎来自己的春天。过去HTML5相对于原生是二等公民，在公司地位是比不过原生工程师的。动态App大潮来临，所有流量巨头推出的', 'https://mmbiz.qpic.cn/mmbiz_png/dLibMYg3NbmUIxRQiacQEo1wiaiaof2wm4K5Q12nm89KtEMvFl7KcFAcpWX04hT0w2ibj5Kr5rbfvMmS9ROicboDD9ZA/640?wx_fmt=png', 'http://mp.weixin.qq.com/s/HlQ7a9FuMQOS9Z6d0RSsJg', '\n                    \n\n                    \n\n                    \n                    \n                    <p style=\"margin-bottom: 15px;font-size: 16px;box-sizing: border-box;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;\">快应用，是包括华为、小米、OPPO、VIVO等十家中国手机厂商共同推出的新一代应用生态。</p><p style=\"margin-top: 15px;margin-bottom: 15px;font-size: 16px;box-sizing: border-box;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;\">去年微信小程序日活从0增长到1.7亿，抓住这拨红利的创业者都拿到了各种高估值融资。</p><p style=\"margin-top: 15px;margin-bottom: 15px;font-size: 16px;box-sizing: border-box;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;\">除了微信和快应用联盟，包括百度在内的所有巨头今年都会推出自己的动态App平台，整体动态App市场的日活预计增长到4亿。\n在红利匮乏的移动互联网，动态App的红利再不把握，移动互联网下半场就跟你没关系了。</p><p style=\"margin-top: 15px;margin-bottom: 15px;font-size: 16px;box-sizing: border-box;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;\">而前端开发者，也会迎来自己的春天。\n过去HTML5相对于原生是二等公民，在公司地位是比不过原生工程师的。\n动态App大潮来临，所有流量巨头推出的动态App平台全部是基于js的。\n这产生了大量的人才缺口和晋升机会。</p><p style=\"margin-top: 15px;margin-bottom: 15px;font-size: 16px;box-sizing: border-box;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;\">把握机会要做很多事，工欲善其事必先利其器。\n这里介绍4大神器，全部免费，一一道来。</p><p style=\"margin-bottom: 15px;font-size: 16px;box-sizing: border-box;white-space: pre-line;line-height: 30px;\"><strong>1. 首先我们需要一款快应用的IDE</strong></p><p style=\"margin-bottom: 15px;font-size: 16px;box-sizing: border-box;white-space: pre-line;line-height: 30px;\"><span style=\"font-size: 16px;white-space: pre-line;\">HBuilderX是</span>DCloud推出的快应用开发工具，<a href=\"http://quickapp.dcloud.io/\" style=\"box-sizing: border-box;color: rgb(30, 107, 184);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;white-space: pre-line;background-color: rgb(255, 255, 255);font-size: 15px !important;word-break: break-all !important;\">http://quickapp.dcloud.io/</a>，包括了快应用的语法提示、转到定义、格式化、真机同步、debug、打包等全流程。\nDCloud的HBuilder，是拥有190万开发者的优秀国产工具。\n下一代产品HBuilderX，完全重新开发，基于C++架构，性能体验秒杀基于java系或nodewebkit系的产品。\nHBuilderX只有12M，启动速度秒开，以插件的方式处理调试等重型功能。\nHBuilderX的字处理极其高效，具备众多以往顶尖编辑器都不具备的高效字处理能力。 </p><p style=\"white-space: normal;text-align: center;\"><img class=\"\" data-copyright=\"0\" data-ratio=\"0.5501730103806228\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/dLibMYg3NbmUIxRQiacQEo1wiaiaof2wm4K5Q12nm89KtEMvFl7KcFAcpWX04hT0w2ibj5Kr5rbfvMmS9ROicboDD9ZA/640?wx_fmt=png\" data-type=\"png\" data-w=\"578\" src=\"https://mmbiz.qpic.cn/mmbiz_png/dLibMYg3NbmUIxRQiacQEo1wiaiaof2wm4K5Q12nm89KtEMvFl7KcFAcpWX04hT0w2ibj5Kr5rbfvMmS9ROicboDD9ZA/640?wx_fmt=png\"></p><p style=\"margin-bottom: 15px;font-size: 16px;box-sizing: border-box;white-space: pre-line;line-height: 30px;\"><strong>2. 把微信小程序转换为快应用</strong></p><p style=\"margin-bottom: 15px;font-size: 16px;box-sizing: border-box;white-space: pre-line;line-height: 30px;\">如果你已经有了一款微信小程序，何必重头开发，直接拖到HBuilderX里，会提示是否转换为快应用。\n点击后，经过一阵处理，就生成了一套符合快应用语法规范的工程文件。\n对于2个平台的api功能差异，也详细的说明在了新工程文件的注释中。\n如此神器，得节省多少时间和投入啊，快快发布一个快应用，赶紧抢占用户去。</p><p style=\"margin-top: 15px;margin-bottom: 15px;font-size: 16px;box-sizing: border-box;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: center;\"><img class=\"\" data-copyright=\"0\" data-ratio=\"0.3132075471698113\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/dLibMYg3NbmUIxRQiacQEo1wiaiaof2wm4K5OL6RrSDDiamN4VibyQr49SGSBNibk6uibYEtukdEO8D6r3yebCJ36lb3AQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"265\" src=\"https://mmbiz.qpic.cn/mmbiz_png/dLibMYg3NbmUIxRQiacQEo1wiaiaof2wm4K5OL6RrSDDiamN4VibyQr49SGSBNibk6uibYEtukdEO8D6r3yebCJ36lb3AQ/640?wx_fmt=png\"></p><p style=\"margin-top: 15px;margin-bottom: 15px;font-size: 16px;box-sizing: border-box;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;\">转换提示</p><p style=\"white-space: normal;text-align: center;\"><img class=\"\" data-copyright=\"0\" data-ratio=\"0.5309278350515464\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/dLibMYg3NbmUIxRQiacQEo1wiaiaof2wm4K5qLnx3iaTBGiaUtQiccKUIu6y77FjKLAzG31LaicbianNibk3AYlrI0VWhfHQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"388\" src=\"https://mmbiz.qpic.cn/mmbiz_png/dLibMYg3NbmUIxRQiacQEo1wiaiaof2wm4K5qLnx3iaTBGiaUtQiccKUIu6y77FjKLAzG31LaicbianNibk3AYlrI0VWhfHQ/640?wx_fmt=png\"></p><p style=\"white-space: normal;\"><span style=\"color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;white-space: pre-line;\">转换输出日志</span></p><p style=\"white-space: normal;\"><span style=\"color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;white-space: pre-line;\"></span></p><p style=\"white-space: normal;text-align: center;\"><img class=\"\" data-copyright=\"0\" data-ratio=\"0.7093862815884476\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/dLibMYg3NbmUIxRQiacQEo1wiaiaof2wm4K5YnFC6VJicsZP5hnubU3Kxd5WzYRD2Eic5RpBrIssIhdUIOxjY30TXqCw/640?wx_fmt=png\" data-type=\"png\" data-w=\"554\" src=\"https://mmbiz.qpic.cn/mmbiz_png/dLibMYg3NbmUIxRQiacQEo1wiaiaof2wm4K5YnFC6VJicsZP5hnubU3Kxd5WzYRD2Eic5RpBrIssIhdUIOxjY30TXqCw/640?wx_fmt=png\"></p><p style=\"white-space: normal;\"><span style=\"color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 16px;white-space: pre-line;\"></span><br></p><p style=\"margin-bottom: 15px;font-size: 16px;box-sizing: border-box;white-space: pre-line;line-height: 30px;\"><strong>3. 微信小程序或快应用，是否能打包为原生App？</strong></p><p style=\"margin-bottom: 15px;font-size: 16px;box-sizing: border-box;white-space: pre-line;line-height: 30px;\">HBuilderX提供了动态App打包原生应用的能力。\n既然应用已经做好，何不多一个发行方式？\n强大的你又给老板变出一个版本，一定会让老板刮目相看。</p><p style=\"margin-bottom: 15px;font-size: 16px;box-sizing: border-box;white-space: pre-line;line-height: 30px;\"><strong>4. 当你做了众多动态App版本时，如何追踪这些App的数据？难道每天登陆十几家发行渠道的后台看数据？</strong></p><p style=\"margin-bottom: 15px;font-size: 16px;box-sizing: border-box;white-space: pre-line;line-height: 30px;\">使用DCloud的Uni统计服务，在一点就可以追踪所有渠道的数据。</p><p style=\"margin-bottom: 15px;font-size: 16px;box-sizing: border-box;white-space: pre-line;line-height: 30px;\"> 在HBuilderX里创建或转换的应用，都已经包含了这个功能，当然功能可定制，并非强制使用。</p><p style=\"white-space: normal;text-align: center;\"><img class=\"\" data-copyright=\"0\" data-ratio=\"1.1518987341772151\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/dLibMYg3NbmUIxRQiacQEo1wiaiaof2wm4K5iaUlBia8993eMVdrhrzre1EVgFBiaU3hsXm0RZfJGqNXkT8dkb53QBJYw/640?wx_fmt=png\" data-type=\"png\" data-w=\"316\" src=\"https://mmbiz.qpic.cn/mmbiz_png/dLibMYg3NbmUIxRQiacQEo1wiaiaof2wm4K5iaUlBia8993eMVdrhrzre1EVgFBiaU3hsXm0RZfJGqNXkT8dkb53QBJYw/640?wx_fmt=png\"></p><p style=\"margin-top: 15px;margin-bottom: 15px;font-size: 16px;box-sizing: border-box;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;\">拥有这4大神器：快应用IDE、小程序转换器、原生打包平台、Uni统计，你在动态App浪潮中，才能敏捷前行，迅速把握机会。</p><p style=\"margin-top: 15px;margin-bottom: 15px;font-size: 16px;box-sizing: border-box;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;\">人家辛苦做这些神器不容易，如果觉得有帮助，记得转发点赞:)</p><p style=\"margin-top: 15px;margin-bottom: 15px;font-size: 16px;box-sizing: border-box;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;\">最后祝大家抓住风口，快速走向人生巅峰！</p><p><br></p>\n                ', '快应用，是包括华为、小米、OPPO、VIVO等十家中国手机厂商共同推出的新一代应用生态。\n\n去年微信小程序日活从0增长到1.7亿，抓住这拨红利的创业者都拿到了各种高估值融资。\n\n除了微信和快应用联盟，包括百度在内的所有巨头今年都会推出自己的动态App平台，整体动态App市场的日活预计增长到4亿。 在红利匮乏的移动互联网，动态App的红利再不把握，移动互联网下半场就跟你没关系了。\n\n而前端开发者，也会迎来自己的春天。 过去HTML5相对于原生是二等公民，在公司地位是比不过原生工程师的。 动态App大潮来临，所有流量巨头推出的动态App平台全部是基于js的。 这产生了大量的人才缺口和晋升机会。\n\n把握机会要做很多事，工欲善其事必先利其器。 这里介绍4大神器，全部免费，一一道来。\n\n**1\\. 首先我们需要一款快应用的IDE**\n\nHBuilderX是DCloud推出的快应用开发工具，[http://quickapp.dcloud.io/](http://quickapp.dcloud.io/)，包括了快应用的语法提示、转到定义、格式化、真机同步、debug、打包等全流程。 DCloud的HBuilder，是拥有190万开发者的优秀国产工具。 下一代产品HBuilderX，完全重新开发，基于C++架构，性能体验秒杀基于java系或nodewebkit系的产品。 HBuilderX只有12M，启动速度秒开，以插件的方式处理调试等重型功能。 HBuilderX的字处理极其高效，具备众多以往顶尖编辑器都不具备的高效字处理能力。 \n\n![](https://mmbiz.qpic.cn/mmbiz_png/dLibMYg3NbmUIxRQiacQEo1wiaiaof2wm4K5Q12nm89KtEMvFl7KcFAcpWX04hT0w2ibj5Kr5rbfvMmS9ROicboDD9ZA/640?wx_fmt=png)\n\n**2\\. 把微信小程序转换为快应用**\n\n如果你已经有了一款微信小程序，何必重头开发，直接拖到HBuilderX里，会提示是否转换为快应用。 点击后，经过一阵处理，就生成了一套符合快应用语法规范的工程文件。 对于2个平台的api功能差异，也详细的说明在了新工程文件的注释中。 如此神器，得节省多少时间和投入啊，快快发布一个快应用，赶紧抢占用户去。\n\n![](https://mmbiz.qpic.cn/mmbiz_png/dLibMYg3NbmUIxRQiacQEo1wiaiaof2wm4K5OL6RrSDDiamN4VibyQr49SGSBNibk6uibYEtukdEO8D6r3yebCJ36lb3AQ/640?wx_fmt=png)\n\n转换提示\n\n![](https://mmbiz.qpic.cn/mmbiz_png/dLibMYg3NbmUIxRQiacQEo1wiaiaof2wm4K5qLnx3iaTBGiaUtQiccKUIu6y77FjKLAzG31LaicbianNibk3AYlrI0VWhfHQ/640?wx_fmt=png)\n\n转换输出日志\n\n![](https://mmbiz.qpic.cn/mmbiz_png/dLibMYg3NbmUIxRQiacQEo1wiaiaof2wm4K5YnFC6VJicsZP5hnubU3Kxd5WzYRD2Eic5RpBrIssIhdUIOxjY30TXqCw/640?wx_fmt=png)\n\n  \n\n**3\\. 微信小程序或快应用，是否能打包为原生App？**\n\nHBuilderX提供了动态App打包原生应用的能力。 既然应用已经做好，何不多一个发行方式？ 强大的你又给老板变出一个版本，一定会让老板刮目相看。\n\n**4\\. 当你做了众多动态App版本时，如何追踪这些App的数据？难道每天登陆十几家发行渠道的后台看数据？**\n\n使用DCloud的Uni统计服务，在一点就可以追踪所有渠道的数据。\n\n 在HBuilderX里创建或转换的应用，都已经包含了这个功能，当然功能可定制，并非强制使用。\n\n![](https://mmbiz.qpic.cn/mmbiz_png/dLibMYg3NbmUIxRQiacQEo1wiaiaof2wm4K5iaUlBia8993eMVdrhrzre1EVgFBiaU3hsXm0RZfJGqNXkT8dkb53QBJYw/640?wx_fmt=png)\n\n拥有这4大神器：快应用IDE、小程序转换器、原生打包平台、Uni统计，你在动态App浪潮中，才能敏捷前行，迅速把握机会。\n\n人家辛苦做这些神器不容易，如果觉得有帮助，记得转发点赞:)\n\n最后祝大家抓住风口，快速走向人生巅峰！', 0, 1, 0);
INSERT INTO `post` (`id`, `createAt`, `updateAt`, `title`, `description`, `thumb`, `url`, `html`, `markdown`, `views`, `status`, `push`) VALUES
(8, '2018-04-23 11:01:40.963829', '2018-04-23 11:01:40.963829', 'Nginx安装维护入门学习笔记', 'Nginx是一款面向性能设计的HTTP服务器，能反向代理HTTP，HTTPS和邮件相关(SMTP，POP3，IMAP)的协议链接。并且提供了负载均衡以及HTTP缓存。它的设计充分使用异步事件模型，削减上下文调度的开销，提高服务器并发能力。采用了模块化设计，提供了丰富模块的第三方模块。所以关于Nginx，有这些标签：「异步」「事件」「模块化」「高性能」「高并发」「反向代理」「负载均衡」Linux系统：Centos7x64Nginx版本：1.11.5目录安装安装依赖下载编译安装nginx测试设置全局nginx', 'https://github.com/jaywcjlove/nginx-tutorial/raw/master/nginx.svg?sanitize=true', 'https://github.com/jaywcjlove/nginx-tutorial', '<p align=\"center\">\n  <a href=\"http://nginx.org/\" rel=\"nofollow\">\n    <img width=\"210\" src=\"https://github.com/jaywcjlove/nginx-tutorial/raw/master/nginx.svg?sanitize=true\" style=\"max-width:100%;\">\n  </a>\n</p>\n<p>Nginx 是一款面向性能设计的 HTTP 服务器，能反向代理 HTTP，HTTPS 和邮件相关(SMTP，POP3，IMAP)的协议链接。并且提供了负载均衡以及 HTTP 缓存。它的设计充分使用异步事件模型，削减上下文调度的开销，提高服务器并发能力。采用了模块化设计，提供了丰富模块的第三方模块。</p>\n<p>所以关于 Nginx，有这些标签：「异步」「事件」「模块化」「高性能」「高并发」「反向代理」「负载均衡」</p>\n<p>Linux系统：<code>Centos 7 x64</code>\nNginx版本：<code>1.11.5</code></p>\n<h1><a id=\"user-content-目录\" class=\"anchor\" aria-hidden=\"true\" href=\"https://github.com/jaywcjlove/nginx-tutorial#目录\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>目录</h1>\n\n<ul>\n<li><a href=\"https://github.com/jaywcjlove/nginx-tutorial#%E5%AE%89%E8%A3%85\">安装</a>\n<ul>\n<li><a href=\"https://github.com/jaywcjlove/nginx-tutorial#%E5%AE%89%E8%A3%85%E4%BE%9D%E8%B5%96\">安装依赖</a></li>\n<li><a href=\"https://github.com/jaywcjlove/nginx-tutorial#%E4%B8%8B%E8%BD%BD\">下载</a></li>\n<li><a href=\"https://github.com/jaywcjlove/nginx-tutorial#%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85\">编译安装</a></li>\n<li><a href=\"https://github.com/jaywcjlove/nginx-tutorial#nginx%E6%B5%8B%E8%AF%95\">nginx测试</a></li>\n<li><a href=\"https://github.com/jaywcjlove/nginx-tutorial#%E8%AE%BE%E7%BD%AE%E5%85%A8%E5%B1%80nginx%E5%91%BD%E4%BB%A4\">设置全局nginx命令</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/jaywcjlove/nginx-tutorial#%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E5%8A%A8\">开机自启动</a></li>\n<li><a href=\"https://github.com/jaywcjlove/nginx-tutorial#%E8%BF%90%E7%BB%B4\">运维</a>\n<ul>\n<li><a href=\"https://github.com/jaywcjlove/nginx-tutorial#%E6%9C%8D%E5%8A%A1%E7%AE%A1%E7%90%86\">服务管理</a></li>\n<li><a href=\"https://github.com/jaywcjlove/nginx-tutorial#%E9%87%8D%E5%90%AF%E6%9C%8D%E5%8A%A1%E9%98%B2%E7%81%AB%E5%A2%99%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3\">重启服务防火墙报错解决</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/jaywcjlove/nginx-tutorial#nginx%E5%8D%B8%E8%BD%BD\">nginx卸载</a></li>\n<li><a href=\"https://github.com/jaywcjlove/nginx-tutorial#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E\">参数说明</a></li>\n<li><a href=\"https://github.com/jaywcjlove/nginx-tutorial#%E9%85%8D%E7%BD%AE\">配置</a>\n<ul>\n<li><a href=\"https://github.com/jaywcjlove/nginx-tutorial#%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99\">常用正则</a></li>\n<li><a href=\"https://github.com/jaywcjlove/nginx-tutorial#%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F\">全局变量</a></li>\n<li><a href=\"https://github.com/jaywcjlove/nginx-tutorial#%E7%AC%A6%E5%8F%B7%E5%8F%82%E8%80%83\">符号参考</a></li>\n<li><a href=\"https://github.com/jaywcjlove/nginx-tutorial#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\">配置文件</a></li>\n<li><a href=\"https://github.com/jaywcjlove/nginx-tutorial#%E5%86%85%E7%BD%AE%E9%A2%84%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F\">内置预定义变量</a></li>\n<li><a href=\"https://github.com/jaywcjlove/nginx-tutorial#%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86\">反向代理</a></li>\n<li><a href=\"https://github.com/jaywcjlove/nginx-tutorial#%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1\">负载均衡</a>\n<ul>\n<li><a href=\"https://github.com/jaywcjlove/nginx-tutorial#rr\">RR</a></li>\n<li><a href=\"https://github.com/jaywcjlove/nginx-tutorial#%E6%9D%83%E9%87%8D\">权重</a></li>\n<li><a href=\"https://github.com/jaywcjlove/nginx-tutorial#ip_hash\">ip_hash</a></li>\n<li><a href=\"https://github.com/jaywcjlove/nginx-tutorial#fair\">fair</a></li>\n<li><a href=\"https://github.com/jaywcjlove/nginx-tutorial#url_hash\">url_hash</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/jaywcjlove/nginx-tutorial#%E5%B1%8F%E8%94%BDip\">屏蔽ip</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/jaywcjlove/nginx-tutorial#%E7%AC%AC%E4%B8%89%E6%96%B9%E6%A8%A1%E5%9D%97%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95\">第三方模块安装方法</a></li>\n<li><a href=\"https://github.com/jaywcjlove/nginx-tutorial#%E9%87%8D%E5%AE%9A%E5%90%91\">重定向</a>\n<ul>\n<li><a href=\"https://github.com/jaywcjlove/nginx-tutorial#%E9%87%8D%E5%AE%9A%E5%90%91%E6%95%B4%E4%B8%AA%E7%BD%91%E7%AB%99\">重定向整个网站</a></li>\n<li><a href=\"https://github.com/jaywcjlove/nginx-tutorial#%E9%87%8D%E5%AE%9A%E5%90%91%E5%8D%95%E9%A1%B5\">重定向单页</a></li>\n<li><a href=\"https://github.com/jaywcjlove/nginx-tutorial#%E9%87%8D%E5%AE%9A%E5%90%91%E6%95%B4%E4%B8%AA%E5%AD%90%E8%B7%AF%E5%BE%84\">重定向整个子路径</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/jaywcjlove/nginx-tutorial#%E6%80%A7%E8%83%BD\">性能</a>\n<ul>\n<li><a href=\"https://github.com/jaywcjlove/nginx-tutorial#%E5%86%85%E5%AE%B9%E7%BC%93%E5%AD%98\">内容缓存</a></li>\n<li><a href=\"https://github.com/jaywcjlove/nginx-tutorial#gzip%E5%8E%8B%E7%BC%A9\">Gzip压缩</a></li>\n<li><a href=\"https://github.com/jaywcjlove/nginx-tutorial#%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6%E7%BC%93%E5%AD%98\">打开文件缓存</a></li>\n<li><a href=\"https://github.com/jaywcjlove/nginx-tutorial#ssl%E7%BC%93%E5%AD%98\">SSL缓存</a></li>\n<li><a href=\"https://github.com/jaywcjlove/nginx-tutorial#%E4%B8%8A%E6%B8%B8keepalive\">上游Keepalive</a></li>\n<li><a href=\"https://github.com/jaywcjlove/nginx-tutorial#%E7%9B%91%E6%8E%A7\">监控</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/jaywcjlove/nginx-tutorial#%E5%B8%B8%E8%A7%81%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\">常见使用场景</a>\n<ul>\n<li><a href=\"https://github.com/jaywcjlove/nginx-tutorial#%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98\">跨域问题</a></li>\n<li><a href=\"https://github.com/jaywcjlove/nginx-tutorial#%E8%B7%B3%E8%BD%AC%E5%88%B0%E5%B8%A6www%E7%9A%84%E5%9F%9F%E4%B8%8A%E9%9D%A2\">跳转到带www的域上面</a></li>\n<li><a href=\"https://github.com/jaywcjlove/nginx-tutorial#%E4%BB%A3%E7%90%86%E8%BD%AC%E5%8F%91\">代理转发</a></li>\n<li><a href=\"https://github.com/jaywcjlove/nginx-tutorial#%E4%BB%A3%E7%90%86%E8%BD%AC%E5%8F%91%E8%BF%9E%E6%8E%A5%E6%9B%BF%E6%8D%A2\">代理转发连接替换</a></li>\n<li><a href=\"https://github.com/jaywcjlove/nginx-tutorial#ssl%E9%85%8D%E7%BD%AE\">ssl配置</a></li>\n<li><a href=\"https://github.com/jaywcjlove/nginx-tutorial#%E5%BC%BA%E5%88%B6%E5%B0%86http%E9%87%8D%E5%AE%9A%E5%90%91%E5%88%B0https\">强制将http重定向到https</a></li>\n<li><a href=\"https://github.com/jaywcjlove/nginx-tutorial#%E4%B8%A4%E4%B8%AA%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA\">两个虚拟主机</a></li>\n<li><a href=\"https://github.com/jaywcjlove/nginx-tutorial#%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E6%A0%87%E5%87%86%E9%85%8D%E7%BD%AE\">虚拟主机标准配置</a></li>\n<li><a href=\"https://github.com/jaywcjlove/nginx-tutorial#%E9%98%B2%E7%9B%97%E9%93%BE\">防盗链</a></li>\n<li><a href=\"https://github.com/jaywcjlove/nginx-tutorial#%E8%99%9A%E6%8B%9F%E7%9B%AE%E5%BD%95%E9%85%8D%E7%BD%AE\">虚拟目录配置</a></li>\n<li><a href=\"https://github.com/jaywcjlove/nginx-tutorial#%E9%98%B2%E7%9B%97%E5%9B%BE%E9%85%8D%E7%BD%AE\">防盗图配置</a></li>\n<li><a href=\"https://github.com/jaywcjlove/nginx-tutorial#%E5%B1%8F%E8%94%BDgit%E7%AD%89%E6%96%87%E4%BB%B6\">屏蔽.git等文件</a></li>\n<li><a href=\"https://github.com/jaywcjlove/nginx-tutorial#%E5%9F%9F%E5%90%8D%E8%B7%AF%E5%BE%84%E5%8A%A0%E4%B8%8D%E5%8A%A0%E9%9C%80%E8%A6%81%E9%83%BD%E8%83%BD%E6%AD%A3%E5%B8%B8%E8%AE%BF%E9%97%AE\">域名路径加不加需要都能正常访问</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/jaywcjlove/nginx-tutorial#%E9%94%99%E8%AF%AF%E9%97%AE%E9%A2%98\">错误问题</a></li>\n<li><a href=\"https://github.com/jaywcjlove/nginx-tutorial#%E7%B2%BE%E5%93%81%E6%96%87%E7%AB%A0%E5%8F%82%E8%80%83\">精品文章参考</a></li>\n</ul>\n\n<h2><a id=\"user-content-安装\" class=\"anchor\" aria-hidden=\"true\" href=\"https://github.com/jaywcjlove/nginx-tutorial#安装\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>安装</h2>\n<h3><a id=\"user-content-安装依赖\" class=\"anchor\" aria-hidden=\"true\" href=\"https://github.com/jaywcjlove/nginx-tutorial#安装依赖\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>安装依赖</h3>\n<blockquote>\n<p>prce(重定向支持)和openssl(https支持，如果不需要https可以不安装。)</p>\n</blockquote>\n<div class=\"highlight highlight-source-shell\"><pre>yum install -y pcre-devel \nyum -y install gcc make gcc-c++ wget\nyum -y install openssl openssl-devel </pre></div>\n<p>CentOS 6.5 我安装的时候是选择的“基本服务器”，默认这两个包都没安装全，所以这两个都运行安装即可。</p>\n<h3><a id=\"user-content-下载\" class=\"anchor\" aria-hidden=\"true\" href=\"https://github.com/jaywcjlove/nginx-tutorial#下载\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>下载</h3>\n<p><a href=\"http://nginx.org/download/\" rel=\"nofollow\">nginx的所有版本在这里</a></p>\n<div class=\"highlight highlight-source-shell\"><pre>wget http://nginx.org/download/nginx-1.13.3.tar.gz\nwget http://nginx.org/download/nginx-1.13.7.tar.gz\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> 如果没有安装wget</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> 下载已编译版本</span>\n$ yum install wget\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> 解压压缩包</span>\ntar zxf nginx-1.13.3.tar.gz</pre></div>\n<h3><a id=\"user-content-编译安装\" class=\"anchor\" aria-hidden=\"true\" href=\"https://github.com/jaywcjlove/nginx-tutorial#编译安装\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>编译安装</h3>\n<p>然后进入目录编译安装，<a href=\"https://github.com/jaywcjlove/nginx-tutorial#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E\">configure参数说明</a></p>\n<div class=\"highlight highlight-source-shell\"><pre><span class=\"pl-c1\">cd</span> nginx-1.11.5\n./configure\n\n....\nConfiguration summary\n  + using system PCRE library\n  + OpenSSL library is not used\n  + using system zlib library\n\n  nginx path prefix: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/usr/local/nginx<span class=\"pl-pds\">\"</span></span>\n  nginx binary file: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/usr/local/nginx/sbin/nginx<span class=\"pl-pds\">\"</span></span>\n  nginx modules path: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/usr/local/nginx/modules<span class=\"pl-pds\">\"</span></span>\n  nginx configuration prefix: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/usr/local/nginx/conf<span class=\"pl-pds\">\"</span></span>\n  nginx configuration file: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/usr/local/nginx/conf/nginx.conf<span class=\"pl-pds\">\"</span></span>\n  nginx pid file: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/usr/local/nginx/logs/nginx.pid<span class=\"pl-pds\">\"</span></span>\n  nginx error log file: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/usr/local/nginx/logs/error.log<span class=\"pl-pds\">\"</span></span>\n  nginx http access log file: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/usr/local/nginx/logs/access.log<span class=\"pl-pds\">\"</span></span>\n  nginx http client request body temporary files: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>client_body_temp<span class=\"pl-pds\">\"</span></span>\n  nginx http proxy temporary files: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>proxy_temp<span class=\"pl-pds\">\"</span></span>\n  nginx http fastcgi temporary files: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>fastcgi_temp<span class=\"pl-pds\">\"</span></span>\n  nginx http uwsgi temporary files: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>uwsgi_temp<span class=\"pl-pds\">\"</span></span>\n  nginx http scgi temporary files: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>scgi_temp<span class=\"pl-pds\">\"</span></span></pre></div>\n<p>安装报错误的话比如：“C compiler cc is not found”，这个就是缺少编译环境，安装一下就可以了 <strong>yum -y install gcc make gcc-c++ openssl-devel</strong></p>\n<p>如果没有error信息，就可以执行下边的安装了：</p>\n<div class=\"highlight highlight-source-shell\"><pre>make\nmake install</pre></div>\n<h3><a id=\"user-content-nginx测试\" class=\"anchor\" aria-hidden=\"true\" href=\"https://github.com/jaywcjlove/nginx-tutorial#nginx测试\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>nginx测试</h3>\n<p>运行下面命令会出现两个结果，一般情况nginx会安装在<code>/usr/local/nginx</code>目录中</p>\n<div class=\"highlight highlight-source-shell\"><pre><span class=\"pl-c1\">cd</span> /usr/local/nginx/sbin/\n./nginx -t\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> nginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful</span></pre></div>\n<h3><a id=\"user-content-设置全局nginx命令\" class=\"anchor\" aria-hidden=\"true\" href=\"https://github.com/jaywcjlove/nginx-tutorial#设置全局nginx命令\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>设置全局nginx命令</h3>\n<div class=\"highlight highlight-source-shell\"><pre>vi <span class=\"pl-k\">~</span>/.bash_profile</pre></div>\n<p>将下面内容添加到 <code>~/.bash_profile</code> 文件中</p>\n<div class=\"highlight highlight-source-shell\"><pre>PATH=<span class=\"pl-smi\">$PATH</span>:<span class=\"pl-smi\">$HOME</span>/bin:/usr/local/nginx/sbin/\n<span class=\"pl-k\">export</span> PATH</pre></div>\n<p>运行命令 <strong><code>source ~/.bash_profile</code></strong> 让配置立即生效。你就可以全局运行 <code>nginx</code> 命令了。</p>\n<h2><a id=\"user-content-开机自启动\" class=\"anchor\" aria-hidden=\"true\" href=\"https://github.com/jaywcjlove/nginx-tutorial#开机自启动\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>开机自启动</h2>\n<p><strong>开机自启动方法一：</strong></p>\n<p>编辑 <strong>vi /lib/systemd/system/nginx.service</strong> 文件，没有创建一个 <strong>touch nginx.service</strong> 然后将如下内容根据具体情况进行修改后，添加到nginx.service文件中：</p>\n<div class=\"highlight highlight-source-shell\"><pre>[Unit]\nDescription=nginx\nAfter=network.target remote-fs.target nss-lookup.target\n\n[Service]\n\nType=forking\nPIDFile=/var/run/nginx.pid\nExecStartPre=/usr/local/nginx/sbin/nginx -t -c /usr/local/nginx/conf/nginx.conf\nExecStart=/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf\nExecReload=/bin/kill -s HUP <span class=\"pl-smi\">$MAINPID</span>\nExecStop=/bin/kill -s QUIT <span class=\"pl-smi\">$MAINPID</span>\nPrivateTmp=true\n\n[Install]\nWantedBy=multi-user.target</pre></div>\n<ul>\n<li><code>[Unit]</code>:服务的说明</li>\n<li><code>Description</code>:描述服务</li>\n<li><code>After</code>:描述服务类别</li>\n<li><code>[Service]</code>服务运行参数的设置</li>\n<li><code>Type=forking</code>是后台运行的形式</li>\n<li><code>ExecStart</code>为服务的具体运行命令</li>\n<li><code>ExecReload</code>为重启命令</li>\n<li><code>ExecStop</code>为停止命令</li>\n<li><code>PrivateTmp=True</code>表示给服务分配独立的临时空间</li>\n</ul>\n<p>注意：<code>[Service]</code>的启动、重启、停止命令全部要求使用绝对路径。</p>\n<p><code>[Install]</code>运行级别下服务安装的相关设置，可设置为多用户，即系统运行级别为<code>3</code>。</p>\n<p>保存退出。</p>\n<p>设置开机启动，使配置生效：</p>\n<div class=\"highlight highlight-source-shell\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> 启动nginx服务</span>\nsystemctl start nginx.service\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> 停止开机自启动</span>\nsystemctl disable nginx.service\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> 查看服务当前状态</span>\nsystemctl status nginx.service\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> 查看所有已启动的服务</span>\nsystemctl list-units --type=service\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> 重新启动服务</span>\nsystemctl restart nginx.service\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> 设置开机自启动</span>\nsystemctl <span class=\"pl-c1\">enable</span> nginx.service\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> 输出下面内容表示成功了</span>\nCreated symlink from /etc/systemd/system/multi-user.target.wants/nginx.service to /usr/lib/systemd/system/nginx.service.</pre></div>\n<div class=\"highlight highlight-source-shell\"><pre>systemctl is-enabled servicename.service <span class=\"pl-c\"><span class=\"pl-c\">#</span> 查询服务是否开机启动</span>\nsystemctl <span class=\"pl-c1\">enable</span> <span class=\"pl-k\">*</span>.service <span class=\"pl-c\"><span class=\"pl-c\">#</span> 开机运行服务</span>\nsystemctl disable <span class=\"pl-k\">*</span>.service <span class=\"pl-c\"><span class=\"pl-c\">#</span> 取消开机运行</span>\nsystemctl start <span class=\"pl-k\">*</span>.service <span class=\"pl-c\"><span class=\"pl-c\">#</span> 启动服务</span>\nsystemctl stop <span class=\"pl-k\">*</span>.service <span class=\"pl-c\"><span class=\"pl-c\">#</span> 停止服务</span>\nsystemctl restart <span class=\"pl-k\">*</span>.service <span class=\"pl-c\"><span class=\"pl-c\">#</span> 重启服务</span>\nsystemctl reload <span class=\"pl-k\">*</span>.service <span class=\"pl-c\"><span class=\"pl-c\">#</span> 重新加载服务配置文件</span>\nsystemctl status <span class=\"pl-k\">*</span>.service <span class=\"pl-c\"><span class=\"pl-c\">#</span> 查询服务运行状态</span>\nsystemctl --failed <span class=\"pl-c\"><span class=\"pl-c\">#</span> 显示启动失败的服务</span></pre></div>\n<p>注：*代表某个服务的名字，如http的服务名为httpd</p>\n<p><strong>开机自启动方法二：</strong></p>\n<div class=\"highlight highlight-source-shell\"><pre>vi /etc/rc.local\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> 在 rc.local 文件中，添加下面这条命令</span>\n/usr/local/nginx/sbin/nginx start</pre></div>\n<p>如果开机后发现自启动脚本没有执行，你要去确认一下rc.local这个文件的访问权限是否是可执行的，因为rc.local默认是不可执行的。修改rc.local访问权限，增加可执行权限：</p>\n<div class=\"highlight highlight-source-shell\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> /etc/rc.local是/etc/rc.d/rc.local的软连接，</span>\nchmod +x /etc/rc.d/rc.local</pre></div>\n<p>官方脚本 <a href=\"https://www.nginx.com/resources/wiki/start/topics/examples/redhatnginxinit/\" rel=\"nofollow\">ed Hat NGINX Init Script</a>。</p>\n<h2><a id=\"user-content-运维\" class=\"anchor\" aria-hidden=\"true\" href=\"https://github.com/jaywcjlove/nginx-tutorial#运维\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>运维</h2>\n<h3><a id=\"user-content-服务管理\" class=\"anchor\" aria-hidden=\"true\" href=\"https://github.com/jaywcjlove/nginx-tutorial#服务管理\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>服务管理</h3>\n<div class=\"highlight highlight-source-shell\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> 启动</span>\n/usr/local/nginx/sbin/nginx\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> 重启</span>\n/usr/local/nginx/sbin/nginx -s reload\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> 关闭进程</span>\n/usr/local/nginx/sbin/nginx -s stop\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> 平滑关闭nginx</span>\n/usr/local/nginx/sbin/nginx -s quit\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> 查看nginx的安装状态，</span>\n/usr/local/nginx/sbin/nginx -V </pre></div>\n<p><strong>关闭防火墙，或者添加防火墙规则就可以测试了</strong></p>\n<div class=\"highlight highlight-source-shell\"><pre>service iptables stop</pre></div>\n<p>或者编辑配置文件：</p>\n<div class=\"highlight highlight-source-shell\"><pre>vi /etc/sysconfig/iptables</pre></div>\n<p>添加这样一条开放80端口的规则后保存：</p>\n<div class=\"highlight highlight-source-shell\"><pre>-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT</pre></div>\n<p>重启服务即可:</p>\n<div class=\"highlight highlight-source-shell\"><pre>service iptables restart\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> 命令进行查看目前nat</span>\niptables -t nat -L</pre></div>\n<h3><a id=\"user-content-重启服务防火墙报错解决\" class=\"anchor\" aria-hidden=\"true\" href=\"https://github.com/jaywcjlove/nginx-tutorial#重启服务防火墙报错解决\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>重启服务防火墙报错解决</h3>\n<div class=\"highlight highlight-source-shell\"><pre>service iptables restart\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Redirecting to /bin/systemctl restart  iptables.service</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Failed to restart iptables.service: Unit iptables.service failed to load: No such file or directory.</span></pre></div>\n<p>在CentOS 7或RHEL 7或Fedora中防火墙由 <strong>firewalld</strong> 来管理，当然你可以还原传统的管理方式。或则使用新的命令进行管理。\n假如采用传统请执行一下命令：</p>\n<div class=\"highlight highlight-source-shell\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> 传统命令</span>\nsystemctl stop firewalld\nsystemctl mask firewalld</pre></div>\n<div class=\"highlight highlight-source-shell\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> 安装命令</span>\nyum install iptables-services\n\nsystemctl <span class=\"pl-c1\">enable</span> iptables \nservice iptables restart</pre></div>\n<h2><a id=\"user-content-nginx卸载\" class=\"anchor\" aria-hidden=\"true\" href=\"https://github.com/jaywcjlove/nginx-tutorial#nginx卸载\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>nginx卸载</h2>\n<p>如果通过yum安装，使用下面命令安装。</p>\n<div class=\"highlight highlight-source-shell\"><pre>yum remove nginx</pre></div>\n<p>编译安装，删除/usr/local/nginx目录即可\n如果配置了自启动脚本，也需要删除。</p>\n<h2><a id=\"user-content-参数说明\" class=\"anchor\" aria-hidden=\"true\" href=\"https://github.com/jaywcjlove/nginx-tutorial#参数说明\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>参数说明</h2>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>--prefix=<code><path></code></td>\n<td>Nginx安装路径。如果没有指定，默认为 /usr/local/nginx。</td>\n</tr>\n<tr>\n<td>--sbin-path=<code><path></code></td>\n<td>Nginx可执行文件安装路径。只能安装时指定，如果没有指定，默认为<code><prefix></code>/sbin/nginx。</td>\n</tr>\n<tr>\n<td>--conf-path=<code><path></code></td>\n<td>在没有给定-c选项下默认的nginx.conf的路径。如果没有指定，默认为<code><prefix></code>/conf/nginx.conf。</td>\n</tr>\n<tr>\n<td>--pid-path=<code><path></code></td>\n<td>在nginx.conf中没有指定pid指令的情况下，默认的nginx.pid的路径。如果没有指定，默认为 <code><prefix></code>/logs/nginx.pid。</td>\n</tr>\n<tr>\n<td>--lock-path=<code><path></code></td>\n<td>nginx.lock文件的路径。</td>\n</tr>\n<tr>\n<td>--error-log-path=<code><path></code></td>\n<td>在nginx.conf中没有指定error_log指令的情况下，默认的错误日志的路径。如果没有指定，默认为 <code><prefix></code>/- logs/error.log。</td>\n</tr>\n<tr>\n<td>--http-log-path=<code><path></code></td>\n<td>在nginx.conf中没有指定access_log指令的情况下，默认的访问日志的路径。如果没有指定，默认为 <code><prefix></code>/- logs/access.log。</td>\n</tr>\n<tr>\n<td>--user=<code><user></code></td>\n<td>在nginx.conf中没有指定user指令的情况下，默认的nginx使用的用户。如果没有指定，默认为 nobody。</td>\n</tr>\n<tr>\n<td>--group=<code><group></code></td>\n<td>在nginx.conf中没有指定user指令的情况下，默认的nginx使用的组。如果没有指定，默认为 nobody。</td>\n</tr>\n<tr>\n<td>--builddir=DIR</td>\n<td>指定编译的目录</td>\n</tr>\n<tr>\n<td>--with-rtsig_module</td>\n<td>启用 rtsig 模块</td>\n</tr>\n<tr>\n<td>--with-select_module --without-select_module</td>\n<td>允许或不允许开启SELECT模式，如果 configure 没有找到更合适的模式，比如：kqueue(sun os),epoll (linux kenel 2.6+), rtsig(- 实时信号)或者/dev/poll(一种类似select的模式，底层实现与SELECT基本相 同，都是采用轮训方法) SELECT模式将是默认安装模式</td>\n</tr>\n<tr>\n<td>--with-poll_module --without-poll_module</td>\n<td>Whether or not to enable the poll module. This module is enabled by, default if a more suitable method such as kqueue, epoll, rtsig or /dev/poll is not discovered by configure.</td>\n</tr>\n<tr>\n<td>--with-http_ssl_module</td>\n<td>Enable ngx_http_ssl_module. Enables SSL support and the ability to handle HTTPS requests. Requires OpenSSL. On Debian, this is libssl-dev. 开启HTTP SSL模块，使NGINX可以支持HTTPS请求。这个模块需要已经安装了OPENSSL，在DEBIAN上是libssl</td>\n</tr>\n<tr>\n<td>--with-http_realip_module</td>\n<td>启用 ngx_http_realip_module</td>\n</tr>\n<tr>\n<td>--with-http_addition_module</td>\n<td>启用 ngx_http_addition_module</td>\n</tr>\n<tr>\n<td>--with-http_sub_module</td>\n<td>启用 ngx_http_sub_module</td>\n</tr>\n<tr>\n<td>--with-http_dav_module</td>\n<td>启用 ngx_http_dav_module</td>\n</tr>\n<tr>\n<td>--with-http_flv_module</td>\n<td>启用 ngx_http_flv_module</td>\n</tr>\n<tr>\n<td>--with-http_stub_status_module</td>\n<td>启用 \"server status\" 页</td>\n</tr>\n<tr>\n<td>--without-http_charset_module</td>\n<td>禁用 ngx_http_charset_module</td>\n</tr>\n<tr>\n<td>--without-http_gzip_module</td>\n<td>禁用 ngx_http_gzip_module. 如果启用，需要 zlib 。</td>\n</tr>\n<tr>\n<td>--without-http_ssi_module</td>\n<td>禁用 ngx_http_ssi_module</td>\n</tr>\n<tr>\n<td>--without-http_userid_module</td>\n<td>禁用 ngx_http_userid_module</td>\n</tr>\n<tr>\n<td>--without-http_access_module</td>\n<td>禁用 ngx_http_access_module</td>\n</tr>\n<tr>\n<td>--without-http_auth_basic_module</td>\n<td>禁用 ngx_http_auth_basic_module</td>\n</tr>\n<tr>\n<td>--without-http_autoindex_module</td>\n<td>禁用 ngx_http_autoindex_module</td>\n</tr>\n<tr>\n<td>--without-http_geo_module</td>\n<td>禁用 ngx_http_geo_module</td>\n</tr>\n<tr>\n<td>--without-http_map_module</td>\n<td>禁用 ngx_http_map_module</td>\n</tr>\n<tr>\n<td>--without-http_referer_module</td>\n<td>禁用 ngx_http_referer_module</td>\n</tr>\n<tr>\n<td>--without-http_rewrite_module</td>\n<td>禁用 ngx_http_rewrite_module. 如果启用需要 PCRE 。</td>\n</tr>\n<tr>\n<td>--without-http_proxy_module</td>\n<td>禁用 ngx_http_proxy_module</td>\n</tr>\n<tr>\n<td>--without-http_fastcgi_module</td>\n<td>禁用 ngx_http_fastcgi_module</td>\n</tr>\n<tr>\n<td>--without-http_memcached_module</td>\n<td>禁用 ngx_http_memcached_module</td>\n</tr>\n<tr>\n<td>--without-http_limit_zone_module</td>\n<td>禁用 ngx_http_limit_zone_module</td>\n</tr>\n<tr>\n<td>--without-http_empty_gif_module</td>\n<td>禁用 ngx_http_empty_gif_module</td>\n</tr>\n<tr>\n<td>--without-http_browser_module</td>\n<td>禁用 ngx_http_browser_module</td>\n</tr>\n<tr>\n<td>--without-http_upstream_ip_hash_module</td>\n<td>禁用 ngx_http_upstream_ip_hash_module</td>\n</tr>\n<tr>\n<td>--with-http_perl_module</td>\n<td>启用 ngx_http_perl_module</td>\n</tr>\n<tr>\n<td>--with-perl_modules_path=PATH</td>\n<td>指定 perl 模块的路径</td>\n</tr>\n<tr>\n<td>--with-perl=PATH</td>\n<td>指定 perl 执行文件的路径</td>\n</tr>\n<tr>\n<td>--http-log-path=PATH</td>\n<td>Set path to the http access log</td>\n</tr>\n<tr>\n<td>--http-client-body-temp-path=PATH</td>\n<td>Set path to the http client request body temporary files</td>\n</tr>\n<tr>\n<td>--http-proxy-temp-path=PATH</td>\n<td>Set path to the http proxy temporary files</td>\n</tr>\n<tr>\n<td>--http-fastcgi-temp-path=PATH</td>\n<td>Set path to the http fastcgi temporary files</td>\n</tr>\n<tr>\n<td>--without-http</td>\n<td>禁用 HTTP server</td>\n</tr>\n<tr>\n<td>--with-mail</td>\n<td>启用 IMAP4/POP3/SMTP 代理模块</td>\n</tr>\n<tr>\n<td>--with-mail_ssl_module</td>\n<td>启用 ngx_mail_ssl_module</td>\n</tr>\n<tr>\n<td>--with-cc=PATH</td>\n<td>指定 C 编译器的路径</td>\n</tr>\n<tr>\n<td>--with-cpp=PATH</td>\n<td>指定 C 预处理器的路径</td>\n</tr>\n<tr>\n<td>--with-cc-opt=OPTIONS</td>\n<td>Additional parameters which will be added to the variable CFLAGS. With the use of the system library PCRE in FreeBSD, it is necessary to indicate --with-cc-opt=\"-I /usr/local/include\". If we are using select() and it is necessary to increase the number of file descriptors, then this also can be assigned here: --with-cc-opt=\"-D FD_SETSIZE=2048\".</td>\n</tr>\n<tr>\n<td>--with-ld-opt=OPTIONS</td>\n<td>Additional parameters passed to the linker. With the use of the system library PCRE in - FreeBSD, it is necessary to indicate --with-ld-opt=\"-L /usr/local/lib\".</td>\n</tr>\n<tr>\n<td>--with-cpu-opt=CPU</td>\n<td>为特定的 CPU 编译，有效的值包括：pentium, pentiumpro, pentium3, pentium4, athlon, opteron, amd64, sparc32, sparc64, ppc64</td>\n</tr>\n<tr>\n<td>--without-pcre</td>\n<td>禁止 PCRE 库的使用。同时也会禁止 HTTP rewrite 模块。在 \"location\" 配置指令中的正则表达式也需要 PCRE 。</td>\n</tr>\n<tr>\n<td>--with-pcre=DIR</td>\n<td>指定 PCRE 库的源代码的路径。</td>\n</tr>\n<tr>\n<td>--with-pcre-opt=OPTIONS</td>\n<td>Set additional options for PCRE building.</td>\n</tr>\n<tr>\n<td>--with-md5=DIR</td>\n<td>Set path to md5 library sources.</td>\n</tr>\n<tr>\n<td>--with-md5-opt=OPTIONS</td>\n<td>Set additional options for md5 building.</td>\n</tr>\n<tr>\n<td>--with-md5-asm</td>\n<td>Use md5 assembler sources.</td>\n</tr>\n<tr>\n<td>--with-sha1=DIR</td>\n<td>Set path to sha1 library sources.</td>\n</tr>\n<tr>\n<td>--with-sha1-opt=OPTIONS</td>\n<td>Set additional options for sha1 building.</td>\n</tr>\n<tr>\n<td>--with-sha1-asm</td>\n<td>Use sha1 assembler sources.</td>\n</tr>\n<tr>\n<td>--with-zlib=DIR</td>\n<td>Set path to zlib library sources.</td>\n</tr>\n<tr>\n<td>--with-zlib-opt=OPTIONS</td>\n<td>Set additional options for zlib building.</td>\n</tr>\n<tr>\n<td>--with-zlib-asm=CPU</td>\n<td>Use zlib assembler sources optimized for specified CPU, valid values are: pentium, pentiumpro</td>\n</tr>\n<tr>\n<td>--with-openssl=DIR</td>\n<td>Set path to OpenSSL library sources</td>\n</tr>\n<tr>\n<td>--with-openssl-opt=OPTIONS</td>\n<td>Set additional options for OpenSSL building</td>\n</tr>\n<tr>\n<td>--with-debug</td>\n<td>启用调试日志</td>\n</tr>\n<tr>\n<td>--add-module=PATH</td>\n<td>Add in a third-party module found in directory PATH</td>\n</tr></tbody></table>\n<h2><a id=\"user-content-配置\" class=\"anchor\" aria-hidden=\"true\" href=\"https://github.com/jaywcjlove/nginx-tutorial#配置\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>配置</h2>\n<p>在Centos 默认配置文件在 <strong>/usr/local/nginx-1.5.1/conf/nginx.conf</strong> 我们要在这里配置一些文件。nginx.conf是主配置文件，由若干个部分组成，每个大括号<code>{}</code>表示一个部分。每一行指令都由分号结束<code>;</code>，标志着一行的结束。</p>\n<h3><a id=\"user-content-常用正则\" class=\"anchor\" aria-hidden=\"true\" href=\"https://github.com/jaywcjlove/nginx-tutorial#常用正则\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>常用正则</h3>\n<table>\n<thead>\n<tr>\n<th>正则</th>\n<th>说明</th>\n<th>正则</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>.</code></td>\n<td>匹配除换行符以外的任意字符</td>\n<td><code>$</code></td>\n<td>匹配字符串的结束</td>\n</tr>\n<tr>\n<td><code>?</code></td>\n<td>重复0次或1次</td>\n<td><code>{n}</code></td>\n<td>重复n次</td>\n</tr>\n<tr>\n<td><code>+</code></td>\n<td>重复1次或更多次</td>\n<td><code>{n,}</code></td>\n<td>重复n次或更多次</td>\n</tr>\n<tr>\n<td><code>*</code></td>\n<td>重复0次或更多次</td>\n<td><code>[c]</code></td>\n<td>匹配单个字符c</td>\n</tr>\n<tr>\n<td><code>\\d</code></td>\n<td>匹配数字</td>\n<td><code>[a-z]</code></td>\n<td>匹配a-z小写字母的任意一个</td>\n</tr>\n<tr>\n<td><code>^</code></td>\n<td>匹配字符串的开始</td>\n<td>-</td>\n<td>-</td>\n</tr></tbody></table>\n<h3><a id=\"user-content-全局变量\" class=\"anchor\" aria-hidden=\"true\" href=\"https://github.com/jaywcjlove/nginx-tutorial#全局变量\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>全局变量</h3>\n<table>\n<thead>\n<tr>\n<th>变量</th>\n<th>说明</th>\n<th>变量</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$args</td>\n<td>这个变量等于请求行中的参数，同$query_string</td>\n<td>$remote_port</td>\n<td>客户端的端口。</td>\n</tr>\n<tr>\n<td>$content_length</td>\n<td>请求头中的Content-length字段。</td>\n<td>$remote_user</td>\n<td>已经经过Auth Basic Module验证的用户名。</td>\n</tr>\n<tr>\n<td>$content_type</td>\n<td>请求头中的Content-Type字段。</td>\n<td>$request_filename</td>\n<td>当前请求的文件路径，由root或alias指令与URI请求生成。</td>\n</tr>\n<tr>\n<td>$document_root</td>\n<td>当前请求在root指令中指定的值。</td>\n<td>$scheme</td>\n<td>HTTP方法（如http，https）。</td>\n</tr>\n<tr>\n<td>$host</td>\n<td>请求主机头字段，否则为服务器名称。</td>\n<td>$server_protocol</td>\n<td>请求使用的协议，通常是HTTP/1.0或HTTP/1.1。</td>\n</tr>\n<tr>\n<td>$http_user_agent</td>\n<td>客户端agent信息</td>\n<td>$server_addr</td>\n<td>服务器地址，在完成一次系统调用后可以确定这个值。</td>\n</tr>\n<tr>\n<td>$http_cookie</td>\n<td>客户端cookie信息</td>\n<td>$server_name</td>\n<td>服务器名称。</td>\n</tr>\n<tr>\n<td>$limit_rate</td>\n<td>这个变量可以限制连接速率。</td>\n<td>$server_port</td>\n<td>请求到达服务器的端口号。</td>\n</tr>\n<tr>\n<td>$request_method</td>\n<td>客户端请求的动作，通常为GET或POST。</td>\n<td>$request_uri</td>\n<td>包含请求参数的原始URI，不包含主机名，如：/foo/bar.php?arg=baz。</td>\n</tr>\n<tr>\n<td>$remote_addr</td>\n<td>客户端的IP地址。</td>\n<td>$uri</td>\n<td>不带请求参数的当前URI，$uri不包含主机名，如/foo/bar.html。</td>\n</tr>\n<tr>\n<td>$document_uri</td>\n<td>与$uri相同。</td>\n<td>-</td>\n<td>-</td>\n</tr></tbody></table>\n<p>例如请求：<code>http://localhost:3000/test1/test2/test.php</code></p>\n<p>$host：localhost<br>\n$server_port：3000<br>\n$request_uri：/test1/test2/test.php<br>\n$document_uri：/test1/test2/test.php<br>\n$document_root：/var/www/html<br>\n$request_filename：/var/www/html/test1/test2/test.php</p>\n<h3><a id=\"user-content-符号参考\" class=\"anchor\" aria-hidden=\"true\" href=\"https://github.com/jaywcjlove/nginx-tutorial#符号参考\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>符号参考</h3>\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>说明</th>\n<th>符号</th>\n<th>说明</th>\n<th>符号</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>k,K</td>\n<td>千字节</td>\n<td>m,M</td>\n<td>兆字节</td>\n<td>ms</td>\n<td>毫秒</td>\n</tr>\n<tr>\n<td>s</td>\n<td>秒</td>\n<td>m</td>\n<td>分钟</td>\n<td>h</td>\n<td>小时</td>\n</tr>\n<tr>\n<td>d</td>\n<td>日</td>\n<td>w</td>\n<td>周</td>\n<td>M</td>\n<td>一个月, 30天</td>\n</tr></tbody></table>\n<p>例如，\"8k\"，\"1m\" 代表字节数计量。<br>\n例如，\"1h 30m\"，\"1y 6M\"。代表 \"1小时 30分\"，\"1年零6个月\"。</p>\n<h3><a id=\"user-content-配置文件\" class=\"anchor\" aria-hidden=\"true\" href=\"https://github.com/jaywcjlove/nginx-tutorial#配置文件\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>配置文件</h3>\n<p>nginx 的配置系统由一个主配置文件和其他一些辅助的配置文件构成。这些配置文件均是纯文本文件，全部位于 nginx 安装目录下的 conf 目录下。</p>\n<p>指令由 nginx 的各个模块提供，不同的模块会提供不同的指令来实现配置。\n指令除了 Key-Value 的形式，还有作用域指令。</p>\n<p>nginx.conf 中的配置信息，根据其逻辑上的意义，对它们进行了分类，也就是分成了多个作用域，或者称之为配置指令上下文。不同的作用域含有一个或者多个配置项。</p>\n<p>下面的这些上下文指令是用的比较多：</p>\n<table>\n<thead>\n<tr>\n<th>Directive</th>\n<th>Description</th>\n<th>Contains Directive</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>main</td>\n<td>nginx 在运行时与具体业务功能（比如 http 服务或者 email 服务代理）无关的一些参数，比如工作进程数，运行的身份等。</td>\n<td>user, worker_processes, error_log, events, http, mail</td>\n</tr>\n<tr>\n<td>http</td>\n<td>与提供 http 服务相关的一些配置参数。例如：是否使用 keepalive 啊，是否使用 gzip 进行压缩等。</td>\n<td>server</td>\n</tr>\n<tr>\n<td>server</td>\n<td>http 服务上支持若干虚拟主机。每个虚拟主机一个对应的 server 配置项，配置项里面包含该虚拟主机相关的配置。在提供 mail 服务的代理时，也可以建立若干 server. 每个 server 通过监听的地址来区分。</td>\n<td>listen, server_name, access_log, location, protocol, proxy, smtp_auth, xclient</td>\n</tr>\n<tr>\n<td>location</td>\n<td>http 服务中，某些特定的 URL 对应的一系列配置项。</td>\n<td>index, root</td>\n</tr>\n<tr>\n<td>mail</td>\n<td>实现 email 相关的 SMTP/IMAP/POP3 代理时，共享的一些配置项（因为可能实现多个代理，工作在多个监听地址上）。</td>\n<td>server, http, imap_capabilities</td>\n</tr>\n<tr>\n<td>include</td>\n<td>以便增强配置文件的可读性，使得部分配置文件可以重新使用。</td>\n<td>-</td>\n</tr>\n<tr>\n<td>valid_referers</td>\n<td>用来校验Http请求头Referer是否有效。</td>\n<td>-</td>\n</tr>\n<tr>\n<td>try_files</td>\n<td>用在server部分，不过最常见的还是用在location部分，它会按照给定的参数顺序进行尝试，第一个被匹配到的将会被使用。</td>\n<td>-</td>\n</tr>\n<tr>\n<td>if</td>\n<td>当在location块中使用if指令，在某些情况下它并不按照预期运行，一般来说避免使用if指令。</td>\n<td>-</td>\n</tr></tbody></table>\n<p>例如我们再 <strong>nginx.conf</strong> 里面引用两个配置 vhost/example.com.conf 和 vhost/gitlab.com.conf 它们都被放在一个我自己新建的目录 vhost 下面。nginx.conf 配置如下：</p>\n<div class=\"highlight highlight-source-nginx\"><pre><span class=\"pl-k\">worker_processes</span>  <span class=\"pl-s\">1</span>;\n<span class=\"pl-k\">events</span> {\n    <span class=\"pl-k\">worker_connections</span>  <span class=\"pl-s\">1024</span>;\n}\n\n<span class=\"pl-k\">http</span> {\n    <span class=\"pl-k\">include</span>       mime.types;\n    <span class=\"pl-k\">default_type</span>  application/octet-stream;\n\n    <span class=\"pl-c\">#log_format  main  \'$remote_addr - $remote_user [$time_local] \"$request\" \'</span>\n    <span class=\"pl-c\">#                  \'$status $body_bytes_sent \"$http_referer\" \'</span>\n    <span class=\"pl-c\">#                  \'\"$http_user_agent\" \"$http_x_forwarded_for\"\';</span>\n\n    <span class=\"pl-c\">#access_log  logs/access.log  main;</span>\n\n    <span class=\"pl-k\">sendfile</span>       <span class=\"pl-c1\"> on</span>;\n    <span class=\"pl-c\">#tcp_nopush     on;</span>\n\n    <span class=\"pl-c\">#keepalive_timeout  0;</span>\n    <span class=\"pl-k\">keepalive_timeout</span>  <span class=\"pl-s\">65</span>;\n\n    <span class=\"pl-c\">#gzip  on;</span>\n    <span class=\"pl-k\">server</span> {\n        <span class=\"pl-k\">listen</span>       <span class=\"pl-s\">80</span>;\n        <span class=\"pl-k\">server_name</span>  localhost;\n        <span class=\"pl-k\">location</span> <span class=\"pl-en\">/ </span>{\n            <span class=\"pl-k\">root</span>   html;\n            <span class=\"pl-k\">index</span>  index.html index.htm;\n        }\n        <span class=\"pl-k\">error_page</span>   <span class=\"pl-s\">500</span> <span class=\"pl-s\">502</span> <span class=\"pl-s\">503</span> <span class=\"pl-s\">504</span>  /50x.html;\n        <span class=\"pl-k\">location</span> <span class=\"pl-en\">= /50x.html </span>{\n            <span class=\"pl-k\">root</span>   html;\n        }\n    }\n    <span class=\"pl-k\">include</span>  vhost/example.com.conf;\n    <span class=\"pl-k\">include</span>  vhost/gitlab.com.conf;\n}</pre></div>\n<p>简单的配置: example.com.conf</p>\n<div class=\"highlight highlight-source-nginx\"><pre><span class=\"pl-k\">server</span> {\n    <span class=\"pl-c\">#侦听的80端口</span>\n    <span class=\"pl-k\">listen</span>       <span class=\"pl-s\">80</span>;\n    <span class=\"pl-k\">server_name</span>  baidu.com app.baidu.com; <span class=\"pl-c\"># 这里指定域名</span>\n    <span class=\"pl-k\">index</span>        index.html index.htm;    <span class=\"pl-c\"># 这里指定默认入口页面</span>\n    <span class=\"pl-k\">root</span> /home/www/app.baidu.com;         <span class=\"pl-c\"># 这里指定目录</span>\n}</pre></div>\n<h3><a id=\"user-content-内置预定义变量\" class=\"anchor\" aria-hidden=\"true\" href=\"https://github.com/jaywcjlove/nginx-tutorial#内置预定义变量\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>内置预定义变量</h3>\n<p>Nginx提供了许多预定义的变量，也可以通过使用set来设置变量。你可以在if中使用预定义变量，也可以将它们传递给代理服务器。以下是一些常见的预定义变量，<a href=\"http://nginx.org/en/docs/varindex.html\" rel=\"nofollow\">更多详见</a></p>\n<table>\n<thead>\n<tr>\n<th>变量名称</th>\n<th>值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$args_name</td>\n<td>在请求中的name参数</td>\n</tr>\n<tr>\n<td>$args</td>\n<td>所有请求参数</td>\n</tr>\n<tr>\n<td>$query_string</td>\n<td>$args的别名</td>\n</tr>\n<tr>\n<td>$content_length</td>\n<td>请求头Content-Length的值</td>\n</tr>\n<tr>\n<td>$content_type</td>\n<td>请求头Content-Type的值</td>\n</tr>\n<tr>\n<td>$host</td>\n<td>如果当前有Host，则为请求头Host的值；如果没有这个头，那么该值等于匹配该请求的server_name的值</td>\n</tr>\n<tr>\n<td>$remote_addr</td>\n<td>客户端的IP地址</td>\n</tr>\n<tr>\n<td>$request</td>\n<td>完整的请求，从客户端收到，包括Http请求方法、URI、Http协议、头、请求体</td>\n</tr>\n<tr>\n<td>$request_uri</td>\n<td>完整请求的URI，从客户端来的请求，包括参数</td>\n</tr>\n<tr>\n<td>$scheme</td>\n<td>当前请求的协议</td>\n</tr>\n<tr>\n<td>$uri</td>\n<td>当前请求的标准化URI</td>\n</tr></tbody></table>\n<h3><a id=\"user-content-反向代理\" class=\"anchor\" aria-hidden=\"true\" href=\"https://github.com/jaywcjlove/nginx-tutorial#反向代理\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>反向代理</h3>\n<p>反向代理是一个Web服务器，它接受客户端的连接请求，然后将请求转发给上游服务器，并将从服务器得到的结果返回给连接的客户端。下面简单的反向代理的例子：</p>\n<div class=\"highlight highlight-source-nginx\"><pre><span class=\"pl-k\">server</span> {  \n  <span class=\"pl-k\">listen</span>       <span class=\"pl-s\">80</span>;                                                        \n  <span class=\"pl-k\">server_name</span>  localhost;                                              \n  <span class=\"pl-k\">client_max_body_size</span> <span class=\"pl-c1\">1024M</span>;  <span class=\"pl-c\"># 允许客户端请求的最大单文件字节数</span>\n\n  <span class=\"pl-k\">location</span> <span class=\"pl-en\">/ </span>{\n    <span class=\"pl-k\">proxy_pass</span>                         http://localhost:8080;\n    <span class=\"pl-k\">proxy_set_header</span> Host              <span class=\"pl-smi\">$host</span>:<span class=\"pl-smi\">$server_port</span>;\n    <span class=\"pl-k\">proxy_set_header</span> X-Forwarded-For   <span class=\"pl-smi\">$remote_addr</span>; <span class=\"pl-c\"># HTTP的请求端真实的IP</span>\n    <span class=\"pl-k\">proxy_set_header</span> X-Forwarded-Proto <span class=\"pl-smi\">$scheme</span>;      <span class=\"pl-c\"># 为了正确地识别实际用户发出的协议是 http 还是 https</span>\n  }\n}</pre></div>\n<p>复杂的配置: gitlab.com.conf。</p>\n<div class=\"highlight highlight-source-nginx\"><pre><span class=\"pl-k\">server</span> {\n    <span class=\"pl-c\">#侦听的80端口</span>\n    <span class=\"pl-k\">listen</span>       <span class=\"pl-s\">80</span>;\n    <span class=\"pl-k\">server_name</span>  git.example.cn;\n    <span class=\"pl-k\">location</span> <span class=\"pl-en\">/ </span>{\n        <span class=\"pl-k\">proxy_pass</span>   http://localhost:3000;\n        <span class=\"pl-c\">#以下是一些反向代理的配置可删除</span>\n        <span class=\"pl-k\">proxy_redirect</span>            <span class=\"pl-c1\"> off</span>;\n        <span class=\"pl-c\">#后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span>\n        <span class=\"pl-k\">proxy_set_header</span>           Host <span class=\"pl-smi\">$host</span>;\n        <span class=\"pl-k\">client_max_body_size</span>       <span class=\"pl-c1\">10m</span>; <span class=\"pl-c\">#允许客户端请求的最大单文件字节数</span>\n        <span class=\"pl-k\">client_body_buffer_size</span>    <span class=\"pl-c1\">128k</span>; <span class=\"pl-c\">#缓冲区代理缓冲用户端请求的最大字节数</span>\n        <span class=\"pl-k\">proxy_connect_timeout</span>      <span class=\"pl-s\">300</span>; <span class=\"pl-c\">#nginx跟后端服务器连接超时时间(代理连接超时)</span>\n        <span class=\"pl-k\">proxy_send_timeout</span>         <span class=\"pl-s\">300</span>; <span class=\"pl-c\">#后端服务器数据回传时间(代理发送超时)</span>\n        <span class=\"pl-k\">proxy_read_timeout</span>         <span class=\"pl-s\">300</span>; <span class=\"pl-c\">#连接成功后，后端服务器响应时间(代理接收超时)</span>\n        <span class=\"pl-k\">proxy_buffer_size</span>          <span class=\"pl-c1\">4k</span>; <span class=\"pl-c\">#设置代理服务器（nginx）保存用户头信息的缓冲区大小</span>\n        <span class=\"pl-k\">proxy_buffers</span>              <span class=\"pl-s\">4</span> <span class=\"pl-c1\">32k</span>; <span class=\"pl-c\">#proxy_buffers缓冲区，网页平均在32k以下的话，这样设置</span>\n        <span class=\"pl-k\">proxy_busy_buffers_size</span>    <span class=\"pl-c1\">64k</span>; <span class=\"pl-c\">#高负荷下缓冲大小（proxy_buffers*2）</span>\n    }\n}</pre></div>\n<p>代理到上游服务器的配置中，最重要的是proxy_pass指令。以下是代理模块中的一些常用指令：</p>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>proxy_connect_timeout</td>\n<td>Nginx从接受请求至连接到上游服务器的最长等待时间</td>\n</tr>\n<tr>\n<td>proxy_send_timeout</td>\n<td>后端服务器数据回传时间(代理发送超时)</td>\n</tr>\n<tr>\n<td>proxy_read_timeout</td>\n<td>连接成功后，后端服务器响应时间(代理接收超时)</td>\n</tr>\n<tr>\n<td>proxy_cookie_domain</td>\n<td>替代从上游服务器来的Set-Cookie头的domain属性</td>\n</tr>\n<tr>\n<td>proxy_cookie_path</td>\n<td>替代从上游服务器来的Set-Cookie头的path属性</td>\n</tr>\n<tr>\n<td>proxy_buffer_size</td>\n<td>设置代理服务器（nginx）保存用户头信息的缓冲区大小</td>\n</tr>\n<tr>\n<td>proxy_buffers</td>\n<td>proxy_buffers缓冲区，网页平均在多少k以下</td>\n</tr>\n<tr>\n<td>proxy_set_header</td>\n<td>重写发送到上游服务器头的内容，也可以通过将某个头部的值设置为空字符串，而不发送某个头部的方法实现</td>\n</tr>\n<tr>\n<td>proxy_ignore_headers</td>\n<td>这个指令禁止处理来自代理服务器的应答。</td>\n</tr>\n<tr>\n<td>proxy_intercept_errors</td>\n<td>使nginx阻止HTTP应答代码为400或者更高的应答。</td>\n</tr></tbody></table>\n<h3><a id=\"user-content-负载均衡\" class=\"anchor\" aria-hidden=\"true\" href=\"https://github.com/jaywcjlove/nginx-tutorial#负载均衡\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>负载均衡</h3>\n<p>upstream指令启用一个新的配置区段，在该区段定义一组上游服务器。这些服务器可能被设置不同的权重，也可能出于对服务器进行维护，标记为down。</p>\n<div class=\"highlight highlight-source-nginx\"><pre><span class=\"pl-k\">upstream</span> <span class=\"pl-en\">gitlab </span>{\n    <span class=\"pl-k\">ip_hash</span>;\n    <span class=\"pl-c\"># upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。</span>\n    <span class=\"pl-k\">server</span> 192.168.122.11:8081 ;\n    <span class=\"pl-k\">server</span> 127.0.0.1:82 weight=3;\n    <span class=\"pl-k\">server</span> 127.0.0.1:83 weight=3 down;\n    <span class=\"pl-k\">server</span> 127.0.0.1:84 weight=3; max_fails=<span class=\"pl-k\">3</span>  fail_timeout=20s;\n    <span class=\"pl-k\">server</span> 127.0.0.1:85 weight=4;;\n    <span class=\"pl-k\">keepalive</span> 32;\n}\n<span class=\"pl-k\">server</span> {\n    <span class=\"pl-c\">#侦听的80端口</span>\n    <span class=\"pl-k\">listen</span>       <span class=\"pl-s\">80</span>;\n    <span class=\"pl-k\">server_name</span>  git.example.cn;\n    <span class=\"pl-k\">location</span> <span class=\"pl-en\">/ </span>{\n        <span class=\"pl-k\">proxy_pass</span>   http://gitlab;    <span class=\"pl-c\">#在这里设置一个代理，和upstream的名字一样</span>\n        <span class=\"pl-c\">#以下是一些反向代理的配置可删除</span>\n        <span class=\"pl-k\">proxy_redirect</span>            <span class=\"pl-c1\"> off</span>;\n        <span class=\"pl-c\">#后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span>\n        <span class=\"pl-k\">proxy_set_header</span>           Host <span class=\"pl-smi\">$host</span>;\n        <span class=\"pl-k\">proxy_set_header</span>           X-Real-IP <span class=\"pl-smi\">$remote_addr</span>;\n        <span class=\"pl-k\">proxy_set_header</span>           X-Forwarded-For <span class=\"pl-smi\">$proxy_add_x_forwarded_for</span>;\n        <span class=\"pl-k\">client_max_body_size</span>       <span class=\"pl-c1\">10m</span>;  <span class=\"pl-c\">#允许客户端请求的最大单文件字节数</span>\n        <span class=\"pl-k\">client_body_buffer_size</span>    <span class=\"pl-c1\">128k</span>; <span class=\"pl-c\">#缓冲区代理缓冲用户端请求的最大字节数</span>\n        <span class=\"pl-k\">proxy_connect_timeout</span>      <span class=\"pl-s\">300</span>;  <span class=\"pl-c\">#nginx跟后端服务器连接超时时间(代理连接超时)</span>\n        <span class=\"pl-k\">proxy_send_timeout</span>         <span class=\"pl-s\">300</span>;  <span class=\"pl-c\">#后端服务器数据回传时间(代理发送超时)</span>\n        <span class=\"pl-k\">proxy_read_timeout</span>         <span class=\"pl-s\">300</span>;  <span class=\"pl-c\">#连接成功后，后端服务器响应时间(代理接收超时)</span>\n        <span class=\"pl-k\">proxy_buffer_size</span>          <span class=\"pl-c1\">4k</span>; <span class=\"pl-c\">#设置代理服务器（nginx）保存用户头信息的缓冲区大小</span>\n        <span class=\"pl-k\">proxy_buffers</span>              <span class=\"pl-s\">4</span> <span class=\"pl-c1\">32k</span>;<span class=\"pl-c\"># 缓冲区，网页平均在32k以下的话，这样设置</span>\n        <span class=\"pl-k\">proxy_busy_buffers_size</span>    <span class=\"pl-c1\">64k</span>; <span class=\"pl-c\">#高负荷下缓冲大小（proxy_buffers*2）</span>\n        <span class=\"pl-k\">proxy_temp_file_write_size</span> <span class=\"pl-c1\">64k</span>; <span class=\"pl-c\">#设定缓存文件夹大小，大于这个值，将从upstream服务器传</span>\n    }\n}</pre></div>\n<p>每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。</p>\n<p><strong>负载均衡：</strong></p>\n<p>upstream模块能够使用3种负载均衡算法：轮询、IP哈希、最少连接数。</p>\n<p><strong>轮询：</strong> 默认情况下使用轮询算法，不需要配置指令来激活它，它是基于在队列中谁是下一个的原理确保访问均匀地分布到每个上游服务器；<br>\n<strong>IP哈希：</strong> 通过ip_hash指令来激活，Nginx通过IPv4地址的前3个字节或者整个IPv6地址作为哈希键来实现，同一个IP地址总是能被映射到同一个上游服务器；<br>\n<strong>最少连接数：</strong> 通过least_conn指令来激活，该算法通过选择一个活跃数最少的上游服务器进行连接。如果上游服务器处理能力不同，可以通过给server配置weight权重来说明，该算法将考虑到不同服务器的加权最少连接数。</p>\n<h4><a id=\"user-content-rr\" class=\"anchor\" aria-hidden=\"true\" href=\"https://github.com/jaywcjlove/nginx-tutorial#rr\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>RR</h4>\n<p><strong>简单配置</strong> ，这里我配置了2台服务器，当然实际上是一台，只是端口不一样而已，而8081的服务器是不存在的，也就是说访问不到，但是我们访问 <code>http://localhost</code> 的时候，也不会有问题，会默认跳转到<code>http://localhost:8080</code>具体是因为Nginx会自动判断服务器的状态，如果服务器处于不能访问（服务器挂了），就不会跳转到这台服务器，所以也避免了一台服务器挂了影响使用的情况，由于Nginx默认是RR策略，所以我们不需要其他更多的设置</p>\n<div class=\"highlight highlight-source-nginx\"><pre><span class=\"pl-k\">upstream</span> <span class=\"pl-en\">test </span>{\n    <span class=\"pl-k\">server</span> localhost:8080;\n    <span class=\"pl-k\">server</span> localhost:8081;\n}\n<span class=\"pl-k\">server</span> {\n    <span class=\"pl-k\">listen</span>       <span class=\"pl-s\">81</span>;\n    <span class=\"pl-k\">server_name</span>  localhost;\n    <span class=\"pl-k\">client_max_body_size</span> <span class=\"pl-c1\">1024M</span>;\n \n    <span class=\"pl-k\">location</span> <span class=\"pl-en\">/ </span>{\n        <span class=\"pl-k\">proxy_pass</span> http://test;\n        <span class=\"pl-k\">proxy_set_header</span> Host <span class=\"pl-smi\">$host</span>:<span class=\"pl-smi\">$server_port</span>;\n    }\n}</pre></div>\n<p><strong>负载均衡的核心代码为</strong></p>\n<div class=\"highlight highlight-source-nginx\"><pre><span class=\"pl-k\">upstream</span> <span class=\"pl-en\">test </span>{\n    <span class=\"pl-k\">server</span> localhost:8080;\n    <span class=\"pl-k\">server</span> localhost:8081;\n}</pre></div>\n<h4><a id=\"user-content-权重\" class=\"anchor\" aria-hidden=\"true\" href=\"https://github.com/jaywcjlove/nginx-tutorial#权重\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>权重</h4>\n<p>指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。 例如</p>\n<div class=\"highlight highlight-source-nginx\"><pre><span class=\"pl-k\">upstream</span> <span class=\"pl-en\">test </span>{\n    <span class=\"pl-k\">server</span> localhost:8080 weight=9;\n    <span class=\"pl-k\">server</span> localhost:8081 weight=1;\n}</pre></div>\n<p>那么10次一般只会有1次会访问到8081，而有9次会访问到8080</p>\n<h4><a id=\"user-content-ip_hash\" class=\"anchor\" aria-hidden=\"true\" href=\"https://github.com/jaywcjlove/nginx-tutorial#ip_hash\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>ip_hash</h4>\n<p>上面的2种方式都有一个问题，那就是下一个请求来的时候请求可能分发到另外一个服务器，当我们的程', ' [![](https://github.com/jaywcjlove/nginx-tutorial/raw/master/nginx.svg?sanitize=true)](http://nginx.org/) \n\nNginx 是一款面向性能设计的 HTTP 服务器，能反向代理 HTTP，HTTPS 和邮件相关(SMTP，POP3，IMAP)的协议链接。并且提供了负载均衡以及 HTTP 缓存。它的设计充分使用异步事件模型，削减上下文调度的开销，提高服务器并发能力。采用了模块化设计，提供了丰富模块的第三方模块。\n\n所以关于 Nginx，有这些标签：「异步」「事件」「模块化」「高性能」「高并发」「反向代理」「负载均衡」\n\nLinux系统：`Centos 7 x64` Nginx版本：`1.11.5`\n\n[](https://github.com/jaywcjlove/nginx-tutorial#目录)目录\n=====================================================\n\n*   [安装](https://github.com/jaywcjlove/nginx-tutorial#%E5%AE%89%E8%A3%85)\n    *   [安装依赖](https://github.com/jaywcjlove/nginx-tutorial#%E5%AE%89%E8%A3%85%E4%BE%9D%E8%B5%96)\n    *   [下载](https://github.com/jaywcjlove/nginx-tutorial#%E4%B8%8B%E8%BD%BD)\n    *   [编译安装](https://github.com/jaywcjlove/nginx-tutorial#%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85)\n    *   [nginx测试](https://github.com/jaywcjlove/nginx-tutorial#nginx%E6%B5%8B%E8%AF%95)\n    *   [设置全局nginx命令](https://github.com/jaywcjlove/nginx-tutorial#%E8%AE%BE%E7%BD%AE%E5%85%A8%E5%B1%80nginx%E5%91%BD%E4%BB%A4)\n*   [开机自启动](https://github.com/jaywcjlove/nginx-tutorial#%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E5%8A%A8)\n*   [运维](https://github.com/jaywcjlove/nginx-tutorial#%E8%BF%90%E7%BB%B4)\n    *   [服务管理](https://github.com/jaywcjlove/nginx-tutorial#%E6%9C%8D%E5%8A%A1%E7%AE%A1%E7%90%86)\n    *   [重启服务防火墙报错解决](https://github.com/jaywcjlove/nginx-tutorial#%E9%87%8D%E5%90%AF%E6%9C%8D%E5%8A%A1%E9%98%B2%E7%81%AB%E5%A2%99%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3)\n*   [nginx卸载](https://github.com/jaywcjlove/nginx-tutorial#nginx%E5%8D%B8%E8%BD%BD)\n*   [参数说明](https://github.com/jaywcjlove/nginx-tutorial#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E)\n*   [配置](https://github.com/jaywcjlove/nginx-tutorial#%E9%85%8D%E7%BD%AE)\n    *   [常用正则](https://github.com/jaywcjlove/nginx-tutorial#%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99)\n    *   [全局变量](https://github.com/jaywcjlove/nginx-tutorial#%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F)\n    *   [符号参考](https://github.com/jaywcjlove/nginx-tutorial#%E7%AC%A6%E5%8F%B7%E5%8F%82%E8%80%83)\n    *   [配置文件](https://github.com/jaywcjlove/nginx-tutorial#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6)\n    *   [内置预定义变量](https://github.com/jaywcjlove/nginx-tutorial#%E5%86%85%E7%BD%AE%E9%A2%84%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F)\n    *   [反向代理](https://github.com/jaywcjlove/nginx-tutorial#%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86)\n    *   [负载均衡](https://github.com/jaywcjlove/nginx-tutorial#%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1)\n        *   [RR](https://github.com/jaywcjlove/nginx-tutorial#rr)\n        *   [权重](https://github.com/jaywcjlove/nginx-tutorial#%E6%9D%83%E9%87%8D)\n        *   [ip_hash](https://github.com/jaywcjlove/nginx-tutorial#ip_hash)\n        *   [fair](https://github.com/jaywcjlove/nginx-tutorial#fair)\n        *   [url_hash](https://github.com/jaywcjlove/nginx-tutorial#url_hash)\n    *   [屏蔽ip](https://github.com/jaywcjlove/nginx-tutorial#%E5%B1%8F%E8%94%BDip)\n*   [第三方模块安装方法](https://github.com/jaywcjlove/nginx-tutorial#%E7%AC%AC%E4%B8%89%E6%96%B9%E6%A8%A1%E5%9D%97%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95)\n*   [重定向](https://github.com/jaywcjlove/nginx-tutorial#%E9%87%8D%E5%AE%9A%E5%90%91)\n    *   [重定向整个网站](https://github.com/jaywcjlove/nginx-tutorial#%E9%87%8D%E5%AE%9A%E5%90%91%E6%95%B4%E4%B8%AA%E7%BD%91%E7%AB%99)\n    *   [重定向单页](https://github.com/jaywcjlove/nginx-tutorial#%E9%87%8D%E5%AE%9A%E5%90%91%E5%8D%95%E9%A1%B5)\n    *   [重定向整个子路径](https://github.com/jaywcjlove/nginx-tutorial#%E9%87%8D%E5%AE%9A%E5%90%91%E6%95%B4%E4%B8%AA%E5%AD%90%E8%B7%AF%E5%BE%84)\n*   [性能](https://github.com/jaywcjlove/nginx-tutorial#%E6%80%A7%E8%83%BD)\n    *   [内容缓存](https://github.com/jaywcjlove/nginx-tutorial#%E5%86%85%E5%AE%B9%E7%BC%93%E5%AD%98)\n    *   [Gzip压缩](https://github.com/jaywcjlove/nginx-tutorial#gzip%E5%8E%8B%E7%BC%A9)\n    *   [打开文件缓存](https://github.com/jaywcjlove/nginx-tutorial#%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6%E7%BC%93%E5%AD%98)\n    *   [SSL缓存](https://github.com/jaywcjlove/nginx-tutorial#ssl%E7%BC%93%E5%AD%98)\n    *   [上游Keepalive](https://github.com/jaywcjlove/nginx-tutorial#%E4%B8%8A%E6%B8%B8keepalive)\n    *   [监控](https://github.com/jaywcjlove/nginx-tutorial#%E7%9B%91%E6%8E%A7)\n*   [常见使用场景](https://github.com/jaywcjlove/nginx-tutorial#%E5%B8%B8%E8%A7%81%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF)\n    *   [跨域问题](https://github.com/jaywcjlove/nginx-tutorial#%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98)\n    *   [跳转到带www的域上面](https://github.com/jaywcjlove/nginx-tutorial#%E8%B7%B3%E8%BD%AC%E5%88%B0%E5%B8%A6www%E7%9A%84%E5%9F%9F%E4%B8%8A%E9%9D%A2)\n    *   [代理转发](https://github.com/jaywcjlove/nginx-tutorial#%E4%BB%A3%E7%90%86%E8%BD%AC%E5%8F%91)\n    *   [代理转发连接替换](https://github.com/jaywcjlove/nginx-tutorial#%E4%BB%A3%E7%90%86%E8%BD%AC%E5%8F%91%E8%BF%9E%E6%8E%A5%E6%9B%BF%E6%8D%A2)\n    *   [ssl配置](https://github.com/jaywcjlove/nginx-tutorial#ssl%E9%85%8D%E7%BD%AE)\n    *   [强制将http重定向到https](https://github.com/jaywcjlove/nginx-tutorial#%E5%BC%BA%E5%88%B6%E5%B0%86http%E9%87%8D%E5%AE%9A%E5%90%91%E5%88%B0https)\n    *   [两个虚拟主机](https://github.com/jaywcjlove/nginx-tutorial#%E4%B8%A4%E4%B8%AA%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA)\n    *   [虚拟主机标准配置](https://github.com/jaywcjlove/nginx-tutorial#%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E6%A0%87%E5%87%86%E9%85%8D%E7%BD%AE)\n    *   [防盗链](https://github.com/jaywcjlove/nginx-tutorial#%E9%98%B2%E7%9B%97%E9%93%BE)\n    *   [虚拟目录配置](https://github.com/jaywcjlove/nginx-tutorial#%E8%99%9A%E6%8B%9F%E7%9B%AE%E5%BD%95%E9%85%8D%E7%BD%AE)\n    *   [防盗图配置](https://github.com/jaywcjlove/nginx-tutorial#%E9%98%B2%E7%9B%97%E5%9B%BE%E9%85%8D%E7%BD%AE)\n    *   [屏蔽.git等文件](https://github.com/jaywcjlove/nginx-tutorial#%E5%B1%8F%E8%94%BDgit%E7%AD%89%E6%96%87%E4%BB%B6)\n    *   [域名路径加不加需要都能正常访问](https://github.com/jaywcjlove/nginx-tutorial#%E5%9F%9F%E5%90%8D%E8%B7%AF%E5%BE%84%E5%8A%A0%E4%B8%8D%E5%8A%A0%E9%9C%80%E8%A6%81%E9%83%BD%E8%83%BD%E6%AD%A3%E5%B8%B8%E8%AE%BF%E9%97%AE)\n*   [错误问题](https://github.com/jaywcjlove/nginx-tutorial#%E9%94%99%E8%AF%AF%E9%97%AE%E9%A2%98)\n*   [精品文章参考](https://github.com/jaywcjlove/nginx-tutorial#%E7%B2%BE%E5%93%81%E6%96%87%E7%AB%A0%E5%8F%82%E8%80%83)\n\n[](https://github.com/jaywcjlove/nginx-tutorial#安装)安装\n-----------------------------------------------------\n\n### [](https://github.com/jaywcjlove/nginx-tutorial#安装依赖)安装依赖\n\n> prce(重定向支持)和openssl(https支持，如果不需要https可以不安装。)\n\n```shell\nyum install -y pcre-devel \nyum -y install gcc make gcc-c++ wget\nyum -y install openssl openssl-devel \n```\n\nCentOS 6.5 我安装的时候是选择的“基本服务器”，默认这两个包都没安装全，所以这两个都运行安装即可。\n\n### [](https://github.com/jaywcjlove/nginx-tutorial#下载)下载\n\n[nginx的所有版本在这里](http://nginx.org/download/)\n\n```shell\nwget http://nginx.org/download/nginx-1.13.3.tar.gz\nwget http://nginx.org/download/nginx-1.13.7.tar.gz\n\n# 如果没有安装wget\n# 下载已编译版本\n$ yum install wget\n\n# 解压压缩包\ntar zxf nginx-1.13.3.tar.gz\n```\n\n### [](https://github.com/jaywcjlove/nginx-tutorial#编译安装)编译安装\n\n然后进入目录编译安装，[configure参数说明](https://github.com/jaywcjlove/nginx-tutorial#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E)\n\n```shell\ncd nginx-1.11.5\n./configure\n\n....\nConfiguration summary\n  + using system PCRE library\n  + OpenSSL library is not used\n  + using system zlib library\n\n  nginx path prefix: \"/usr/local/nginx\"\n  nginx binary file: \"/usr/local/nginx/sbin/nginx\"\n  nginx modules path: \"/usr/local/nginx/modules\"\n  nginx configuration prefix: \"/usr/local/nginx/conf\"\n  nginx configuration file: \"/usr/local/nginx/conf/nginx.conf\"\n  nginx pid file: \"/usr/local/nginx/logs/nginx.pid\"\n  nginx error log file: \"/usr/local/nginx/logs/error.log\"\n  nginx http access log file: \"/usr/local/nginx/logs/access.log\"\n  nginx http client request body temporary files: \"client_body_temp\"\n  nginx http proxy temporary files: \"proxy_temp\"\n  nginx http fastcgi temporary files: \"fastcgi_temp\"\n  nginx http uwsgi temporary files: \"uwsgi_temp\"\n  nginx http scgi temporary files: \"scgi_temp\"\n```\n\n安装报错误的话比如：“C compiler cc is not found”，这个就是缺少编译环境，安装一下就可以了 **yum -y install gcc make gcc-c++ openssl-devel**\n\n如果没有error信息，就可以执行下边的安装了：\n\n```shell\nmake\nmake install\n```\n\n### [](https://github.com/jaywcjlove/nginx-tutorial#nginx测试)nginx测试\n\n运行下面命令会出现两个结果，一般情况nginx会安装在`/usr/local/nginx`目录中\n\n```shell\ncd /usr/local/nginx/sbin/\n./nginx -t\n\n# nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok\n# nginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful\n```\n\n### [](https://github.com/jaywcjlove/nginx-tutorial#设置全局nginx命令)设置全局nginx命令\n\n```shell\nvi ~/.bash_profile\n```\n\n将下面内容添加到 `~/.bash_profile` 文件中\n\n```shell\nPATH=$PATH:$HOME/bin:/usr/local/nginx/sbin/\nexport PATH\n```\n\n运行命令 **`source ~/.bash_profile`** 让配置立即生效。你就可以全局运行 `nginx` 命令了。\n\n[](https://github.com/jaywcjlove/nginx-tutorial#开机自启动)开机自启动\n-----------------------------------------------------------\n\n**开机自启动方法一：**\n\n编辑 **vi /lib/systemd/system/nginx.service** 文件，没有创建一个 **touch nginx.service** 然后将如下内容根据具体情况进行修改后，添加到nginx.service文件中：\n\n```shell\n[Unit]\nDescription=nginx\nAfter=network.target remote-fs.target nss-lookup.target\n\n[Service]\n\nType=forking\nPIDFile=/var/run/nginx.pid\nExecStartPre=/usr/local/nginx/sbin/nginx -t -c /usr/local/nginx/conf/nginx.conf\nExecStart=/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf\nExecReload=/bin/kill -s HUP $MAINPID\nExecStop=/bin/kill -s QUIT $MAINPID\nPrivateTmp=true\n\n[Install]\nWantedBy=multi-user.target\n```\n\n*   `[Unit]`:服务的说明\n*   `Description`:描述服务\n*   `After`:描述服务类别\n*   `[Service]`服务运行参数的设置\n*   `Type=forking`是后台运行的形式\n*   `ExecStart`为服务的具体运行命令\n*   `ExecReload`为重启命令\n*   `ExecStop`为停止命令\n*   `PrivateTmp=True`表示给服务分配独立的临时空间\n\n注意：`[Service]`的启动、重启、停止命令全部要求使用绝对路径。\n\n`[Install]`运行级别下服务安装的相关设置，可设置为多用户，即系统运行级别为`3`。\n\n保存退出。\n\n设置开机启动，使配置生效：\n\n```shell\n# 启动nginx服务\nsystemctl start nginx.service\n# 停止开机自启动\nsystemctl disable nginx.service\n# 查看服务当前状态\nsystemctl status nginx.service\n# 查看所有已启动的服务\nsystemctl list-units --type=service\n# 重新启动服务\nsystemctl restart nginx.service\n# 设置开机自启动\nsystemctl enable nginx.service\n# 输出下面内容表示成功了\nCreated symlink from /etc/systemd/system/multi-user.target.wants/nginx.service to /usr/lib/systemd/system/nginx.service.\n```\n\n```shell\nsystemctl is-enabled servicename.service # 查询服务是否开机启动\nsystemctl enable *.service # 开机运行服务\nsystemctl disable *.service # 取消开机运行\nsystemctl start *.service # 启动服务\nsystemctl stop *.service # 停止服务\nsystemctl restart *.service # 重启服务\nsystemctl reload *.service # 重新加载服务配置文件\nsystemctl status *.service # 查询服务运行状态\nsystemctl --failed # 显示启动失败的服务\n```\n\n注：*代表某个服务的名字，如http的服务名为httpd\n\n**开机自启动方法二：**\n\n```shell\nvi /etc/rc.local\n\n# 在 rc.local 文件中，添加下面这条命令\n/usr/local/nginx/sbin/nginx start\n```\n\n如果开机后发现自启动脚本没有执行，你要去确认一下rc.local这个文件的访问权限是否是可执行的，因为rc.local默认是不可执行的。修改rc.local访问权限，增加可执行权限：\n\n```shell\n# /etc/rc.local是/etc/rc.d/rc.local的软连接，\nchmod +x /etc/rc.d/rc.local\n```\n\n官方脚本 [ed Hat NGINX Init Script](https://www.nginx.com/resources/wiki/start/topics/examples/redhatnginxinit/)。\n\n[](https://github.com/jaywcjlove/nginx-tutorial#运维)运维\n-----------------------------------------------------\n\n### [](https://github.com/jaywcjlove/nginx-tutorial#服务管理)服务管理\n\n```shell\n# 启动\n/usr/local/nginx/sbin/nginx\n\n# 重启\n/usr/local/nginx/sbin/nginx -s reload\n\n# 关闭进程\n/usr/local/nginx/sbin/nginx -s stop\n\n# 平滑关闭nginx\n/usr/local/nginx/sbin/nginx -s quit\n\n# 查看nginx的安装状态，\n/usr/local/nginx/sbin/nginx -V \n```\n\n**关闭防火墙，或者添加防火墙规则就可以测试了**\n\n```shell\nservice iptables stop\n```\n\n或者编辑配置文件：\n\n```shell\nvi /etc/sysconfig/iptables\n```\n\n添加这样一条开放80端口的规则后保存：\n\n```shell\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT\n```\n\n重启服务即可:\n\n```shell\nservice iptables restart\n# 命令进行查看目前nat\niptables -t nat -L\n```\n\n### [](https://github.com/jaywcjlove/nginx-tutorial#重启服务防火墙报错解决)重启服务防火墙报错解决\n\n```shell\nservice iptables restart\n# Redirecting to /bin/systemctl restart  iptables.service\n# Failed to restart iptables.service: Unit iptables.service failed to load: No such file or directory.\n```\n\n在CentOS 7或RHEL 7或Fedora中防火墙由 **firewalld** 来管理，当然你可以还原传统的管理方式。或则使用新的命令进行管理。 假如采用传统请执行一下命令：\n\n```shell\n# 传统命令\nsystemctl stop firewalld\nsystemctl mask firewalld\n```\n\n```shell\n# 安装命令\nyum install iptables-services\n\nsystemctl enable iptables \nservice iptables restart\n```\n\n[](https://github.com/jaywcjlove/nginx-tutorial#nginx卸载)nginx卸载\n---------------------------------------------------------------\n\n如果通过yum安装，使用下面命令安装。\n\n```shell\nyum remove nginx\n```\n\n编译安装，删除/usr/local/nginx目录即可 如果配置了自启动脚本，也需要删除。\n\n[](https://github.com/jaywcjlove/nginx-tutorial#参数说明)参数说明\n---------------------------------------------------------\n\n| 参数 | 说明 |\n| --- | --- |\n| --prefix= | Nginx安装路径。如果没有指定，默认为 /usr/local/nginx。 |\n| --sbin-path= | Nginx可执行文件安装路径。只能安装时指定，如果没有指定，默认为/sbin/nginx。 |\n| --conf-path= | 在没有给定-c选项下默认的nginx.conf的路径。如果没有指定，默认为/conf/nginx.conf。 |\n| --pid-path= | 在nginx.conf中没有指定pid指令的情况下，默认的nginx.pid的路径。如果没有指定，默认为 /logs/nginx.pid。 |\n| --lock-path= | nginx.lock文件的路径。 |\n| --error-log-path= | 在nginx.conf中没有指定error_log指令的情况下，默认的错误日志的路径。如果没有指定，默认为 /\\- logs/error.log。 |\n| --http-log-path= | 在nginx.conf中没有指定access_log指令的情况下，默认的访问日志的路径。如果没有指定，默认为 /\\- logs/access.log。 |\n| --user= | 在nginx.conf中没有指定user指令的情况下，默认的nginx使用的用户。如果没有指定，默认为 nobody。 |\n| --group= | 在nginx.conf中没有指定user指令的情况下，默认的nginx使用的组。如果没有指定，默认为 nobody。 |\n| --builddir=DIR | 指定编译的目录 |\n| --with-rtsig_module | 启用 rtsig 模块 |\n| --with-select\\_module --without-select\\_module | 允许或不允许开启SELECT模式，如果 configure 没有找到更合适的模式，比如：kqueue(sun os),epoll (linux kenel 2.6+), rtsig(- 实时信号)或者/dev/poll(一种类似select的模式，底层实现与SELECT基本相 同，都是采用轮训方法) SELECT模式将是默认安装模式 |\n| --with-poll\\_module --without-poll\\_module | Whether or not to enable the poll module. This module is enabled by, default if a more suitable method such as kqueue, epoll, rtsig or /dev/poll is not discovered by configure. |\n| --with-http\\_ssl\\_module | Enable ngx\\_http\\_ssl_module. Enables SSL support and the ability to handle HTTPS requests. Requires OpenSSL. On Debian, this is libssl-dev. 开启HTTP SSL模块，使NGINX可以支持HTTPS请求。这个模块需要已经安装了OPENSSL，在DEBIAN上是libssl |\n| --with-http\\_realip\\_module | 启用 ngx\\_http\\_realip_module |\n| --with-http\\_addition\\_module | 启用 ngx\\_http\\_addition_module |\n| --with-http\\_sub\\_module | 启用 ngx\\_http\\_sub_module |\n| --with-http\\_dav\\_module | 启用 ngx\\_http\\_dav_module |\n| --with-http\\_flv\\_module | 启用 ngx\\_http\\_flv_module |\n| --with-http\\_stub\\_status_module | 启用 \"server status\" 页 |\n| --without-http\\_charset\\_module | 禁用 ngx\\_http\\_charset_module |\n| --without-http\\_gzip\\_module | 禁用 ngx\\_http\\_gzip_module. 如果启用，需要 zlib 。 |\n| --without-http\\_ssi\\_module | 禁用 ngx\\_http\\_ssi_module |\n| --without-http\\_userid\\_module | 禁用 ngx\\_http\\_userid_module |\n| --without-http\\_access\\_module | 禁用 ngx\\_http\\_access_module |\n| --without-http\\_auth\\_basic_module | 禁用 ngx\\_http\\_auth\\_basic\\_module |\n| --without-http\\_autoindex\\_module | 禁用 ngx\\_http\\_autoindex_module |\n| --without-http\\_geo\\_module | 禁用 ngx\\_http\\_geo_module |\n| --without-http\\_map\\_module | 禁用 ngx\\_http\\_map_module |\n| --without-http\\_referer\\_module | 禁用 ngx\\_http\\_referer_module |\n| --without-http\\_rewrite\\_module | 禁用 ngx\\_http\\_rewrite_module. 如果启用需要 PCRE 。 |\n| --without-http\\_proxy\\_module | 禁用 ngx\\_http\\_proxy_module |\n| --without-http\\_fastcgi\\_module | 禁用 ngx\\_http\\_fastcgi_module |\n| --without-http\\_memcached\\_module | 禁用 ngx\\_http\\_memcached_module |\n| --without-http\\_limit\\_zone_module | 禁用 ngx\\_http\\_limit\\_zone\\_module |\n| --without-http\\_empty\\_gif_module | 禁用 ngx\\_http\\_empty\\_gif\\_module |\n| --without-http\\_browser\\_module | 禁用 ngx\\_http\\_browser_module |\n| --without-http\\_upstream\\_ip\\_hash\\_module | 禁用 ngx\\_http\\_upstream\\_ip\\_hash_module |\n| --with-http\\_perl\\_module | 启用 ngx\\_http\\_perl_module |\n| --with-perl\\_modules\\_path=PATH | 指定 perl 模块的路径 |\n| --with-perl=PATH | 指定 perl 执行文件的路径 |\n| --http-log-path=PATH | Set path to the http access log |\n| --http-client-body-temp-path=PATH | Set path to the http client request body temporary files |\n| --http-proxy-temp-path=PATH | Set path to the http proxy temporary files |\n| --http-fastcgi-temp-path=PATH | Set path to the http fastcgi temporary files |\n| --without-http | 禁用 HTTP server |\n| --with-mail | 启用 IMAP4/POP3/SMTP 代理模块 |\n| --with-mail\\_ssl\\_module | 启用 ngx\\_mail\\_ssl_module |\n| --with-cc=PATH | 指定 C 编译器的路径 |\n| --with-cpp=PATH | 指定 C 预处理器的路径 |\n| --with-cc-opt=OPTIONS | Additional parameters which will be added to the variable CFLAGS. With the use of the system library PCRE in FreeBSD, it is necessary to indicate --with-cc-opt=\"-I /usr/local/include\". If we are using select() and it is necessary to increase the number of file descriptors, then this also can be assigned here: --with-cc-opt=\"-D FD_SETSIZE=2048\". |\n| --with-ld-opt=OPTIONS | Additional parameters passed to the linker. With the use of the system library PCRE in - FreeBSD, it is necessary to indicate --with-ld-opt=\"-L /usr/local/lib\". |\n| --with-cpu-opt=CPU | 为特定的 CPU 编译，有效的值包括：pentium, pentiumpro, pentium3, pentium4, athlon, opteron, amd64, sparc32, sparc64, ppc64 |\n| --without-pcre | 禁止 PCRE 库的使用。同时也会禁止 HTTP rewrite 模块。在 \"location\" 配置指令中的正则表达式也需要 PCRE 。 |\n| --with-pcre=DIR | 指定 PCRE 库的源代码的路径。 |\n| --with-pcre-opt=OPTIONS | Set additional options for PCRE building. |\n| --with-md5=DIR | Set path to md5 library sources. |\n| --with-md5-opt=OPTIONS | Set additional options for md5 building. |\n| --with-md5-asm | Use md5 assembler sources. |\n| --with-sha1=DIR | Set path to sha1 library sources. |\n| --with-sha1-opt=OPTIONS | Set additional options for sha1 building. |\n| --with-sha1-asm | Use sha1 assembler sources. |\n| --with-zlib=DIR | Set path to zlib library sources. |\n| --with-zlib-opt=OPTIONS | Set additional options for zlib building. |\n| --with-zlib-asm=CPU | Use zlib assembler sources optimized for specified CPU, valid values are: pentium, pentiumpro |\n| --with-openssl=DIR | Set path to OpenSSL library sources |\n| --with-openssl-opt=OPTIONS | Set additional options for OpenSSL building |\n| --with-debug | 启用调试日志 |\n| --add-module=PATH | Add in a third-party module found in directory PATH |\n\n[](https://github.com/jaywcjlove/nginx-tutorial#配置)配置\n-----------------------------------------------------\n\n在Centos 默认配置文件在 **/usr/local/nginx-1.5.1/conf/nginx.conf** 我们要在这里配置一些文件。nginx.conf是主配置文件，由若干个部分组成，每个大括号`{}`表示一个部分。每一行指令都由分号结束`;`，标志着一行的结束。\n\n### [](https://github.com/jaywcjlove/nginx-tutorial#常用正则)常用正则\n\n| 正则 | 说明 | 正则 | 说明 |\n| --- | --- | --- | --- |\n| `.` | 匹配除换行符以外的任意字符 | `$` | 匹配字符串的结束 |\n| `?` | 重复0次或1次 | `{n}` | 重复n次 |\n| `+` | 重复1次或更多次 | `{n,}` | 重复n次或更多次 |\n| `*` | 重复0次或更多次 | `[c]` | 匹配单个字符c |\n| `\\d` | 匹配数字 | `[a-z]` | 匹配a-z小写字母的任意一个 |\n| `^` | 匹配字符串的开始 | - | - |\n\n### [](https://github.com/jaywcjlove/nginx-tutorial#全局变量)全局变量\n\n| 变量 | 说明 | 变量 | 说明 |\n| --- | --- | --- | --- |\n| $args | 这个变量等于请求行中的参数，同$query_string | $remote_port | 客户端的端口。 |\n| $content_length | 请求头中的Content-length字段。 | $remote_user | 已经经过Auth Basic Module验证的用户名。 |\n| $content_type | 请求头中的Content-Type字段。 | $request_filename | 当前请求的文件路径，由root或alias指令与URI请求生成。 |\n| $document_root | 当前请求在root指令中指定的值。 | $scheme | HTTP方法（如http，https）。 |\n| $host | 请求主机头字段，否则为服务器名称。 | $server_protocol | 请求使用的协议，通常是HTTP/1.0或HTTP/1.1。 |\n| $http\\_user\\_agent | 客户端agent信息 | $server_addr | 服务器地址，在完成一次系统调用后可以确定这个值。 |\n| $http_cookie | 客户端cookie信息 | $server_name | 服务器名称。 |\n| $limit_rate | 这个变量可以限制连接速率。 | $server_port | 请求到达服务器的端口号。 |\n| $request_method | 客户端请求的动作，通常为GET或POST。 | $request_uri | 包含请求参数的原始URI，不包含主机名，如：/foo/bar.php?arg=baz。 |\n| $remote_addr | 客户端的IP地址。 | $uri | 不带请求参数的当前URI，$uri不包含主机名，如/foo/bar.html。 |\n| $document_uri | 与$uri相同。 | - | - |\n\n例如请求：`http://localhost:3000/test1/test2/test.php`\n\n$host：localhost  \n$server_port：3000  \n$request_uri：/test1/test2/test.php  \n$document_uri：/test1/test2/test.php  \n$document_root：/var/www/html  \n$request_filename：/var/www/html/test1/test2/test.php\n\n### [](https://github.com/jaywcjlove/nginx-tutorial#符号参考)符号参考\n\n| 符号 | 说明 | 符号 | 说明 | 符号 | 说明 |\n| --- | --- | --- | --- | --- | --- |\n| k,K | 千字节 | m,M | 兆字节 | ms | 毫秒 |\n| s | 秒 | m | 分钟 | h | 小时 |\n| d | 日 | w | 周 | M | 一个月, 30天 |\n\n例如，\"8k\"，\"1m\" 代表字节数计量。  \n例如，\"1h 30m\"，\"1y 6M\"。代表 \"1小时 30分\"，\"1年零6个月\"。\n\n### [](https://github.com/jaywcjlove/nginx-tutorial#配置文件)配置文件\n\nnginx 的配置系统由一个主配置文件和其他一些辅助的配置文件构成。这些配置文件均是纯文本文件，全部位于 nginx 安装目录下的 conf 目录下。\n\n指令由 nginx 的各个模块提供，不同的模块会提供不同的指令来实现配置。 指令除了 Key-Value 的形式，还有作用域指令。\n\nnginx.conf 中的配置信息，根据其逻辑上的意义，对它们进行了分类，也就是分成了多个作用域，或者称之为配置指令上下文。不同的作用域含有一个或者多个配置项。\n\n下面的这些上下文指令是用的比较多：\n\n| Directive | Description | Contains Directive |\n| --- | --- | --- |\n| main | nginx 在运行时与具体业务功能（比如 http 服务或者 email 服务代理）无关的一些参数，比如工作进程数，运行的身份等。 | user, worker\\_processes, error\\_log, events, http, mail |\n| http | 与提供 http 服务相关的一些配置参数。例如：是否使用 keepalive 啊，是否使用 gzip 进行压缩等。 | server |\n| server | http 服务上支持若干虚拟主机。每个虚拟主机一个对应的 server 配置项，配置项里面包含该虚拟主机相关的配置。在提供 mail 服务的代理时，也可以建立若干 server. 每个 server 通过监听的地址来区分。 | listen, server\\_name, access\\_log, location, protocol, proxy, smtp_auth, xclient |\n| location | http 服务中，某些特定的 URL 对应的一系列配置项。 | index, root |\n| mail | 实现 email 相关的 SMTP/IMAP/POP3 代理时，共享的一些配置项（因为可能实现多个代理，工作在多个监听地址上）。 | server, http, imap_capabilities |\n| include | 以便增强配置文件的可读性，使得部分配置文件可以重新使用。 | - |\n| valid_referers | 用来校验Http请求头Referer是否有效。 | - |\n| try_files | 用在server部分，不过最常见的还是用在location部分，它会按照给定的参数顺序进行尝试，第一个被匹配到的将会被使用。 | - |\n| if | 当在location块中使用if指令，在某些情况下它并不按照预期运行，一般来说避免使用if指令。 | - |\n\n例如我们再 **nginx.conf** 里面引用两个配置 vhost/example.com.conf 和 vhost/gitlab.com.conf 它们都被放在一个我自己新建的目录 vhost 下面。nginx.conf 配置如下：\n\n```nginx\nworker_processes  1;\nevents {\n    worker_connections  1024;\n}\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    #log_format  main  \'$remote_addr - $remote_user [$time_local] \"$request\" \'\n    #                  \'$status $body_bytes_sent \"$http_referer\" \'\n    #                  \'\"$http_user_agent\" \"$http_x_forwarded_for\"\';\n\n    #access_log  logs/access.log  main;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n\n    #gzip  on;\n    server {\n        listen       80;\n        server_name  localhost;\n        location / {\n            root   html;\n            index  index.html index.htm;\n        }\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n    }\n    include  vhost/example.com.conf;\n    include  vhost/gitlab.com.conf;\n}\n```\n\n简单的配置: example.com.conf\n\n```nginx\nserver {\n    #侦听的80端口\n    listen       80;\n    server_name  baidu.com app.baidu.com; # 这里指定域名\n    index        index.html index.htm;    # 这里指定默认入口页面\n    root /home/www/app.baidu.com;         # 这里指定目录\n}\n```\n\n### [](https://github.com/jaywcjlove/nginx-tutorial#内置预定义变量)内置预定义变量\n\nNginx提供了许多预定义的变量，也可以通过使用set来设置变量。你可以在if中使用预定义变量，也可以将它们传递给代理服务器。以下是一些常见的预定义变量，[更多详见](http://nginx.org/en/docs/varindex.html)\n\n| 变量名称 | 值 |\n| --- | --- |\n| $args_name | 在请求中的name参数 |\n| $args | 所有请求参数 |\n| $query_string | $args的别名 |\n| $content_length | 请求头Content-Length的值 |\n| $content_type | 请求头Content-Type的值 |\n| $host | 如果当前有Host，则为请求头Host的值；如果没有这个头，那么该值等于匹配该请求的server_name的值 |\n| $remote_addr | 客户端的IP地址 |\n| $request | 完整的请求，从客户端收到，包括Http请求方法、URI、Http协议、头、请求体 |\n| $request_uri | 完整请求的URI，从客户端来的请求，包括参数 |\n| $scheme | 当前请求的协议 |\n| $uri | 当前请求的标准化URI |\n\n### [](https://github.com/jaywcjlove/nginx-tutorial#反向代理)反向代理\n\n反向代理是一个Web服务器，它接受客户端的连接请求，然后将请求转发给上游服务器，并将从服务器得到的结果返回给连接的客户端。下面简单的反向代理的例子：\n\n```nginx\nserver {  \n  listen       80;                                                        \n  server_name  localhost;                                              \n  client_max_body_size 1024M;  # 允许客户端请求的最大单文件字节数\n\n  location / {\n    proxy_pass                         http://localhost:8080;\n    proxy_set_header Host              $host:$server_port;\n    proxy_set_header X-Forwarded-For   $remote_addr; # HTTP的请求端真实的IP\n    proxy_set_header X-Forwarded-Proto $scheme;      # 为了正确地识别实际用户发出的协议是 http 还是 https\n  }\n}\n```\n\n复杂的配置: gitlab.com.conf。\n\n```nginx\nserver {\n    #侦听的80端口\n    listen       80;\n    server_name  git.example.cn;\n    location / {\n        proxy_pass   http://localhost:3000;\n        #以下是一些反向代理的配置可删除\n        proxy_redirect             off;\n        #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP\n        proxy_set_header           Host $host;\n        client_max_body_size       10m; #允许客户端请求的最大单文件字节数\n        client_body_buffer_size    128k; #缓冲区代理缓冲用户端请求的最大字节数\n        proxy_connect_timeout      300; #nginx跟后端服务器连接超时时间(代理连接超时)\n        proxy_send_timeout         300; #后端服务器数据回传时间(代理发送超时)\n        proxy_read_timeout         300; #连接成功后，后端服务器响应时间(代理接收超时)\n        proxy_buffer_size          4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小\n        proxy_buffers              4 32k; #proxy_buffers缓冲区，网页平均在32k以下的话，这样设置\n        proxy_busy_buffers_size    64k; #高负荷下缓冲大小（proxy_buffers*2）\n    }\n}\n```\n\n代理到上游服务器的配置中，最重要的是proxy_pass指令。以下是代理模块中的一些常用指令：\n\n| 指令 | 说明 |\n| --- | --- |\n| proxy\\_connect\\_timeout | Nginx从接受请求至连接到上游服务器的最长等待时间 |\n| proxy\\_send\\_timeout | 后端服务器数据回传时间(代理发送超时) |\n| proxy\\_read\\_timeout | 连接成功后，后端服务器响应时间(代理接收超时) |\n| proxy\\_cookie\\_domain | 替代从上游服务器来的Set-Cookie头的domain属性 |\n| proxy\\_cookie\\_path | 替代从上游服务器来的Set-Cookie头的path属性 |\n| proxy\\_buffer\\_size | 设置代理服务器（nginx）保存用户头信息的缓冲区大小 |\n| proxy_buffers | proxy_buffers缓冲区，网页平均在多少k以下 |\n| proxy\\_set\\_header | 重写发送到上游服务器头的内容，也可以通过将某个头部的值设置为空字符串，而不发送某个头部的方法实现 |\n| proxy\\_ignore\\_headers | 这个指令禁止处理来自代理服务器的应答。 |\n| proxy\\_intercept\\_errors | 使nginx阻止HTTP应答代码为400或者更高的应答。 |\n\n### [](https://github.com/jaywcjlove/nginx-tutorial#负载均衡)负载均衡\n\nupstream指令启用一个新的配置区段，在该区段定义一组上游服务器。这些服务器可能被设置不同的权重，也可能出于对服务器进行维护，标记为down。\n\n```nginx\nupstream gitlab {\n    ip_hash;\n    # upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。\n    server 192.168.122.11:8081 ;\n    server 127.0.0.1:82 weight=3;\n    server 127.0.0.1:83 weight=3 down;\n    server 127.0.0.1:84 weight=3; max_fails=3  fail_timeout=20s;\n    server 127.0.0.1:85 weight=4;;\n    keepalive 32;\n}\nserver {\n    #侦听的80端口\n    listen       80;\n    server_name  git.example.cn;\n    location / {\n        proxy_pass   http://gitlab;    #在这里设置一个代理，和upstream的名字一样\n        #以下是一些反向代理的配置可删除\n        proxy_redirect             off;\n        #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP\n        proxy_set_header           Host $host;\n        proxy_set_header           X-Real-IP $remote_addr;\n        proxy_set_header           X-Forwarded-For $proxy_add_x_forwarded_for;\n        client_max_body_size       10m;  #允许客户端请求的最大单文件字节数\n        client_body_buffer_size    128k; #缓冲区代理缓冲用户端请求的最大字节数\n        proxy_connect_timeout      300;  #nginx跟后端服务器连接超时时间(代理连接超时)\n        proxy_send_timeout         300;  #后端服务器数据回传时间(代理发送超时)\n        proxy_read_timeout         300;  #连接成功后，后端服务器响应时间(代理接收超时)\n        proxy_buffer_size          4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小\n        proxy_buffers              4 32k;# 缓冲区，网页平均在32k以下的话，这样设置\n        proxy_busy_buffers_size    64k; #高负荷下缓冲大小（proxy_buffers*2）\n        proxy_temp_file_write_size 64k; #设定缓存文件夹大小，大于这个值，将从upstream服务器传\n    }\n}\n```\n\n每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。\n\n**负载均衡：**\n\nupstream模块能够使用3种负载均衡算法：轮询、IP哈希、最少连接数。\n\n**轮询：** 默认情况下使用轮询算法，不需要配置指令来激活它，它是基于在队列中谁是下一个的原理确保访问均匀地分布到每个上游服务器；  \n**IP哈希：** 通过ip_hash指令来激活，Nginx通过IPv4地址的前3个字节或者整个IPv6地址作为哈希键来实现，同一个IP地址总是能被映射到同一个上游服务器；  \n**最少连接数：** 通过least_conn指令来激活，该算法通过选择一个活跃数最少的上游服务器进行连接。如果上游服务器处理能力不同，可以通过给server配置weight权重来说明，该算法将考虑到不同服务器的加权最少连接数。\n\n#### [](https://github.com/jaywcjlove/nginx-tutorial#rr)RR\n\n**简单配置** ，这里我配置了2台服务器，当然实际上是一台，只是端口不一样而已，而8081的服务器是不存在的，也就是说访问不到，但是我们访问 `http://localhost` 的时候，也不会有问题，会默认跳转到`http://localhost:8080`具体是因为Nginx会自动判断服务器的状态，如果服务器处于不能访问（服务器挂了），就不会跳转到这台服务器，所以也避免了一台服务器挂了影响使用的情况，由于Nginx默认是RR策略，所以我们不需要其他更多的设置\n\n```nginx\nupstream test {\n    server localhost:8080;\n    server localhost:8081;\n}\nserver {\n    listen       81;\n    server_name  localhost;\n    client_max_body_size 1024M;\n \n    location / {\n        proxy_pass http://test;\n        proxy_set_header Host $host:$server_port;\n    }\n}\n```\n\n**负载均衡的核心代码为**\n\n```nginx\nupstream test {\n    server localhost:8080;\n    server localhost:8081;\n}\n```\n\n#### [](https://github.com/jaywcjlove/nginx-tutorial#权重)权重\n\n指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。 例如\n\n```nginx\nupstream test {\n    server localhost:8080 weight=9;\n    server localhost:8081 weight=1;\n}\n```\n\n那么10次一般只会有1次会访问到8081，而有9次会访问到8080\n\n#### [](https://github.com/jaywcjlove/nginx-tutorial#ip_hash)ip_hash\n\n上面的2种方式都有一个问题，那就是下一个请求来的时候请求可能分发到另外一个服务器，当我们的程序不是无状态的时候（采用了session保存数据），这时候就有一个很大的很问题了，比如把登录信息保存到了session中，那么跳转到另外一台服务器的时候就需要重新登录了，所以很多时候我们需要一个客户只访问一个服务器，那么就需要用iphash了，iphash的每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。\n\n```nginx\nupstream test {\n    ip_hash;\n    server localhost:8080;\n    server localhost:8081;\n}\n```\n\n#### [](https://github.com/jaywcjlove/nginx-tutorial#fair)fair\n\n这是个第三方模块，按后端服务器的响应时间来分配请求，响应时间短的优先分配。\n\n```nginx\nupstream backend {\n    fair;\n    server localhost:8080;\n    server localhost:8081;\n}\n```\n\n#### [](https://github.com/jaywcjlove/nginx-tutorial#url_hash)url_hash\n\n这是个第三方模块，按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。 在upstream中加入hash语句，server语句中不能写入weight等其他的参数，hash_method是使用的hash算法\n\n```nginx\nupstream backend {\n    hash $request_uri;\n    hash_method crc32;\n    server localhost:8080;\n    server localhost:8081;\n}\n```\n\n以上5种负载均衡各自适用不同情况下使用，所以可以根据实际情况选择使用哪种策略模式，不过fair和url_hash需要安装第三方模块才能使用\n\n**server指令可选参数：**\n\n1.  weight：设置一个服务器的访问权重，数值越高，收到的请求也越多；\n2.  fail_timeout：在这个指定的时间内服务器必须提供响应，如果在这个时间内没有收到响应，那么服务器将会被标记为down状态；\n3.  max\\_fails：设置在fail\\_timeout时间之内尝试对一个服务器连接的最大次数，如果超过这个次数，那么服务器将会被标记为down;\n4.  down：标记一个服务器不再接受任何请求；\n5.  backup：一旦其他服务器宕机，那么有该标记的机器将会接收请求。\n\n**keepalive指令：**\n\nNginx服务器将会为每一个worker进行保持同上游服务器的连接。\n\n### [](https://github.com/jaywcjlove/nginx-tutorial#屏蔽ip)屏蔽ip\n\n在nginx的配置文件`nginx.conf`中加入如下配置，可以放到http, server, location, limit_except语句块，需要注意相对路径，本例当中`nginx.conf`，`blocksip.conf`在同一个目录中。\n\n```nginx\ninclude blockip.conf;\n```\n\n在blockip.conf里面输入内容，如：\n\n```nginx\ndeny 165.91.122.67;\n\ndeny IP;   # 屏蔽单个ip访问\nallow IP;  # 允许单个ip访问\ndeny all;  # 屏蔽所有ip访问\nallow all; # 允许所有ip访问\ndeny 123.0.0.0/8   # 屏蔽整个段即从123.0.0.1到123.255.255.254访问的命令\ndeny 124.45.0.0/16 # 屏蔽IP段即从123.45.0.1到123.45.255.254访问的命令\ndeny 123.45.6.0/24 # 屏蔽IP段即从123.45.6.1到123.45.6.254访问的命令\n\n# 如果你想实现这样的应用，除了几个IP外，其他全部拒绝\nallow 1.1.1.1; \nallow 1.1.1.2;\ndeny all; \n```\n\n[](https://github.com/jaywcjlove/nginx-tutorial#第三方模块安装方法)第三方模块安装方法\n-------------------------------------------------------------------\n\n    ./configure --prefix=/你的安装目录  --add-module=/第三方模块目录\n    \n\n[](https://github.com/jaywcjlove/nginx-tutorial#重定向)重定向\n-------------------------------------------------------\n\n*   `permanent` 永久性重定向。请求日志中的状态码为301\n*   `redirect` 临时重定向。请求日志中的状态码为302\n\n### [](https://github.com/jaywcjlove/nginx-tutorial#重定向整个网站)重定向整个网站\n\n```nginx\nserver {\n    server_name old-site.com\n    return 301 $scheme://new-site.com$request_uri;\n}\n```\n\n### [](https://github.com/jaywcjlove/nginx-tutorial#重定向单页)重定向单页\n\n```nginx\nserver {\n    location = /oldpage.html {\n        return 301 http://example.org/newpage.html;\n    }\n}\n```\n\n### [](https://github.com/jaywcjlove/nginx-tutorial#重定向整个子路径)重定向整个子路径\n\n```nginx\nlocation /old-site {\n    rewrite ^/old-site/(.*) http://example.org/new-site/$1 permanent;\n}\n```\n\n[](https://github.com/jaywcjlove/nginx-tutorial#性能)性能\n-----------------------------------------------------\n\n### [](https://github.com/jaywcjlove/nginx-tutorial#内容缓存)内容缓存\n\n允许浏览器基本上永久地缓存静态内容。 Nginx将为您设置Expires和Cache-Control头信息。\n\n```nginx\nlocation /static {\n    root /data;\n    expires max;\n}\n```\n\n如果要求浏览器永远不会缓存响应（例如用于跟踪请求），请使用-1。\n\n```nginx\nlocation = /empty.gif {\n    empty_gif;\n    expires -1;\n}\n```\n\n### [](https://github.com/jaywcjlove/nginx-tutorial#gzip压缩)Gzip压缩\n\n```nginx\ngzip  on;\ngzip_buffers 16 8k;\ngzip_comp_level 6;\ngzip_http_version 1.1;\ngzip_min_length 256;\ngzip_proxied any;\ngzip_vary on;\ngzip_types\n    text/xml application/xml application/atom+xml application/rss+xml application/xhtml+xml image/svg+xml\n    text/javascript application/javascript application/x-javascript\n    text/x-json application/json application/x-web-app-manifest+json\n    text/css text/plain text/x-component\n    font/opentype application/x-font-ttf application/vnd.ms-fontobject\n    image/x-icon;\ngzip_disable  \"msie6\";\n```\n\n### [](https://github.com/jaywcjlove/nginx-tutorial#打开文件缓存)打开文件缓存\n\n```nginx\nopen_file_cache max=1000 inactive=20s;\nopen_file_cache_valid 30s;\nopen_file_cache_min_uses 2;\nopen_file_cache_errors on;\n```\n\n### [](https://github.com/jaywcjlove/nginx-tutorial#ssl缓存)SSL缓存\n\n```nginx\nssl_session_cache shared:SSL:10m;\nssl_session_timeout 10m;\n```\n\n### [](https://github.com/jaywcjlove/nginx-tutorial#上游keepalive)上游Keepalive\n\n```nginx\nupstream backend {\n    server 127.0.0.1:8080;\n    keepalive 32;\n}\nserver {\n    ...\n    location /api/ {\n        proxy_pass http://backend;\n        proxy_http_version 1.1;\n        proxy_set_header Connection \"\";\n    }\n}\n```\n\n### [](https://github.com/jaywcjlove/nginx-tutorial#监控)监控\n\n使用`ngxtop`实时解析nginx访问日志，并且将处理结果输出到终端，功能类似于系统命令top。所有示例都读取nginx配置文件的访问日志位置和格式。如果要指定访问日志文件和/或日志格式，请使用-f和-a选项。\n\n注意：在nginx配置中`/usr/local/nginx/conf/nginx.conf`日志文件必须是绝对路径。\n\n```shell\n# 安装 ngxtop\npip install ngxtop\n\n# 实时状态\nngxtop\n# 状态为404的前10个请求的路径：\nngxtop top request_path --filter \'status == 404\'\n\n# 发送总字节数最多的前10个请求\nngxtop --order-by \'avg(bytes_sent) * count\'\n\n# 排名前十位的IP，例如，谁攻击你最多\nngxtop --group-by remote_addr\n\n# 打印具有4xx或5xx状态的请求，以及status和http referer\nngxtop -i \'status >= 400\' print request status http_referer\n\n# 由200个请求路径响应发送的平均正文字节以\'foo\'开始：\nngxtop avg bytes_sent --filter \'status == 200 and request_path.startswith(\"foo\")\'\n\n# 使用“common”日志格式从远程机器分析apache访问日志\nssh remote tail -f /var/log/apache2/access.log | ngxtop -f common\n```\n\n[](https://github.com/jaywcjlove/nginx-tutorial#常见使用场景)常见使用场景\n-------------------------------------------------------------\n\n### [](https://github.com/jaywcjlove/nginx-tutorial#跨域问题)跨域问题\n\n在工作中，有时候会遇到一些接口不支持跨域，这时候可以简单的添加add_headers来支持cors跨域。配置如下：\n\n```nginx\nserver {\n  listen 80;\n  server_name api.xxx.com;\n    \n  add_header \'Access-Control-Allow-Origin\' \'*\';\n  add_header \'Access-Control-Allow-Credentials\' \'true\';\n  add_header \'Access-Control-Allow-Methods\' \'GET,POST,HEAD\';\n\n  location / {\n    proxy_pass http://127.0.0.1:3000;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header Host  $http_host;    \n  } \n}\n```\n\n上面更改头信息，还有一种，使用 [rewrite](http://nginx.org/en/docs/http/ngx_http_rewrite_module.html) 指令重定向URI来解决跨域问题。\n\n```nginx\nupstream test {\n  server 127.0.0.1:8080;\n  server localhost:8081;\n}\nserver {\n  listen 80;\n  server_name api.xxx.com;\n  location / { \n    root  html;                   #去请求../html文件夹里的文件\n    index  index.html index.htm;  #首页响应地址\n  }\n  # 用于拦截请求，匹配任何以 /api/开头的地址，\n  # 匹配符合以后，停止往下搜索正则。\n  location ^~/api/{ \n    # 代表重写拦截进来的请求，并且只能对域名后边的除去传递的参数外的字符串起作用，\n    # 例如www.a.com/proxy/api/msg?meth=1&par=2重写，只对/proxy/api/msg重写。\n    # rewrite后面的参数是一个简单的正则 ^/api/(.*)$，\n    # $1代表正则中的第一个()，$2代表第二个()的值，以此类推。\n    rewrite ^/api/(.*)$ /$1 break;\n    \n    # 把请求代理到其他主机 \n    # 其中 http://www.b.com/ 写法和 http://www.b.com写法的区别如下\n    # 如果你的请求地址是他 http://server/html/test.jsp\n    # 配置一： http://www.b.com/ 后面有“/” \n    #         将反向代理成 http://www.b.com/html/test.jsp 访问\n    # 配置一： http://www.b.com 后面没有有“/” \n    #         将反向代理成 http://www.b.com/test.jsp 访问\n    proxy_pass http://test;\n\n    # 如果 proxy_pass  URL 是 http://a.xx.com/platform/ 这种情况\n    # proxy_cookie_path应该设置成 /platform/ / (注意两个斜杠之间有空格)。\n    proxy_cookie_path /platfrom/ /;\n\n    # http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_pass_header\n    # 设置 Cookie 头通过\n    proxy_pass_header Set-Cookie;\n  } \n}\n```\n\n### [](https://github.com/jaywcjlove/nginx-tutorial#跳转到带www的域上面)跳转到带www的域上面\n\n```nginx\nserver {\n    listen 80;\n    # 配置正常的带www的域名\n    server_name www.wangchujiang.com;\n    root /home/www/wabg/download;\n    location / {\n        try_files $uri $uri/ /index.html =404;\n    }\n}\nserver {\n    # 这个要放到下面，\n    # 将不带www的 wangchujiang.com 永久性重定向到  https://www.wangchujiang.com\n    server_name wangchujiang.com;\n    rewrite ^(.*) https://www.wangchujiang.com$1 permanent;\n}\n```\n\n### [](https://github.com/jaywcjlove/nginx-tutorial#代理转发)代理转发\n\n```nginx\nupstream server-api{\n    # api 代理服务地址\n    server 127.0.0.1:3110;    \n}\nupstream server-resource{\n    # 静态资源 代理服务地址\n    server 127.0.0.1:3120;\n}\nserver {\n    listen       3111;\n    server_name  localhost;      # 这里指定域名\n    root /home/www/server-statics;\n    # 匹配 api 路由的反向代理到API服务\n    location ^~/api/ {\n        rewrite ^/(.*)$ /$1 break;\n        proxy_pass http://server-api;\n    }\n    # 假设这里验证码也在API服务中\n    location ^~/captcha {\n        rewrite ^/(.*)$ /$1 break;\n        proxy_pass http://server-api;\n    }\n    # 假设你的图片资源全部在另外一个服务上面\n    location ^~/img/ {\n        rewrite ^/(.*)$ /$1 break;\n        proxy_pass http://server-resource;\n    }\n    # 路由在前端，后端没有真实路由，在路由不存在的 404状态的页面返回 /index.html\n    # 这个方式使用场景，你在写React或者Vue项目的时候，没有真实路由\n    location / {\n        try_files $uri $uri/ /index.html =404;\n        #                               ^ 空格很重要\n    }\n}\n```\n\n### [](https://github.com/jaywcjlove/nginx-tutorial#代理转发连接替换)代理转发连接替换\n\n```nginx\nlocation ^~/api/upload {\n    rewrite ^/(.*)$ /wfs/v1/upload break;\n    proxy_pass http://wfs-api;\n}\n```\n\n### [](https://github.com/jaywcjlove/nginx-tutorial#ssl配置)ssl配置\n\n超文本传输安全协议（缩写：HTTPS，英语：Hypertext Transfer Protocol Secure）是超文本传输协议和SSL/TLS的组合，用以提供加密通讯及对网络服务器身份的鉴定。HTTPS连接经常被用于万维网上的交易支付和企业信息系统中敏感信息的传输。HTTPS不应与在RFC 2660中定义的安全超文本传输协议（S-HTTP）相混。HTTPS 目前已经是所有注重隐私和安全的网站的首选，随着技术的不断发展，HTTPS 网站已不再是大型网站的专利，所有普通的个人站长和博客均可以自己动手搭建一个安全的加密的网站。\n\n创建SSL证书，如果你购买的证书，就可以直接下载\n\n```shell\nsudo mkdir /etc/nginx/ssl\n# 创建了有效期100年，加密强度为RSA2048的SSL密钥key和X509证书文件。\nsudo openssl req -x509 -nodes -days 36500 -newkey rsa:2048 -keyout /etc/nginx/ssl/nginx.key -out /etc/nginx/ssl/nginx.crt\n# 上面命令，会有下面需要填写内容\nCountry Name (2 letter code) [AU]:US\nState or Province Name (full name) [Some-State]:New York\nLocality Name (eg, city) []:New York City\nOrganization Name (eg, company) [Internet Widgits Pty Ltd]:Bouncy Castles, Inc.\nOrganizational Unit Name (eg, section) []:Ministry of Water Slides\nCommon Name (e.g. server FQDN or YOUR name) []:your_domain.com\nEmail Address []:admin@your_domain.com\n```\n\n创建自签证书\n\n```shell\n首先，创建证书和私钥的目录\n# mkdir -p /etc/nginx/cert\n# cd /etc/nginx/cert\n创建服务器私钥，命令会让你输入一个口令：\n# openssl genrsa -des3 -out nginx.key 2048\n创建签名请求的证书（CSR）：\n# openssl req -new -key nginx.key -out nginx.csr\n在加载SSL支持的Nginx并使用上述私钥时除去必须的口令：\n# cp nginx.key nginx.key.org\n# openssl rsa -in nginx.key.org -out nginx.key\n最后标记证书使用上述私钥和CSR：\n# openssl x509 -req -days 365 -in nginx.csr -signkey nginx.key -out nginx.crt\n```\n\n查看目前nginx编译选项\n\n    sbin/nginx -V\n    \n\n输出下面内容\n\n    nginx version: nginx/1.7.8\n    built by gcc 4.4.7 20120313 (Red Hat 4.4.7-4) (GCC)\n    TLS SNI support enabled\n    configure arguments: --prefix=/usr/local/nginx-1.7.8 --with-http_ssl_module --with-http_spdy_module --with-http_stub_status_module --with-pcre\n    \n\n如果依赖的模块不存在，可以进入安装目录，输入下面命令重新编译安装。\n\n```shell\n./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module\n```\n\n运行完成之后还需要`make` (不用make install)\n\n```shell\n# 备份nginx的二进制文件\ncp -rf /usr/local/nginx/sbin/nginx　 /usr/local/nginx/sbin/nginx.bak\n# 覆盖nginx的二进制文件\ncp -rf objs/nginx   /usr/local/nginx/sbin/\n```\n\nHTTPS server\n\n```nginx\nserver {\n    listen       443 ssl;\n    server_name  localhost;\n\n    ssl_certificate /etc/nginx/ssl/nginx.crt;\n    ssl_certificate_key /etc/nginx/ssl/nginx.key;\n    # 禁止在header中出现服务器版本，防止黑客利用版本漏洞攻击\n    server_tokens off;\n    # 设置ssl/tls会话缓存的类型和大小。如果设置了这个参数一般是shared，buildin可能会参数内存碎片，默认是none，和off差不多，停用缓存。如shared:SSL:10m表示我所有的nginx工作进程共享ssl会话缓存，官网介绍说1M可以存放约4000个sessions。 \n    ssl_session_cache    shared:SSL:1m; \n\n    # 客户端可以重用会话缓存中ssl参数的过期时间，内网系统默认5分钟太短了，可以设成30m即30分钟甚至4h。\n    ssl_session_timeout  5m; \n\n    # 选择加密套件，不同的浏览器所支持的套件（和顺序）可能会不同。\n    # 这里指定的是OpenSSL库能够识别的写法，你可以通过 openssl -v cipher \'RC4:HIGH:!aNULL:!MD5\'（后面是你所指定的套件加密算法） 来看所支持算法。\n    ssl_ciphers  HIGH:!aNULL:!MD5;\n\n    # 设置协商加密算法时，优先使用我们服务端的加密套件，而不是客户端浏览器的加密套件。\n    ssl_prefer_server_ciphers  on;\n\n    location / {\n        root   html;\n        index  index.html index.htm;\n    }\n}\n```\n\n### [](https://github.com/jaywcjlove/nginx-tutorial#强制将http重定向到https)强制将http重定向到https\n\n```nginx\nserver {\n    listen       80;\n    server_name  example.com;\n    rewrite ^ https://$http_host$request_uri? permanent;    # 强制将http重定向到https\n    # 在错误页面和“服务器”响应头字段中启用或禁用发射nginx版本。 防止黑客利用版本漏洞攻击\n    server_tokens off;\n}\n```\n\n### [](https://github.com/jaywcjlove/nginx-tutorial#两个虚拟主机)两个虚拟主机\n\n纯静态-html 支持\n\n```nginx\nhttp {\n    server {\n        listen          80;\n        server_name     www.domain1.com;\n        access_log      logs/domain1.access.log main;\n        location / {\n            index index.html;\n            root  /var/www/domain1.com/htdocs;\n        }\n    }\n    server {\n        listen          80;\n        server_name     www.domain2.com;\n        access_log      logs/domain2.access.log main;\n        location / {\n            index index.html;\n            root  /var/www/domain2.com/htdocs;\n        }\n    }\n}\n```\n\n### [](https://github.com/jaywcjlove/nginx-tutorial#虚拟主机标准配置)虚拟主机标准配置\n\n```nginx\nhttp {\n  server {\n    listen          80 default;\n    server_name     _ *;\n    access_log      logs/default.access.log main;\n    location / {\n       index index.html;\n       root  /var/www/default/htdocs;\n    }\n  }\n}\n```\n\n### [](https://github.com/jaywcjlove/nginx-tutorial#防盗链)防盗链\n\n```nginx\nlocation ~* \\.(gif|jpg|png|swf|flv)$ {\n   root html\n   valid_referers none blocked *.nginxcn.com;\n   if ($invalid_referer) {\n     rewrite ^/ www.nginx.cn\n     #return 404;\n   }\n}\n```\n\n### [](https://github.com/jaywcjlove/nginx-tutorial#虚拟目录配置)虚拟目录配置\n\nalias指定的目录是准确的，root是指定目录的上级目录，并且该上级目录要含有location指定名称的同名目录。\n\n```nginx\nlocation /img/ {\n    alias /var/www/image/;\n}\n# 访问/img/目录里面的文件时，ningx会自动去/var/www/image/目录找文件\nlocation /img/ {\n    root /var/www/image;\n}\n# 访问/img/目录下的文件时，nginx会去/var/www/image/img/目录下找文件。]\n```\n\n### [](https://github.com/jaywcjlove/nginx-tutorial#防盗图配置)防盗图配置\n\n```nginx\nlocation ~ \\/public\\/(css|js|img)\\/.*\\.(js|css|gif|jpg|jpeg|png|bmp|swf) {\n    valid_referers none blocked *.jslite.io;\n    if ($invalid_referer) {\n        rewrite ^/  http://wangchujiang.com/piratesp.png;\n    }\n}\n```\n\n### [](https://github.com/jaywcjlove/nginx-tutorial#屏蔽git等文件)屏蔽.git等文件\n\n```nginx\nlocation ~ (.git|.gitattributes|.gitignore|.svn) {\n    deny all;\n}\n```\n\n### [](https://github.com/jaywcjlove/nginx-tutorial#域名路径加不加需要都能正常访问)域名路径加不加需要都能正常访问\n\n```shell\nhttp://wangchujiang.com/api/index.php?a=1&name=wcj\n                                  ^ 有后缀\n\nhttp://wangchujiang.com/api/index?a=1&name=wcj\n                                 ^ 没有后缀\n```\n\nnginx rewrite规则如下：\n\n```nginx\nrewrite ^/(.*)/$ /index.php?/$1 permanent;\nif (!-d $request_filename){\n        set $rule_1 1$rule_1;\n}\nif (!-f $request_filename){\n        set $rule_1 2$rule_1;\n}\nif ($rule_1 = \"21\"){\n        rewrite ^/ /index.php last;\n}\n```\n\n[](https://github.com/jaywcjlove/nginx-tutorial#错误问题)错误问题\n---------------------------------------------------------\n\n```shell\nThe plain HTTP request was sent to HTTPS port\n```\n\n解决办法，`fastcgi_param HTTPS $https if_not_empty` 添加这条规则，\n\n```nginx\nserver {\n    listen 443 ssl; # 注意这条规则\n    server_name  my.domain.com;\n    \n    fastcgi_param HTTPS $https if_not_empty;\n    fastcgi_param HTTPS on;\n\n    ssl_certificate /etc/ssl/certs/your.pem;\n    ssl_certificate_key /etc/ssl/private/your.key;\n\n    location / {\n        # Your config here...\n    }\n}\n```\n\n[](https://github.com/jaywcjlove/nginx-tutorial#精品文章参考)精品文章参考\n-------------------------------------------------------------\n\n*   [负载均衡原理的解析](https://my.oschina.net/u/3341316/blog/877206)\n*   [Nginx泛域名解析，实现多个二级域名](http://blog.githuber.cn/posts/73)\n*   [深入 NGINX: 我们如何设计性能和扩展](https://www.nginx.com/blog/inside-nginx-how-we-designed-for-performance-scale/)\n*   [Inside NGINX: How We Designed for Performance & Scale](https://www.nginx.com/blog/inside-nginx-how-we-designed-for-performance-scale/)\n*   [Nginx开发从入门到精通](http://tengine.taobao.org/book/index.html)\n*   [Nginx的优化与防盗链](http://os.51cto.com/art/201703/535326.htm#topx)\n*   [实战开发一个Nginx扩展 (Nginx Module)](https://segmentfault.com/a/1190000009769143)\n*   [Nginx+Keepalived(双机热备)搭建高可用负载均衡环境(HA)](https://my.oschina.net/xshuai/blog/917097)\n*   [Nginx 平滑升级](http://www.huxd.org/articles/2017/07/24/1500890692329.html)\n*   [Nginx最新模块—ngx\\_http\\_mirror_module分析可以做版本发布前的预先验证，进行流量放大后的压测等等](https://mp.weixin.qq.com/s?__biz=MzIxNzg5ODE0OA==&mid=2247483708&idx=1&sn=90b0b1dccd9c337922a0588245277666&chksm=97f38cf7a08405e1928e0b46d923d630e529e7db8ac7ca2a91310a075986f8bcb2cee5b4953d#rd)', 0, 1, 0);
INSERT INTO `post` (`id`, `createAt`, `updateAt`, `title`, `description`, `thumb`, `url`, `html`, `markdown`, `views`, `status`, `push`) VALUES
(9, '2018-04-23 11:01:41.019763', '2018-04-23 11:01:41.019763', '十倍效能提升——Web 基础研发体系的建立', '1导读web基础研发体系指的是，web研发中一线工程师所直接操作的技术、工具，以及所属组织架构的总和。在过去提升企业研发效能的讨论中，围绕的主题基本都是——”通过云计算、云存储等方式将底层核心技术封装成基础设施“。而我们在实践中发现，在互联网渗入到各行各业，业务爆发企业竞争白热化，对速度和品质要求越来越高一线工程师队伍越来越庞大，管理成本增高这样的多重背景下，除了底层核心技术外，一线web研发效能的问题也逐渐成为决胜战场的重要因素。然而在现实中我们看到，因为一线的研发工作可替换性强，所以并没有受到足够的重', 'https://gw.alipayobjects.com/zos/rmsportal/zohnkBUNTDTAAbVFuSLC.png', 'http://www.cnblogs.com/sskyy/p/8613393.html', '<h2>1 导读</h2>\n<p>web 基础研发体系指的是， web 研发中一线工程师所直接操作的技术、工具，以及所属组织架构的总和。在过去提升企业研发效能的讨论中，围绕的主题基本都是——”通过云计算、云存储等方式将底层核心技术封装成基础设施“。而我们在实践中发现，在</p>\n<ul>\n<li>互联网渗入到各行各业，业务爆发</li>\n<li>企业竞争白热化，对速度和品质要求越来越高</li>\n<li>一线工程师队伍越来越庞大，管理成本增高</li>\n</ul>\n<p>这样的多重背景下，除了底层核心技术外，一线 web 研发效能的问题也逐渐成为决胜战场的重要因素。</p>\n<p>然而在现实中我们看到，因为一线的研发工作可替换性强，所以并没有受到足够的重视，同时也缺少更统一、更有深度的规划和管理。实际上，将一线工程师所直接接触到的应用框架、测试、部署、监控等领域作为一个完整的体系来思考，并打造成一体化的基础设施，能为企业的业务研发带来巨大的效能提升。</p>\n<p>在《月相》一章中，我们将介绍Web 基础研发体系有哪些构成部分，并且将深入到关键性的技术和问题中。《潮汐》一章将介绍如何配合这套研发体系，在组织结构上做出一些调整，通过管理手段进一步挖掘团队潜力，打造更高效的组织。</p>\n<p>另外，希望这些内容也能为一线工程师提供一些职业规划上的引导。</p>\n<h2>2 月相</h2>\n<p>我们将要讨论的研发体系，涵盖了”研发流程“和”系统“两个维度。可以用一张大图来描绘：</p>\n<p><img src=\"https://gw.alipayobjects.com/zos/rmsportal/zohnkBUNTDTAAbVFuSLC.png\" alt=\"\"></p>\n<p>可以看到，将这些内容作为一个整体，符合目前互联网公司”核心技术“ + ”web 研发能力“ 的模式，能快速产出应用。其中，”用户“、”权限“、”流程“可以说是绝大部分系统的铁三角，因此我们也划入到了基础研发体系中。</p>\n<p>接下来看每个部分。从流程的角度来说，提升效能的关键在于”工具化“和”自动化“，我们就以这两点来切入。</p>\n<h3>2.1 设计</h3>\n<p>首先是设计，设计与编码的结合是目前业界想象空间最大，但也是最不成熟的领域。对于自动化的实现，目前的尝试大致可以归纳成两类：</p>\n<p>第一类，与设计师约定规则，按规则转化设计稿。这种方式的关键在于，“既要规则简单易于被设计师接受，又要保证视觉上的关系能完整转化成程序中的关系“。我们举个例子来说明”视觉上的关系“和”常见的程序中的关系“: 网页上这样一个场景：</p>\n<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://gw.alipayobjects.com/zos/rmsportal/dZMEFHouRPlZzQTQAbSW.png\" alt=\"\"></p>\n<p>可以很容易地理解为一个 Tab 组件里面嵌着一个按钮，他们是”嵌套关系“，在程序中用 html 可能这样写:</p>\n<pre><code class=\"language-html\" lang=\"html\"><Tabs>\n  <Tabs.Pane title=\"tab1\">	\n	<Button/>\n  </Tabs.Pane>\n  <Tabs.Pane title=\"tab2\" />\n</Tab>	\n</code></pre>\n<p>但是在现代的设计工具中，图层信息表示的仅仅是视觉上的前后关系。</p>\n<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://gw.alipayobjects.com/zos/rmsportal/ZCDWDNmnxkcRQTeKUmyZ.png\" alt=\"\" width=\"781\" height=\"348\"></p>\n<p>这就出现了一种不匹配，设计师可以通过一万种方式来表达同样的视觉效果。因此，要保证正确识别关系，必须和设计师约定只能以某种方式来创建图层。但问题是这种约定本身对设计师来说没有实际意义，对他来说只是约束。除了嵌套关系以外，位置关系也是同样的问题——目前设计工具产出的设计稿只是某一种具体尺寸的视觉效果，而我们实际产品的尺寸会因设备不同而不同的，甚至可以随着浏览器窗口的缩放等功能动态变化：</p>\n<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://gw.alipayobjects.com/zos/rmsportal/RKrfxAzZPrJsYHpulxhg.gif\" alt=\"\"></p>\n<p>怎么来表示这种变化对设计师来说也是额外的约束。乐观的是，从技术角度来说，总归是可实施的。</p>\n<p>第二类尝试，像游戏一样做专用的设计工具，则从根本上解决了上述问题。</p>\n<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://gw.alipayobjects.com/zos/rmsportal/rSuwQORzqSMuTBBUAkuZ.png\" alt=\"\" width=\"900\" height=\"900\"></p>\n<p style=\"text-align: center;\">(<a href=\"https://reactstudio.com/\">React Studio</a>)</p>\n<p>思路很简单，既然设计师能有多种方式来表达，那么我们从工具角度来约束，是不是就不会有问题了？虽然同样有约束，但是对设计师来说负担要小多了，不需要额外记忆，按照工具的指引使用即可。我们甚至还可以提供一些高级功能防止出现一些人为错误，以此来吸引设计师。这种方式唯一的缺点是有一次性的学习成本。</p>\n<p>虽然目前的自动化方案，都还只是从“视觉稿”到“程序静态视图”的自动化，并不包括交互逻辑的自动化，但已经有了巨大的意义。在前端程序员工作的统计中发现，他们有一半以上的时间都是在”调整大小、调整位置、对像素、对色值“，而且越是好的前端，这个时间比例越大。因为写逻辑是可以通过提升自身素质实现量级缩小的，而写样式这个工作本身很难实现量级的时间缩短。</p>\n<p>如果在研发体系中，设计稿能自动转化成可用的代码，无疑对传统的 web 页面研发会有巨大的提升。虽然做专用工具看起来应该是最终的方向，但在目前的现实环境中，可能会因为加重设计师的使用负担而被抵制，所以通过在原有设计工具上做约定的方式来过渡可能更合适。在用约定的方案里，怎样让约定即不给设计师造成太大的负担，又能解决上述的规则转化问题，就成了重点。在实践中的解法是，通过工具的高级能力来补偿设计师。这部分细节已在《<a href=\"http://www.cnblogs.com/sskyy/p/7813943.html\">设计稿自动生成可用页面的展望</a>》中详细描述过，这里不再赘述。</p>\n<h3>2.2 研发、测试和监控</h3>\n<p>我们将这三个环节合在一起来讨论，是因为他们存在技术决策上的上下游关系。过去在大团队中规划研发体系，常常会出现一种现象，就是研发、测试、监控都是由不同团队规划的，而每个团队都想着做平台。后来慢慢发现这个思路是有问题的，因为做平台必然要考虑到不同端的接入，要花成本将自己的服务抽象得足够底层，花成本对不同的端做适配。而在这三个环节中，研发中的<strong>运行时框架(应用框架)</strong>是工具化和自动化的核心，只要对运行时框架多进行一点点投入，后面测试、反馈、监控的研发成本就能降到非常低！</p>\n<p>举个前端的例子。在搭建可视化页面搭建平台时，我们设计了一个将“所有组件数据都统一到一棵树”上的方案。</p>\n<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://gw.alipayobjects.com/zos/rmsportal/FWYKxWErwBlYheDQOKXM.png\" alt=\"\" width=\"929\" height=\"791\"></p>\n<p>在传统的 React 中所有组件的 state 和 props 合起来才能表达一个页面唯一的状态，state 和 props 分散在组件中，不易收集。而在这个设计中，全局的 state tree 即表达了页面的一个状态，如果将每一次变化后的state tree 都存起来，即可通过回放来展现页面动态变化的过程。更进一步的是，利用这个特性，我们在 200 行代码之内就实现了“录制即测试用例”的功能。用户无需写任何晦涩的用例代码，在调试自己写的页面时只要觉得没问题，就可以将刚才的调试过程保存成一个用例。</p>\n<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://gw.alipayobjects.com/zos/rmsportal/mRJjqeSNCIGTbQyUUEbp.gif\" alt=\"\"></p>\n<p>再举一个接口层的例子。我们运行时框架的接口采用了 GraphQL ，并且告别了手动写接口的形式，全部利用视图勾选生成。</p>\n<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://gw.alipayobjects.com/zos/rmsportal/AYctHHVuVqMkcFIJYKKi.gif\" alt=\"\"></p>\n<p>这解决了两个研发中常见的问题：</p>\n<ul>\n<li>杜绝了手工约定接口时可能出现的拼写等错误。</li>\n<li>能自动统计到所有对某一接口进行消费的页面，一旦接口进行调整，可以自动通知到下游，甚至能自动生成适配代码，不影响下游。</li>\n</ul>\n<p>这也就极大地减轻了测试环节的压力。之前的思路基本都是通过扫描代码去发现接口错误，要消耗大量资源，现在看起来没必要了。</p>\n<p>这两个例子都是从研发的角度来思考所看到的收益，我们再单独从测试与监控的角度来看。</p>\n<p>测试领域有一个热点，—— UI 自动化。目前的 UI 自动化有两种方案，图片对比 与 dom 树对比。</p>\n<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://gw.alipayobjects.com/zos/rmsportal/XUMcGlAMLtZrtZTjGMJb.png\" alt=\"\"></p>\n<p style=\"text-align: center;\">(<a href=\"https://screenster.io/\">Screenster</a>)</p>\n<p>这两种方案都有一个共同的缺点，即“无法正确地识别变化的类型”。例如现在有个需求，视图上的两个元素需要调换一下位置，但逻辑并没有变，希望测试平台不报警。除非人工干预，否则这两种方案都很难判断出来，因为他们是以”最后渲染结果“作为判断依据的。但是如果我们的测试是针对运行时框架来设计的话，就很容易实现。以上面研发时所讲的组件树方案为例，页面到底有没有逻辑性的变化只和 state tree 有关，因为页面的状态是 state tree，而逻辑操作的也是 state tree，所以我们只要认为 state tree 没变，就可以认为页面没有发生变化，不用触发报警。</p>\n<p>除了能识别变化外，利用运行时框架的设计，我们还能实现更先进的功能，例如 B/S 架构中还原浏览器端出错现场的问题。在过去 debug 时，我们通常都要与测试交流，按照操作步骤手工还原到现场，如果能由程序自动化一次性达到出错现场，那无疑能给 debug 速度带来质的提升。要实现这种能力的关键点在于，任何表示页面状态的数据，都要能暴露到外部，也能由外部传入进行重置。一旦有一个决定页面状态的变量在函数中，不能取出，不能序列化后传给服务端，就无法做到。毫无疑问，这种能力也是需要应用框架来支持的。例子中 state tree 的设计，有一部分原因就是出于支持这种能力的考虑。</p>\n<p>再来看监控领域的热点，“无埋点”监控，和自动化测试有异曲同工之妙。“无埋点”指的是无手工在代码中的埋点，通常是使用可视化的技术来进行“标记”。</p>\n<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://gw.alipayobjects.com/zos/rmsportal/gQWHDbfoSyYymCZkQSWo.png\" alt=\"\" width=\"918\" height=\"896\"></p>\n<p style=\"text-align: center;\">(<a href=\"https://www.growingio.com/\">GrowingIO</a>)</p>\n<p>目前业界的一些方案中，遇到的问题同样是不能正确地识别变化。例如当页面上的元素改变了位置，埋点能不能不受影响？在可视化搭建平台这个项目里，我们同样是在应用框架这个层面设计了解决方案：</p>\n<p>我们的页面使用一种类似于模板的方式来嵌套组件，这个结构我们称为 component tree，这个结构是静态可分析的，所以可以很容易地实现可视化。用户如果想要控制组件使其产生变化，那么必须给组件取个唯一的名字，在逻辑代码中使用这个名字对它的数据进行操作来实现改变。</p>\n<p>有了这个前提，无需任何额外的投入，就已经实现了“无埋点”。因为“埋点”本身就是对逻辑功能的统计，所以埋点一定会埋在有逻辑相关的组件上，因此一定会有唯一的名字，那么无论组件怎么变化，只要没有被删除，我们的埋点信息就不会受到影响。同时，如果一个有埋点的组件出现了改名或者删除，我们还能自动提示报警。而这些功能，同样是在不到200行的代码就实现了。</p>\n<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://gw.alipayobjects.com/zos/rmsportal/UmylSoMxOmzVKJkYMmrw.gif\" alt=\"\"></p>\n<p style=\"text-align: center;\">(埋点取名)</p>\n<p>综上，从测试和监控两个角度我们也可以看到，只要运行时框架提供一点点帮助，就能以极小的成本来实施。针对确定的上游研发框架来进行下游的开发，不用再考虑对各种框架的兼容问题，也可以让下游在能力上走得更远，实现更多先进的功能。</p>\n<h3>2.3 框架核心技术</h3>\n<p>我们在线下交流中发现，很多团队对框架的投入只停留在写小工具和包装开源框架上。因为看不清方向，不知道如何投入，也不知道投入后有多少收益，所以不敢深入。其实方向和具体应该投入哪些技术，都是有迹可循的。这个踪迹的源头我们在 《<a href=\"http://www.cnblogs.com/sskyy/p/4592353.html\">理想的应用框架</a>》中曾提到过的，就是程序的本质——<strong>数据和逻辑</strong>。</p>\n<h4>2.3.1 数据</h4>\n<p>先具象一点来说数据。框架的数据就是框架运行时内部保存的对象等数据结构，只要回答好两个问题就能展现出强大的威力：</p>\n<ul>\n<li>数据在哪？</li>\n<li>数据的生命周期是怎样的？</li>\n</ul>\n<p>知道数据在哪，是管理数据的基本条件。应用的任何状态，都可以看做是内部数据的一种表现。因此只有框架掌握了所有数据，才有可能实现例如还原现场之类的功能。这对我们的研发有两点指导意义：</p>\n<p>一是在使用已经有控制反转和依赖注入的 web 框架时，应该完全遵循框架的约定，将服务等对象的管理完全由框架。有的框架语法写起来比较麻烦，可以通过命令行或者IDE工具来自动生成。</p>\n<p>二是在我们改造或者创造框架时，应该把数据的统一管理作为最基本的底线，这是上下游实现自动化的基础。上一节中所提到的测试录制的能力，就是建立在统一数据源的基础上。再举个更有意思的例子，过去的前端的 ajax 请求基本都是独立调用 api，无中心的模式。这种模式可能会出现的问题是：</p>\n<p>请求A发出后，由于网络等问题，一直未返回，这时用户有重新发送一次请求 A1。结果 A1 迅速返回在回调函数中提示成功。然后请求 A 超时返回，在回调中提示失败，导致最后用户看到的是失败的信息。</p>\n<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://gw.alipayobjects.com/zos/rmsportal/NnlAsoOtCaPVoVuaUvxB.png\" alt=\"\"></p>\n<p>当引入 saga 之后，所有异步的操作都统一收归到通信管道中，就能进行跨请求的管理了。单个异步请求的取消、多个异步请求到底是独立、还是竞争、还是只保持最后一个，就都能很容易地实现了。基于中心化的请求管理，还能进行可视化：</p>\n<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://gw.alipayobjects.com/zos/rmsportal/rAIVUbhZHyQIpLTfsnEv.png\" alt=\"\"></p>\n<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://gw.alipayobjects.com/zos/rmsportal/HVnuRNheHVwtWFLRYljb.jpg\" alt=\"\"></p>\n<p>(kuker)</p>\n<p>继续讲到第二个问题，数据的生命周期是怎样的？生命周期通常是由外部事件来触发，或者自己运行到某一阶段自动触发的。对深度开发来说，有两个基础能力必须由框架来提供。即框架要支持：</p>\n<ul>\n<li><strong>手动驱动生命周期</strong></li>\n<li><strong>内部数据的复制和置换</strong></li>\n</ul>\n<p>手动驱动生命周期对自动化测试之类的功能来说很重要，特别是在做一些基础性的测试时，有了这个能力就不用再完全模拟外部的触发条件。而内部数据的复制和置换则能为录制、还原现场、协同等高级功能提供基础。我们现在就在尝试基于这种能力，实现“用户可以将自己的出错场景一键发送给开发人员来复现”的功能。值得注意的是，有的语言中复制对象是非常昂贵的操作，这时可能就需要考虑，是否使用 immutable 的数据格式会更好？还是依靠一些约定和标记提供自身提供廉价的复制能力？限于篇幅，在此就不再展开。对框架中的数据问题感兴趣的读者可以去搜索 Single Source of Truth 和 Shared Mutable State 之类的话题，业界已经有非常多的精彩讨论。</p>\n<h4>2.3.2 逻辑</h4>\n<p>聊完数据，终于来到最有意思的逻辑部分。框架从某种意义上来说，就是提供了一种逻辑表达的方式。要在逻辑表达上提升效能，有两个发展阶段：</p>\n<ul>\n<li>提供一些模式或技术。让用户写出低耦合、易重用、易扩展的代码。在写代码时提高效能。例如 MVC、IOC 等等。</li>\n<li>针对不同场景设计更合理的 DSL，能实现代码、图等表达方式的互相转换。在研发的整条链路上实现自动化。</li>\n</ul>\n<p>我们看到大部分的框架都处于第一个阶段，不管是服务器端的 MVC 还是前端的 MVVM 。但也有少量第二阶段的尝试。例如 Flow Based Programming，试图完全用数据流向的角度来诠释业务中的逻辑。它的代码可以天然被分析成图，甚至能在运行时进行观察：</p>\n<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://gw.alipayobjects.com/zos/rmsportal/iKSmHVoPSUEcoxYFaBfY.jpeg\" alt=\"\" width=\"900\" height=\"585\"></p>\n<p style=\"text-align: center;\">(<a href=\"https://noflojs.org/\">noflo</a>)</p>\n<p>还有《理想的应用框架》中提到的基于事件来表示业务逻辑，也是一种 DSL。但这些尝试离最终的目标仍然有差距，最终理想的状态应该是能实现业务流程图、时序图、决策树等业务领域常用的表达方式与代码的互转。虽然有差距，而且看起来要走的路还很长，但是针对一些已经比较稳定的场景，已经有一些好的经验。CMS 框架 <a href=\"https://www.drupal.org/\">Drupal</a> 就是一个很好的例子。它定义好了数据发布的整个流程和相应的钩子系统，让开发者用模块的方式在钩子里去修改或者增加自己的功能。曾经一度实现了一个非常繁荣的社区。更值得肯定的是，社区中很多模块都是可视化的，最终用户不需要写任何代码，按照模块的可视化指引就能完成相应的功能。这实际上就等同于 DSL 与代码的互转了。</p>\n<p>不管哪一个阶段的关键技术，都离不开分析<strong>语义</strong>的能力。直白一点来说，就是“知道哪段代码是干什么”的能力。</p>\n<p>在第一阶段的框架中，最影响效能的因素并不是”要写代码的多少“，而是写按框架概念写出来的代码是否易于理解、易于维护。这一点在越是大型、越是多人参与的项目中，越是明显。而代码的“语义”是否清晰在某种程度上直接决定了我们是否能通过技术手段来提升可维护性。例如，在使用依赖注入的系统中，如果所有代码的注入声明都清晰地表明了注入的到底是什么的话，那我们就很容通过语言层面的支持或者简单字符串匹配得到依赖关系图。反之，如果注入的信息模糊，既可能是函数也可能是 model，没有任何明显约束的话，那就可能得通过语法树，找到注入的入口才能分析出来，这样实现的成本就成倍增加了。</p>\n<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://gw.alipayobjects.com/zos/rmsportal/ShayQXLlsZMIxwwiphfS.png\" alt=\"\" width=\"900\" height=\"506\"></p>\n<p style=\"text-align: center;\">(<a href=\"http://rekit.js.org/\">Rekit Studio</a> 依赖分析图)</p>\n<p>相比于依赖分析，更重要的是“<strong>调用关系分析</strong>”，它对于帮助理解流程，特别是排查问题特别有用。举个简单的例子，在数据驱动的前端框架中，因为视图完全是数据的展现，发现视图不对了，如果能动态展示出修改了数据的业务堆栈(不是函数堆栈)，就非常有用。不需要再一步一步断点。</p>\n<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://gw.alipayobjects.com/zos/rmsportal/JYzLTXXKlbsLvlYNRrGR.png\" alt=\"\" width=\"900\" height=\"472\"></p>\n<p>当然实现起来也更难。难点有两个：一是依赖分析一般是运行前的，是静态的，而调用关系一般是运行时的，是动态的；二是依赖通常是声明出来，容易读出来，而调用通常是在主动式的语句中，会遇到条件判断、循环、甚至通过变量在不同函数、类作用域中传递，比较难分析。这种难，其实也就是语义不清。在框架的设计或者我们自己的改造中，可以通过三点来尽量提供明确的语义：</p>\n<ul>\n<li><strong>尽量转主动为被动</strong></li>\n<li><strong>尽量片段化</strong></li>\n<li><strong>消除用户代码中的副作用和对外部作用域中变量的依赖</strong></li>\n</ul>\n<p>前两点很好理解，被动声明式的代码结构更容易被分析。虽然在实践的时候需要大量经验，来保障设计出来的声明格式即能覆盖所有场景又要容易编写，但是它带来的收益也是最可观的。GraphQL 就是一个最好的例子，在服务器端用声明的结构将数据结构和关系表达出来，在客户端用声明的结构将要获取的数据结构表达出来，后端就可以使用统一的引擎来生成调用，省去的大量写接口的时间。第二点，尽量片段化是指我们在引导用户写代码的时候，应该把生命周期等等概念拆得尽可能小，使语义更细致。写起来繁琐的问题可以通过工具或者语法糖去解决。</p>\n<p>第三点最重要，消除副作用指的是任何时候运行用户的代码片段应该都不会对外部环境产生影响。而消除对外部作用域中变量的依赖指的是对要用的数据、服务尽量都用参数的形式传入。这样做的好处有两个，对于一些复杂的，难以分析的调用的关系，可以将要观测的对象包装一下再传入，这样就能动态得到调用关系。在整体运行前，因为无副作用，也可以很容易地通过试运行这些片段来得到一些信息。虽然现在的语法树工具已经比较流行，但真的要完全通过语法分析来得到足够的语义仍然有很大的工作量。而上述的这三点，可以看做是快速、廉价的实现方式，并且实践中效果非常不错。</p>\n<h4>综合</h4>\n<p>最后值得一提的是，上面所讲到的数据和逻辑中的原则与技术并不是相互独立的。在《<a href=\"http://www.cnblogs.com/sskyy/p/6496287.html\">前端服务化——页面搭建工具的死与生</a>》和《<a href=\"http://www.cnblogs.com/sskyy/p/7002404.html\">通天塔之石——企业级前端组件库方案</a>》这两篇文章中看到，我们所使用的很多技术，其实是混合支撑着数据修改追溯、组件属性可视化等功能。他们中间有的也有着依赖关系。但相比于“数据和逻辑”这两个源头，这些并不重要。只要掌握了这两个源头面对的问题，其他都是能推导出来的。</p>\n<p>对开源框架如何使用也是同样的道理。对于严肃的企业生产来说，应该找到业务所面临场景的源头，吸收解决问题的先进的想法，但自己实现，就像编程语言各自实现语言特性一样。而不应该只是停留在包装开源框架这个层次。开源框架为了适应尽量广的场景，有更大的群众基础，给出的一定是普适性的方案，这种普适性在业务发展到一定程度，有了足够多的独特性之后就会变成巨大的包袱反噬研发效能。等到了这个时候再考虑自己研发，其迁移、适配、研发成本以及带来的风险可能会变得非常大。而我们从前文看到，掌握了框架研发的几个核心，从小的场景就开始投入，成本并不高。最重要的是长久积累形成体系后，所带来的“流程上自动化“、”降低下游实现成本”等能力能持续地帮助企业提升研发效能。</p>\n<h3>2.3 通用子系统与核心接口</h3>\n<p>从流程的角度来看，提升效能的主要是靠自动化。而从系统的角度来说，则主要是靠能力的复用。”用户“、”流程“、”权限“几乎是任何业务系统中都存在的，因此将这三者也纳入到了基础研发体系的范围。在这里我们并不打算深入到每个系统所面临的具体问题中，只讲两点：</p>\n<p>一、产品化或者子系统化，不要过早平台化，对将来系统整体打包有益。过去的互联网公司习惯将这些公用系统平台化，各个业务系统来接入。但这几年互联网业务进入的都是新领域，面临的市场、用户常常是需要隔离的。这个时候系统整体复制的能力就变得非常重要，所以一开始就将这三者以子系统或者子产品的方式来对待，能为之后的发展提供更多的灵活性。</p>\n<p>二、三者不是并列关系，不用纠结于能力解耦，制定核心系统接入规范才是最重要的。权限系统无论是 RBAC 还是 DAC 都离不开用户系统的支持。流程则是既依赖于权限也依赖于用户。如果把运行时框架看做是主板，这三者应该是主板上的补充部分，一起为核心系统的接入提供针脚。同样是为了系统整体打包的能力，应该尽早制定核心系统接入的规范。</p>\n<h2>3 潮汐</h2>\n<p>在《月相》一章我们探讨了 web 基础研发体系的构成及部分重难点。相比于具体技术本身，这套方案对组织成长和重塑的意义更大。在这一章中我们会先从大团队中两个有启发性的问题出发，逐步深入到如何打造一个更高效的研发组织方案中。虽然问题出现是在大团队的，但对小团队仍有两点借鉴意义：</p>\n<ul>\n<li>小团队随着业务发展会长成大团队，也可能碰到一样的问题。</li>\n<li>问题本身萌芽于成长过程之中，予以正确的指导能更加节约人力，助力公司发展。</li>\n</ul>\n<h3>3.1 平台林立</h3>\n<p>首先注意，我们讨论的仍是 web 层的问题。这个现象在有多个不同业务的大公司中最常见。出现这种现象的原因有两个，一是公司到了万人规模，实际上就相当于上百个百人规模的小公司，必然想法很多，出现重复的自然也多。</p>\n<p>另一个更重要是，在 web 这个领域，特别是前端，<strong>基础设施变化太快</strong>。</p>\n<p>无论是浏览器底层所支持的 api，还是 javascript 语言本身变化都非常快。底层一变化，研发的各个环节必然出现基于新技术的空缺，很多框架和平台就是随着这些空缺出现的。现象本身存在即合理，但如果有更好的统一管理，是能从如下两个方面提取出巨大的效能的。</p>\n<p>一、<strong>如果将研发流程中的各个环节中独立的平台统一，可以极大地加速业务开发</strong>。直接决定业务发展速度的是进行业务开发的工程师。他们最希望的就是只有一个平台将研发的所有流程都搞定，并且尽量自动化。平台一多，对业务开发工程师来说，学习、沟通、协作的成本就会陡增。这个成本有多大？在我们通过线下了解发现，这个成本很多时候甚至会超过业务开发本身。</p>\n<p>二、<strong>加大对趋势和方向的研究，预防无序的框架和平台的投入，这样能尽量防止走偏和无效劳动，也是一种提升</strong>。越是大的团队，这一点越明显。“基础设施变化”这样一个滚滚巨轮这些年压碎了多少框架和平台，其中很多产生的效益都不足以覆盖其研发成本。更坏的是，出于个人利益等原因，有的平台过时了也不肯下线，阻挡了整个团队随基础设施一起进步的机遇，消耗的是更多的未来的人力。</p>\n<p>我们在《月相》中提出的研发体系就是实现这两个提升的具体手段。</p>\n<p>首先，有一个完整的体系来将研发流程当成一个整体对待，并且通过统一的平台来实现，能更好地实现流程的自动化。降低一线工程师沟通、学习成本。</p>\n<p>其次，对运行时框架的投入，本身就包含着对趋势和新技术的研究，可以缓解被基础设施带着跑的问题。并且我们看到运行时框架研究到了一定程度，能够极大的减少后续测试、监控实现的成本，也降低了基础设施变化所产生的多米诺效应。这里对管理带来的反思是，我们应该谨慎“平台化”的思考。特别是下游环节，因为“平台化”的思维，必然要考虑对各种不同的端进行适配，必然要制定各种规范，这些都是人力成本。如《月相》中所示，上游理清楚并且统一后，下游是能有针对性地、很低成本地实现的，根本不需要“平台级”的成本投入。当然，在这里所说的只是减少技术上的投入，环节本身还是非常重要的。</p>\n<p>平台林立从某一方面来说也表示着团队内部有着大量的无序的力量，这种力量在团队出现不同环节的分工时就产生了，尽早地建立研发体系就能尽早地将这些力量用起来，创造真正的价值。</p>\n<h3>3.2 资源池</h3>\n<p>很多大公司的 web 研发团队都被当成资源池来用，哪个业务需要就投入到哪里。现象的直接原因有两个：一是<strong>从管理的角度来说，web 层的研发工作相对来说可替换性强，具备形成资源池的可能</strong>。二是 <strong>web 研发处于业务决策链底层，人员相对来说最紧张，因此通过资源池的方式能动态地支持业务开发，是最简单的解决方案</strong>。但这个方案其实是相当低效的。我们从对工程师个人的关注来切入这个话题。</p>\n<p>首先从主观的角度出发，一个有激情，对职业未来充满憧憬的工程师与苦大仇深的工程师在效率上是有成倍差别的。除了其本身的性格外，造就这两种态度有很大一部分是职业上升渠道的问题。首先，和任何能被当成资源池来用的工作一样，因为可替换性强，所以不容易被重视。其次，目前的上升渠道不够。web 研发工程师的上升渠道要么是纵向的，当业务发展得足够好，重要性提高，成为系统负责人。要么是横向的，随着团队扩大，管理需要，成为管理者。这两者一个基于业务一个基于人力，和技术相关不大。所以有才华的工程师自然会想要造框架、造平台，努力成为公司技术中重要的一部分。但没有正确的引导，就会成为上面所说”无序的力量“，发展得不对反而会变成公司的消耗。而当他发现自己付出的努力得不到回报的时，就有可能变成苦大仇深的工程师。</p>\n<p>最终影响的不只是工程师自身，公司也会要在管理成本上为其买单。我们在与一些资深 hr 交流时，他们进一步说明了这个问题。在公司工作了四、五年的员工，是已经融入了公司，理解公司文化也了解公司问题的人，算是中流砥柱。如果得不到好的上升，可能会有两种情况：其中有想法有行动力的，多半会选择离开。既会对组织稳定性会造成影响，也会让公司付出的培养成本付诸东流，对公司来说可算是很大的损失；另一种更不好的则是既不离开，也不像以前一样努力。他们在团队内有一定的话语权，却丧失了进去的激情，不再发挥积极的作用。当公司需要快速扩张、快速发生变革的时候，他们就会成为隐性的管理成本。</p>\n<p>而解决方案，其实很简单。大公司内部通常都有”框架组“、”平台组“类似的部门，但基本都停留在”可用“阶段就完成任务了。这远远不够，如果将建立 web 基础研发体系作为目标，以产品化为衡量标准，加强重视和投入。 web 工程师的上升渠道就会得以扩张，公司内无序的力量就会进入到正确的领域。创造的价值又能进一步为研发提供能量，形成一个正循环，逐步缓解人力紧张的态势，资源池现象也就自然会消失。这很像我们身体受伤时，外部肿胀只是炎症的表现，消炎了，肿胀自然也就好了。重点是找到关键进行消炎，而不是围着外部现象思考。</p>\n<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://gw.alipayobjects.com/zos/rmsportal/ziSawgUzzIGMBQURexZP.png\" alt=\"\"></p>\n<p>建立体系还能带来的好处是，通过提升 web 研发的效率，降低业务研发所需的人数，能帮助大公司重新回到小步快跑的节奏。张小龙有一篇演讲《<a href=\"http://tech.qq.com/a/20161029/018612.htm\">警惕KPI和复杂流程</a>》，讲到了小团队的重要性，随着互联网公司的竞争越来越激烈，这种重要性会变得越来越高。我们从一些互联网的新巨头上，其实已经看见了“<strong>核心技术+基础web研发能力</strong>”来快速出产品，占领市场的趋势。对小公司来说，统一的 web 基础研发体系，是帮助实现超车的重要一环。对大公司来说，则是进一步挖掘效能，防止掉队的必修课了。</p>\n<h2>4 后记</h2>\n<p>这篇文章笔者前后重写了三次，因为面对 web 一线工程师这样一个庞大的群体，效能提升已经不仅仅是技术或管理某一方面的事情，而是要综合各个方面来寻求个人和公司发展的共赢。 web 一线研发是很多工程师进入这个领域最开始做的事情，但是笔者看到了很多有才华的人困在了低效、重复的工作里面，努力了也因为方向不对而徒劳。这对个人和公司都是损失。在技术上找到方向，在管理上予以支持，多方发力，其实能提升的效能远超十倍。当然，一篇文章不足以实现任何改变，这篇文章最主要的目还是抛砖引玉，也希望对这个方向有想法，志同道合的朋友联系我，一起交流，一起推动。</p>\n<p>邮箱: <a href=\"mailto:ariesate@outlook.com\" target=\"_blank\">ariesate@outlook.com</a>。</p>\n<h2>5 答读者问</h2>\n<p>问：研发体系的统一规划不是破坏了竞争和创新吗？</p>\n<p>答：统一规划并不是指不要竞争，不要创新。而是防止开倒车的情况出现，是给竞争和创新指定一个方向。例如我们在文中理清上下游关系，目的是指导研发力量应该往哪里投入，在投入的过程中仍然可以采取竞争的形式。</p>\n<p> </p>\n<p>问：框架研发提升效能的趋势？</p>\n<p>答：分两个方向。一是框架本身，会朝着“增强对用户代码的理解和控制力”这个方向前进。用户按框架写的代码，能不能通过工具分析出具体的语义？人工的低级错误能不能自动检测出来并自动修正？能不能转化成某种人类习惯的表达方式，比如图？当控制力达到一定程度后，这些能力都实现后，再往下应该就是代码的自动生成。</p>\n<p>另一个值得一提的是框架能力与业务特有属性会一起沉淀到 IDE 上，会出现面向专有框架的 IDE，面向单个具体工程的 IDE。分析图，自动扫描工具都由 IDE 作为载体，就像很多游戏的专用编辑器一样。只有沉淀到 IDE 上才是最便捷、最有针对性的。对这个方向感兴趣的读者可以跟我邮件讨论，目前我们已经有一些初步的想法。</p>\n<p> </p>\n<p>问：文章中讲到的问题都是大公司的，对小团队来说，什么时候应该开始建立自己的基础研发体系？</p>\n<p>答：研发体系的建立可以分为规划和实施两个阶段。规划的话，从一开始就应该有所规划。在前期人力不够的情况下，不用强行追求打造自己的框架和工具，可以用开源的。但应该始终把开源的东西拿到自己的体系中，清楚地知道它在自己体系中的角色，也清晰地知道自己用了它的什么特性，未来还需要补充什么。什么时候开始实施其实有一个象征性的标准，也是我们前面在无序的力量中提到的——出现了不同环节的分工时。有的团队业务扩张太快，人力一直不够，那么建议按五分之一到三分之一的比例来抽出人力打造基础设施。磨刀不误砍柴工，何况投资得到的回报是电锯呢。</p>', '1 导读\n----\n\nweb 基础研发体系指的是， web 研发中一线工程师所直接操作的技术、工具，以及所属组织架构的总和。在过去提升企业研发效能的讨论中，围绕的主题基本都是——”通过云计算、云存储等方式将底层核心技术封装成基础设施“。而我们在实践中发现，在\n\n*   互联网渗入到各行各业，业务爆发\n*   企业竞争白热化，对速度和品质要求越来越高\n*   一线工程师队伍越来越庞大，管理成本增高\n\n这样的多重背景下，除了底层核心技术外，一线 web 研发效能的问题也逐渐成为决胜战场的重要因素。\n\n然而在现实中我们看到，因为一线的研发工作可替换性强，所以并没有受到足够的重视，同时也缺少更统一、更有深度的规划和管理。实际上，将一线工程师所直接接触到的应用框架、测试、部署、监控等领域作为一个完整的体系来思考，并打造成一体化的基础设施，能为企业的业务研发带来巨大的效能提升。\n\n在《月相》一章中，我们将介绍Web 基础研发体系有哪些构成部分，并且将深入到关键性的技术和问题中。《潮汐》一章将介绍如何配合这套研发体系，在组织结构上做出一些调整，通过管理手段进一步挖掘团队潜力，打造更高效的组织。\n\n另外，希望这些内容也能为一线工程师提供一些职业规划上的引导。\n\n2 月相\n----\n\n我们将要讨论的研发体系，涵盖了”研发流程“和”系统“两个维度。可以用一张大图来描绘：\n\n![](https://gw.alipayobjects.com/zos/rmsportal/zohnkBUNTDTAAbVFuSLC.png)\n\n可以看到，将这些内容作为一个整体，符合目前互联网公司”核心技术“ \\+ ”web 研发能力“ 的模式，能快速产出应用。其中，”用户“、”权限“、”流程“可以说是绝大部分系统的铁三角，因此我们也划入到了基础研发体系中。\n\n接下来看每个部分。从流程的角度来说，提升效能的关键在于”工具化“和”自动化“，我们就以这两点来切入。\n\n### 2.1 设计\n\n首先是设计，设计与编码的结合是目前业界想象空间最大，但也是最不成熟的领域。对于自动化的实现，目前的尝试大致可以归纳成两类：\n\n第一类，与设计师约定规则，按规则转化设计稿。这种方式的关键在于，“既要规则简单易于被设计师接受，又要保证视觉上的关系能完整转化成程序中的关系“。我们举个例子来说明”视觉上的关系“和”常见的程序中的关系“: 网页上这样一个场景：\n\n![](https://gw.alipayobjects.com/zos/rmsportal/dZMEFHouRPlZzQTQAbSW.png)\n\n可以很容易地理解为一个 Tab 组件里面嵌着一个按钮，他们是”嵌套关系“，在程序中用 html 可能这样写:', 0, 1, 0),
(10, '2018-04-23 11:01:41.042682', '2018-04-23 11:01:41.042682', 'A Bone to Pick with Skeleton Screens', '\nFacebook and Google use skeleton screens to make their apps feel faster. Should you be using them too?\n', 'https://static.viget.com/_284x284_crop_center-center/101717-skeletonscreen.png?mtime=20171018104120', 'https://www.viget.com/articles/a-bone-to-pick-with-skeleton-screens/', '\n<div class=\"text\" data-module=\"Text\">\n<p>In the fight for the short attention span of our users, every performance gain, whether real or perceived, matters. This is especially true on mobile, where despite our best efforts at performance, a spotty signal can leave users waiting an interminable few seconds (or more) for content to load.</p>\n<p><span class=\"Apple-tab-span\"> </span></p>\n<p>Design’s conventional answer to unpredictable wait times has long been the loading spinner; a looping animation that tells the user to “Hold on. Something’s coming,” whether that something is one or ten seconds away.</p>\n<p>More recently, a design pattern known as progressive loading has gained popularity. With progressive loading, individual elements become visible on the page as soon as they’ve loaded, rather than displaying all at once. See the following example from Facebook:</p>\n</div>\n,\n<img src=\"https://static.viget.com/facebook_loading4.gif?mtime=20171016140249\" alt=\"\">\n<div class=\"wrapper--narrow\">\n<figcaption>Progressive loading on the Facebook app</figcaption>\n</div>\n,\n<div class=\"text\" data-module=\"Text\">\n<p>In the Facebook example above, a skeleton of the page loads first. It’s essentially a wireframe of the page with placeholder boxes for text and images. </p>\n</div>\n,\n<img src=\"https://static.viget.com/_189xAUTO_crop_center-center/facebook_skeleton@1x.png?mtime=20171016134723\" alt=\"\" srcset=\"https://static.viget.com/_94xAUTO_crop_center-center/facebook_skeleton@1x.png?mtime=20171016134723 94w,\n                 https://static.viget.com/_189xAUTO_crop_center-center/facebook_skeleton@1x.png?mtime=20171016134723 189w,\n                 https://static.viget.com/_377xAUTO_crop_center-center/facebook_skeleton@1x.png?mtime=20171016134723 377w\" sizes=\"(min-width: 190px) 377px,\n                (min-width: 95px) 189px,\n                100vw\">\n<div class=\"wrapper--narrow\">\n<figcaption>Facebook\'s skeleton screen</figcaption>\n</div>\n,\n<div class=\"text\" data-module=\"Text\">\n<p>Progressive loading with skeleton screens is thought to <a href=\"https://www.lukew.com/ff/entry.asp?1797\">benefit the user</a> by indicating that progress is being made, thereby shortening the perceived wait time. Google, Medium, and Slack all use skeleton screens to make their apps feel more performant.</p>\n<p>So, should we all be using skeleton screens to make our apps feel faster? To answer this question, we decided to do some lean research into the effects of different loading techniques on perceived wait time.</p>\n<p>\n</p>\n<h2>Test Design</h2>\n<p>We created <a href=\"https://viget.optimalworkshop.com/chalkmark/meal-delivery\" target=\"_blank\">a short test</a> for mobile devices that measured users’ perceived wait time for three different loading animations of identical length: a loading spinner, a skeleton screen, and a blank screen.</p>\n<p>The quickest way to build the test was to use animated GIFs to simulate each loading animation and put them inside an existing testing framework. (We chose Chalkmark by Optimal Workshop.) Users who opted into the test from a mobile device were asked to complete a simple task and then randomly shown one of the GIFs. Following the task, which was a red herring, they were asked a series of follow-up questions about how long they waited for the page to load.</p>\n</div>\n,\n<img src=\"https://static.viget.com/test_skeleton_only.gif?mtime=20171016141424\" alt=\"\">\n<div class=\"wrapper--narrow\">\n<figcaption>The skeleton screen variant in the test we deployed</figcaption>\n</div>\n,\n<div class=\"text\" data-module=\"Text\">\n<p><em>Follow-up questions:</em></p>\n<ol><li><p>Based just on what you can recall, please respond to the following statement: “The recipes loaded quickly for me.\" [Strongly agree, Moderately agree, Neutral, Moderately disagree, Strongly disagree, I didn’t notice]</p></li><li><p>From what you can remember, estimate the amount of time it took for the meals to load. [1 second, 2 seconds, 3 seconds, 4 seconds, 5 seconds]</p></li></ol>\n<p>We also measured the time it took users in each group to complete the red herring task. Based on some of the literature we’d read, it seemed plausible that a skeleton loader might actually speed up task completion by orienting users more quickly to the structure of the page.<br></p>\n<p>Roughly half (70) of the participants were sourced through Amazon Mechanical Turk and paid for their participation. The rest were organically sourced through Viget’s social channels. The results were replicated across both groups of participants.</p>\n<h3>Hypotheses:</h3>\n<ol><li><p>Users in the skeleton screen group will perceive the shortest wait time.</p></li><li><p>Users in the skeleton screen group will complete the task most quickly.</p></li></ol>\n<h2>Results</h2>\n<p>We gave the test to 136 people, and the skeleton screen performed the worst by all metrics. Users in the skeleton screen group took longer to complete the task, were more likely to evaluate their wait time negatively (by answering the first question with “Strongly disagree” or “Moderately disagree”), and guessed that the wait time had been longer than users who saw the loading spinner or a blank screen.<br></p>\n</div>\n,\n<div class=\"text\" data-module=\"Text\">\n<h4>Table 1. Test Results</h4>\n<figure class=\"image-block\"><table align=\"left\" border=\"0\" cellpadding=\"1\" cellspacing=\"1\" class=\"article-table\"> <tbody> <tr> <td> </td> <td align=\"center\"><img width=\"48px\" alt=\"Skeleton screen\" class=\"no-border\" src=\"https://static.viget.com/varA_skeleton.png\"></td> <td align=\"center\"><img width=\"48px\" alt=\"Loading spinner\" class=\"no-border\" src=\"https://static.viget.com/varB_spinner.png\"></td> <td align=\"center\"><img width=\"48px\" alt=\"Blank screen\" class=\"no-border\" src=\"https://static.viget.com/varC_blank.png\"></td> </tr> <tr> <td> </td> <th class=\"centered-th\"><strong>Skeleton screen</strong></th> <th class=\"centered-th\"><strong>Loading spinner</strong></th> <th class=\"centered-th\"><strong>Blank screen</strong></th> </tr> <tr> <th align=\"left\"> <p>Number of participants</p> </th> <td>39</td> <td>39</td> <td>58</td> </tr> <tr> <th align=\"left\"> <p>Percentage who <strong>agreed</strong> with the statement,<br> \"The meals loaded quickly for me.\"</p> </th> <td>59%</td> <td>74%</td> <td>66%</td> </tr> <tr> <th align=\"left\"> <p>Percentage who <strong>disagreed</strong> with the statement,<br> \"The meals loaded quickly for me.\"</p> </th> <td>36%</td> <td>10%</td> <td>26%</td> </tr> <tr> <th align=\"left\"> <p>Average perceived wait time (seconds)</p> </th> <td>2.82</td> <td>2.41</td> <td>2.29</td> </tr> <tr> <th align=\"left\"> <p>Post-load task completion time (seconds)</p> </th> <td>10.54</td> <td>9.49</td> <td>9.50</td> </tr> </tbody> </table><figcaption>This table shows how participants responded, on average, to each of the three simulated loading animations.</figcaption></figure>\n</div>\n,\n<img src=\"https://static.viget.com/test-all-three-variations.gif?mtime=20171020095259\" alt=\"\">\n<div class=\"wrapper--narrow\">\n<figcaption>All three variations of the test</figcaption>\n</div>\n,\n<div class=\"text\" data-module=\"Text\">\n<p>Participants in the loading spinner group were most likely to evaluate their wait time positively (by answering the first question with “Strongly agree” or “Moderately agree”) and had a shorter average perceived wait time than those in the skeleton screen group.<span></span></p>\n<h2>Analysis</h2>\n<p>The unexpectedly weak performance of the skeleton screen may be due to one or more of the following reasons:</p>\n<ol><li><p>Skeleton screens are somewhat novel and attract more attention than the ubiquitous loading spinner. </p></li><li><p>Skeleton screens work better in familiar interfaces and can be off-putting in new settings when users don’t know what to expect.</p></li><li><p>Skeleton screens work best when wait times are very short.</p></li></ol>\n<p>Our hunch is that each of these reasons has some merit, but more testing is needed to know for certain. Either way, skeleton screens aren’t a silver bullet for increasing perceived performance and should be used thoughtfully.</p>\n<p>Have you implemented or experienced skeleton screens in the wild? We’d love to hear your thoughts. Please leave us a comment.</p>\n</div>\n', 'In the fight for the short attention span of our users, every performance gain, whether real or perceived, matters. This is especially true on mobile, where despite our best efforts at performance, a spotty signal can leave users waiting an interminable few seconds (or more) for content to load.\n\nDesign’s conventional answer to unpredictable wait times has long been the loading spinner; a looping animation that tells the user to “Hold on. Something’s coming,” whether that something is one or ten seconds away.\n\nMore recently, a design pattern known as progressive loading has gained popularity. With progressive loading, individual elements become visible on the page as soon as they’ve loaded, rather than displaying all at once. See the following example from Facebook:\n\n, ![](https://static.viget.com/facebook_loading4.gif?mtime=20171016140249)\n\nProgressive loading on the Facebook app\n\n,\n\nIn the Facebook example above, a skeleton of the page loads first. It’s essentially a wireframe of the page with placeholder boxes for text and images. \n\n, ![](https://static.viget.com/_189xAUTO_crop_center-center/facebook_skeleton@1x.png?mtime=20171016134723)\n\nFacebook\'s skeleton screen\n\n,\n\nProgressive loading with skeleton screens is thought to [benefit the user](https://www.lukew.com/ff/entry.asp?1797) by indicating that progress is being made, thereby shortening the perceived wait time. Google, Medium, and Slack all use skeleton screens to make their apps feel more performant.\n\nSo, should we all be using skeleton screens to make our apps feel faster? To answer this question, we decided to do some lean research into the effects of different loading techniques on perceived wait time.\n\nTest Design\n-----------\n\nWe created [a short test](https://viget.optimalworkshop.com/chalkmark/meal-delivery) for mobile devices that measured users’ perceived wait time for three different loading animations of identical length: a loading spinner, a skeleton screen, and a blank screen.\n\nThe quickest way to build the test was to use animated GIFs to simulate each loading animation and put them inside an existing testing framework. (We chose Chalkmark by Optimal Workshop.) Users who opted into the test from a mobile device were asked to complete a simple task and then randomly shown one of the GIFs. Following the task, which was a red herring, they were asked a series of follow-up questions about how long they waited for the page to load.\n\n, ![](https://static.viget.com/test_skeleton_only.gif?mtime=20171016141424)\n\nThe skeleton screen variant in the test we deployed\n\n,\n\n_Follow-up questions:_\n\n1.  Based just on what you can recall, please respond to the following statement: “The recipes loaded quickly for me.\" \\[Strongly agree, Moderately agree, Neutral, Moderately disagree, Strongly disagree, I didn’t notice\\]\n    \n2.  From what you can remember, estimate the amount of time it took for the meals to load. \\[1 second, 2 seconds, 3 seconds, 4 seconds, 5 seconds\\]\n    \n\nWe also measured the time it took users in each group to complete the red herring task. Based on some of the literature we’d read, it seemed plausible that a skeleton loader might actually speed up task completion by orienting users more quickly to the structure of the page.  \n\nRoughly half (70) of the participants were sourced through Amazon Mechanical Turk and paid for their participation. The rest were organically sourced through Viget’s social channels. The results were replicated across both groups of participants.\n\n### Hypotheses:\n\n1.  Users in the skeleton screen group will perceive the shortest wait time.\n    \n2.  Users in the skeleton screen group will complete the task most quickly.\n    \n\nResults\n-------\n\nWe gave the test to 136 people, and the skeleton screen performed the worst by all metrics. Users in the skeleton screen group took longer to complete the task, were more likely to evaluate their wait time negatively (by answering the first question with “Strongly disagree” or “Moderately disagree”), and guessed that the wait time had been longer than users who saw the loading spinner or a blank screen.  \n\n,\n\n#### Table 1. Test Results\n\n|   | ![Skeleton screen](https://static.viget.com/varA_skeleton.png) | ![Loading spinner](https://static.viget.com/varB_spinner.png) | ![Blank screen](https://static.viget.com/varC_blank.png) |\n|   | **Skeleton screen** | **Loading spinner** | **Blank screen** |\n| \nNumber of participants\n\n | 39 | 39 | 58 |\n| \n\nPercentage who **agreed** with the statement,  \n\"The meals loaded quickly for me.\"\n\n | 59% | 74% | 66% |\n| \n\nPercentage who **disagreed** with the statement,  \n\"The meals loaded quickly for me.\"\n\n | 36% | 10% | 26% |\n| \n\nAverage perceived wait time (seconds)\n\n | 2.82 | 2.41 | 2.29 |\n| \n\nPost-load task completion time (seconds)\n\n | 10.54 | 9.49 | 9.50 |\n\nThis table shows how participants responded, on average, to each of the three simulated loading animations.\n\n, ![](https://static.viget.com/test-all-three-variations.gif?mtime=20171020095259)\n\nAll three variations of the test\n\n,\n\nParticipants in the loading spinner group were most likely to evaluate their wait time positively (by answering the first question with “Strongly agree” or “Moderately agree”) and had a shorter average perceived wait time than those in the skeleton screen group.\n\nAnalysis\n--------\n\nThe unexpectedly weak performance of the skeleton screen may be due to one or more of the following reasons:\n\n1.  Skeleton screens are somewhat novel and attract more attention than the ubiquitous loading spinner.\n    \n2.  Skeleton screens work better in familiar interfaces and can be off-putting in new settings when users don’t know what to expect.\n    \n3.  Skeleton screens work best when wait times are very short.\n    \n\nOur hunch is that each of these reasons has some merit, but more testing is needed to know for certain. Either way, skeleton screens aren’t a silver bullet for increasing perceived performance and should be used thoughtfully.\n\nHave you implemented or experienced skeleton screens in the wild? We’d love to hear your thoughts. Please leave us a comment.', 0, 1, 0);
INSERT INTO `post` (`id`, `createAt`, `updateAt`, `title`, `description`, `thumb`, `url`, `html`, `markdown`, `views`, `status`, `push`) VALUES
(11, '2018-04-23 11:01:41.093414', '2018-04-23 11:01:41.093414', '【第1216期】最全最好用的动效落地方法、都帮你总结好了（上）', '前言提到动效很多前端同学可能会产生抵触心理。因为实现动效很麻烦。有些时候代码量很高，而且会影响页面性能、加载速度等等。但是界面动效并不是一种单纯为了炫技的东西、它是有很多现实意义的。所以你需要看看今天这篇。今日早读文章由@绿lvgreen授权分享。正文从这开始～用户体验设计的发展日趋完善，优秀的动效是完善用户体验中不可或缺的一环，优秀的界面动态设计可以让产品的用户体验锦上添花……停停停、不说套话了。你会说，这些道理我都懂、但是、但是、动效做起来真的很麻烦啊！直接切入到大家常见的问题吧：一般情况下、在沟通界', 'https://mmbiz.qpic.cn/mmbiz_png/meG6Vo0MevjKqicdfYELjwhYmsxgjyaYxAu9AuX1KwgZsSNahBUSic3zmibIib9RMhJjX08j28uiburs5GBPib0uWcEQ/640?wx_fmt=png', 'http://mp.weixin.qq.com/s/qpU2cw1Es7a_wM9Y35LyVg', '\n                    \n\n                    \n\n                    \n                    \n                    <p>前言<br></p><p class=\"p1\">提到动效很多前端同学可能会产生抵触心理。因为实现动效很麻烦。有些时候代码量很高，而且会影响页面性能、加载速度等等。但是界面动效并不是一种单纯为了炫技的东西、它是有很多现实意义的。所以你需要看看今天这篇。今日早读文章由@绿lvgreen授权分享。</p><p class=\"p1\"><br></p><p><img class=\"\" data-ratio=\"0.5305555555555556\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/meG6Vo0MevjKqicdfYELjwhYmsxgjyaYxAu9AuX1KwgZsSNahBUSic3zmibIib9RMhJjX08j28uiburs5GBPib0uWcEQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"1080\" style=\"\" src=\"https://mmbiz.qpic.cn/mmbiz_png/meG6Vo0MevjKqicdfYELjwhYmsxgjyaYxAu9AuX1KwgZsSNahBUSic3zmibIib9RMhJjX08j28uiburs5GBPib0uWcEQ/640?wx_fmt=png\"></p><p style=\"margin: 1.2em 0px !important;\">正文从这开始～</p><p style=\"margin: 1.2em 0px !important;\">用户体验设计的发展日趋完善，优秀的动效是完善用户体验中不可或缺的一环，优秀的界面动态设计可以让产品的用户体验锦上添花……</p><p style=\"margin: 1.2em 0px !important;\">停停停、不说套话了。你会说，这些道理我都懂、但是、但是、动效做起来真的很麻烦啊！<br></p><p style=\"text-align:center;\"><img class=\"\" data-copyright=\"0\" data-ratio=\"1.0437956204379562\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/meG6Vo0MevjKqicdfYELjwhYmsxgjyaYxjaxoOl7ibiafnw5HlnCalxDIn7XeQTZNpbdsiaXNhoaF0N3duhaQDEWgg/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"274\" src=\"https://mmbiz.qpic.cn/mmbiz_jpg/meG6Vo0MevjKqicdfYELjwhYmsxgjyaYxjaxoOl7ibiafnw5HlnCalxDIn7XeQTZNpbdsiaXNhoaF0N3duhaQDEWgg/640?wx_fmt=jpeg\"></p><p style=\"margin: 1.2em 0px !important;\">直接切入到大家常见的问题吧：</p><p style=\"margin: 1.2em 0px !important;\">一般情况下、在沟通界面动效的过程中、工程师会希望设计师使用更具体的表达方式。这里所谓“具体”的意思是：接近代码。然而同样的一套动效、在设计工具上和 Web 端上实现逻辑可能完全不一样。</p><p style=\"margin: 1.2em 0px !important;\">没有了精确的参数描述。设计师很难跟开发解释清楚要做一个什么样的动效。而只有简单的口头描述的话、开发做起来也很痛苦。导致最终开发效率低下。</p><p style=\"margin: 1.2em 0px !important;\">看到这里也许你会很抓狂。好消息是、随着却越来越多优秀开源库的诞生。动效的实现也变得越来越简单。甚至以后设计师都不用说服工程师了、自己可以直接上手在端上实现动画了。</p><p class=\"p1\">以 San 的官网（https://ecomfe.github.io/san/）为例、卡片 Hover 动效的设计和开发都是我做的。</p><p style=\"text-align:center;\"><img class=\"\" data-copyright=\"0\" data-ratio=\"0.534446764091858\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MevjKqicdfYELjwhYmsxgjyaYxJ8HAKyTBTJs0pylMIIjhhuAaKFRnbvTNicmCB6TQiakUbXGoCH1srYBQ/640?wx_fmt=gif\" data-type=\"gif\" data-w=\"479\" src=\"https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MevjKqicdfYELjwhYmsxgjyaYxJ8HAKyTBTJs0pylMIIjhhuAaKFRnbvTNicmCB6TQiakUbXGoCH1srYBQ/640?wx_fmt=gif\"></p><p style=\"margin: 1.2em 0px !important;\">虽然只是一个很简单的细节、却给人以惊喜，一定程度提高了网站的品质感。稍后在文章中我会告诉你们怎么做的^-^</p><p style=\"margin: 1.2em 0px !important;\">本着雷锋月的劳模精神、本篇教程会分为两个部分来详细阐述。最全最好用的动效落地方法、这里都帮你总结好了。</p><ul style=\"margin-left: 0px;margin-right: 0px;\" class=\" list-paddingleft-2\"><li><p>上篇：在界面设计中、什么样的动效是好动效？</p></li><li><p>下篇：从前端的角度来讲、有哪些便捷的方法实现这些动效？</p></li></ul><h4 style=\"margin: 1.3em 0px 1em;padding: 0px;font-weight: bold;font-size: 1.2em;\">什么样的动效是好动效</h4><p style=\"margin: 1.2em 0px !important;\">动效并不是设计师为了炫技设计出来的东西，它是有很多现实意义的。为了更加高效（心甘情愿）的去实现动效（做苦力）。我们首先需要知道什么动效是好动效。</p><p style=\"margin: 1.2em 0px !important;\">简单来讲。动效有以下三个方面的价值。</p><p><img class=\"\" data-copyright=\"0\" data-ratio=\"0.5625\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/meG6Vo0MevjKqicdfYELjwhYmsxgjyaYxIQqlG0XvLd2zDWIcrvygY2wpmyqLwZNCYA4J1WNQrlkS0lTEeqvrww/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"720\" style=\"\" src=\"https://mmbiz.qpic.cn/mmbiz_jpg/meG6Vo0MevjKqicdfYELjwhYmsxgjyaYxIQqlG0XvLd2zDWIcrvygY2wpmyqLwZNCYA4J1WNQrlkS0lTEeqvrww/640?wx_fmt=jpeg\"></p><p style=\"margin: 1.2em 0px !important;\"><span style=\"color: rgb(61, 167, 66);\">一、满足用户的心理预期</span></p><p style=\"margin: 1.2em 0px !important;\">我们生活在一个物理世界、任何事物的运动都是符合物理世界的客观规律的。因此、人对于事物的观察和理解都是出于对物理规律的理解。而虚拟界面上的元素都是现实世界中并不存在的东西，会让用户有陌生感。</p><p><img class=\"\" data-copyright=\"0\" data-ratio=\"0.5625\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/meG6Vo0MevjKqicdfYELjwhYmsxgjyaYx1ibMQ3KS4MiaHiaAMVO7nKF1qOIBiaysm5pED8YjR8TxPPJ90yZLohpxrw/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"720\" style=\"\" src=\"https://mmbiz.qpic.cn/mmbiz_jpg/meG6Vo0MevjKqicdfYELjwhYmsxgjyaYx1ibMQ3KS4MiaHiaAMVO7nKF1qOIBiaysm5pED8YjR8TxPPJ90yZLohpxrw/640?wx_fmt=jpeg\"></p><p style=\"margin: 1.2em 0px !important;\">通过合理的动效。让虚拟界面模拟物理世界的规律，例如惯性、视差等等、可以让这个虚拟的世界与物理世界产生交集。用户会把自己对物理世界的认知映射到对产品的认知上。</p><p style=\"margin: 1.2em 0px !important;\">下面举两个栗子来说说具体是怎么映射的：</p><p style=\"text-align:center;\"><img class=\"\" data-copyright=\"0\" data-ratio=\"0.46123260437375746\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MevjKqicdfYELjwhYmsxgjyaYxkDFjNfh866ibhdhseOlY9fdk2icr87V7m1Qd6a0lNiboKBo3uXibIKYcgQ/640?wx_fmt=gif\" data-type=\"gif\" data-w=\"503\" src=\"https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MevjKqicdfYELjwhYmsxgjyaYxkDFjNfh866ibhdhseOlY9fdk2icr87V7m1Qd6a0lNiboKBo3uXibIKYcgQ/640?wx_fmt=gif\"></p><p style=\"text-align:center;\"><br></p><ul style=\"margin-left: 0px;margin-right: 0px;\" class=\" list-paddingleft-2\"><li><p><span style=\"color: rgb(0, 122, 170);\">质量</span></p></li></ul><p style=\"margin: 1.2em 0px !important;\">物体都拥有质量，质量带来了我们最常见的物理现象：惯性。在这个例子中、方块在界面上通过加速、减速、反弹、过冲等等动态来模拟所谓的重量感，让这个简单的界面元素有了实在感。</p><p style=\"text-align:center;\"><img class=\"\" data-copyright=\"0\" data-ratio=\"0.7219251336898396\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MevjKqicdfYELjwhYmsxgjyaYxFquaWCt1H6mjPwXTN7kDxIXROwosu03VZaEhwd2KwyFvPmGjfUmTGw/640?wx_fmt=gif\" data-type=\"gif\" data-w=\"374\" src=\"https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MevjKqicdfYELjwhYmsxgjyaYxFquaWCt1H6mjPwXTN7kDxIXROwosu03VZaEhwd2KwyFvPmGjfUmTGw/640?wx_fmt=gif\"></p><p style=\"text-align:center;\"><br></p><ul style=\"margin-left: 0px;margin-right: 0px;\" class=\" list-paddingleft-2\"><li><p><span style=\"color: rgb(0, 122, 170);\">空间</span></p></li></ul><p style=\"margin: 1.2em 0px !important;\">我们所处的世界是三维的、然而受显示设备的影响，目前大家接触的大部分人机界面还是二维的、如何通过一个二维平面来模拟三维的世界呢？</p><p style=\"margin: 1.2em 0px !important;\">在这个例子中、近处的方块运动的快，远处的方块运动的远。通过这样的视差的效果、整个屏幕有纵深感，不再是一个简单的二维平面。我们很容易感受到，方块间的层叠顺序。同理、类似简单的动效、可以很轻易的表达元素的层级。</p><p style=\"margin: 1.2em 0px !important;\">小结：合理的动效可以满足用户的心理预期、越是符合人对物理世界认知的设计、就越容易帮助用户去预判或者理解产品的交互逻辑。</p><p style=\"margin: 1.2em 0px !important;\"><span style=\"color: rgb(61, 167, 66);\">二、引导用户注意力</span></p><p style=\"margin: 1.2em 0px !important;\">如果把一个界面上的所有元素、按照明显程度来排序，显而易见我们会得到这样一个顺序：<br></p><p style=\"text-align:center;\"><img class=\"\" data-copyright=\"0\" data-ratio=\"0.5343137254901961\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MevjKqicdfYELjwhYmsxgjyaYxdMzDTREGgjWLeSDvyeibU8cWOibg3yAWqgOVQuEt2SkEn6uibsta20ic0A/640?wx_fmt=gif\" data-type=\"gif\" data-w=\"408\" src=\"https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MevjKqicdfYELjwhYmsxgjyaYxdMzDTREGgjWLeSDvyeibU8cWOibg3yAWqgOVQuEt2SkEn6uibsta20ic0A/640?wx_fmt=gif\"></p><p style=\"margin: 1.2em 0px !important;\">动态  > 色彩 >  明度</p><p style=\"margin: 1.2em 0px !important;\">所以通过合理的动效，可以低成本的抓取人的注意力，让他们关注设计师想让他们关注的东西。</p><p style=\"margin: 1.2em 0px !important;\">网易新闻的刷新动画、就是一个很优秀的栗子：</p><p style=\"text-align:center;\"><img class=\"\" data-copyright=\"0\" data-ratio=\"1.7777777777777777\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MevjKqicdfYELjwhYmsxgjyaYxPPVQGSb0pk45AKJCcngPhdUoFd0rAax7ZxYzOkMJadno4GT0qE6Ahg/640?wx_fmt=gif\" data-type=\"gif\" data-w=\"378\" src=\"https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MevjKqicdfYELjwhYmsxgjyaYxPPVQGSb0pk45AKJCcngPhdUoFd0rAax7ZxYzOkMJadno4GT0qE6Ahg/640?wx_fmt=gif\"></p><p style=\"margin: 1.2em 0px !important;\">在这个例子中、左上角有一个非常简单的白色线状 icon，并不会干扰整个页面的主功能，颜色，以及视觉。但是通过小的动画，提升了 icon 的视觉层级。让我们很容易注意到它。起到了非常好的提示效果。</p><p style=\"margin: 1.2em 0px !important;\"><span style=\"color: rgb(61, 167, 66);\">三、情感化设计</span></p><p><img class=\"\" data-copyright=\"0\" data-ratio=\"0.5625\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/meG6Vo0MevjKqicdfYELjwhYmsxgjyaYx2ibYFUYLibRFL7MbjMdibEF4cZ4DXdiaPCnOs5KOCsV5IownAeakoxUQdg/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"720\" style=\"\" src=\"https://mmbiz.qpic.cn/mmbiz_jpg/meG6Vo0MevjKqicdfYELjwhYmsxgjyaYx2ibYFUYLibRFL7MbjMdibEF4cZ4DXdiaPCnOs5KOCsV5IownAeakoxUQdg/640?wx_fmt=jpeg\"></p><p style=\"margin: 1.2em 0px !important;\">情感话设计的目标是在用户接触和使用产品的过程中，激发用户的正向情感，比如愉快，信任，满足；避免用户产生负向情感，比如失望，挫折感，痛苦。正向的情感会使用户更乐于使用产品，遇到使用过程的一些小问题也更加包容。</p><p style=\"margin: 1.2em 0px !important;\">而优良的界面动效可以打磨产品的品质感，下面就是动效在情感化设计中的优秀栗子：</p><p style=\"text-align:center;\"><img class=\"\" data-copyright=\"0\" data-ratio=\"0.7039473684210527\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MevjKqicdfYELjwhYmsxgjyaYx948xdwatuxVQ2ypsNzcDK6z9p8wx6ib1tmHSkkacB7k5KsOtGhfF1Xg/640?wx_fmt=gif\" data-type=\"gif\" data-w=\"304\" src=\"https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MevjKqicdfYELjwhYmsxgjyaYx948xdwatuxVQ2ypsNzcDK6z9p8wx6ib1tmHSkkacB7k5KsOtGhfF1Xg/640?wx_fmt=gif\"></p><p style=\"margin: 1.2em 0px !important;\">twitter 点赞后、心会亮起的同时、还有一个小小的礼花效果。虽然完全没必要加上这个礼花效果，但是这种丰富的细节会让用户对产品产生一个正向的情感关联，而这种关联最终将赢得用户对产品的认同。<br></p><p style=\"text-align:center;\"><img class=\"\" data-copyright=\"0\" data-ratio=\"1.1973684210526316\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MevjKqicdfYELjwhYmsxgjyaYx9ztG3Vmic015RCxeEzVIoXye9tT0Uuu9tWFJxKZg99GcDfyPIZKBwYg/640?wx_fmt=gif\" data-type=\"gif\" data-w=\"304\" src=\"https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MevjKqicdfYELjwhYmsxgjyaYx9ztG3Vmic015RCxeEzVIoXye9tT0Uuu9tWFJxKZg99GcDfyPIZKBwYg/640?wx_fmt=gif\"></p><p style=\"margin: 1.2em 0px !important;\">Facebook点赞之后、可以表达你的态度，比如流泪，愤怒或者是赞。虽然在功能上来说、这些表情有静态的就可以了。但是正是动画中丰富的表情细节，进一步引导用户愿意去表态。不仅给人以惊喜、也显著的提升表态的使用量。</p><p style=\"margin: 1.2em 0px !important;\">动效的价值就讲到这里、接下来、基于以上三点，我会说一说怎样去构建一个合理高效的动效体系。<br></p><p><img class=\"\" data-copyright=\"0\" data-ratio=\"0.5625\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/meG6Vo0MevjKqicdfYELjwhYmsxgjyaYxZxhFGkibJf4SrolJk6cBG9coIcNGrQ9gImINIiad6lGbxE83ibM2xVMicw/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"720\" style=\"\" src=\"https://mmbiz.qpic.cn/mmbiz_jpg/meG6Vo0MevjKqicdfYELjwhYmsxgjyaYxZxhFGkibJf4SrolJk6cBG9coIcNGrQ9gImINIiad6lGbxE83ibM2xVMicw/640?wx_fmt=jpeg\"></p><p style=\"margin: 1.2em 0px !important;\">优秀的界面动效体系符合以下四点原则：</p><ol style=\"margin-left: 0px;margin-right: 0px;\" class=\" list-paddingleft-2\"><li><p>通过动效暗示二维界面暗含的三维层级关系，及其暗含的操作逻辑</p></li><li><p>引导用户的注意力向界面重点元素</p></li><li><p>通过动态设计让情感化设计变得更生动</p></li><li><p>动效的视觉效果统一，控制数量，不滥用</p></li></ol><p style=\"margin: 1.2em 0px !important;\">接下来用 iOS 系统动效来举例子、众所周知  iOS 的动效系统经过了多次的迭代、已经做的非常完美、而上述四点、在接下来的例子中都有体现。<br></p><p style=\"text-align:center;\"><img class=\"\" data-copyright=\"0\" data-ratio=\"1.7763157894736843\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MevjKqicdfYELjwhYmsxgjyaYxYFtVIvJJyrpeeUoiaFwSriayM7kzQzxibDs6a7oQmnGCzGicOZDT7SF1qg/640?wx_fmt=gif\" data-type=\"gif\" data-w=\"304\" src=\"https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MevjKqicdfYELjwhYmsxgjyaYxYFtVIvJJyrpeeUoiaFwSriayM7kzQzxibDs6a7oQmnGCzGicOZDT7SF1qg/640?wx_fmt=gif\"></p><p style=\"margin: 1.2em 0px !important;\"><span style=\"color: rgb(0, 122, 170);\">层级暗示</span></p><p style=\"margin: 1.2em 0px !important;\">切换界面的时候、所有打开的 APP 界面覆盖在刚才的主界面上面、同时主界面模糊，内容区域的缩小，共同营造出原来界面往深处后退的效果。很直观的表达了主界面和 APP界面的层级关系。<br></p><p style=\"text-align:center;\"><img class=\"\" data-copyright=\"0\" data-ratio=\"1.7763157894736843\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MevjKqicdfYELjwhYmsxgjyaYx13VLApVHFKNTmcjt7uyrZIxeDnjnZ5FJquF0hoOLUUGEj8UWDdh0Ig/640?wx_fmt=gif\" data-type=\"gif\" data-w=\"304\" src=\"https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MevjKqicdfYELjwhYmsxgjyaYx13VLApVHFKNTmcjt7uyrZIxeDnjnZ5FJquF0hoOLUUGEj8UWDdh0Ig/640?wx_fmt=gif\"></p><p style=\"margin: 1.2em 0px !important;\">在键盘机的时代、通过菜单进入一个新页面的时候、通常做法是整个页面刷新一下、但是这样操作久了、打开菜单太多、很容易让人有一种『迷路』的困惑。在这个动画中、通过界面的左滑、右滑来表达不同界面之间的层级关系。即使看不到主菜单、你也知道自己是从哪儿进来的。</p><p style=\"margin: 1.2em 0px !important;\"><span style=\"color: rgb(0, 122, 170);\">操作暗示</span><br></p><p style=\"text-align:center;\"><img class=\"\" data-copyright=\"0\" data-ratio=\"1.7763157894736843\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MevjKqicdfYELjwhYmsxgjyaYxusQiaXAujTT1LILcAULWC3jjia7Fy44WYdIC6mIia4Pz40BJcm8aMDYzQ/640?wx_fmt=gif\" data-type=\"gif\" data-w=\"304\" src=\"https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MevjKqicdfYELjwhYmsxgjyaYxusQiaXAujTT1LILcAULWC3jjia7Fy44WYdIC6mIia4Pz40BJcm8aMDYzQ/640?wx_fmt=gif\"></p><p style=\"margin: 1.2em 0px !important;\">在这个例子中、长按一个 图标进入编辑模式、所有图标都会开始晃动。虽然整个页面并没有任何文字提示说明『现在图标可以拖动的』，但是这种抖动的不稳定感很直观的表达了设计者的意图。</p><p style=\"text-align:center;\"><img class=\"\" data-copyright=\"0\" data-ratio=\"1.7777777777777777\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MevjKqicdfYELjwhYmsxgjyaYx8Um2NSE3lw5pWPSA9chKUWD2ibZCyMl9pn48pibnibUsPk9y2XVSdMkJQ/640?wx_fmt=gif\" data-type=\"gif\" data-w=\"324\" src=\"https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MevjKqicdfYELjwhYmsxgjyaYx8Um2NSE3lw5pWPSA9chKUWD2ibZCyMl9pn48pibnibUsPk9y2XVSdMkJQ/640?wx_fmt=gif\"></p><p style=\"margin: 1.2em 0px !important;\">当输入密码错误的时候、密码输入栏会显示出一个摇头的效果。完全可以想象、假设用一个错误提示的弹窗，不仅会中断用户的操作流程，引起人的反感、而且很容易让人受挫。通过动效，设计者用一种更友好简单的方式达到了提示的目的。</p><p style=\"margin: 1.2em 0px !important;\"><span style=\"color: rgb(0, 122, 170);\">趣味</span></p><p style=\"text-align:center;\"><img class=\"\" data-copyright=\"0\" data-ratio=\"0.5199004975124378\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MevjKqicdfYELjwhYmsxgjyaYx5NM5TIP8PTdkSb5MFyia1P5d9NL4ZKQHLwN1asza7Fz3M53DGia8dcfA/640?wx_fmt=gif\" data-type=\"gif\" data-w=\"402\" style=\"text-align: center;\" src=\"https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MevjKqicdfYELjwhYmsxgjyaYx5NM5TIP8PTdkSb5MFyia1P5d9NL4ZKQHLwN1asza7Fz3M53DGia8dcfA/640?wx_fmt=gif\"></p><p style=\"margin: 1.2em 0px !important;\">这里是开关状态的过度，我们可以看到月亮会有盈亏、锁的状态有锁上和开启两种。这些有趣味的细节动效给用户带来惊喜，提升界面的品质。<br><span style=\"color: rgb(0, 122, 170);\"></span></p><p style=\"margin: 1.2em 0px !important;\"><span style=\"color: rgb(0, 122, 170);\">克制</span></p><p style=\"text-align:center;\"><img class=\"\" data-copyright=\"0\" data-ratio=\"0.75\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MevjKqicdfYELjwhYmsxgjyaYxHPRnhLOUCqE0cCMxetRszkfrbmy8Zda38JMEdFRoVL9ZYY98AI7Ilw/640?wx_fmt=gif\" data-type=\"gif\" data-w=\"560\" src=\"https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MevjKqicdfYELjwhYmsxgjyaYxHPRnhLOUCqE0cCMxetRszkfrbmy8Zda38JMEdFRoVL9ZYY98AI7Ilw/640?wx_fmt=gif\"></p><p style=\"margin: 1.2em 0px !important;\">举了那么多正面例子、下面也说两个反例。这两张图都是我在dribbble找到的点赞量非常高的图。但是实际上、完全不推荐在产品中使用这样的效果。</p><p style=\"margin: 1.2em 0px !important;\">动效不能滥用，要控制数量。在这页面中、所有东西都在动。很难让人抓住视觉重心。当菜单栏下滑的时候，每一个菜单都会有一个抖动的效果。我们并不知道这个菜单为什么要这样颤，看起来作者只是为了炫技这么做、实际上并没有传达任何的内容，还会无形的增加了用户的操作负担。</p><p style=\"text-align:center;\"><img class=\"\" data-copyright=\"0\" data-ratio=\"0.75\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MevjKqicdfYELjwhYmsxgjyaYxxicDVxgVeIibPejBNnIY3ic2zwsicfgZM2lxrZyzJ8T3RO1FQEKEKOQTww/640?wx_fmt=gif\" data-type=\"gif\" data-w=\"600\" src=\"https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MevjKqicdfYELjwhYmsxgjyaYxxicDVxgVeIibPejBNnIY3ic2zwsicfgZM2lxrZyzJ8T3RO1FQEKEKOQTww/640?wx_fmt=gif\"></p><p style=\"margin: 1.2em 0px !important;\">好的动效要控制在0.3——0.5秒、本例中、菜单出现几乎花费了一秒。频繁打开菜单很容易引起人的疲倦。可以说是画蛇添足了。</p><h4 style=\"margin: 1.3em 0px 1em;padding: 0px;font-weight: bold;font-size: 1.2em;\">小结</h4><p style=\"margin: 1.2em 0px !important;\">上篇就讲到这里，本篇里面我们了解了界面动效的价值：</p><ol style=\"margin-left: 0px;margin-right: 0px;\" class=\" list-paddingleft-2\"><li><p>满足用户心理预期</p></li><li><p>引导用户注意力</p></li><li><p>情感化设计</p></li></ol><p style=\"margin: 1.2em 0px !important;\">也接触到一下优秀的界面动效实例：</p><ol style=\"margin-left: 0px;margin-right: 0px;\" class=\" list-paddingleft-2\"><li><p>过动效暗示二维界面暗含的三维层级关系，及其暗含的操作逻辑</p></li><li><p>引导用户的注意力向界面重点元素</p></li><li><p>通过动态设计让情感化设计变得更生动</p></li><li><p>动效的视觉效果统一，控制数量，不滥用</p></li></ol><p><br></p><p>在下篇中我会讲讲有哪些便捷的方式去实现这些优秀动效、敬请期待~</p><p style=\"margin: 1.2em 0px !important;\">最后，Ta曾分享过：</p><p style=\"margin: 1.2em 0px !important;\"><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5MTA1MjAxMQ==&mid=2651227926&idx=1&sn=78e203ab8891048ceb42ce8aaf0c260f&chksm=bd495e928a3ed784e9e0ab7fffd47c05fe9fd214776733a3cbfa6e23888247d1a7e48a7e3b18&scene=21#wechat_redirect\" target=\"_blank\">【第1210期】前端开发、交互、视觉是怎么合作完成工作的</a><br></p><p style=\"margin: 1.2em 0px !important;\">关于本文<br>作者：@绿lvgreen<br>原文：https://zhuanlan.zhihu.com/p/34501702</p><p><img class=\"\" data-copyright=\"0\" data-ratio=\"0.4166666666666667\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/meG6Vo0MeviaI3ygODW7eicw9kuwH7hI2nfLVTFFnWAldicwibygyMhibRSLSrqqicDrMWA0a8AcZn1OmkLW4BibV9z6Q/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"720\" style=\"\" src=\"https://mmbiz.qpic.cn/mmbiz_jpg/meG6Vo0MeviaI3ygODW7eicw9kuwH7hI2nfLVTFFnWAldicwibygyMhibRSLSrqqicDrMWA0a8AcZn1OmkLW4BibV9z6Q/640?wx_fmt=jpeg\"></p><p class=\"p1\">最后最后，本文引用的例子来自为百度新出的轮子 San。San Framework <span class=\"s1\">https://ecomfe.github.io/san/</span>，介系里没有用过的全新版本，挤需体验三番钟，里造会干我一样，爱象借款框架。点一瞎，用一连，框架不花一昏钱，前端想要的船部都由。系兄弟，就一挤来砍 IE，一挤玩</p><p class=\"p1\"><br></p><p class=\"p1\">推荐理由：</p><ul class=\" list-paddingleft-2\" style=\"list-style-type: disc;\"><li><p class=\"p1\">与 Vue 相似的开发体验（稍逊于 Vue），学习成本较低</p></li><li><p class=\"p1\">兼容性足够好（IE6+）</p></li><li><p class=\"p1\">足够小（12kb），不会对网络造成太多负担</p></li><li><p class=\"p1\">支持传统 SSR</p></li><li><p class=\"p1\">组件反解，与非 Node.JS 后端渲染无缝对接 </p></li></ul>\n                ', '前言  \n\n提到动效很多前端同学可能会产生抵触心理。因为实现动效很麻烦。有些时候代码量很高，而且会影响页面性能、加载速度等等。但是界面动效并不是一种单纯为了炫技的东西、它是有很多现实意义的。所以你需要看看今天这篇。今日早读文章由@绿lvgreen授权分享。\n\n  \n\n![](https://mmbiz.qpic.cn/mmbiz_png/meG6Vo0MevjKqicdfYELjwhYmsxgjyaYxAu9AuX1KwgZsSNahBUSic3zmibIib9RMhJjX08j28uiburs5GBPib0uWcEQ/640?wx_fmt=png)\n\n正文从这开始～\n\n用户体验设计的发展日趋完善，优秀的动效是完善用户体验中不可或缺的一环，优秀的界面动态设计可以让产品的用户体验锦上添花……\n\n停停停、不说套话了。你会说，这些道理我都懂、但是、但是、动效做起来真的很麻烦啊！  \n\n![](https://mmbiz.qpic.cn/mmbiz_jpg/meG6Vo0MevjKqicdfYELjwhYmsxgjyaYxjaxoOl7ibiafnw5HlnCalxDIn7XeQTZNpbdsiaXNhoaF0N3duhaQDEWgg/640?wx_fmt=jpeg)\n\n直接切入到大家常见的问题吧：\n\n一般情况下、在沟通界面动效的过程中、工程师会希望设计师使用更具体的表达方式。这里所谓“具体”的意思是：接近代码。然而同样的一套动效、在设计工具上和 Web 端上实现逻辑可能完全不一样。\n\n没有了精确的参数描述。设计师很难跟开发解释清楚要做一个什么样的动效。而只有简单的口头描述的话、开发做起来也很痛苦。导致最终开发效率低下。\n\n看到这里也许你会很抓狂。好消息是、随着却越来越多优秀开源库的诞生。动效的实现也变得越来越简单。甚至以后设计师都不用说服工程师了、自己可以直接上手在端上实现动画了。\n\n以 San 的官网（https://ecomfe.github.io/san/）为例、卡片 Hover 动效的设计和开发都是我做的。\n\n![](https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MevjKqicdfYELjwhYmsxgjyaYxJ8HAKyTBTJs0pylMIIjhhuAaKFRnbvTNicmCB6TQiakUbXGoCH1srYBQ/640?wx_fmt=gif)\n\n虽然只是一个很简单的细节、却给人以惊喜，一定程度提高了网站的品质感。稍后在文章中我会告诉你们怎么做的^-^\n\n本着雷锋月的劳模精神、本篇教程会分为两个部分来详细阐述。最全最好用的动效落地方法、这里都帮你总结好了。\n\n*   上篇：在界面设计中、什么样的动效是好动效？\n    \n*   下篇：从前端的角度来讲、有哪些便捷的方法实现这些动效？\n    \n\n#### 什么样的动效是好动效\n\n动效并不是设计师为了炫技设计出来的东西，它是有很多现实意义的。为了更加高效（心甘情愿）的去实现动效（做苦力）。我们首先需要知道什么动效是好动效。\n\n简单来讲。动效有以下三个方面的价值。\n\n![](https://mmbiz.qpic.cn/mmbiz_jpg/meG6Vo0MevjKqicdfYELjwhYmsxgjyaYxIQqlG0XvLd2zDWIcrvygY2wpmyqLwZNCYA4J1WNQrlkS0lTEeqvrww/640?wx_fmt=jpeg)\n\n一、满足用户的心理预期\n\n我们生活在一个物理世界、任何事物的运动都是符合物理世界的客观规律的。因此、人对于事物的观察和理解都是出于对物理规律的理解。而虚拟界面上的元素都是现实世界中并不存在的东西，会让用户有陌生感。\n\n![](https://mmbiz.qpic.cn/mmbiz_jpg/meG6Vo0MevjKqicdfYELjwhYmsxgjyaYx1ibMQ3KS4MiaHiaAMVO7nKF1qOIBiaysm5pED8YjR8TxPPJ90yZLohpxrw/640?wx_fmt=jpeg)\n\n通过合理的动效。让虚拟界面模拟物理世界的规律，例如惯性、视差等等、可以让这个虚拟的世界与物理世界产生交集。用户会把自己对物理世界的认知映射到对产品的认知上。\n\n下面举两个栗子来说说具体是怎么映射的：\n\n![](https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MevjKqicdfYELjwhYmsxgjyaYxkDFjNfh866ibhdhseOlY9fdk2icr87V7m1Qd6a0lNiboKBo3uXibIKYcgQ/640?wx_fmt=gif)\n\n  \n\n*   质量\n    \n\n物体都拥有质量，质量带来了我们最常见的物理现象：惯性。在这个例子中、方块在界面上通过加速、减速、反弹、过冲等等动态来模拟所谓的重量感，让这个简单的界面元素有了实在感。\n\n![](https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MevjKqicdfYELjwhYmsxgjyaYxFquaWCt1H6mjPwXTN7kDxIXROwosu03VZaEhwd2KwyFvPmGjfUmTGw/640?wx_fmt=gif)\n\n  \n\n*   空间\n    \n\n我们所处的世界是三维的、然而受显示设备的影响，目前大家接触的大部分人机界面还是二维的、如何通过一个二维平面来模拟三维的世界呢？\n\n在这个例子中、近处的方块运动的快，远处的方块运动的远。通过这样的视差的效果、整个屏幕有纵深感，不再是一个简单的二维平面。我们很容易感受到，方块间的层叠顺序。同理、类似简单的动效、可以很轻易的表达元素的层级。\n\n小结：合理的动效可以满足用户的心理预期、越是符合人对物理世界认知的设计、就越容易帮助用户去预判或者理解产品的交互逻辑。\n\n二、引导用户注意力\n\n如果把一个界面上的所有元素、按照明显程度来排序，显而易见我们会得到这样一个顺序：  \n\n![](https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MevjKqicdfYELjwhYmsxgjyaYxdMzDTREGgjWLeSDvyeibU8cWOibg3yAWqgOVQuEt2SkEn6uibsta20ic0A/640?wx_fmt=gif)\n\n动态  > 色彩 \\>  明度\n\n所以通过合理的动效，可以低成本的抓取人的注意力，让他们关注设计师想让他们关注的东西。\n\n网易新闻的刷新动画、就是一个很优秀的栗子：\n\n![](https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MevjKqicdfYELjwhYmsxgjyaYxPPVQGSb0pk45AKJCcngPhdUoFd0rAax7ZxYzOkMJadno4GT0qE6Ahg/640?wx_fmt=gif)\n\n在这个例子中、左上角有一个非常简单的白色线状 icon，并不会干扰整个页面的主功能，颜色，以及视觉。但是通过小的动画，提升了 icon 的视觉层级。让我们很容易注意到它。起到了非常好的提示效果。\n\n三、情感化设计\n\n![](https://mmbiz.qpic.cn/mmbiz_jpg/meG6Vo0MevjKqicdfYELjwhYmsxgjyaYx2ibYFUYLibRFL7MbjMdibEF4cZ4DXdiaPCnOs5KOCsV5IownAeakoxUQdg/640?wx_fmt=jpeg)\n\n情感话设计的目标是在用户接触和使用产品的过程中，激发用户的正向情感，比如愉快，信任，满足；避免用户产生负向情感，比如失望，挫折感，痛苦。正向的情感会使用户更乐于使用产品，遇到使用过程的一些小问题也更加包容。\n\n而优良的界面动效可以打磨产品的品质感，下面就是动效在情感化设计中的优秀栗子：\n\n![](https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MevjKqicdfYELjwhYmsxgjyaYx948xdwatuxVQ2ypsNzcDK6z9p8wx6ib1tmHSkkacB7k5KsOtGhfF1Xg/640?wx_fmt=gif)\n\ntwitter 点赞后、心会亮起的同时、还有一个小小的礼花效果。虽然完全没必要加上这个礼花效果，但是这种丰富的细节会让用户对产品产生一个正向的情感关联，而这种关联最终将赢得用户对产品的认同。  \n\n![](https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MevjKqicdfYELjwhYmsxgjyaYx9ztG3Vmic015RCxeEzVIoXye9tT0Uuu9tWFJxKZg99GcDfyPIZKBwYg/640?wx_fmt=gif)\n\nFacebook点赞之后、可以表达你的态度，比如流泪，愤怒或者是赞。虽然在功能上来说、这些表情有静态的就可以了。但是正是动画中丰富的表情细节，进一步引导用户愿意去表态。不仅给人以惊喜、也显著的提升表态的使用量。\n\n动效的价值就讲到这里、接下来、基于以上三点，我会说一说怎样去构建一个合理高效的动效体系。  \n\n![](https://mmbiz.qpic.cn/mmbiz_jpg/meG6Vo0MevjKqicdfYELjwhYmsxgjyaYxZxhFGkibJf4SrolJk6cBG9coIcNGrQ9gImINIiad6lGbxE83ibM2xVMicw/640?wx_fmt=jpeg)\n\n优秀的界面动效体系符合以下四点原则：\n\n1.  通过动效暗示二维界面暗含的三维层级关系，及其暗含的操作逻辑\n    \n2.  引导用户的注意力向界面重点元素\n    \n3.  通过动态设计让情感化设计变得更生动\n    \n4.  动效的视觉效果统一，控制数量，不滥用\n    \n\n接下来用 iOS 系统动效来举例子、众所周知  iOS 的动效系统经过了多次的迭代、已经做的非常完美、而上述四点、在接下来的例子中都有体现。  \n\n![](https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MevjKqicdfYELjwhYmsxgjyaYxYFtVIvJJyrpeeUoiaFwSriayM7kzQzxibDs6a7oQmnGCzGicOZDT7SF1qg/640?wx_fmt=gif)\n\n层级暗示\n\n切换界面的时候、所有打开的 APP 界面覆盖在刚才的主界面上面、同时主界面模糊，内容区域的缩小，共同营造出原来界面往深处后退的效果。很直观的表达了主界面和 APP界面的层级关系。  \n\n![](https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MevjKqicdfYELjwhYmsxgjyaYx13VLApVHFKNTmcjt7uyrZIxeDnjnZ5FJquF0hoOLUUGEj8UWDdh0Ig/640?wx_fmt=gif)\n\n在键盘机的时代、通过菜单进入一个新页面的时候、通常做法是整个页面刷新一下、但是这样操作久了、打开菜单太多、很容易让人有一种『迷路』的困惑。在这个动画中、通过界面的左滑、右滑来表达不同界面之间的层级关系。即使看不到主菜单、你也知道自己是从哪儿进来的。\n\n操作暗示  \n\n![](https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MevjKqicdfYELjwhYmsxgjyaYxusQiaXAujTT1LILcAULWC3jjia7Fy44WYdIC6mIia4Pz40BJcm8aMDYzQ/640?wx_fmt=gif)\n\n在这个例子中、长按一个 图标进入编辑模式、所有图标都会开始晃动。虽然整个页面并没有任何文字提示说明『现在图标可以拖动的』，但是这种抖动的不稳定感很直观的表达了设计者的意图。\n\n![](https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MevjKqicdfYELjwhYmsxgjyaYx8Um2NSE3lw5pWPSA9chKUWD2ibZCyMl9pn48pibnibUsPk9y2XVSdMkJQ/640?wx_fmt=gif)\n\n当输入密码错误的时候、密码输入栏会显示出一个摇头的效果。完全可以想象、假设用一个错误提示的弹窗，不仅会中断用户的操作流程，引起人的反感、而且很容易让人受挫。通过动效，设计者用一种更友好简单的方式达到了提示的目的。\n\n趣味\n\n![](https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MevjKqicdfYELjwhYmsxgjyaYx5NM5TIP8PTdkSb5MFyia1P5d9NL4ZKQHLwN1asza7Fz3M53DGia8dcfA/640?wx_fmt=gif)\n\n这里是开关状态的过度，我们可以看到月亮会有盈亏、锁的状态有锁上和开启两种。这些有趣味的细节动效给用户带来惊喜，提升界面的品质。  \n\n克制\n\n![](https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MevjKqicdfYELjwhYmsxgjyaYxHPRnhLOUCqE0cCMxetRszkfrbmy8Zda38JMEdFRoVL9ZYY98AI7Ilw/640?wx_fmt=gif)\n\n举了那么多正面例子、下面也说两个反例。这两张图都是我在dribbble找到的点赞量非常高的图。但是实际上、完全不推荐在产品中使用这样的效果。\n\n动效不能滥用，要控制数量。在这页面中、所有东西都在动。很难让人抓住视觉重心。当菜单栏下滑的时候，每一个菜单都会有一个抖动的效果。我们并不知道这个菜单为什么要这样颤，看起来作者只是为了炫技这么做、实际上并没有传达任何的内容，还会无形的增加了用户的操作负担。\n\n![](https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MevjKqicdfYELjwhYmsxgjyaYxxicDVxgVeIibPejBNnIY3ic2zwsicfgZM2lxrZyzJ8T3RO1FQEKEKOQTww/640?wx_fmt=gif)\n\n好的动效要控制在0.3——0.5秒、本例中、菜单出现几乎花费了一秒。频繁打开菜单很容易引起人的疲倦。可以说是画蛇添足了。\n\n#### 小结\n\n上篇就讲到这里，本篇里面我们了解了界面动效的价值：\n\n1.  满足用户心理预期\n    \n2.  引导用户注意力\n    \n3.  情感化设计\n    \n\n也接触到一下优秀的界面动效实例：\n\n1.  过动效暗示二维界面暗含的三维层级关系，及其暗含的操作逻辑\n    \n2.  引导用户的注意力向界面重点元素\n    \n3.  通过动态设计让情感化设计变得更生动\n    \n4.  动效的视觉效果统一，控制数量，不滥用\n    \n\n  \n\n在下篇中我会讲讲有哪些便捷的方式去实现这些优秀动效、敬请期待~\n\n最后，Ta曾分享过：\n\n[【第1210期】前端开发、交互、视觉是怎么合作完成工作的](http://mp.weixin.qq.com/s?__biz=MjM5MTA1MjAxMQ==&mid=2651227926&idx=1&sn=78e203ab8891048ceb42ce8aaf0c260f&chksm=bd495e928a3ed784e9e0ab7fffd47c05fe9fd214776733a3cbfa6e23888247d1a7e48a7e3b18&scene=21#wechat_redirect)  \n\n关于本文  \n作者：@绿lvgreen  \n原文：https://zhuanlan.zhihu.com/p/34501702\n\n![](https://mmbiz.qpic.cn/mmbiz_jpg/meG6Vo0MeviaI3ygODW7eicw9kuwH7hI2nfLVTFFnWAldicwibygyMhibRSLSrqqicDrMWA0a8AcZn1OmkLW4BibV9z6Q/640?wx_fmt=jpeg)\n\n最后最后，本文引用的例子来自为百度新出的轮子 San。San Framework https://ecomfe.github.io/san/，介系里没有用过的全新版本，挤需体验三番钟，里造会干我一样，爱象借款框架。点一瞎，用一连，框架不花一昏钱，前端想要的船部都由。系兄弟，就一挤来砍 IE，一挤玩\n\n  \n\n推荐理由：\n\n*   与 Vue 相似的开发体验（稍逊于 Vue），学习成本较低\n    \n*   兼容性足够好（IE6+）\n    \n*   足够小（12kb），不会对网络造成太多负担\n    \n*   支持传统 SSR\n    \n*   组件反解，与非 Node.JS 后端渲染无缝对接', 0, 1, 0),
(12, '2018-04-23 11:01:41.119206', '2018-04-23 11:01:41.119206', 'Angular5.0.0新特性', '文章来自官网部分翻译https://blog.angular.io/version-5-0-0-of-angular-now-available-37e414935cedAngular5.0.0版本已经正式发布总结一下v5.0.0带来的新变化都有哪些。1.构建优化5.0版本默认采用CLI构建和打包。构建优化器是包含在CLI里面的一个工具，通过对你的应用程序更加语义化的理解可以使得你的打包程序(bundle)更小。构建优化器有两个主要工作。第一，我们可以将应用程序的一部分标记为纯应用(pure)，改进了现有', 'https://user-gold-cdn.xitu.io/2017/11/2/98416703141cce18cf73e3f1c8314e85?imageView2/0/w/1280/h/960/ignore-error/1', 'https://www.cnblogs.com/besuccess/p/Angular.html', '<p>文章来自官网部分翻译<br><code>https://blog.angular.io/version-5-0-0-of-angular-now-available-37e414935ced</code></p>\n<p>Angular5.0.0版本已经正式发布</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2017/11/2/98416703141cce18cf73e3f1c8314e85?imageView2/0/w/1280/h/960/ignore-error/1\" alt=\"\"></p>\n<p> </p>\n<p><span style=\"font-size: 14pt;\">总结一下v5.0.0带来的新变化都有哪些。</span></p>\n<p> </p>\n<p><strong>1.构建优化</strong><br>　　5.0版本默认采用CLI构建和打包。构建优化器是包含在CLI里面的一个工具，通过对你的应用程序更加语义化的理解可以使得你的打包程序(bundle)更小。<br>构建优化器有两个主要工作。<br>第一，我们可以将应用程序的一部分标记为纯应用(pure)，改进了现有工具提供的摇树优化，删除了应用中其它不需要的部分。<br>第二，从你的应用程序在运行时删除装饰符代码(decorators),装饰(decorators)是由编译器使用的，而在运行时并不需要可以被删除。这些工作减少了生成的JavaScript bundles的大小，并增加了你的用户应用程序的启动速度。</p>\n<p><strong>2.服务端状态转换和DOM支持</strong><br>　　有了这个支持，可以让应用程序在服务器端和客户端版之间共享状态更容易。<br>Angular Universal是一个帮助开发者实现SSR的开源项目，通过在服务端渲染<br>Angular应用程序，然后在客户端引导启动程序并生成HTML，由此更好的支持那些对javascript不太友好的化境来提高应用程序性能。<br>5.0版本中，Angular开发团队添加了ServerTransferStateModule(与之对应的BrowserTransferStateModule),这个模块允许你在服务端生成模块信息并传输到客户端，不需要在客户端重复创建。这一点在通过HTTP获取数据并展示时非常有用。通过服务端状态转移，客户端不需要在发送第二个HTTP数据请求，状态转移的API文档将在未来几周内发布。<br>此处另一个改变是AngularUniversal团队添加了Domino渲染工具，Domino的加入意味着我们在服务器端上下文中将可以支持更多的DOM操作，改进了对第三方JS和组件库的支持。</p>\n<p><strong>3.编译器改进</strong><br>　　改进了Angular编译器来支持增量编译,重新构建变得更快，特别是对生产环境的构建和AOT编译，增强的装饰器可以通过更精细化的去除空格来减小产生的包.<br>改进后的AOT编译的性能大幅度,提升可以节省约95%的构建时间，40s可以提升至2s完成一次构建。<br>Preserve Whitespace<br>通过编译器，模板开发中的制表符、换行符、空格等可以原样的保留下来，并提供选项可以自选是否使用Preserve Whitespace来保留这些东西。</p>\n<p> </p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2017/11/2/cbe0a4a3d0bbb8f3710bd27789fb613a?imageView2/0/w/1280/h/960/ignore-error/1\" alt=\"\"><br>也可以在tsconfig.json设置作用到全局</p>\n<p> </p>\n<p> </p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2017/11/2/1868ed3ad039e1f11f16595c24ec5d0d?imageView2/0/w/1280/h/960/ignore-error/1\" alt=\"\"><br>注：组件级别的选项会覆盖应用程序级别的设置。</p>\n<p><br>增强的装饰符支持<br>装饰符降低了在使用useValue、useFactory、data对lambda表达式的要求，开发者也可以使用一个lamdba表示来代替一个已定义的命名函数,也就意味着你可以不事先在*.d.ts中声明而直接执行代码。</p>\n<p> </p>\n<p> </p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2017/11/2/45fc983921fc79d0be77e69fce2923d4?imageView2/0/w/1280/h/960/ignore-error/1\" alt=\"\"><br>去掉表达式方式</p>\n<p> </p>\n<p> </p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2017/11/2/aca0a0adc59eee8f0834fbafaf948a0c?imageView2/0/w/1280/h/960/ignore-error/1\" alt=\"\"></p>\n<p> </p>\n<p><strong>4.国际化号码、日期和货币管道</strong><br>　　Angular5中已经建立了新的号码，日期和货币管道，增加了跨浏览器的标准化实现，消除国际化在不同环境中的差异。<br>在5.0中管道可以使用我们自己的实现，可以在任何地方实现本地化的支持和配置。<br>V4 V5之间管道差异对比<br><code>https://docs.google.com/spreadsheets/d/12iygt-_cakNP1VO7MV9g4lq9NsxVWG4tSfc98HpHb0k/edit#gid=0</code></p>\n<p><strong>5.StaticInjector取代ReflectiveInjector依赖注入器</strong><br>　　为了更多的减少polyfills，5.0中使用了StaticInjector注入器来替换原有的ReflectiveInjector注入器，这种注入器不再里来与ReflectPolyfill，可以大幅减少应用程序体积<br>在4.x中，依赖注入器一共有两种，即Injector的抽象类子类：<br>1._NullInjector (该类的实例用于表示空的注入器)<br>2.ReflectiveInjector (表示一个依赖注入容器，用于实例化对象和解析依赖)</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">之前提供依赖注入方式：\nReflectiveInjector.resolveAndCreate(providers);\n\n5.0中方式：\nInjector.create(providers);</code></pre>\n<p><strong>6.Zone执行速度的提升</strong><br>　　5.0中默认提供的zones已经优化过，速度大幅提升，并且在应用程序中绕过zonee区域更加关于应用程序的性能。<br>绕过zone引导启动应用程序的方式：</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">platformBrowserDynamic().bootstrapModule(AppModule,{ngZone:<span class=\"hljs-string\">\'noop\'}).then( ref => {} );</span></code></pre>\n<p><strong>7.exportAs多命名支持</strong><br>　　5.0中提供了组件/指令的多命名支持，在对用户不修改代码情况下进行组件的迁移操作等非常有用，将一个组件导出多个名字，可以让组件已一个新名字来使用而达到不破坏现有代码的目的。</p>\n<p> </p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2017/11/2/951b9ce299c1090f6a596cedea85d2da?imageView2/0/w/1280/h/960/ignore-error/1\" alt=\"\"></p>\n<p> </p>\n<p><strong>8.HttpClient</strong><br>　　在4.3中HttpClient模块被封装在@angular/common中，新的HttpClient被封装在@angular/common/http中，更新Http模块后，需要使用HttpClientModule替换原有HttpModule，并在使用http服务时，可以去掉map(res=>res.json())的调用，新模块中已经不再需要这么写了。</p>\n<p><strong>9.CLI v1.5</strong><br>　　Angular CLI v1.5版本中已经添加了对5.0版本的支持，后期将会把v5.0.0作为CLI的默认版本。这个版本中已经默认开启了构建优化，所以开发者可以直接感受到更小的js打包优化带来的收益。同时也更新了.tsconfig将更严格的遵循TypeScript标准，</p>\n<p><strong>10.Angular Forms adds updateOn Blur / Submit</strong><br>　　可以使用blur/submit来进行事件更新，而不用每个input都写一个事件了。</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">Template Driven Forms\nBefore\n<input name=<span class=\"hljs-string\">\"firstName\" ngModel>\nAfter\n<input name=<span class=\"hljs-string\">\"firstName\" ngModel [ngModelOptions]=<span class=\"hljs-string\">\"{updateOn: \'blur\'}\">\nor\n<form [ngFormOptions]=<span class=\"hljs-string\">\"{updateOn: \'submit\'}\">\n\n\nReactive Forms\nBefore\nnew FormGroup(value);\nnew FormControl(value, [], [myValidator])\nAfter\nnew FormGroup(value, {updateOn: <span class=\"hljs-string\">\'blur\'}));\nnew FormControl(value, {updateOn: <span class=\"hljs-string\">\'blur\', asyncValidators: [myValidator]})\nasyncValidators可以不再是作为一个参数传递 而是直接作用到表单上了。<br><br></span></span></span></span></span></span></code></pre>\n<p><strong>11.RxJS 5.5</strong><br>　　支持V5.2+ 5.5在bundle上更加优化了</p>\n<p> </p>\n<p><strong>12.New Router Lifecycle Events</strong><br>　　GuardsCheckStart<br>　　ChildActivationStart<br>　　ActivationStart<br>　　GuardsCheckEnd<br>　　ResolveStart<br>　　ResolveEnd<br>　　ActivationEnd<br>　　ChildActivationEnd</p>', '文章来自官网部分翻译  \n`https://blog.angular.io/version-5-0-0-of-angular-now-available-37e414935ced`\n\nAngular5.0.0版本已经正式发布\n\n![](https://user-gold-cdn.xitu.io/2017/11/2/98416703141cce18cf73e3f1c8314e85?imageView2/0/w/1280/h/960/ignore-error/1)\n\n总结一下v5.0.0带来的新变化都有哪些。\n\n**1.构建优化**  \n　　5.0版本默认采用CLI构建和打包。构建优化器是包含在CLI里面的一个工具，通过对你的应用程序更加语义化的理解可以使得你的打包程序(bundle)更小。  \n构建优化器有两个主要工作。  \n第一，我们可以将应用程序的一部分标记为纯应用(pure)，改进了现有工具提供的摇树优化，删除了应用中其它不需要的部分。  \n第二，从你的应用程序在运行时删除装饰符代码(decorators),装饰(decorators)是由编译器使用的，而在运行时并不需要可以被删除。这些工作减少了生成的JavaScript bundles的大小，并增加了你的用户应用程序的启动速度。\n\n**2.服务端状态转换和DOM支持**  \n　　有了这个支持，可以让应用程序在服务器端和客户端版之间共享状态更容易。  \nAngular Universal是一个帮助开发者实现SSR的开源项目，通过在服务端渲染  \nAngular应用程序，然后在客户端引导启动程序并生成HTML，由此更好的支持那些对javascript不太友好的化境来提高应用程序性能。  \n5.0版本中，Angular开发团队添加了ServerTransferStateModule(与之对应的BrowserTransferStateModule),这个模块允许你在服务端生成模块信息并传输到客户端，不需要在客户端重复创建。这一点在通过HTTP获取数据并展示时非常有用。通过服务端状态转移，客户端不需要在发送第二个HTTP数据请求，状态转移的API文档将在未来几周内发布。  \n此处另一个改变是AngularUniversal团队添加了Domino渲染工具，Domino的加入意味着我们在服务器端上下文中将可以支持更多的DOM操作，改进了对第三方JS和组件库的支持。\n\n**3.编译器改进**  \n　　改进了Angular编译器来支持增量编译,重新构建变得更快，特别是对生产环境的构建和AOT编译，增强的装饰器可以通过更精细化的去除空格来减小产生的包.  \n改进后的AOT编译的性能大幅度,提升可以节省约95%的构建时间，40s可以提升至2s完成一次构建。  \nPreserve Whitespace  \n通过编译器，模板开发中的制表符、换行符、空格等可以原样的保留下来，并提供选项可以自选是否使用Preserve Whitespace来保留这些东西。\n\n![](https://user-gold-cdn.xitu.io/2017/11/2/cbe0a4a3d0bbb8f3710bd27789fb613a?imageView2/0/w/1280/h/960/ignore-error/1)  \n也可以在tsconfig.json设置作用到全局\n\n![](https://user-gold-cdn.xitu.io/2017/11/2/1868ed3ad039e1f11f16595c24ec5d0d?imageView2/0/w/1280/h/960/ignore-error/1)  \n注：组件级别的选项会覆盖应用程序级别的设置。\n\n  \n增强的装饰符支持  \n装饰符降低了在使用useValue、useFactory、data对lambda表达式的要求，开发者也可以使用一个lamdba表示来代替一个已定义的命名函数,也就意味着你可以不事先在*.d.ts中声明而直接执行代码。\n\n![](https://user-gold-cdn.xitu.io/2017/11/2/45fc983921fc79d0be77e69fce2923d4?imageView2/0/w/1280/h/960/ignore-error/1)  \n去掉表达式方式\n\n![](https://user-gold-cdn.xitu.io/2017/11/2/aca0a0adc59eee8f0834fbafaf948a0c?imageView2/0/w/1280/h/960/ignore-error/1)\n\n**4.国际化号码、日期和货币管道**  \n　　Angular5中已经建立了新的号码，日期和货币管道，增加了跨浏览器的标准化实现，消除国际化在不同环境中的差异。  \n在5.0中管道可以使用我们自己的实现，可以在任何地方实现本地化的支持和配置。  \nV4 V5之间管道差异对比  \n`https://docs.google.com/spreadsheets/d/12iygt-_cakNP1VO7MV9g4lq9NsxVWG4tSfc98HpHb0k/edit#gid=0`\n\n**5.StaticInjector取代ReflectiveInjector依赖注入器**  \n　　为了更多的减少polyfills，5.0中使用了StaticInjector注入器来替换原有的ReflectiveInjector注入器，这种注入器不再里来与ReflectPolyfill，可以大幅减少应用程序体积  \n在4.x中，依赖注入器一共有两种，即Injector的抽象类子类：  \n1._NullInjector (该类的实例用于表示空的注入器)  \n2.ReflectiveInjector (表示一个依赖注入容器，用于实例化对象和解析依赖)\n\n    之前提供依赖注入方式：\n    ReflectiveInjector.resolveAndCreate(providers);\n    \n    5.0中方式：\n    Injector.create(providers);\n\n**6.Zone执行速度的提升**  \n　　5.0中默认提供的zones已经优化过，速度大幅提升，并且在应用程序中绕过zonee区域更加关于应用程序的性能。  \n绕过zone引导启动应用程序的方式：\n\n    platformBrowserDynamic().bootstrapModule(AppModule,{ngZone:\'noop\'}).then( ref => {} );\n\n**7.exportAs多命名支持**  \n　　5.0中提供了组件/指令的多命名支持，在对用户不修改代码情况下进行组件的迁移操作等非常有用，将一个组件导出多个名字，可以让组件已一个新名字来使用而达到不破坏现有代码的目的。\n\n![](https://user-gold-cdn.xitu.io/2017/11/2/951b9ce299c1090f6a596cedea85d2da?imageView2/0/w/1280/h/960/ignore-error/1)\n\n**8.HttpClient**  \n　　在4.3中HttpClient模块被封装在@angular/common中，新的HttpClient被封装在@angular/common/http中，更新Http模块后，需要使用HttpClientModule替换原有HttpModule，并在使用http服务时，可以去掉map(res=>res.json())的调用，新模块中已经不再需要这么写了。\n\n**9.CLI v1.5**  \n　　Angular CLI v1.5版本中已经添加了对5.0版本的支持，后期将会把v5.0.0作为CLI的默认版本。这个版本中已经默认开启了构建优化，所以开发者可以直接感受到更小的js打包优化带来的收益。同时也更新了.tsconfig将更严格的遵循TypeScript标准，\n\n**10.Angular Forms adds updateOn Blur / Submit**  \n　　可以使用blur/submit来进行事件更新，而不用每个input都写一个事件了。\n\n    Template Driven Forms\n    Before\n    \"firstName\" ngModel>\n    After\n    \"firstName\" ngModel [ngModelOptions]=\"{updateOn: \'blur\'}\">\n    or', 0, 1, 0);
INSERT INTO `post` (`id`, `createAt`, `updateAt`, `title`, `description`, `thumb`, `url`, `html`, `markdown`, `views`, `status`, `push`) VALUES
(13, '2018-04-23 11:01:41.319025', '2018-04-23 11:01:41.319025', '浏览器的工作原理：新式网络浏览器幕后揭秘', '序言这是一篇全面介绍Webkit和Gecko内部操作的入门文章，是以色列开发人员塔利·加希尔大量研究的成果。在过去的几年中，她查阅了所有公开发布的关于浏览器内部机制的数据（请参见资源），并花了很多时间来研读网络浏览器的源代码。她写道：在IE占据90%市场份额的年代，我们除了把浏览器当成一个“黑箱”，什么也做不了。但是现在，开放源代码的浏览器拥有了过半的市场份额，因此，是时候来揭开神秘的面纱，一探网络浏览器的内幕了。呃，里面只有数以百万行计的C++代码...塔利在她的网站上公布了自己的研究成果，但是我们觉得', 'http://1-ps.googleusercontent.com/x/s.html5rocks-hrd.appspot.com/www.html5rocks.com/zh/tutorials/internals/howbrowserswork/layers.png.pagespeed.ce.mFE5F8CtAV.png', 'http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html', '<div class=\"preface\">\n<h2>序言</h2>\n<p>这是一篇全面介绍 Webkit 和 Gecko 内部操作的入门文章，是以色列开发人员塔利·加希尔大量研究的成果。在过去的几年中，她查阅了所有公开发布的关于浏览器内部机制的数据<small>（请参见<a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Resources\">资源</a>）</small>，并花了很多时间来研读网络浏览器的源代码。她写道：</p>\n<blockquote>在 IE 占据 90% 市场份额的年代，我们除了把浏览器当成一个“黑箱”，什么也做不了。但是现在，开放源代码的浏览器拥有了<a href=\"http://techcrunch.com/2011/08/01/open-web-browsers/\" target=\"_blank\">过半的市场份额</a>，因此，是时候来揭开神秘的面纱，一探网络浏览器的内幕了。呃，里面只有数以百万行计的 C++ 代码...</blockquote>\n塔利在<a href=\"http://taligarsiel.com/\" target=\"_blank\">她的网站</a>上公布了自己的研究成果，但是我们觉得它值得让更多的人来了解，所以我们在此重新整理并公布(原文：<a href=\"http://taligarsiel.com/Projects/howbrowserswork1.htm\">How browsers work-Behind the scenes of modern web browsers</a>)。\n<p>作为一名网络开发人员，<strong>学习浏览器的内部工作原理将有助于您作出更明智的决策，并理解那些最佳开发实践的个中缘由</strong>。尽管这是一篇相当长的文档，但是我们建议您花些时间来仔细阅读；读完之后，您肯定会觉得所费不虚。<cite>保罗·爱丽诗 (Paul Irish)，Chrome 浏览器开发人员事务部</cite></p>\n</div>\n<hr>\n<h5 class=\"tocchap\"> </h5>\n<h2 id=\"Introduction\">简介</h2>\n<p>网络浏览器很可能是使用最广的软件。在这篇入门文章中，我将会介绍它们的幕后工作原理。我们会了解到，从您在地址栏输入 <code>google.com</code> 直到您在浏览器屏幕上看到 Google 首页的整个过程中都发生了些什么。</p>\n<h3>目录</h3>\n<ol class=\"toc\">\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Introduction\">简介</a><ol>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#The_browsers_we_will_talk_about\">我们要讨论的浏览器</a></li>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#The_browser_main_functionality\">浏览器的主要功能</a></li>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#The_browser_high_level_structure\">浏览器的高层结构</a></li>\n</ol></li>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#The_rendering_engine\">呈现引擎</a><ol>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Rendering_engines\">呈现引擎</a></li>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#The_main_flow\">主流程</a></li>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Main_flow_examples\">主流程示例</a></li>\n</ol></li>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Parsing_general\">解析和 DOM 树构建</a><ol>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Parsing_general\">解析 - 综述</a><ol>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Grammars\">语法</a></li>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Parser_Lexer_combination\">解析器和词法分析器的组合</a></li>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Translation\">翻译</a></li>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Parsing_example\">解析示例</a></li>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Formal_definitions_for_vocabulary_and_syntax\">词汇和语法的正式定义</a></li>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Types_of_parsers\">解析器类型</a></li>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Generating_parsers_automatically\">自动生成解析器</a></li>\n</ol></li>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#HTML_Parser\">HTML 解析器</a><ol>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#The_HTML_grammar_definition\">HTML 语法定义</a></li>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Not_a_context_free_grammar\">非与上下文无关的语法</a></li>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#HTML_DTD\">HTML DTD</a></li>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#DOM\">DOM</a></li>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#The_parsing_algorithm\">解析算法</a></li>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#The_tokenization_algorithm\">标记化算法</a></li>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Tree_construction_algorithm\">树构建算法</a></li>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Actions_when_the_parsing_is_finished\">解析结束后的操作</a></li>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Browsers_error_tolerance\">浏览器的容错机制</a></li>\n</ol></li>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#CSS_parsing\">CSS 解析</a><ol>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Webkit_CSS_parser\">Webkit CSS 解析器</a></li>\n</ol></li>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#The_order_of_processing_scripts_and_style_sheets\">处理脚本和样式表的顺序</a><ol>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Scripts\">脚本</a></li>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Speculative_parsing\">预解析</a></li>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Style_sheets\">样式表</a></li>\n</ol></li>\n</ol></li>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Render_tree_construction\">呈现树构建</a><ol>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#The_render_tree_relation_to_the_DOM_tree\">呈现树和 DOM 树的关系</a></li>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#The_flow_of_constructing_the_tree\">构建呈现树的流程</a></li>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Style_Computation\">样式计算</a><ol>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Sharing_style_data\">共享样式数据</a></li>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Firefox_rule_tree\">Firefox 规则树</a><ol>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Division_into_structs\">结构划分</a></li>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Computing_the_style_contexts_using_the_rule_tree\">使用规则树计算样式上下文</a></li>\n</ol></li>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Manipulating_the_rules_for_an_easy_match\">对规则进行处理以简化匹配</a></li>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Applying_the_rules_in_the_correct_cascade_order\">以正确的层叠顺序应用规则</a><ol>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Style_sheet_cascade_order\">样式表层叠顺序</a></li>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Specificity\">特异性</a></li>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Sorting_the_rules\">规则排序</a></li>\n</ol></li>\n</ol></li>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Gradual_process\">渐进式处理</a></li>\n</ol></li>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Layout\">布局</a><ol>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Dirty_bit_system\">Dirty 位系统</a></li>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Global_and_incremental_layout\">全局布局和增量布局</a></li>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Asynchronous_and_Synchronous_layout\">异步布局和同步布局</a></li>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Optimizations\">优化</a></li>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#The_layout_process\">布局处理</a></li>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Width_calculation\">宽度计算</a></li>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Line_Breaking\">换行</a></li>\n</ol></li>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Painting\">绘制</a><ol>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Global_and_Incremental\">全局绘制和增量绘制</a></li>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#The_painting_order\">绘制顺序</a></li>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Firefox_display_list\">Firefox 显示列表</a></li>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Webkit_rectangle_storage\">Webkit 矩形存储</a></li>\n</ol></li>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Dynamic_changes\">动态变化</a></li>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#The_rendering_engines_threads\">呈现引擎的线程</a><ol>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Event_loop\">事件循环</a></li>\n</ol></li>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#css\">CSS2 可视化模型</a><ol>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#The_canvas\">画布</a></li>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#CSS_Box_model\">CSS 框模型</a></li>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Positioning_scheme\">定位方案</a></li>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Box_types\">框类型</a></li>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Positioning\">定位</a><ol>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Relative\">相对定位</a></li>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Floats\">浮动定位</a></li>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Absolute_and_fixed\">绝对定位和固定定位</a></li>\n</ol></li>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Layered_representation\">分层展示</a></li>\n</ol></li>\n<li><a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Resources\">资源</a></li>\n</ol>\n<div>\n<h3 id=\"The_browsers_we_will_talk_about\"><span class=\"tocnum\">1.1</span>我们要讨论的浏览器</h3>\n<p>目前使用的主流浏览器有五个：Internet Explorer、Firefox、Safari、Chrome 浏览器和 Opera。本文中以开放源代码浏览器为例，即 Firefox、Chrome 浏览器和 Safari（部分开源）。根据 <a href=\"http://gs.statcounter.com/\" target=\"_blank\">StatCounter 浏览器统计数据</a>，目前（2011 年 8 月）Firefox、Safari 和 Chrome 浏览器的总市场占有率将近 60%。由此可见，如今开放源代码浏览器在浏览器市场中占据了非常坚实的部分。</p>\n<h3 id=\"The_browser_main_functionality\"><span class=\"tocnum\">1.2</span>浏览器的主要功能</h3>\n<p>浏览器的主要功能就是向服务器发出请求，在浏览器窗口中展示您选择的网络资源。这里所说的资源一般是指 HTML 文档，也可以是 PDF、图片或其他的类型。资源的位置由用户使用 URI（统一资源标示符）指定。</p>\n<p>浏览器解释并显示 HTML 文件的方式是在 HTML 和 CSS 规范中指定的。这些规范由网络标准化组织 <a id=\"w3c\">W3C</a>（万维网联盟）进行维护。 <br>多年以来，各浏览器都没有完全遵从这些规范，同时还在开发自己独有的扩展程序，这给网络开发人员带来了严重的兼容性问题。如今，大多数的浏览器都是或多或少地遵从规范。</p>\n<p>浏览器的用户界面有很多彼此相同的元素，其中包括：</p>\n<ul>\n<li>用来输入 URI 的地址栏</li>\n<li>前进和后退按钮</li>\n<li>书签设置选项</li>\n<li>用于刷新和停止加载当前文档的刷新和停止按钮</li>\n<li>用于返回主页的主页按钮</li>\n\n\n\n\n\n\n\n\n\n\n\n</ul>\n<p>奇怪的是，浏览器的用户界面并没有任何正式的规范，这是多年来的最佳实践自然发展以及彼此之间相互模仿的结果。HTML5 也没有定义浏览器必须具有的用户界面元素，但列出了一些通用的元素，例如地址栏、状态栏和工具栏等。当然，各浏览器也可以有自己独特的功能，比如 Firefox 的下载管理器。</p>\n<h3 id=\"The_browser_high_level_structure\"><span class=\"tocnum\">1.3</span>浏览器的高层结构</h3>\n<p>浏览器的主要组件为 (<a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#1_1\">1.1</a>)：</p>\n<ol>\n<li><strong>用户界面</strong> - 包括地址栏、前进/后退按钮、书签菜单等。除了浏览器主窗口显示的您请求的页面外，其他显示的各个部分都属于用户界面。</li>\n<li><strong>浏览器引擎</strong> - 在用户界面和呈现引擎之间传送指令。</li>\n<li><strong>呈现引擎</strong> - 负责显示请求的内容。如果请求的内容是 HTML，它就负责解析 HTML 和 CSS 内容，并将解析后的内容显示在屏幕上。</li>\n<li><strong>网络</strong> - 用于网络调用，比如 HTTP 请求。其接口与平台无关，并为所有平台提供底层实现。</li>\n<li><strong>用户界面后端</strong> - 用于绘制基本的窗口小部件，比如组合框和窗口。其公开了与平台无关的通用接口，而在底层使用操作系统的用户界面方法。</li>\n<li><strong>JavaScript 解释器</strong>。用于解析和执行 JavaScript 代码。</li>\n<li><strong>数据存储</strong>。这是持久层。浏览器需要在硬盘上保存各种数据，例如 Cookie。新的 HTML 规范 (HTML5) 定义了“网络数据库”，这是一个完整（但是轻便）的浏览器内数据库。</li>\n\n\n\n\n\n\n\n\n\n\n\n</ol>                                                                   <img title=\"\" src=\"http://1-ps.googleusercontent.com/x/s.html5rocks-hrd.appspot.com/www.html5rocks.com/zh/tutorials/internals/howbrowserswork/layers.png.pagespeed.ce.mFE5F8CtAV.png\" alt=\"\" width=\"500\" height=\"339\"></div>\n<div><span data-count=\"1\">                                                                                图</span>：浏览器的主要组件。\n<p>值得注意的是，和大多数浏览器不同，Chrome 浏览器的每个标签页都分别对应一个呈现引擎实例。每个标签页都是一个独立的进程。</p>\n<h5 class=\"tocchap\">Chapter 2</h5>\n<h2 id=\"The_rendering_engine\">呈现引擎</h2>\n<p>呈现引擎的作用嘛...当然就是“呈现”了，也就是在浏览器的屏幕上显示请求的内容。</p>\n<p>默认情况下，呈现引擎可显示 HTML 和 XML 文档与图片。通过插件（或浏览器扩展程序），还可以显示其它类型的内容；例如，使用 PDF 查看器插件就能显示 PDF 文档。但是在本章中，我们将集中介绍其主要用途：显示使用 CSS 格式化的 HTML 内容和图片。</p>\n<h3 id=\"Rendering_engines\"><span class=\"tocnum\">2.1</span>呈现引擎</h3>\n<p>本文所讨论的浏览器（Firefox、Chrome 浏览器和 Safari）是基于两种呈现引擎构建的。Firefox 使用的是 Gecko，这是 Mozilla 公司“自制”的呈现引擎。而 Safari 和 Chrome 浏览器使用的都是 Webkit。</p>\n<p>Webkit 是一种开放源代码呈现引擎，起初用于 Linux 平台，随后由 Apple 公司进行修改，从而支持苹果机和 Windows。有关详情，请参阅<a href=\"http://webkit.org/\" target=\"_blank\">webkit.org</a>。</p>\n<h3 id=\"The_main_flow\"><span class=\"tocnum\">2.2</span>主流程</h3>\n<p>呈现引擎一开始会从网络层获取请求文档的内容，内容的大小一般限制在 8000 个块以内。</p>\n<p>然后进行如下所示的基本流程：</p>\n\n\n\n\n\n\n\n\n\n\n\n                                     <img title=\"\" src=\"http://1-ps.googleusercontent.com/x/s.html5rocks-hrd.appspot.com/www.html5rocks.com/zh/tutorials/internals/howbrowserswork/flow.png.pagespeed.ce.pK__f2HjCm.png\" alt=\"\" width=\"600\" height=\"66\"></div>\n<div><span data-count=\"2\">                                                                         图</span>：呈现引擎的基本流程。\n<p>呈现引擎将开始解析 HTML 文档，并将各标记逐个转化成“内容树”上的 <a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#DOM\">DOM</a> 节点。同时也会解析外部 CSS 文件以及样式元素中的样式数据。HTML 中这些带有视觉指令的样式信息将用于创建另一个树结构：<a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Render_tree_construction\">呈现树</a>。</p>\n<p>呈现树包含多个带有视觉属性（如颜色和尺寸）的矩形。这些矩形的排列顺序就是它们将在屏幕上显示的顺序。</p>\n<p>呈现树构建完毕之后，进入“<a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#layout\">布局</a>”处理阶段，也就是为每个节点分配一个应出现在屏幕上的确切坐标。下一个阶段是<a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Painting\">绘制</a> - 呈现引擎会遍历呈现树，由用户界面后端层将每个节点绘制出来。</p>\n<p>需要着重指出的是，这是一个渐进的过程。为达到更好的用户体验，呈现引擎会力求尽快将内容显示在屏幕上。它不必等到整个 HTML 文档解析完毕之后，就会开始构建呈现树和设置布局。在不断接收和处理来自网络的其余内容的同时，呈现引擎会将部分内容解析并显示出来。</p>\n<h4 id=\"Main_flow_examples\"><span class=\"tocnum\">2.3</span>主流程示例</h4>\n\n\n\n\n\n\n\n\n\n\n\n                                                     <img src=\"http://1-ps.googleusercontent.com/x/s.html5rocks-hrd.appspot.com/www.html5rocks.com/zh/tutorials/internals/howbrowserswork/webkitflow.png.pagespeed.ce.KhQEkvbb3q.png\" alt=\"\" width=\"624\" height=\"289\"></div>\n<div><span data-count=\"3\">                                                                                    图</span>：Webkit 主流程</div>\n<div>                                                  <img src=\"http://1-ps.googleusercontent.com/x/s.html5rocks-hrd.appspot.com/www.html5rocks.com/zh/tutorials/internals/howbrowserswork/624x290wimage008.jpg.pagespeed.ic.Oe-U0yQz2z.webp\" alt=\"\" width=\"624\" height=\"290\"></div>\n<div><span data-count=\"4\">                                                                             图</span>：Mozilla 的 Gecko 呈现引擎主流程 (<a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#3_6\">3.6</a>)\n<p>从图 3 和图 4 可以看出，虽然 Webkit 和 Gecko 使用的术语略有不同，但整体流程是基本相同的。</p>\n<p>Gecko 将视觉格式化元素组成的树称为“框架树”。每个元素都是一个框架。Webkit 使用的术语是“呈现树”，它由“呈现对象”组成。对于元素的放置，Webkit 使用的术语是“布局”，而 Gecko 称之为“重排”。对于连接 DOM 节点和可视化信息从而创建呈现树的过程，Webkit 使用的术语是“附加”。有一个细微的非语义差别，就是 Gecko 在 HTML 与 DOM 树之间还有一个称为“内容槽”的层，用于生成 DOM 元素。我们会逐一论述流程中的每一部分：</p>\n<p> </p>\n<h5 class=\"tocchap\">Chapter 3</h5>\n<h3 id=\"Parsing_general\"><span class=\"tocnum\">3.1</span>解析 - 综述</h3>\n<p>解析是呈现引擎中非常重要的一个环节，因此我们要更深入地讲解。首先，来介绍一下解析。</p>\n<p>解析文档是指将文档转化成为有意义的结构，也就是可让代码理解和使用的结构。解析得到的结果通常是代表了文档结构的节点树，它称作解析树或者语法树。</p>\n<p>示例 - 解析 <samp>2 + 3 - 1</samp> 这个表达式，会返回下面的树：</p>\n\n\n\n\n\n\n\n\n\n\n\n                                                     <img src=\"http://1-ps.googleusercontent.com/x/s.html5rocks-hrd.appspot.com/www.html5rocks.com/zh/tutorials/internals/howbrowserswork/400x155wimage009.png.pagespeed.ic.KNewBFnKFk.png\" alt=\"\" width=\"400\" height=\"155\"></div>\n<div><span data-count=\"5\">                                                                           图</span>：数学表达式树节点\n<h4 id=\"Grammars\"><span class=\"tocnum\">3.1.1</span>语法</h4>\n<p>解析是以文档所遵循的语法规则（编写文档所用的语言或格式）为基础的。所有可以解析的格式都必须对应确定的语法（由词汇和语法规则构成）。这称为<a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#context_free_grammar\">与上下文无关的语法</a>。人类语言并不属于这样的语言，因此无法用常规的解析技术进行解析。</p>\n<h4 id=\"Parser_Lexer_combination\"><span class=\"tocnum\">3.1.2</span>解析器和词法分析器的组合</h4>\n<p>解析的过程可以分成两个子过程：词法分析和语法分析。</p>\n<p>词法分析是将输入内容分割成大量标记的过程。标记是语言中的词汇，即构成内容的单位。在人类语言中，它相当于语言字典中的单词。</p>\n<p>语法分析是应用语言的语法规则的过程。</p>\n<p>解析器通常将解析工作分给以下两个组件来处理：<strong>词法分析器</strong>（有时也称为标记生成器），负责将输入内容分解成一个个有效标记；而<strong>解析器</strong>负责根据语言的语法规则分析文档的结构，从而构建解析树。词法分析器知道如何将无关的字符（比如空格和换行符）分离出来。</p>\n\n\n\n\n\n\n\n\n\n\n\n                                                                                       <img src=\"http://1-ps.googleusercontent.com/x/s.html5rocks-hrd.appspot.com/www.html5rocks.com/zh/tutorials/internals/howbrowserswork/image011.png.pagespeed.ce.yyU1s1o5di.png\" alt=\"\" width=\"101\" height=\"300\"></div>\n<div><span data-count=\"6\">                                                                                     图</span>：从源文档到解析树\n<p>解析是一个迭代的过程。通常，解析器会向词法分析器请求一个新标记，并尝试将其与某条语法规则进行匹配。如果发现了匹配规则，解析器会将一个对应于该标记的节点添加到解析树中，然后继续请求下一个标记。</p>\n<p>如果没有规则可以匹配，解析器就会将标记存储到内部，并继续请求标记，直至找到可与所有内部存储的标记匹配的规则。如果找不到任何匹配规则，解析器就会引发一个异常。这意味着文档无效，包含语法错误。</p>\n<h4 id=\"Translation\"><span class=\"tocnum\">3.1.3</span>翻译</h4>\n<p>很多时候，解析树还不是最终产品。解析通常是在翻译过程中使用的，而翻译是指将输入文档转换成另一种格式。编译就是这样一个例子。编译器可将源代码编译成机器代码，具体过程是首先将源代码解析成解析树，然后将解析树翻译成机器代码文档。</p>\n\n\n\n\n\n\n\n\n\n\n\n                                                                                         <img src=\"http://1-ps.googleusercontent.com/x/s.html5rocks-hrd.appspot.com/www.html5rocks.com/zh/tutorials/internals/howbrowserswork/image013.png.pagespeed.ce.EGqDLSzaGw.png\" alt=\"\" width=\"104\" height=\"400\"></div>\n<div><span data-count=\"7\">                                                                                          图</span>：编译流程\n<h4 id=\"Parsing_example\"><span class=\"tocnum\">3.1.4</span>解析示例</h4>\n<p>在图 5 中，我们通过一个数学表达式建立了解析树。现在，让我们试着定义一个简单的数学语言，用来演示解析的过程。</p>\n<p> </p>\n<p>词汇：我们用的语言可包含整数、加号和减号。</p>\n<p>语法：</p>\n<ol>\n<li>构成语言的语法单位是表达式、项和运算符。</li>\n<li>我们用的语言可以包含任意数量的表达式。</li>\n<li>表达式的定义是：一个“项”接一个“运算符”，然后再接一个“项”。</li>\n<li>运算符是加号或减号。</li>\n<li>项是一个整数或一个表达式。</li>\n\n\n\n\n\n\n\n\n\n\n\n</ol>\n<p> </p>\n<p>让我们分析一下 <samp>2 + 3 - 1</samp>。 <br>匹配语法规则的第一个子串是 <samp>2</samp>，而根据第 5 条语法规则，这是一个项。匹配语法规则的第二个子串是 <samp>2 + 3</samp>，而根据第 3 条规则（一个项接一个运算符，然后再接一个项），这是一个表达式。下一个匹配项已经到了输入的结束。<samp>2 + 3 - 1</samp> 是一个表达式，因为我们已经知道 <samp>2 + 3</samp> 是一个项，这样就符合“一个项接一个运算符，然后再接一个项”的规则。<samp>2 + +</samp> 不与任何规则匹配，因此是无效的输入。</p>\n<h4 id=\"Formal_definitions_for_vocabulary_and_syntax\"><span class=\"tocnum\">3.1.5</span>词汇和语法的正式定义</h4>\n<p>词汇通常用<a href=\"http://www.regular-expressions.info/\" target=\"_blank\">正则表达式</a>表示。</p>\n<p>例如，我们的示例语言可以定义如下：</p>\n<pre class=\"prettyprint\"><span class=\"pln\">INTEGER </span><span class=\"pun\">:</span><span class=\"lit\">0</span><span class=\"pun\">|[</span><span class=\"lit\">1</span><span class=\"pun\">-</span><span class=\"lit\">9</span><span class=\"pun\">][</span><span class=\"lit\">0</span><span class=\"pun\">-</span><span class=\"lit\">9</span><span class=\"pun\">]*</span><span class=\"pln\">\nPLUS </span><span class=\"pun\">:</span><span class=\"pun\">+</span><span class=\"pln\">\nMINUS</span><span class=\"pun\">:</span><span class=\"pun\">-</span></pre>\n正如您所看到的，这里用正则表达式给出了整数的定义。\n<p> </p>\n<p>语法通常使用一种称为 <a href=\"http://en.wikipedia.org/wiki/Backus%E2%80%93Naur_Form\" target=\"_blank\">BNF</a> 的格式来定义。我们的示例语言可以定义如下：</p>\n<pre class=\"prettyprint\"><span class=\"pln\">expression </span><span class=\"pun\">:=</span><span class=\"pln\">  term  operation  term\noperation </span><span class=\"pun\">:=</span><span class=\"pln\">  PLUS </span><span class=\"pun\">|</span><span class=\"pln\"> MINUS\nterm </span><span class=\"pun\">:=</span><span class=\"pln\"> INTEGER </span><span class=\"pun\">|</span><span class=\"pln\"> expression</span></pre>\n<p> </p>\n<p>之前我们说过，如果语言的语法是<a id=\"context_free_grammar\">与上下文无关的语法</a>，就可以由常规解析器进行解析。与上下文无关的语法的直观定义就是可以完全用 BNF 格式表达的语法。有关正式定义，请参阅<a href=\"http://en.wikipedia.org/wiki/Context-free_grammar\" target=\"_blank\">关于与上下文无关的语法的维基百科文章</a>。</p>\n<h4 id=\"Types_of_parsers\"><span class=\"tocnum\">3.1.6</span>解析器类型</h4>\n<p>有两种基本类型的解析器：自上而下解析器和自下而上解析器。直观地来说，自上而下的解析器从语法的高层结构出发，尝试从中找到匹配的结构。而自下而上的解析器从低层规则出发，将输入内容逐步转化为语法规则，直至满足高层规则。</p>\n<p>让我们来看看这两种解析器会如何解析我们的示例：</p>\n<p>自上而下的解析器会从高层的规则开始：首先将 <samp>2 + 3</samp> 标识为一个表达式，然后将 <samp>2 + 3 - 1</samp> 标识为一个表达式（标识表达式的过程涉及到匹配其他规则，但是起点是最高级别的规则）。</p>\n<p>自下而上的解析器将扫描输入内容，找到匹配的规则后，将匹配的输入内容替换成规则。如此继续替换，直到输入内容的结尾。部分匹配的表达式保存在解析器的堆栈中。</p>\n<table id=\"stack\">\n<tbody>\n<tr><th>堆栈</th><th>输入</th></tr>\n<tr>\n<td> </td>\n<td><samp>2 + 3 - 1</samp></td>\n</tr>\n<tr>\n<td>项</td>\n<td><samp>+ 3 - 1</samp></td>\n</tr>\n<tr>\n<td>项运算</td>\n<td><samp>3 - 1</samp></td>\n</tr>\n<tr>\n<td>表达式</td>\n<td><samp>- 1</samp></td>\n</tr>\n<tr>\n<td>表达式运算符</td>\n<td><samp>1</samp></td>\n</tr>\n<tr>\n<td>表达式</td>\n<td><samp> </samp></td>\n</tr>\n</tbody>\n</table>\n这种自下而上的解析器称为移位归约解析器，因为输入在向右移位（设想有一个指针从输入内容的开头移动到结尾），并且逐渐归约到语法规则上。\n<p> </p>\n<h4 id=\"Generating_parsers_automatically\"><span class=\"tocnum\">3.1.7</span>自动生成解析器</h4>\n<p>有一些工具可以帮助您生成解析器，它们称为解析器生成器。您只要向其提供您所用语言的语法（词汇和语法规则），它就会生成相应的解析器。创建解析器需要对解析有深刻理解，而人工创建优化的解析器并不是一件容易的事情，所以解析器生成器是非常实用的。</p>\n<p><a id=\"parser_generators\">Webkit</a> 使用了两种非常有名的解析器生成器：用于创建词法分析器的 <a href=\"http://en.wikipedia.org/wiki/Flex_lexical_analyser\" target=\"_blank\">Flex</a> 以及用于创建解析器的 <a href=\"http://www.gnu.org/software/bison/\" target=\"_blank\">Bison</a>（您也可能遇到 Lex 和 Yacc 这样的别名）。Flex 的输入是包含标记的正则表达式定义的文件。Bison 的输入是采用 BNF 格式的语言语法规则。</p>\n<h3 id=\"HTML_Parser\"><span class=\"tocnum\">3.2</span>HTML 解析器</h3>\n<p>HTML 解析器的任务是将 HTML 标记解析成解析树。</p>\n<h4 id=\"The_HTML_grammar_definition\"><span class=\"tocnum\">3.2.1</span>HTML 语法定义</h4>\n<p>HTML 的词汇和语法在 W3C 组织创建的<a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#w3c\">规范</a>中进行了定义。当前的版本是 HTML4，HTML5 正在处理过程中。</p>\n<h4 id=\"Not_a_context_free_grammar\"><span class=\"tocnum\">3.2.2</span>非与上下文无关的语法</h4>\n<p>正如我们在解析过程的简介中已经了解到的，语法可以用 BNF 等格式进行正式定义。</p>\n<p>很遗憾，所有的常规解析器都不适用于 HTML（我并不是开玩笑，它们可以用于解析 CSS 和 JavaScript）。HTML 并不能很容易地用解析器所需的与上下文无关的语法来定义。</p>\n<p>有一种可以定义 HTML 的正规格式：DTD（Document Type Definition，文档类型定义），但它不是与上下文无关的语法。</p>\n<p>这初看起来很奇怪：HTML 和 XML 非常相似。有很多 XML 解析器可以使用。HTML 存在一个 XML 变体 (XHTML)，那么有什么大的区别呢？</p>\n<p>区别在于 HTML 的处理更为“宽容”，它允许您省略某些隐式添加的标记，有时还能省略一些起始或者结束标记等等。和 XML 严格的语法不同，HTML 整体来看是一种“软性”的语法。</p>\n<p>显然，这种看上去细微的差别实际上却带来了巨大的影响。一方面，这是 HTML 如此流行的原因：它能包容您的错误，简化网络开发。另一方面，这使得它很难编写正式的语法。概括地说，HTML 无法很容易地通过常规解析器解析（因为它的语法不是与上下文无关的语法），也无法通过 XML 解析器来解析。</p>\n<h4 id=\"HTML_DTD\"><span class=\"tocnum\">3.2.3</span>HTML DTD</h4>\n<p>HTML 的定义采用了 DTD 格式。此格式可用于定义 <a href=\"http://en.wikipedia.org/wiki/Standard_Generalized_Markup_Language\" target=\"_blank\">SGML</a> 族的语言。它包括所有允许使用的元素及其属性和层次结构的定义。如上文所述，HTML DTD 无法构成与上下文无关的语法。</p>\n<p>DTD 存在一些变体。严格模式完全遵守 HTML 规范，而其他模式可支持以前的浏览器所使用的标记。这样做的目的是确保向下兼容一些早期版本的内容。最新的严格模式 DTD 可以在这里找到：<a href=\"http://www.w3.org/TR/html4/strict.dtd\" target=\"_blank\">www.w3.org/TR/html4/strict.dtd</a></p>\n<h4 id=\"DOM\"><span class=\"tocnum\">3.2.4</span>DOM</h4>\n<p>解析器的输出“解析树”是由 DOM 元素和属性节点构成的树结构。DOM 是文档对象模型 (Document Object Model) 的缩写。它是 HTML 文档的对象表示，同时也是外部内容（例如 JavaScript）与 HTML 元素之间的接口。 <br>解析树的根节点是“<a href=\"http://www.w3.org/TR/1998/REC-DOM-Level-1-19981001/level-one-core.html#i-Document\" target=\"_blank\">Document</a>”对象。</p>\n<p>DOM 与标记之间几乎是一一对应的关系。比如下面这段标记：</p>\n<pre class=\"prettyprint\"><span class=\"tag\"><html></span><span class=\"tag\"><body></span><span class=\"tag\"><p></span><span class=\"pln\">\n      Hello World\n    </span><span class=\"tag\"></p></span><span class=\"tag\"><div></span><span class=\"tag\"><img</span><span class=\"atn\">src</span><span class=\"pun\">=</span><span class=\"atv\">\"example.png\"</span><span class=\"tag\">/></div></span><span class=\"tag\"></body></span><span class=\"tag\"></html></span></pre>\n可翻译成如下的 DOM 树：\n<p> </p>\n                                                             <img src=\"http://1-ps.googleusercontent.com/x/s.html5rocks-hrd.appspot.com/www.html5rocks.com/zh/tutorials/internals/howbrowserswork/image015.png.pagespeed.ce.OZcOUqth9Q.png\" alt=\"\" width=\"400\" height=\"219\"></div>\n<div><span data-count=\"8\">                                                                                      图</span>：示例标记的 DOM 树\n<p>和 HTML 一样，DOM 也是由 W3C 组织指定的。请参见 <a href=\"http://www.w3.org/DOM/DOMTR\" target=\"_blank\">www.w3.org/DOM/DOMTR</a>。这是关于文档操作的通用规范。其中一个特定模块描述针对 HTML 的元素。HTML 的定义可以在这里找到：<a href=\"http://www.w3.org/TR/2003/REC-DOM-Level-2-HTML-20030109/idl-definitions.html\" target=\"_blank\">www.w3.org/TR/2003/REC-DOM-Level-2-HTML-20030109/idl-definitions.html</a>。</p>\n<p>我所说的树包含 DOM 节点，指的是树是由实现了某个 DOM 接口的元素构成的。浏览器所用的具体实现也会具有一些其他属性，供浏览器在内部使用。</p>\n<h4 id=\"The_parsing_algorithm\"><span class=\"tocnum\">3.2.5</span>解析算法</h4>\n<p>我们在之前章节已经说过，HTML 无法用常规的自上而下或自下而上的解析器进行解析。</p>\n<p>原因在于：</p>\n<ol>\n<li>语言的宽容本质。</li>\n<li>浏览器历来对一些常见的无效 HTML 用法采取包容态度。</li>\n<li>解析过程需要不断地反复。源内容在解析过程中通常不会改变，但是在 HTML 中，脚本标记如果包含 <code>document.write</code>，就会添加额外的标记，这样解析过程实际上就更改了输入内容。</li>\n</ol>\n<p>由于不能使用常规的解析技术，浏览器就创建了自定义的解析器来解析 HTML。</p>\n<p><a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/parsing.html\" target=\"_blank\">HTML5 规范详细地描述了解析算法</a>。此算法由两个阶段组成：标记化和树构建。</p>\n<p>标记化是词法分析过程，将输入内容解析成多个标记。HTML 标记包括起始标记、结束标记、属性名称和属性值。</p>\n<p>标记生成器识别标记，传递给树构造器，然后接受下一个字符以识别下一个标记；如此反复直到输入的结束。</p>\n<img src=\"http://1-ps.googleusercontent.com/h/www.gstatic.com/psa/static/1.gif\" alt=\"\" width=\"308\" height=\"400\"><img src=\"https://pic002.cnblogs.com/images/2012/40481/2012103113175793.jpg\" alt=\"\"></div>\n<div><span data-count=\"9\">                                                                       图</span>：HTML</div>\n<div>\n<p> </p>\n解析流程（摘自 HTML5 规范）\n<h4 id=\"The_tokenization_algorithm\"><span class=\"tocnum\">3.2.6</span>标记化算法</h4>\n<p>该算法的输出结果是 HTML 标记。该算法使用状态机来表示。每一个状态接收来自输入信息流的一个或多个字符，并根据这些字符更新下一个状态。当前的标记化状态和树结构状态会影响进入下一状态的决定。这意味着，即使接收的字符相同，对于下一个正确的状态也会产生不同的结果，具体取决于当前的状态。该算法相当复杂，无法在此详述，所以我们通过一个简单的示例来帮助大家理解其原理。</p>\n<p>基本示例 - 将下面的 HTML 代码标记化：</p>\n<pre class=\"prettyprint\"><span class=\"tag\"><html></span><span class=\"tag\"><body></span><span class=\"pln\">\n    Hello world\n  </span><span class=\"tag\"></body></span><span class=\"tag\"></html></span></pre>\n<p>初始状态是数据状态。遇到字符 <code><</code> 时，状态更改为<strong>“标记打开状态”</strong>。接收一个 <code>a-z</code> 字符会创建“起始标记”，状态更改为<strong>“标记名称状态”</strong>。这个状态会一直保持到接收 <code>></code> 字符。在此期间接收的每个字符都会附加到新的标记名称上。在本例中，我们创建的标记是 <code>html</code> 标记。</p>\n<p>遇到 <code>></code> 标记时，会发送当前的标记，状态改回<strong>“数据状态”</strong>。<code><body></code> 标记也会进行同样的处理。目前 <code>html</code> 和 <code>body</code> 标记均已发出。现在我们回到<strong>“数据状态”</strong>。接收到 <code>Hello world</code> 中的 <code>H</code> 字符时，将创建并发送字符标记，直到接收 <code></body></code> 中的 <code><</code>。我们将为 <code>Hello world</code> 中的每个字符都发送一个字符标记。</p>\n<p>现在我们回到<strong>“标记打开状态”</strong>。接收下一个输入字符 <code>/</code> 时，会创建 <code>end tag token</code> 并改为<strong>“标记名称状态”</strong>。我们会再次保持这个状态，直到接收 <code>></code>。然后将发送新的标记，并回到<strong>“数据状态”</strong>。<code></html></code> 输入也会进行同样的处理。</p>\n                                     <img src=\"https://pic002.cnblogs.com/images/2012/40481/2012103113184113.png\" alt=\"\"><br><span data-count=\"10\">                                                                           图</span>：对示例输入进行标记化\n<h4 id=\"Tree_construction_algorithm\"><span class=\"tocnum\">3.2.7</span>树构建算法</h4>\n<p>在创建解析器的同时，也会创建 Document 对象。在树构建阶段，以 Document 为根节点的 DOM 树也会不断进行修改，向其中添加各种元素。标记生成器发送的每个节点都会由树构建器进行处理。规范中定义了每个标记所对应的 DOM 元素，这些元素会在接收到相应的标记时创建。这些元素不仅会添加到 DOM 树中，还会添加到开放元素的堆栈中。此堆栈用于纠正嵌套错误和处理未关闭的标记。其算法也可以用状态机来描述。这些状态称为“插入模式”。</p>\n<p>让我们来看看示例输入的树构建过程：</p>\n<pre class=\"prettyprint\"><span class=\"tag\"><html></span><span class=\"tag\"><body></span><span class=\"pln\">\n    Hello world\n  </span><span class=\"tag\"></body></span><span class=\"tag\"></html></span></pre>\n<p>树构建阶段的输入是一个来自标记化阶段的标记序列。第一个模式是<strong>“initial mode”</strong>。接收 HTML 标记后转为<strong>“before html”</strong>模式，并在这个模式下重新处理此标记。这样会创建一个 HTMLHtmlElement 元素，并将其附加到 Document 根对象上。</p>\n<p>然后状态将改为<strong>“before head”</strong>。此时我们接收“body”标记。即使我们的示例中没有“head”标记，系统也会隐式创建一个 HTMLHeadElement，并将其添加到树中。</p>\n<p>现在我们进入了<strong>“in head”</strong>模式，然后转入<strong>“after head”</strong>模式。系统对 body 标记进行重新处理，创建并插入 HTMLBodyElement，同时模式转变为<strong>“body”</strong>。</p>\n<p>现在，接收由“Hello world”字符串生成的一系列字符标记。接收第一个字符时会创建并插入“Text”节点，而其他字符也将附加到该节点。</p>\n<p>接收 body 结束标记会触发<strong>“after body”</strong>模式。现在我们将接收 HTML 结束标记，然后进入<strong>“after after body”</strong>模式。接收到文件结束标记后，解析过程就此结束。</p>\n                                                                    <img src=\"https://pic002.cnblogs.com/images/2012/40481/2012103113224961.gif\" alt=\"\"><br><span data-count=\"11\">                                                                    图</span>：示例 HTML 的树构建\n<h4 id=\"Actions_when_the_parsing_is_finished\"><span class=\"tocnum\">3.2.8</span>解析结束后的操作</h4>\n<p>在此阶段，浏览器会将文档标注为交互状态，并开始解析那些处于“deferred”模式的脚本，也就是那些应在文档解析完成后才执行的脚本。然后，文档状态将设置为“完成”，一个“加载”事件将随之触发。</p>\n<p>您可以<a href=\"http://www.w3.org/TR/html5/syntax.html#html-parser\" target=\"_blank\">在 HTML5 规范中查看标记化和树构建的完整算法</a></p>\n<h4 id=\"Browsers_error_tolerance\"><span class=\"tocnum\">3.2.9</span>浏览器的容错机制</h4>\n<p>您在浏览 HTML 网页时从来不会看到“语法无效”的错误。这是因为浏览器会纠正任何无效内容，然后继续工作。</p>\n<p>以下面的 HTML 代码为例：</p>\n<pre class=\"prettyprint\"><span class=\"tag\"><html></span><span class=\"tag\"><mytag></span><span class=\"tag\"></mytag></span><span class=\"tag\"><div></span><span class=\"tag\"><p></span><span class=\"tag\"></div></span><span class=\"pln\">\n    Really lousy HTML\n  </span><span class=\"tag\"></p></span><span class=\"tag\"></html></span></pre>\n<p>在这里，我已经违反了很多语法规则（“mytag”不是标准的标记，“p”和“div”元素之间的嵌套有误等等），但是浏览器仍然会正确地显示这些内容，并且毫无怨言。因为有大量的解析器代码会纠正 HTML 网页作者的错误。</p>\n<p>不同浏览器的错误处理机制相当一致，但令人称奇的是，这种机制并不是 HTML 当前规范的一部分。和书签管理以及前进/后退按钮一样，它也是浏览器在多年发展中的产物。很多网站都普遍存在着一些已知的无效 HTML 结构，每一种浏览器都会尝试通过和其他浏览器一样的方式来修复这些无效结构。</p>\n<p>HTML5 规范定义了一部分这样的要求。Webkit 在 HTML 解析器类的开头注释中对此做了很好的概括。</p>\n<blockquote>\n<p>解析器对标记化输入内容进行解析，以构建文档树。如果文档的格式正确，就直接进行解析。</p>\n<p>遗憾的是，我们不得不处理很多格式错误的 HTML 文档，所以解析器必须具备一定的容错性。</p>\n<p>我们至少要能够处理以下错误情况：</p>\n<ol>\n<li>明显不能在某些外部标记中添加的元素。在此情况下，我们应该关闭所有标记，直到出现禁止添加的元素，然后再加入该元素。</li>\n<li>我们不能直接添加的元素。这很可能是网页作者忘记添加了其中的一些标记（或者其中的标记是可选的）。这些标签可能包括：HTML HEAD BODY TBODY TR TD LI（还有遗漏的吗？）。</li>\n<li>向 inline 元素内添加 block 元素。关闭所有 inline 元素，直到出现下一个较高级的 block 元素。</li>\n<li>如果这样仍然无效，可关闭所有元素，直到可以添加元素为止，或者忽略该标记。</li>\n</ol></blockquote>\n<p>让我们看一些 Webkit 容错的示例：</p>\n<h5>使用了 </br> 而不是 <br></h5>\n<p>有些网站使用了 </br> 而不是 <br>。为了与 IE 和 Firefox 兼容，Webkit 将其与 <br> 做同样的处理。 <br>代码如下：</p>\n<pre class=\"prettyprint\"><span class=\"kwd\">if</span><span class=\"pun\">(</span><span class=\"pln\">t</span><span class=\"pun\">-></span><span class=\"pln\">isCloseTag</span><span class=\"pun\">(</span><span class=\"pln\">brTag</span><span class=\"pun\">)</span><span class=\"pun\">&&</span><span class=\"pln\"> m_document</span><span class=\"pun\">-></span><span class=\"pln\">inCompatMode</span><span class=\"pun\">())</span><span class=\"pun\">{</span><span class=\"pln\">\n     reportError</span><span class=\"pun\">(</span><span class=\"typ\">MalformedBRError</span><span class=\"pun\">);</span><span class=\"pln\">\n     t</span><span class=\"pun\">-></span><span class=\"pln\">beginTag </span><span class=\"pun\">=</span><span class=\"kwd\">true</span><span class=\"pun\">;</span><span class=\"pun\">}</span></pre>\n请注意，错误处理是在内部进行的，用户并不会看到这个过程。\n<p> </p>\n<h5>离散表格</h5>\n<p>离散表格是指位于其他表格内容中，但又不在任何一个单元格内的表格。 <br>比如以下的示例：</p>\n<pre class=\"prettyprint\"><span class=\"tag\"><table></span><span class=\"tag\"><table></span><span class=\"tag\"><tr><td></span><span class=\"pln\">inner table</span><span class=\"tag\"></td></tr></span><span class=\"tag\"></table></span><span class=\"tag\"><tr><td></span><span class=\"pln\">outer table</span><span class=\"tag\"></td></tr></span><span class=\"tag\"></table></span></pre>\nWebkit 会将其层次结构更改为两个同级表格：\n<pre class=\"prettyprint\"><span class=\"tag\"><table></span><span class=\"tag\"><tr><td></span><span class=\"pln\">outer table</span><span class=\"tag\"></td></tr></span><span class=\"tag\"></table></span><span class=\"tag\"><table></span><span class=\"tag\"><tr><td></span><span class=\"pln\">inner table</span><span class=\"tag\"></td></tr></span><span class=\"tag\"></table></span></pre>\n代码如下：\n<pre class=\"prettyprint\"><span class=\"kwd\">if</span><span class=\"pun\">(</span><span class=\"pln\">m_inStrayTableContent </span><span class=\"pun\">&&</span><span class=\"pln\"> localName </span><span class=\"pun\">==</span><span class=\"pln\"> tableTag</span><span class=\"pun\">)</span><span class=\"pln\">\n        popBlock</span><span class=\"pun\">(</span><span class=\"pln\">tableTag</span><span class=\"pun\">);</span></pre>\nWebkit 使用一个堆栈来保存当前的元素内容，它会从外部表格的堆栈中弹出内部表格。现在，这两个表格就变成了同级关系。\n<p> </p>\n<h5>嵌套的表单元素</h5>\n<p>如果用户在一个表单元素中又放入了另一个表单，那么第二个表单将被忽略。 <br>代码如下：</p>\n<pre class=\"prettyprint\"><span class=\"kwd\">if</span><span class=\"pun\">(!</span><span class=\"pln\">m_currentFormElement</span><span class=\"pun\">)</span><span class=\"pun\">{</span><span class=\"pln\">\n        m_currentFormElement </span><span class=\"pun\">=</span><span class=\"kwd\">new</span><span class=\"typ\">HTMLFormElement</span><span class=\"pun\">(</span><span class=\"pln\">formTag</span><span class=\"pun\">,</span><span class=\"pln\">    m_document</span><span class=\"pun\">);</span><span class=\"pun\">}</span></pre>\n<p> </p>\n<h5>过于复杂的标记层次结构</h5>\n<p>代码的注释已经说得很清楚了。 </p>\n<div class=\"comment\">\n<blockquote>示例网站 www.liceo.edu.mx 嵌套了约 1500 个标记，全都来自一堆 <b> 标记。我们只允许最多 20 层同类型标记的嵌套，如果再嵌套更多，就会全部忽略。</blockquote>\n</div>\n<pre class=\"prettyprint\"><span class=\"kwd\">bool</span><span class=\"typ\">HTMLParser</span><span class=\"pun\">::</span><span class=\"pln\">allowNestedRedundantTag</span><span class=\"pun\">(</span><span class=\"kwd\">const</span><span class=\"typ\">AtomicString</span><span class=\"pun\">&</span><span class=\"pln\"> tagName</span><span class=\"pun\">)</span><span class=\"pun\">{</span><span class=\"kwd\">unsigned</span><span class=\"pln\"> i </span><span class=\"pun\">=</span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"kwd\">for</span><span class=\"pun\">(</span><span class=\"typ\">HTMLStackElem</span><span class=\"pun\">*</span><span class=\"pln\"> curr </span><span class=\"pun\">=</span><span class=\"pln\"> m_blockStack</span><span class=\"pun\">;</span><span class=\"pln\">\n         i </span><span class=\"pun\"><</span><span class=\"pln\"> cMaxRedundantTagDepth </span><span class=\"pun\">&&</span><span class=\"pln\"> curr </span><span class=\"pun\">&&</span><span class=\"pln\"> curr</span><span class=\"pun\">-></span><span class=\"pln\">tagName </span><span class=\"pun\">==</span><span class=\"pln\"> tagName</span><span class=\"pun\">;</span><span class=\"pln\">\n     curr </span><span class=\"pun\">=</span><span class=\"pln\"> curr</span><span class=\"pun\">-></span><span class=\"kwd\">next</span><span class=\"pun\">,</span><span class=\"pln\"> i</span><span class=\"pun\">++)</span><span class=\"pun\">{</span><span class=\"pun\">}</span><span class=\"kwd\">return</span><span class=\"pln\"> i </span><span class=\"pun\">!=</span><span class=\"pln\"> cMaxRedundantTagDepth</span><span class=\"pun\">;</span><span class=\"pun\">}</span></pre>\n<p> </p>\n<h5>放错位置的 html 或者 body 结束标记</h5>\n<p>同样，代码的注释已经说得很清楚了。</p>\n<blockquote>支持格式非常糟糕的 HTML 代码。我们从不关闭 body 标记，因为一些愚蠢的网页会在实际文档结束之前就关闭。我们通过调用 end() 来执行关闭操作。</blockquote>\n<pre class=\"prettyprint\"><span class=\"kwd\">if</span><span class=\"pun\">(</span><span class=\"pln\">t</span><span class=\"pun\">-></span><span class=\"pln\">tagName </span><span class=\"pun\">==</span><span class=\"pln\"> htmlTag </span><span class=\"pun\">||</span><span class=\"pln\"> t</span><span class=\"pun\">-></span><span class=\"pln\">tagName </span><span class=\"pun\">==</span><span class=\"pln\"> bodyTag </span><span class=\"pun\">)</span><span class=\"kwd\">return</span><span class=\"pun\">;</span></pre>\n所以网页作者需要注意，除非您想作为反面教材出现在 Webkit 容错代码段的示例中，否则还请编写格式正确的 HTML 代码。\n<p> </p>\n<p> </p>\n<h3 id=\"CSS_parsing\"><span class=\"tocnum\">3.3</span>CSS 解析</h3>\n<p>还记得简介中解析的概念吗？和 HTML 不同，CSS 是上下文无关的语法，可以使用简介中描述的各种解析器进行解析。事实上，<a href=\"http://www.w3.org/TR/CSS2/grammar.html\" target=\"_blank\">CSS 规范定义了 CSS 的词法和语法</a>。</p>\n<p>让我们来看一些示例： <br>词法语法（词汇）是针对各个标记用正则表达式定义的：</p>\n<pre>comment   \\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\/\nnum   [0-9]+|[0-9]*\".\"[0-9]+\nnonascii  [\\200-\\377]\nnmstart   [_a-z]|{nonascii}|{escape}\nnmchar    [_a-z0-9-]|{nonascii}|{escape}\nname    {nmchar}+\nident   {nmstart}{nmchar}*\n</pre>\n<p>“ident”是标识符 (identifier) 的缩写，比如类名。“name”是元素的 ID（通过“#”来引用）。</p>\n<p>语法是采用 BNF 格式描述的。</p>\n<pre class=\"prettyprint lang-css\"><span class=\"kwd\">ruleset</span><span class=\"pun\">:</span><span class=\"pln\"> selector </span><span class=\"pun\">[</span><span class=\"str\">\',\'</span><span class=\"pln\"> S</span><span class=\"pun\">*</span><span class=\"pln\"> selector </span><span class=\"pun\">]*</span><span class=\"str\">\'{\'</span><span class=\"pln\"> S</span><span class=\"pun\">*</span><span class=\"pln\"> declaration </span><span class=\"pun\">[</span><span class=\"str\">\';\'</span><span class=\"pln\"> S</span><span class=\"pun\">*</span><span class=\"pln\"> declaration </span><span class=\"pun\">]*</span><span class=\"str\">\'}\'</span><span class=\"pln\"> S</span><span class=\"pun\">*</span><span class=\"pun\">;</span><span class=\"kwd\">selector</span><span class=\"pun\">:</span><span class=\"pln\"> simple_selector </span><span class=\"pun\">[</span><span class=\"pln\"> combinator selector </span><span class=\"pun\">|</span><span class=\"pln\"> S</span><span class=\"pun\">+</span><span class=\"pun\">[</span><span class=\"pln\"> combinator</span><span class=\"pun\">?</span><span class=\"pln\"> selector </span><span class=\"pun\">]?</span><span class=\"pun\">]?</span><span class=\"pun\">;</span><span class=\"kwd\">simple_selector</span><span class=\"pun\">:</span><span class=\"pln\"> element_name </span><span class=\"pun\">[</span><span class=\"pln\"> HASH </span><span class=\"pun\">|</span><span class=\"pln\"> class </span><span class=\"pun\">|</span><span class=\"pln\"> attrib </span><span class=\"pun\">|</span><span class=\"pln\"> pseudo </span><span class=\"pun\">]*</span><span class=\"pun\">|</span><span class=\"pun\">[</span><span class=\"pln\"> HASH </span><span class=\"pun\">|</span><span class=\"pln\"> class </span><span class=\"pun\">|</span><span class=\"pln\"> attrib </span><span class=\"pun\">|</span><span class=\"pln\"> pseudo </span><span class=\"pun\">]+</span><span class=\"pun\">;</span><span class=\"kwd\">class</span><span class=\"pun\">:</span><span class=\"str\">\'.\'</span><span class=\"pln\"> IDENT\n  </span><span class=\"pun\">;</span><span class=\"kwd\">element_name</span><span class=\"pun\">:</span><span class=\"pln\"> IDENT </span><span class=\"pun\">|</span><span class=\"str\">\'*\'</span><span class=\"pun\">;</span><span class=\"kwd\">attrib</span><span class=\"pun\">:</span><span class=\"str\">\'[\'</span><span class=\"pln\"> S</span><span class=\"pun\">*</span><span class=\"pln\"> IDENT S</span><span class=\"pun\">*</span><span class=\"pun\">[</span><span class=\"pun\">[</span><span class=\"str\">\'=\'</span><span class=\"pun\">|</span><span class=\"pln\"> INCLUDES </span><span class=\"pun\">|</span><span class=\"pln\"> DASHMATCH </span><span class=\"pun\">]</span><span class=\"pln\"> S</span><span class=\"pun\">*</span><span class=\"pun\">[</span><span class=\"pln\"> IDENT </span><span class=\"pun\">|</span><span class=\"pln\"> STRING </span><span class=\"pun\">]</span><span class=\"pln\"> S</span><span class=\"pun\">*</span><span class=\"pun\">]</span><span class=\"str\">\']\'</span><span class=\"pun\">;</span><span class=\"kwd\">pseudo</span><span class=\"pun\">:</span><span class=\"str\">\':\'</span><span class=\"pun\">[</span><span class=\"pln\"> IDENT </span><span class=\"pun\">|</span><span class=\"pln\"> FUNCTION S</span><span class=\"pun\">*</span><span class=\"pun\">[</span><span class=\"pln\">IDENT S</span><span class=\"pun\">*]</span><span class=\"str\">\')\'</span><span class=\"pun\">]</span><span class=\"pun\">;</span></pre>\n解释：这是一个规则集的结构：\n<pre class=\"prettyprint lang-css\"><span class=\"pln\">div</span><span class=\"pun\">.</span><span class=\"pln\">error </span><span class=\"pun\">,</span><span class=\"pln\"> a</span><span class=\"pun\">.</span><span class=\"pln\">error </span><span class=\"pun\">{</span><span class=\"kwd\">color</span><span class=\"pun\">:</span><span class=\"pln\">red</span><span class=\"pun\">;</span><span class=\"kwd\">font-weight</span><span class=\"pun\">:</span><span class=\"pln\">bold</span><span class=\"pun\">;</span><span class=\"pun\">}</span></pre>\ndiv.error 和 a.error 是选择器。大括号内的部分包含了由此规则集应用的规则。此结构的正式定义是这样的：\n<pre class=\"prettyprint lang-css\"><span class=\"kwd\">ruleset</span><span class=\"pun\">:</span><span class=\"pln\"> selector </span><span class=\"pun\">[</span><span class=\"str\">\',\'</span><span class=\"pln\"> S</span><span class=\"pun\">*</span><span class=\"pln\"> selector </span><span class=\"pun\">]*</span><span class=\"str\">\'{\'</span><span class=\"pln\"> S</span><span class=\"pun\">*</span><span class=\"pln\"> declaration </span><span class=\"pun\">[</span><span class=\"str\">\';\'</span><span class=\"pln\"> S</span><span class=\"pun\">*</span><span class=\"pln\"> declaration </span><span class=\"pun\">]*</span><span class=\"str\">\'}\'</span><span class=\"pln\"> S</span><span class=\"pun\">*</span><span class=\"pun\">;</span></pre>\n这表示一个规则集就是一个选择器，或者由逗号和空格（S 表示空格）分隔的多个（数量可选）选择器。规则集包含了大括号，以及其中的一个或多个（数量可选）由分号分隔的声明。“声明”和“选择器”将由下面的 BNF 格式定义。\n<p> </p>\n<h4 id=\"Webkit_CSS_parser\"><span class=\"tocnum\">3.3.1</span>Webkit CSS 解析器</h4>\n<p>Webkit 使用 <a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#parser_generators\">Flex 和 Bison</a> 解析器生成器，通过 CSS 语法文件自动创建解析器。正如我们之前在解析器简介中所说，Bison 会创建自下而上的移位归约解析器。Firefox 使用的是人工编写的自上而下的解析器。这两种解析器都会将 CSS 文件解析成 StyleSheet 对象，且每个对象都包含 CSS 规则。CSS 规则对象则包含选择器和声明对象，以及其他与 CSS 语法对应的对象。</p>\n                                                      <img src=\"https://pic002.cnblogs.com/images/2012/40481/2012103113243956.png\" alt=\"\"><br><span data-count=\"12\">                                                                                       图</span>：解析 CSS\n<h3 id=\"The_order_of_processing_scripts_and_style_sheets\"><span class=\"tocnum\">3.4</span>处理脚本和样式表的顺序</h3>\n<h4 id=\"Scripts\"><span class=\"tocnum\">3.4.1</span>脚本</h4>\n<p>网络的模型是同步的。网页作者希望解析器遇到 <script> 标记时立即解析并执行脚本。文档的解析将停止，直到脚本执行完毕。如果脚本是外部的，那么解析过程会停止，直到从网络同步抓取资源完成后再继续。此模型已经使用了多年，也在 HTML4 和 HTML5 规范中进行了指定。作者也可以将脚本标注为“defer”，这样它就不会停止文档解析，而是等到解析结束才执行。HTML5 增加了一个选项，可将脚本标记为异步，以便由其他线程解析和执行。</p>\n<h4 id=\"Speculative_parsing\"><span class=\"tocnum\">3.4.2</span>预解析</h4>\n<p>Webkit 和 Firefox 都进行了这项优化。在执行脚本时，其他线程会解析文档的其余部分，找出并加载需要通过网络加载的其他资源。通过这种方式，资源可以在并行连接上加载，从而提高总体速度。请注意，预解析器不会修改 DOM 树，而是将这项工作交由主解析器处理；预解析器只会解析外部资源（例如外部脚本、样式表和图片）的引用。</p>\n<h4 id=\"Style_sheets\"><span class=\"tocnum\">3.4.3</span>样式表</h4>\n<p>另一方面，样式表有着不同的模型。理论上来说，应用样式表不会更改 DOM 树，因此似乎没有必要等待样式表并停止文档解析。但这涉及到一个问题，就是脚本在文档解析阶段会请求样式信息。如果当时还没有加载和解析样式，脚本就会获得错误的回复，这样显然会产生很多问题。这看上去是一个非典型案例，但事实上非常普遍。Firefox 在样式表加载和解析的过程中，会禁止所有脚本。而对于 Webkit 而言，仅当脚本尝试访问的样式属性可能受尚未加载的样式表影响时，它才会禁止该脚本。</p>\n<h5 class=\"tocchap\">Chapter 4</h5>\n<h3 id=\"Render_tree_construction\">呈现树构建</h3>\n<p>在 DOM 树构建的同时，浏览器还会构建另一个树结构：呈现树。这是由可视化元素按照其显示顺序而组成的树，也是文档的可视化表示。它的作用是让您按照正确的顺序绘制内容。</p>\n<p>Firefox 将呈现树中的元素称为“框架”。Webkit 使用的术语是呈现器或呈现对象。 <br>呈现器知道如何布局并将自身及其子元素绘制出来。 <br>Webkits RenderObject 类是所有呈现器的基类，其定义如下：</p>\n<pre class=\"prettyprint\"><span class=\"kwd\">class</span><span class=\"typ\">RenderObject</span><span class=\"pun\">{</span><span class=\"kwd\">virtual</span><span class=\"kwd\">void</span><span class=\"pln\"> layout</span><span class=\"pun\">();</span><span class=\"kwd\">virtual</span><span class=\"kwd\">void</span><span class=\"pln\"> paint</span><span class=\"pun\">(</span><span class=\"typ\">PaintInfo</span><span class=\"pun\">);</span><span class=\"kwd\">virtual</span><span class=\"kwd\">void</span><span class=\"pln\"> rect repaintRect</span><span class=\"pun\">();</span><span class=\"typ\">Node</span><span class=\"pun\">*</span><span class=\"pln\"> node</span><span class=\"pun\">;</span><span class=\"com\">//the DOM node</span><span class=\"typ\">RenderStyle</span><span class=\"pun\">*</span><span class=\"pln\"> style</span><span class=\"pun\">;</span><span class=\"com\">// the computed style</span><span class=\"typ\">RenderLayer</span><span class=\"pun\">*</span><span class=\"pln\"> containgLayer</span><span class=\"pun\">;</span><span class=\"com\">//the containing z-index layer</span><span class=\"pun\">}</span></pre>\n<p> </p>\n<p>每一个呈现器都代表了一个矩形的区域，通常对应于相关节点的 CSS 框，这一点在 CSS2 规范中有所描述。它包含诸如宽度、高度和位置等几何信息。 <br>框的类型会受到与节点相关的“display”样式属性的影响（请参阅<a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#style_computation\">样式计算</a>章节）。下面这段 Webkit 代码描述了根据 display 属性的不同，针对同一个 DOM 节点应创建什么类型的呈现器。</p>\n<pre class=\"prettyprint\"><span class=\"typ\">RenderObject</span><span class=\"pun\">*</span><span class=\"typ\">RenderObject</span><span class=\"pun\">::</span><span class=\"pln\">createObject</span><span class=\"pun\">(</span><span class=\"typ\">Node</span><span class=\"pun\">*</span><span class=\"pln\"> node</span><span class=\"pun\">,</span><span class=\"typ\">RenderStyle</span><span class=\"pun\">*</span><span class=\"pln\"> style</span><span class=\"pun\">)</span><span class=\"pun\">{</span><span class=\"typ\">Document</span><span class=\"pun\">*</span><span class=\"pln\"> doc </span><span class=\"pun\">=</span><span class=\"pln\"> node</span><span class=\"pun\">-></span><span class=\"pln\">document</span><span class=\"pun\">();</span><span class=\"typ\">RenderArena</span><span class=\"pun\">*</span><span class=\"pln\"> arena </span><span class=\"pun\">=</span><span class=\"pln\"> doc</span><span class=\"pun\">-></span><span class=\"pln\">renderArena</span><span class=\"pun\">();</span><span class=\"pun\">...</span><span class=\"typ\">RenderObject</span><span class=\"pun\">*</span><span class=\"pln\"> o </span><span class=\"pun\">=</span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"kwd\">switch</span><span class=\"pun\">(</span><span class=\"pln\">style</span><span class=\"pun\">-></span><span class=\"pln\">display</span><span class=\"pun\">())</span><span class=\"pun\">{</span><span class=\"kwd\">case</span><span class=\"pln\"> NONE</span><span class=\"pun\">:</span><span class=\"kwd\">break</span><span class=\"pun\">;</span><span class=\"kwd\">case</span><span class=\"pln\"> INLINE</span><span class=\"pun\">:</span><span class=\"pln\">\n            o </span><span class=\"pun\">=</span><span class=\"kwd\">new</span><span class=\"pun\">(</span><span class=\"pln\">arena</span><span class=\"pun\">)</span><span class=\"typ\">RenderInline</span><span class=\"pun\">(</span><span class=\"pln\">node</span><span class=\"pun\">);</span><span class=\"kwd\">break</span><span class=\"pun\">;</span><span class=\"kwd\">case</span><span class=\"pln\"> BLOCK</span><span class=\"pun\">:</span><span class=\"pln\">\n            o </span><span class=\"pun\">=</span><span class=\"kwd\">new</span><span class=\"pun\">(</span><span class=\"pln\">arena</span><span class=\"pun\">)</span><span c', '序言\n--\n\n这是一篇全面介绍 Webkit 和 Gecko 内部操作的入门文章，是以色列开发人员塔利·加希尔大量研究的成果。在过去的几年中，她查阅了所有公开发布的关于浏览器内部机制的数据（请参见[资源](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Resources)），并花了很多时间来研读网络浏览器的源代码。她写道：\n\n> 在 IE 占据 90% 市场份额的年代，我们除了把浏览器当成一个“黑箱”，什么也做不了。但是现在，开放源代码的浏览器拥有了[过半的市场份额](http://techcrunch.com/2011/08/01/open-web-browsers/)，因此，是时候来揭开神秘的面纱，一探网络浏览器的内幕了。呃，里面只有数以百万行计的 C++ 代码...\n\n塔利在[她的网站](http://taligarsiel.com/)上公布了自己的研究成果，但是我们觉得它值得让更多的人来了解，所以我们在此重新整理并公布(原文：[How browsers work-Behind the scenes of modern web browsers](http://taligarsiel.com/Projects/howbrowserswork1.htm))。\n\n作为一名网络开发人员，**学习浏览器的内部工作原理将有助于您作出更明智的决策，并理解那些最佳开发实践的个中缘由**。尽管这是一篇相当长的文档，但是我们建议您花些时间来仔细阅读；读完之后，您肯定会觉得所费不虚。保罗·爱丽诗 (Paul Irish)，Chrome 浏览器开发人员事务部\n\n* * *\n\n简介\n--\n\n网络浏览器很可能是使用最广的软件。在这篇入门文章中，我将会介绍它们的幕后工作原理。我们会了解到，从您在地址栏输入 `google.com` 直到您在浏览器屏幕上看到 Google 首页的整个过程中都发生了些什么。\n\n### 目录\n\n1.  [简介](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Introduction)\n    1.  [我们要讨论的浏览器](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#The_browsers_we_will_talk_about)\n    2.  [浏览器的主要功能](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#The_browser_main_functionality)\n    3.  [浏览器的高层结构](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#The_browser_high_level_structure)\n2.  [呈现引擎](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#The_rendering_engine)\n    1.  [呈现引擎](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Rendering_engines)\n    2.  [主流程](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#The_main_flow)\n    3.  [主流程示例](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Main_flow_examples)\n3.  [解析和 DOM 树构建](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Parsing_general)\n    1.  [解析 \\- 综述](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Parsing_general)\n        1.  [语法](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Grammars)\n        2.  [解析器和词法分析器的组合](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Parser_Lexer_combination)\n        3.  [翻译](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Translation)\n        4.  [解析示例](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Parsing_example)\n        5.  [词汇和语法的正式定义](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Formal_definitions_for_vocabulary_and_syntax)\n        6.  [解析器类型](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Types_of_parsers)\n        7.  [自动生成解析器](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Generating_parsers_automatically)\n    2.  [HTML 解析器](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#HTML_Parser)\n        1.  [HTML 语法定义](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#The_HTML_grammar_definition)\n        2.  [非与上下文无关的语法](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Not_a_context_free_grammar)\n        3.  [HTML DTD](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#HTML_DTD)\n        4.  [DOM](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#DOM)\n        5.  [解析算法](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#The_parsing_algorithm)\n        6.  [标记化算法](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#The_tokenization_algorithm)\n        7.  [树构建算法](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Tree_construction_algorithm)\n        8.  [解析结束后的操作](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Actions_when_the_parsing_is_finished)\n        9.  [浏览器的容错机制](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Browsers_error_tolerance)\n    3.  [CSS 解析](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#CSS_parsing)\n        1.  [Webkit CSS 解析器](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Webkit_CSS_parser)\n    4.  [处理脚本和样式表的顺序](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#The_order_of_processing_scripts_and_style_sheets)\n        1.  [脚本](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Scripts)\n        2.  [预解析](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Speculative_parsing)\n        3.  [样式表](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Style_sheets)\n4.  [呈现树构建](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Render_tree_construction)\n    1.  [呈现树和 DOM 树的关系](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#The_render_tree_relation_to_the_DOM_tree)\n    2.  [构建呈现树的流程](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#The_flow_of_constructing_the_tree)\n    3.  [样式计算](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Style_Computation)\n        1.  [共享样式数据](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Sharing_style_data)\n        2.  [Firefox 规则树](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Firefox_rule_tree)\n            1.  [结构划分](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Division_into_structs)\n            2.  [使用规则树计算样式上下文](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Computing_the_style_contexts_using_the_rule_tree)\n        3.  [对规则进行处理以简化匹配](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Manipulating_the_rules_for_an_easy_match)\n        4.  [以正确的层叠顺序应用规则](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Applying_the_rules_in_the_correct_cascade_order)\n            1.  [样式表层叠顺序](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Style_sheet_cascade_order)\n            2.  [特异性](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Specificity)\n            3.  [规则排序](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Sorting_the_rules)\n    4.  [渐进式处理](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Gradual_process)\n5.  [布局](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Layout)\n    1.  [Dirty 位系统](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Dirty_bit_system)\n    2.  [全局布局和增量布局](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Global_and_incremental_layout)\n    3.  [异步布局和同步布局](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Asynchronous_and_Synchronous_layout)\n    4.  [优化](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Optimizations)\n    5.  [布局处理](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#The_layout_process)\n    6.  [宽度计算](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Width_calculation)\n    7.  [换行](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Line_Breaking)\n6.  [绘制](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Painting)\n    1.  [全局绘制和增量绘制](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Global_and_Incremental)\n    2.  [绘制顺序](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#The_painting_order)\n    3.  [Firefox 显示列表](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Firefox_display_list)\n    4.  [Webkit 矩形存储](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Webkit_rectangle_storage)\n7.  [动态变化](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Dynamic_changes)\n8.  [呈现引擎的线程](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#The_rendering_engines_threads)\n    1.  [事件循环](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Event_loop)\n9.  [CSS2 可视化模型](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#css)\n    1.  [画布](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#The_canvas)\n    2.  [CSS 框模型](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#CSS_Box_model)\n    3.  [定位方案](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Positioning_scheme)\n    4.  [框类型](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Box_types)\n    5.  [定位](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Positioning)\n        1.  [相对定位](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Relative)\n        2.  [浮动定位](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Floats)\n        3.  [绝对定位和固定定位](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Absolute_and_fixed)\n    6.  [分层展示](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Layered_representation)\n10.  [资源](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Resources)\n\n### 1.1我们要讨论的浏览器\n\n目前使用的主流浏览器有五个：Internet Explorer、Firefox、Safari、Chrome 浏览器和 Opera。本文中以开放源代码浏览器为例，即 Firefox、Chrome 浏览器和 Safari（部分开源）。根据 [StatCounter 浏览器统计数据](http://gs.statcounter.com/)，目前（2011 年 8 月）Firefox、Safari 和 Chrome 浏览器的总市场占有率将近 60%。由此可见，如今开放源代码浏览器在浏览器市场中占据了非常坚实的部分。\n\n### 1.2浏览器的主要功能\n\n浏览器的主要功能就是向服务器发出请求，在浏览器窗口中展示您选择的网络资源。这里所说的资源一般是指 HTML 文档，也可以是 PDF、图片或其他的类型。资源的位置由用户使用 URI（统一资源标示符）指定。\n\n浏览器解释并显示 HTML 文件的方式是在 HTML 和 CSS 规范中指定的。这些规范由网络标准化组织 W3C（万维网联盟）进行维护。   \n多年以来，各浏览器都没有完全遵从这些规范，同时还在开发自己独有的扩展程序，这给网络开发人员带来了严重的兼容性问题。如今，大多数的浏览器都是或多或少地遵从规范。\n\n浏览器的用户界面有很多彼此相同的元素，其中包括：\n\n*   用来输入 URI 的地址栏\n*   前进和后退按钮\n*   书签设置选项\n*   用于刷新和停止加载当前文档的刷新和停止按钮\n*   用于返回主页的主页按钮\n\n奇怪的是，浏览器的用户界面并没有任何正式的规范，这是多年来的最佳实践自然发展以及彼此之间相互模仿的结果。HTML5 也没有定义浏览器必须具有的用户界面元素，但列出了一些通用的元素，例如地址栏、状态栏和工具栏等。当然，各浏览器也可以有自己独特的功能，比如 Firefox 的下载管理器。\n\n### 1.3浏览器的高层结构\n\n浏览器的主要组件为 ([1.1](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#1_1))：\n\n1.  **用户界面** \\- 包括地址栏、前进/后退按钮、书签菜单等。除了浏览器主窗口显示的您请求的页面外，其他显示的各个部分都属于用户界面。\n2.  **浏览器引擎** \\- 在用户界面和呈现引擎之间传送指令。\n3.  **呈现引擎** \\- 负责显示请求的内容。如果请求的内容是 HTML，它就负责解析 HTML 和 CSS 内容，并将解析后的内容显示在屏幕上。\n4.  **网络** \\- 用于网络调用，比如 HTTP 请求。其接口与平台无关，并为所有平台提供底层实现。\n5.  **用户界面后端** \\- 用于绘制基本的窗口小部件，比如组合框和窗口。其公开了与平台无关的通用接口，而在底层使用操作系统的用户界面方法。\n6.  **JavaScript 解释器**。用于解析和执行 JavaScript 代码。\n7.  **数据存储**。这是持久层。浏览器需要在硬盘上保存各种数据，例如 Cookie。新的 HTML 规范 (HTML5) 定义了“网络数据库”，这是一个完整（但是轻便）的浏览器内数据库。\n\n                                                                   ![](http://1-ps.googleusercontent.com/x/s.html5rocks-hrd.appspot.com/www.html5rocks.com/zh/tutorials/internals/howbrowserswork/layers.png.pagespeed.ce.mFE5F8CtAV.png)\n\n                                                                                图：浏览器的主要组件。\n\n值得注意的是，和大多数浏览器不同，Chrome 浏览器的每个标签页都分别对应一个呈现引擎实例。每个标签页都是一个独立的进程。\n\n##### Chapter 2\n\n呈现引擎\n----\n\n呈现引擎的作用嘛...当然就是“呈现”了，也就是在浏览器的屏幕上显示请求的内容。\n\n默认情况下，呈现引擎可显示 HTML 和 XML 文档与图片。通过插件（或浏览器扩展程序），还可以显示其它类型的内容；例如，使用 PDF 查看器插件就能显示 PDF 文档。但是在本章中，我们将集中介绍其主要用途：显示使用 CSS 格式化的 HTML 内容和图片。\n\n### 2.1呈现引擎\n\n本文所讨论的浏览器（Firefox、Chrome 浏览器和 Safari）是基于两种呈现引擎构建的。Firefox 使用的是 Gecko，这是 Mozilla 公司“自制”的呈现引擎。而 Safari 和 Chrome 浏览器使用的都是 Webkit。\n\nWebkit 是一种开放源代码呈现引擎，起初用于 Linux 平台，随后由 Apple 公司进行修改，从而支持苹果机和 Windows。有关详情，请参阅[webkit.org](http://webkit.org/)。\n\n### 2.2主流程\n\n呈现引擎一开始会从网络层获取请求文档的内容，内容的大小一般限制在 8000 个块以内。\n\n然后进行如下所示的基本流程：\n\n                                     ![](http://1-ps.googleusercontent.com/x/s.html5rocks-hrd.appspot.com/www.html5rocks.com/zh/tutorials/internals/howbrowserswork/flow.png.pagespeed.ce.pK__f2HjCm.png)\n\n                                                                         图：呈现引擎的基本流程。\n\n呈现引擎将开始解析 HTML 文档，并将各标记逐个转化成“内容树”上的 [DOM](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#DOM) 节点。同时也会解析外部 CSS 文件以及样式元素中的样式数据。HTML 中这些带有视觉指令的样式信息将用于创建另一个树结构：[呈现树](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Render_tree_construction)。\n\n呈现树包含多个带有视觉属性（如颜色和尺寸）的矩形。这些矩形的排列顺序就是它们将在屏幕上显示的顺序。\n\n呈现树构建完毕之后，进入“[布局](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#layout)”处理阶段，也就是为每个节点分配一个应出现在屏幕上的确切坐标。下一个阶段是[绘制](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#Painting) \\- 呈现引擎会遍历呈现树，由用户界面后端层将每个节点绘制出来。\n\n需要着重指出的是，这是一个渐进的过程。为达到更好的用户体验，呈现引擎会力求尽快将内容显示在屏幕上。它不必等到整个 HTML 文档解析完毕之后，就会开始构建呈现树和设置布局。在不断接收和处理来自网络的其余内容的同时，呈现引擎会将部分内容解析并显示出来。\n\n#### 2.3主流程示例\n\n                                                     ![](http://1-ps.googleusercontent.com/x/s.html5rocks-hrd.appspot.com/www.html5rocks.com/zh/tutorials/internals/howbrowserswork/webkitflow.png.pagespeed.ce.KhQEkvbb3q.png)\n\n                                                                                    图：Webkit 主流程\n\n                                                  ![](http://1-ps.googleusercontent.com/x/s.html5rocks-hrd.appspot.com/www.html5rocks.com/zh/tutorials/internals/howbrowserswork/624x290wimage008.jpg.pagespeed.ic.Oe-U0yQz2z.webp)\n\n                                                                             图：Mozilla 的 Gecko 呈现引擎主流程 ([3.6](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#3_6))\n\n从图 3 和图 4 可以看出，虽然 Webkit 和 Gecko 使用的术语略有不同，但整体流程是基本相同的。\n\nGecko 将视觉格式化元素组成的树称为“框架树”。每个元素都是一个框架。Webkit 使用的术语是“呈现树”，它由“呈现对象”组成。对于元素的放置，Webkit 使用的术语是“布局”，而 Gecko 称之为“重排”。对于连接 DOM 节点和可视化信息从而创建呈现树的过程，Webkit 使用的术语是“附加”。有一个细微的非语义差别，就是 Gecko 在 HTML 与 DOM 树之间还有一个称为“内容槽”的层，用于生成 DOM 元素。我们会逐一论述流程中的每一部分：\n\n##### Chapter 3\n\n### 3.1解析 \\- 综述\n\n解析是呈现引擎中非常重要的一个环节，因此我们要更深入地讲解。首先，来介绍一下解析。\n\n解析文档是指将文档转化成为有意义的结构，也就是可让代码理解和使用的结构。解析得到的结果通常是代表了文档结构的节点树，它称作解析树或者语法树。\n\n示例 \\- 解析 2 + 3 - 1 这个表达式，会返回下面的树：\n\n                                                     ![](http://1-ps.googleusercontent.com/x/s.html5rocks-hrd.appspot.com/www.html5rocks.com/zh/tutorials/internals/howbrowserswork/400x155wimage009.png.pagespeed.ic.KNewBFnKFk.png)\n\n                                                                           图：数学表达式树节点\n\n#### 3.1.1语法\n\n解析是以文档所遵循的语法规则（编写文档所用的语言或格式）为基础的。所有可以解析的格式都必须对应确定的语法（由词汇和语法规则构成）。这称为[与上下文无关的语法](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#context_free_grammar)。人类语言并不属于这样的语言，因此无法用常规的解析技术进行解析。\n\n#### 3.1.2解析器和词法分析器的组合\n\n解析的过程可以分成两个子过程：词法分析和语法分析。\n\n词法分析是将输入内容分割成大量标记的过程。标记是语言中的词汇，即构成内容的单位。在人类语言中，它相当于语言字典中的单词。\n\n语法分析是应用语言的语法规则的过程。\n\n解析器通常将解析工作分给以下两个组件来处理：**词法分析器**（有时也称为标记生成器），负责将输入内容分解成一个个有效标记；而**解析器**负责根据语言的语法规则分析文档的结构，从而构建解析树。词法分析器知道如何将无关的字符（比如空格和换行符）分离出来。\n\n                                                                                       ![](http://1-ps.googleusercontent.com/x/s.html5rocks-hrd.appspot.com/www.html5rocks.com/zh/tutorials/internals/howbrowserswork/image011.png.pagespeed.ce.yyU1s1o5di.png)\n\n                                                                                     图：从源文档到解析树\n\n解析是一个迭代的过程。通常，解析器会向词法分析器请求一个新标记，并尝试将其与某条语法规则进行匹配。如果发现了匹配规则，解析器会将一个对应于该标记的节点添加到解析树中，然后继续请求下一个标记。\n\n如果没有规则可以匹配，解析器就会将标记存储到内部，并继续请求标记，直至找到可与所有内部存储的标记匹配的规则。如果找不到任何匹配规则，解析器就会引发一个异常。这意味着文档无效，包含语法错误。\n\n#### 3.1.3翻译\n\n很多时候，解析树还不是最终产品。解析通常是在翻译过程中使用的，而翻译是指将输入文档转换成另一种格式。编译就是这样一个例子。编译器可将源代码编译成机器代码，具体过程是首先将源代码解析成解析树，然后将解析树翻译成机器代码文档。\n\n                                                                                         ![](http://1-ps.googleusercontent.com/x/s.html5rocks-hrd.appspot.com/www.html5rocks.com/zh/tutorials/internals/howbrowserswork/image013.png.pagespeed.ce.EGqDLSzaGw.png)\n\n                                                                                          图：编译流程\n\n#### 3.1.4解析示例\n\n在图 5 中，我们通过一个数学表达式建立了解析树。现在，让我们试着定义一个简单的数学语言，用来演示解析的过程。\n\n词汇：我们用的语言可包含整数、加号和减号。\n\n语法：\n\n1.  构成语言的语法单位是表达式、项和运算符。\n2.  我们用的语言可以包含任意数量的表达式。\n3.  表达式的定义是：一个“项”接一个“运算符”，然后再接一个“项”。\n4.  运算符是加号或减号。\n5.  项是一个整数或一个表达式。\n\n让我们分析一下 2 + 3 - 1。   \n匹配语法规则的第一个子串是 2，而根据第 5 条语法规则，这是一个项。匹配语法规则的第二个子串是 2 + 3，而根据第 3 条规则（一个项接一个运算符，然后再接一个项），这是一个表达式。下一个匹配项已经到了输入的结束。2 + 3 - 1 是一个表达式，因为我们已经知道 2 + 3 是一个项，这样就符合“一个项接一个运算符，然后再接一个项”的规则。2 + + 不与任何规则匹配，因此是无效的输入。\n\n#### 3.1.5词汇和语法的正式定义\n\n词汇通常用[正则表达式](http://www.regular-expressions.info/)表示。\n\n例如，我们的示例语言可以定义如下：\n\nINTEGER :0|\\[1-9\\]\\[0-9\\]* PLUS :+ MINUS:-\n\n正如您所看到的，这里用正则表达式给出了整数的定义。\n\n语法通常使用一种称为 [BNF](http://en.wikipedia.org/wiki/Backus%E2%80%93Naur_Form) 的格式来定义。我们的示例语言可以定义如下：\n\nexpression := term  operation  term\noperation := PLUS | MINUS\nterm := INTEGER | expression\n\n之前我们说过，如果语言的语法是与上下文无关的语法，就可以由常规解析器进行解析。与上下文无关的语法的直观定义就是可以完全用 BNF 格式表达的语法。有关正式定义，请参阅[关于与上下文无关的语法的维基百科文章](http://en.wikipedia.org/wiki/Context-free_grammar)。\n\n#### 3.1.6解析器类型\n\n有两种基本类型的解析器：自上而下解析器和自下而上解析器。直观地来说，自上而下的解析器从语法的高层结构出发，尝试从中找到匹配的结构。而自下而上的解析器从低层规则出发，将输入内容逐步转化为语法规则，直至满足高层规则。\n\n让我们来看看这两种解析器会如何解析我们的示例：\n\n自上而下的解析器会从高层的规则开始：首先将 2 + 3 标识为一个表达式，然后将 2 + 3 - 1 标识为一个表达式（标识表达式的过程涉及到匹配其他规则，但是起点是最高级别的规则）。\n\n自下而上的解析器将扫描输入内容，找到匹配的规则后，将匹配的输入内容替换成规则。如此继续替换，直到输入内容的结尾。部分匹配的表达式保存在解析器的堆栈中。\n\n| 堆栈 | 输入 |\n| --- | --- |\n|   | 2 + 3 - 1 |\n| 项 | \\+ 3 - 1 |\n| 项运算 | 3 - 1 |\n| 表达式 | \\- 1 |\n| 表达式运算符 | 1 |\n| 表达式 |  |\n\n这种自下而上的解析器称为移位归约解析器，因为输入在向右移位（设想有一个指针从输入内容的开头移动到结尾），并且逐渐归约到语法规则上。\n\n#### 3.1.7自动生成解析器\n\n有一些工具可以帮助您生成解析器，它们称为解析器生成器。您只要向其提供您所用语言的语法（词汇和语法规则），它就会生成相应的解析器。创建解析器需要对解析有深刻理解，而人工创建优化的解析器并不是一件容易的事情，所以解析器生成器是非常实用的。\n\nWebkit 使用了两种非常有名的解析器生成器：用于创建词法分析器的 [Flex](http://en.wikipedia.org/wiki/Flex_lexical_analyser) 以及用于创建解析器的 [Bison](http://www.gnu.org/software/bison/)（您也可能遇到 Lex 和 Yacc 这样的别名）。Flex 的输入是包含标记的正则表达式定义的文件。Bison 的输入是采用 BNF 格式的语言语法规则。\n\n### 3.2HTML 解析器\n\nHTML 解析器的任务是将 HTML 标记解析成解析树。\n\n#### 3.2.1HTML 语法定义\n\nHTML 的词汇和语法在 W3C 组织创建的[规范](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#w3c)中进行了定义。当前的版本是 HTML4，HTML5 正在处理过程中。\n\n#### 3.2.2非与上下文无关的语法\n\n正如我们在解析过程的简介中已经了解到的，语法可以用 BNF 等格式进行正式定义。\n\n很遗憾，所有的常规解析器都不适用于 HTML（我并不是开玩笑，它们可以用于解析 CSS 和 JavaScript）。HTML 并不能很容易地用解析器所需的与上下文无关的语法来定义。\n\n有一种可以定义 HTML 的正规格式：DTD（Document Type Definition，文档类型定义），但它不是与上下文无关的语法。\n\n这初看起来很奇怪：HTML 和 XML 非常相似。有很多 XML 解析器可以使用。HTML 存在一个 XML 变体 (XHTML)，那么有什么大的区别呢？\n\n区别在于 HTML 的处理更为“宽容”，它允许您省略某些隐式添加的标记，有时还能省略一些起始或者结束标记等等。和 XML 严格的语法不同，HTML 整体来看是一种“软性”的语法。\n\n显然，这种看上去细微的差别实际上却带来了巨大的影响。一方面，这是 HTML 如此流行的原因：它能包容您的错误，简化网络开发。另一方面，这使得它很难编写正式的语法。概括地说，HTML 无法很容易地通过常规解析器解析（因为它的语法不是与上下文无关的语法），也无法通过 XML 解析器来解析。\n\n#### 3.2.3HTML DTD\n\nHTML 的定义采用了 DTD 格式。此格式可用于定义 [SGML](http://en.wikipedia.org/wiki/Standard_Generalized_Markup_Language) 族的语言。它包括所有允许使用的元素及其属性和层次结构的定义。如上文所述，HTML DTD 无法构成与上下文无关的语法。\n\nDTD 存在一些变体。严格模式完全遵守 HTML 规范，而其他模式可支持以前的浏览器所使用的标记。这样做的目的是确保向下兼容一些早期版本的内容。最新的严格模式 DTD 可以在这里找到：[www.w3.org/TR/html4/strict.dtd](http://www.w3.org/TR/html4/strict.dtd)\n\n#### 3.2.4DOM\n\n解析器的输出“解析树”是由 DOM 元素和属性节点构成的树结构。DOM 是文档对象模型 (Document Object Model) 的缩写。它是 HTML 文档的对象表示，同时也是外部内容（例如 JavaScript）与 HTML 元素之间的接口。   \n解析树的根节点是“[Document](http://www.w3.org/TR/1998/REC-DOM-Level-1-19981001/level-one-core.html#i-Document)”对象。\n\nDOM 与标记之间几乎是一一对应的关系。比如下面这段标记：\n\n Hello World \n\nsrc=\"example.png\"/>\n\n可翻译成如下的 DOM 树：\n\n                                                             ![](http://1-ps.googleusercontent.com/x/s.html5rocks-hrd.appspot.com/www.html5rocks.com/zh/tutorials/internals/howbrowserswork/image015.png.pagespeed.ce.OZcOUqth9Q.png)\n\n                                                                                      图：示例标记的 DOM 树\n\n和 HTML 一样，DOM 也是由 W3C 组织指定的。请参见 [www.w3.org/DOM/DOMTR](http://www.w3.org/DOM/DOMTR)。这是关于文档操作的通用规范。其中一个特定模块描述针对 HTML 的元素。HTML 的定义可以在这里找到：[www.w3.org/TR/2003/REC-DOM-Level-2-HTML-20030109/idl-definitions.html](http://www.w3.org/TR/2003/REC-DOM-Level-2-HTML-20030109/idl-definitions.html)。\n\n我所说的树包含 DOM 节点，指的是树是由实现了某个 DOM 接口的元素构成的。浏览器所用的具体实现也会具有一些其他属性，供浏览器在内部使用。\n\n#### 3.2.5解析算法\n\n我们在之前章节已经说过，HTML 无法用常规的自上而下或自下而上的解析器进行解析。\n\n原因在于：\n\n1.  语言的宽容本质。\n2.  浏览器历来对一些常见的无效 HTML 用法采取包容态度。\n3.  解析过程需要不断地反复。源内容在解析过程中通常不会改变，但是在 HTML 中，脚本标记如果包含 `document.write`，就会添加额外的标记，这样解析过程实际上就更改了输入内容。\n\n由于不能使用常规的解析技术，浏览器就创建了自定义的解析器来解析 HTML。\n\n[HTML5 规范详细地描述了解析算法](http://www.whatwg.org/specs/web-apps/current-work/multipage/parsing.html)。此算法由两个阶段组成：标记化和树构建。\n\n标记化是词法分析过程，将输入内容解析成多个标记。HTML 标记包括起始标记、结束标记、属性名称和属性值。\n\n标记生成器识别标记，传递给树构造器，然后接受下一个字符以识别下一个标记；如此反复直到输入的结束。\n\n![](http://1-ps.googleusercontent.com/h/www.gstatic.com/psa/static/1.gif)![](https://pic002.cnblogs.com/images/2012/40481/2012103113175793.jpg)\n\n                                                                       图：HTML\n\n解析流程（摘自 HTML5 规范）\n\n#### 3.2.6标记化算法\n\n该算法的输出结果是 HTML 标记。该算法使用状态机来表示。每一个状态接收来自输入信息流的一个或多个字符，并根据这些字符更新下一个状态。当前的标记化状态和树结构状态会影响进入下一状态的决定。这意味着，即使接收的字符相同，对于下一个正确的状态也会产生不同的结果，具体取决于当前的状态。该算法相当复杂，无法在此详述，所以我们通过一个简单的示例来帮助大家理解其原理。\n\n基本示例 \\- 将下面的 HTML 代码标记化：\n\n Hello world \n\n初始状态是数据状态。遇到字符 `<` 时，状态更改为**“标记打开状态”**。接收一个 `a-z` 字符会创建“起始标记”，状态更改为**“标记名称状态”**。这个状态会一直保持到接收 `>` 字符。在此期间接收的每个字符都会附加到新的标记名称上。在本例中，我们创建的标记是 `html` 标记。\n\n遇到 `>` 标记时，会发送当前的标记，状态改回**“数据状态”**。 标记也会进行同样的处理。目前 `html` 和 `body` 标记均已发出。现在我们回到**“数据状态”**。接收到 `Hello world` 中的 `H` 字符时，将创建并发送字符标记，直到接收  中的 `<`。我们将为 `Hello world` 中的每个字符都发送一个字符标记。\n\n现在我们回到**“标记打开状态”**。接收下一个输入字符 `/` 时，会创建 `end tag token` 并改为**“标记名称状态”**。我们会再次保持这个状态，直到接收 `>`。然后将发送新的标记，并回到**“数据状态”**。 输入也会进行同样的处理。\n\n                                     ![](https://pic002.cnblogs.com/images/2012/40481/2012103113184113.png)  \n                                                                           图：对示例输入进行标记化\n\n#### 3.2.7树构建算法\n\n在创建解析器的同时，也会创建 Document 对象。在树构建阶段，以 Document 为根节点的 DOM 树也会不断进行修改，向其中添加各种元素。标记生成器发送的每个节点都会由树构建器进行处理。规范中定义了每个标记所对应的 DOM 元素，这些元素会在接收到相应的标记时创建。这些元素不仅会添加到 DOM 树中，还会添加到开放元素的堆栈中。此堆栈用于纠正嵌套错误和处理未关闭的标记。其算法也可以用状态机来描述。这些状态称为“插入模式”。\n\n让我们来看看示例输入的树构建过程：\n\n Hello world \n\n树构建阶段的输入是一个来自标记化阶段的标记序列。第一个模式是**“initial mode”**。接收 HTML 标记后转为**“before html”**模式，并在这个模式下重新处理此标记。这样会创建一个 HTMLHtmlElement 元素，并将其附加到 Document 根对象上。\n\n然后状态将改为**“before head”**。此时我们接收“body”标记。即使我们的示例中没有“head”标记，系统也会隐式创建一个 HTMLHeadElement，并将其添加到树中。\n\n现在我们进入了**“in head”**模式，然后转入**“after head”**模式。系统对 body 标记进行重新处理，创建并插入 HTMLBodyElement，同时模式转变为**“body”**。\n\n现在，接收由“Hello world”字符串生成的一系列字符标记。接收第一个字符时会创建并插入“Text”节点，而其他字符也将附加到该节点。\n\n接收 body 结束标记会触发**“after body”**模式。现在我们将接收 HTML 结束标记，然后进入**“after after body”**模式。接收到文件结束标记后，解析过程就此结束。\n\n                                                                    ![](https://pic002.cnblogs.com/images/2012/40481/2012103113224961.gif)  \n                                                                    图：示例 HTML 的树构建\n\n#### 3.2.8解析结束后的操作\n\n在此阶段，浏览器会将文档标注为交互状态，并开始解析那些处于“deferred”模式的脚本，也就是那些应在文档解析完成后才执行的脚本。然后，文档状态将设置为“完成”，一个“加载”事件将随之触发。\n\n您可以[在 HTML5 规范中查看标记化和树构建的完整算法](http://www.w3.org/TR/html5/syntax.html#html-parser)\n\n#### 3.2.9浏览器的容错机制\n\n您在浏览 HTML 网页时从来不会看到“语法无效”的错误。这是因为浏览器会纠正任何无效内容，然后继续工作。\n\n以下面的 HTML 代码为例：\n\n Really lousy HTML \n\n在这里，我已经违反了很多语法规则（“mytag”不是标准的标记，“p”和“div”元素之间的嵌套有误等等），但是浏览器仍然会正确地显示这些内容，并且毫无怨言。因为有大量的解析器代码会纠正 HTML 网页作者的错误。\n\n不同浏览器的错误处理机制相当一致，但令人称奇的是，这种机制并不是 HTML 当前规范的一部分。和书签管理以及前进/后退按钮一样，它也是浏览器在多年发展中的产物。很多网站都普遍存在着一些已知的无效 HTML 结构，每一种浏览器都会尝试通过和其他浏览器一样的方式来修复这些无效结构。\n\nHTML5 规范定义了一部分这样的要求。Webkit 在 HTML 解析器类的开头注释中对此做了很好的概括。\n\n> 解析器对标记化输入内容进行解析，以构建文档树。如果文档的格式正确，就直接进行解析。\n> \n> 遗憾的是，我们不得不处理很多格式错误的 HTML 文档，所以解析器必须具备一定的容错性。\n> \n> 我们至少要能够处理以下错误情况：\n> \n> 1.  明显不能在某些外部标记中添加的元素。在此情况下，我们应该关闭所有标记，直到出现禁止添加的元素，然后再加入该元素。\n> 2.  我们不能直接添加的元素。这很可能是网页作者忘记添加了其中的一些标记（或者其中的标记是可选的）。这些标签可能包括：HTML HEAD BODY TBODY TR TD LI（还有遗漏的吗？）。\n> 3.  向 inline 元素内添加 block 元素。关闭所有 inline 元素，直到出现下一个较高级的 block 元素。\n> 4.  如果这样仍然无效，可关闭所有元素，直到可以添加元素为止，或者忽略该标记。\n\n让我们看一些 Webkit 容错的示例：\n\n##### 使用了  \n而不是  \n\n有些网站使用了  \n而不是  \n。为了与 IE 和 Firefox 兼容，Webkit 将其与  \n做同样的处理。   \n代码如下：\n\nif(t->isCloseTag(brTag)&& m_document->inCompatMode()){ reportError(MalformedBRError); t->beginTag =true;}\n\n请注意，错误处理是在内部进行的，用户并不会看到这个过程。\n\n##### 离散表格\n\n离散表格是指位于其他表格内容中，但又不在任何一个单元格内的表格。   \n比如以下的示例：\n\n| inner table |\n\nouter table\n\nWebkit 会将其层次结构更改为两个同级表格：\n\n| outer table |\n\n| inner table |\n\n代码如下：\n\nif(m_inStrayTableContent && localName == tableTag) popBlock(tableTag);\n\nWebkit 使用一个堆栈来保存当前的元素内容，它会从外部表格的堆栈中弹出内部表格。现在，这两个表格就变成了同级关系。\n\n##### 嵌套的表单元素\n\n如果用户在一个表单元素中又放入了另一个表单，那么第二个表单将被忽略。   \n代码如下：\n\nif(!m_currentFormElement){ m_currentFormElement =newHTMLFormElement(formTag, m_document);}\n\n##### 过于复杂的标记层次结构\n\n代码的注释已经说得很清楚了。 \n\n> 示例网站 www.liceo.edu.mx 嵌套了约 1500 个标记，全都来自一堆 **标记。我们只允许最多 20 层同类型标记的嵌套，如果再嵌套更多，就会全部忽略。**\n\n**\n\nboolHTMLParser::allowNestedRedundantTag(constAtomicString& tagName){unsigned i =0;for(HTMLStackElem* curr = m_blockStack; i < cMaxRedundantTagDepth && curr && curr->tagName == tagName; curr = curr->next, i++){}return i != cMaxRedundantTagDepth;}\n\n##### 放错位置的 html 或者 body 结束标记\n\n同样，代码的注释已经说得很清楚了。\n\n> 支持格式非常糟糕的 HTML 代码。我们从不关闭 body 标记，因为一些愚蠢的网页会在实际文档结束之前就关闭。我们通过调用 end() 来执行关闭操作。\n\nif(t->tagName == htmlTag || t->tagName == bodyTag )return;\n\n所以网页作者需要注意，除非您想作为反面教材出现在 Webkit 容错代码段的示例中，否则还请编写格式正确的 HTML 代码。\n\n### 3.3CSS 解析\n\n还记得简介中解析的概念吗？和 HTML 不同，CSS 是上下文无关的语法，可以使用简介中描述的各种解析器进行解析。事实上，[CSS 规范定义了 CSS 的词法和语法](http://www.w3.org/TR/CSS2/grammar.html)。\n\n让我们来看一些示例：   \n词法语法（词汇）是针对各个标记用正则表达式定义的：\n\ncomment   \\\\/\\\\*\\[^*\\]*\\\\*+(\\[^/*\\]\\[^*\\]*\\\\*+)*\\\\/\nnum   \\[0-9\\]+|\\[0-9\\]*\".\"\\[0-9\\]+\nnonascii  \\[\\\\200-\\\\377\\]\nnmstart   \\[_a-z\\]|{nonascii}|{escape}\nnmchar    \\[_a-z0-9-\\]|{nonascii}|{escape}\nname    {nmchar}+\nident   {nmstart}{nmchar}*\n\n“ident”是标识符 (identifier) 的缩写，比如类名。“name”是元素的 ID（通过“#”来引用）。\n\n语法是采用 BNF 格式描述的。\n\nruleset: selector \\[\',\' S* selector \\]*\'{\' S* declaration \\[\';\' S* declaration \\]*\'}\' S*;selector: simple_selector \\[ combinator selector | S+\\[ combinator? selector \\]?\\]?;simple_selector: element_name \\[ HASH | class | attrib | pseudo \\]*|\\[ HASH | class | attrib | pseudo \\]+;class:\'.\' IDENT ;element_name: IDENT |\'*\';attrib:\'\\[\' S* IDENT S*\\[\\[\'=\'| INCLUDES | DASHMATCH \\] S*\\[ IDENT | STRING \\] S*\\]\'\\]\';pseudo:\':\'\\[ IDENT | FUNCTION S*\\[IDENT S*\\]\')\'\\];\n\n解释：这是一个规则集的结构：\n\ndiv.error , a.error {color:red;font-weight:bold;}\n\ndiv.error 和 a.error 是选择器。大括号内的部分包含了由此规则集应用的规则。此结构的正式定义是这样的：\n\nruleset: selector \\[\',\' S* selector \\]*\'{\' S* declaration \\[\';\' S* declaration \\]*\'}\' S*;\n\n这表示一个规则集就是一个选择器，或者由逗号和空格（S 表示空格）分隔的多个（数量可选）选择器。规则集包含了大括号，以及其中的一个或多个（数量可选）由分号分隔的声明。“声明”和“选择器”将由下面的 BNF 格式定义。\n\n#### 3.3.1Webkit CSS 解析器\n\nWebkit 使用 [Flex 和 Bison](http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#parser_generators) 解析器生成器，通过 CSS 语法文件自动创建解析器。正如我们之前在解析器简介中所说，Bison 会创建自下而上的移位归约解析器。Firefox 使用的是人工编写的自上而下的解析器。这两种解析器都会将 CSS 文件解析成 StyleSheet 对象，且每个对象都包含 CSS 规则。CSS 规则对象则包含选择器和声明对象，以及其他与 CSS 语法对应的对象。\n\n                                                      ![](https://pic002.cnblogs.com/images/2012/40481/2012103113243956.png)  \n                                                                                       图：解析 CSS\n\n### 3.4处理脚本和样式表的顺序\n\n#### 3.4.1脚本\n\n网络的模型是同步的。网页作者希望解析器遇到 标记时立即解析并执行脚本。文档的解析将停止，直到脚本执行完毕。如果脚本是外部的，那么解析过程会停止，直到从网络同步抓取资源完成后再继续。此模型已经使用了多年，也在 HTML4 和 HTML5 规范中进行了指定。作者也可以将脚本标注为“defer”，这样它就不会停止文档解析，而是等到解析结束才执行。HTML5 增加了一个选项，可将脚本标记为异步，以便由其他线程解析和执行。</p> <h4 id=\"Speculative\\_parsing\"><span class=\"tocnum\">3.4.2</span>预解析</h4> <p>Webkit 和 Firefox 都进行了这项优化。在执行脚本时，其他线程会解析文档的其余部分，找出并加载需要通过网络加载的其他资源。通过这种方式，资源可以在并行连接上加载，从而提高总体速度。请注意，预解析器不会修改 DOM 树，而是将这项工作交由主解析器处理；预解析器只会解析外部资源（例如外部脚本、样式表和图片）的引用。</p> <h4 id=\"Style\\_sheets\"><span class=\"tocnum\">3.4.3</span>样式表</h4> <p>另一方面，样式表有着不同的模型。理论上来说，应用样式表不会更改 DOM 树，因此似乎没有必要等待样式表并停止文档解析。但这涉及到一个问题，就是脚本在文档解析阶段会请求样式信息。如果当时还没有加载和解析样式，脚本就会获得错误的回复，这样显然会产生很多问题。这看上去是一个非典型案例，但事实上非常普遍。Firefox 在样式表加载和解析的过程中，会禁止所有脚本。而对于 Webkit 而言，仅当脚本尝试访问的样式属性可能受尚未加载的样式表影响时，它才会禁止该脚本。</p> <h5 class=\"tocchap\">Chapter 4</h5> <h3 id=\"Render\\_tree\\_construction\">呈现树构建</h3> <p>在 DOM 树构建的同时，浏览器还会构建另一个树结构：呈现树。这是由可视化元素按照其显示顺序而组成的树，也是文档的可视化表示。它的作用是让您按照正确的顺序绘制内容。</p> <p>Firefox 将呈现树中的元素称为“框架”。Webkit 使用的术语是呈现器或呈现对象。 <br>呈现器知道如何布局并将自身及其子元素绘制出来。 <br>Webkits RenderObject 类是所有呈现器的基类，其定义如下：</p> <pre class=\"prettyprint\"><span class=\"kwd\">class</span><span class=\"typ\">RenderObject</span><span class=\"pun\">{</span><span class=\"kwd\">virtual</span><span class=\"kwd\">void</span><span class=\"pln\"> layout</span><span class=\"pun\">();</span><span class=\"kwd\">virtual</span><span class=\"kwd\">void</span><span class=\"pln\"> paint</span><span class=\"pun\">(</span><span class=\"typ\">PaintInfo</span><span class=\"pun\">);</span><span class=\"kwd\">virtual</span><span class=\"kwd\">void</span><span class=\"pln\"> rect repaintRect</span><span class=\"pun\">();</span><span class=\"typ\">Node</span><span class=\"pun\">*</span><span class=\"pln\"> node</span><span class=\"pun\">;</span><span class=\"com\">//the DOM node</span><span class=\"typ\">RenderStyle</span><span class=\"pun\">*</span><span class=\"pln\"> style</span><span class=\"pun\">;</span><span class=\"com\">// the computed style</span><span class=\"typ\">RenderLayer</span><span class=\"pun\">*</span><span class=\"pln\"> containgLayer</span><span class=\"pun\">;</span><span class=\"com\">//the containing z-index layer</span><span class=\"pun\">}</span></pre> <p> </p> <p>每一个呈现器都代表了一个矩形的区域，通常对应于相关节点的 CSS 框，这一点在 CSS2 规范中有所描述。它包含诸如宽度、高度和位置等几何信息。 <br>框的类型会受到与节点相关的“display”样式属性的影响（请参阅<a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#style\\_computation\">样式计算</a>章节）。下面这段 Webkit 代码描述了根据 display 属性的不同，针对同一个 DOM 节点应创建什么类型的呈现器。</p> <pre class=\"prettyprint\"><span class=\"typ\">RenderObject</span><span class=\"pun\">*</span><span class=\"typ\">RenderObject</span><span class=\"pun\">::</span><span class=\"pln\">createObject</span><span class=\"pun\">(</span><span class=\"typ\">Node</span><span class=\"pun\">*</span><span class=\"pln\"> node</span><span class=\"pun\">,</span><span class=\"typ\">RenderStyle</span><span class=\"pun\">*</span><span class=\"pln\"> style</span><span class=\"pun\">)</span><span class=\"pun\">{</span><span class=\"typ\">Document</span><span class=\"pun\">*</span><span class=\"pln\"> doc </span><span class=\"pun\">=</span><span class=\"pln\"> node</span><span class=\"pun\">-></span><span class=\"pln\">document</span><span class=\"pun\">();</span><span class=\"typ\">RenderArena</span><span class=\"pun\">*</span><span class=\"pln\"> arena </span><span class=\"pun\">=</span><span class=\"pln\"> doc</span><span class=\"pun\">-></span><span class=\"pln\">renderArena</span><span class=\"pun\">();</span><span class=\"pun\">...</span><span class=\"typ\">RenderObject</span><span class=\"pun\">*</span><span class=\"pln\"> o </span><span class=\"pun\">=</span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"kwd\">switch</span><span class=\"pun\">(</span><span class=\"pln\">style</span><span class=\"pun\">-></span><span class=\"pln\">display</span><span class=\"pun\">())</span><span class=\"pun\">{</span><span class=\"kwd\">case</span><span class=\"pln\"> NONE</span><span class=\"pun\">:</span><span class=\"kwd\">break</span><span class=\"pun\">;</span><span class=\"kwd\">case</span><span class=\"pln\"> INLINE</span><span class=\"pun\">:</span><span class=\"pln\"> o </span><span class=\"pun\">=</span><span class=\"kwd\">new</span><span class=\"pun\">(</span><span class=\"pln\">arena</span><span class=\"pun\">)</span><span class=\"typ\">RenderInline</span><span class=\"pun\">(</span><span class=\"pln\">node</span><span class=\"pun\">);</span><span class=\"kwd\">break</span><span class=\"pun\">;</span><span class=\"kwd\">case</span><span class=\"pln\"> BLOCK</span><span class=\"pun\">:</span><span class=\"pln\"> o </span><span class=\"pun\">=</span><span class=\"kwd\">new</span><span class=\"pun\">(</span><span class=\"pln\">arena</span><span class=\"pun\">)</span><span class=\"typ\">RenderBlock</span><span class=\"pun\">(</span><span class=\"pln\">node</span><span class=\"pun\">);</span><span class=\"kwd\">break</span><span class=\"pun\">;</span><span class=\"kwd\">case</span><span class=\"pln\"> INLINE\\_BLOCK</span><span class=\"pun\">:</span><span class=\"pln\"> o </span><span class=\"pun\">=</span><span class=\"kwd\">new</span><span class=\"pun\">(</span><span class=\"pln\">arena</span><span class=\"pun\">)</span><span class=\"typ\">RenderBlock</span><span class=\"pun\">(</span><span class=\"pln\">node</span><span class=\"pun\">);</span><span class=\"kwd\">break</span><span class=\"pun\">;</span><span class=\"kwd\">case</span><span class=\"pln\"> LIST\\_ITEM</span><span class=\"pun\">:</span><span class=\"pln\"> o </span><span class=\"pun\">=</span><span class=\"kwd\">new</span><span class=\"pun\">(</span><span class=\"pln\">arena</span><span class=\"pun\">)</span><span class=\"typ\">RenderListItem</span><span class=\"pun\">(</span><span class=\"pln\">node</span><span class=\"pun\">);</span><span class=\"kwd\">break</span><span class=\"pun\">;</span><span class=\"pun\">...</span><span class=\"pun\">}</span><span class=\"kwd\">return</span><span class=\"pln\"> o</span><span class=\"pun\">;</span><span class=\"pun\">}</span></pre> 元素类型也是考虑因素之一，例如表单控件和表格都对应特殊的框架。 <br>在 Webkit 中，如果一个元素需要创建特殊的呈现器，就会替换 <code>createRenderer</code> 方法。呈现器所指向的样式对象中包含了一些和几何无关的信息。 <p> </p> <h5 id=\"The\\_render\\_tree\\_relation\\_to\\_the\\_DOM\\_tree\"><span class=\"tocnum\">4.1</span>呈现树和 DOM 树的关系</h5> 呈现器是和 DOM 元素相对应的，但并非一一对应。非可视化的 DOM 元素不会插入呈现树中，例如“head”元素。如果元素的 display 属性值为“none”，那么也不会显示在呈现树中（但是 visibility 属性值为“hidden”的元素仍会显示）。 <p> </p> <p>有一些 DOM 元素对应多个可视化对象。它们往往是具有复杂结构的元素，无法用单一的矩形来描述。例如，“select”元素有 3 个呈现器：一个用于显示区域，一个用于下拉列表框，还有一个用于按钮。如果由于宽度不够，文本无法在一行中显示而分为多行，那么新的行也会作为新的呈现器而添加。 <br>另一个关于多呈现器的例子是格式无效的 HTML。根据 CSS 规范，inline 元素只能包含 block 元素或 inline 元素中的一种。如果出现了混合内容，则应创建匿名的 block 呈现器，以包裹 inline 元素。</p> <p>有一些呈现对象对应于 DOM 节点，但在树中所在的位置与 DOM 节点不同。浮动定位和绝对定位的元素就是这样，它们处于正常的流程之外，放置在树中的其他地方，并映射到真正的框架，而放在原位的是占位框架。</p>                             <img src=\"http://1-ps.googleusercontent.com/x/s.html5rocks-hrd.appspot.com/www.html5rocks.com/zh/tutorials/internals/howbrowserswork/image025.png.pagespeed.ce.3lhNd6H7V4.png\" alt=\"\" width=\"731\" height=\"396\"></div> <div><span data-count=\"13\">                                              图</span>：呈现树及其对应的 DOM 树 (<a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#3\\_1\">3.1</a>)。初始容器 block 为“viewport”，而在 Webkit 中则为“RenderView”对象。 <h5 id=\"The\\_flow\\_of\\_constructing\\_the\\_tree\"><span class=\"tocnum\">4.2</span>构建呈现树的流程</h5> <p>在 Firefox 中，系统会针对 DOM 更新注册展示层，作为侦听器。展示层将框架创建工作委托给 <code>FrameConstructor</code>，由该构造器解析样式（请参阅<a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#style\">样式计算</a>）并创建框架。</p> <p>在 Webkit 中，解析样式和创建呈现器的过程称为“附加”。每个 DOM 节点都有一个“attach”方法。附加是同步进行的，将节点插入 DOM 树需要调用新的节点“attach”方法。</p> <p>处理 html 和 body 标记就会构建呈现树根节点。这个根节点呈现对象对应于 CSS 规范中所说的容器 block，这是最上层的 block，包含了其他所有 block。它的尺寸就是视口，即浏览器窗口显示区域的尺寸。Firefox 称之为 <code>ViewPortFrame</code>，而 Webkit 称之为 <code>RenderView</code>。这就是文档所指向的呈现对象。呈现树的其余部分以 DOM 树节点插入的形式来构建。</p> <p>请参阅<a href=\"http://www.w3.org/TR/CSS21/intro.html#processing-model\" target=\"\\_blank\">关于处理模型的 CSS2 规范</a>。</p> <h4 id=\"Style\\_Computation\"><span class=\"tocnum\">4.3</span>样式计算</h4> <p>构建呈现树时，需要计算每一个呈现对象的可视化属性。这是通过计算每个元素的样式属性来完成的。</p> <p>样式包括来自各种来源的样式表、inline 样式元素和 HTML 中的可视化属性（例如“bgcolor”属性）。其中后者将经过转化以匹配 CSS 样式属性。</p> <p>样式表的来源包括浏览器的默认样式表、由网页作者提供的样式表以及由浏览器用户提供的用户样式表（浏览器允许您定义自己喜欢的样式。以 Firefox 为例，用户可以将自己喜欢的样式表放在“Firefox Profile”文件夹下）。</p> <p>样式计算存在以下难点：</p> <ol> <li><a id=\"issue1\">样式</a>数据是一个超大的结构，存储了无数的样式属性，这可能造成内存问题。</li> <li> <p><a id=\"issue2\">如果</a>不进行优化，为每一个元素查找匹配的规则会造成性能问题。要为每一个元素遍历整个规则列表来寻找匹配规则，这是一项浩大的工程。选择器会具有很复杂的结构，这就会导致某个匹配过程一开始看起来很可能是正确的，但最终发现其实是徒劳的，必须尝试其他匹配路径。</p> <p>例如下面这个组合选择器：</p> <pre class=\"prettyprint\"><span class=\"pln\">div div div div</span><span class=\"pun\">{</span><span class=\"pun\">...</span><span class=\"pun\">}</span></pre> 这意味着规则适用于作为 3 个 div 元素的子代的 <code><div></code>。如果您要检查规则是否适用于某个指定的 <code><div></code> 元素，应选择树上的一条向上路径进行检查。您可能需要向上遍历节点树，结果发现只有两个 div，而且规则并不适用。然后，您必须尝试树中的其他路径。</li> <li><a id=\"issue3\">应用</a>规则涉及到相当复杂的层叠规则（用于定义这些规则的层次）。</li> </ol>让我们来看看浏览器是如何处理这些问题的： <h5 id=\"Sharing\\_style\\_data\"><span class=\"tocnum\">4.3.1</span>共享样式数据</h5> <p>Webkit 节点会引用样式对象 (RenderStyle)。这些对象在某些情况下可以由不同节点共享。这些节点是同级关系，并且：</p> <ol> <li>这些元素必须处于相同的鼠标状态（例如，不允许其中一个是“:hover”状态，而另一个不是）</li> <li>任何元素都没有 ID</li> <li>标记名称应匹配</li> <li>类属性应匹配</li> <li>映射属性的集合必须是完全相同的</li> <li>链接状态必须匹配</li> <li>焦点状态必须匹配</li> <li>任何元素都不应受属性选择器的影响，这里所说的“影响”是指在选择器中的任何位置有任何使用了属性选择器的选择器匹配</li> <li>元素中不能有任何 inline 样式属性</li> <li>不能使用任何同级选择器。WebCore 在遇到任何同级选择器时，只会引发一个全局开关，并停用整个文档的样式共享（如果存在）。这包括 + 选择器以及 :first-child 和 :last-child 等选择器。</li> </ol> <h5 id=\"Firefox\\_rule\\_tree\"><span class=\"tocnum\">4.3.2</span>Firefox 规则树</h5> <p>为了简化样式计算，Firefox 还采用了另外两种树：规则树和样式上下文树。Webkit 也有样式对象，但它们不是保存在类似样式上下文树这样的树结构中，只是由 DOM 节点指向此类对象的相关样式。</p>                                                              <img src=\"https://pic002.cnblogs.com/images/2012/40481/2012103113264155.png\" alt=\"\"><br><span data-count=\"14\">图</span>：Firefox 样式上下文树 (<a href=\"http://www.cnblogs.com/chehaoj/archive/2012/10/31/2747904.html#2\\_2\">2.2</a>) <p>样式上下文包含端值。要计算出这些值，应按照正确顺序应用所有的匹配规则，并将其从逻辑值转化为具体的值。例如，如果逻辑值是屏幕大小的百分比，则需要换算成绝对的单位。规则树的点子真的很巧妙，它使得节点之间可以共享这些值，以避免重复计算，还可以节约空间。</p> <p>所有匹配的规则都存储在树中。路径中的底层节点拥有较高的优先级。规则树包含了所有已知规则匹配的路径。规则的存储是延迟进行的。规则树不会在开始的时候就为所有的节点进行计算，而是只有当某个节点样式需要进行计算时，才会向规则树添加计算的路径。</p> <p>这个想法相当于将规则树路径视为词典中的单词。如果我们已经计算出如下的规则树：</p> <p>                                                         <img src=\"https://pic002.cnblogs.com/images/2012/40481/2012103113274712.png\" alt=\"\"><img title=\"\" src=\"http://1-ps.googleusercontent.com/h/www.gstatic.com/psa/static/1.gif\" alt=\"\" width=\"400\" height=\"261\" align=\"\" border=\"0\"></p> <p>      假设我们需要为内容树中的另一个元素匹配规则，并且找到匹配路径是 B - E - I（按照此顺序）。由于我们在树中已经计算出了路径 A - B - E - I - L，因此就已经有了此路径，这就减少了现在所需的工作量。</p> <p> </p> <p>让我们看看规则树如何帮助我们减少工作。</p> <h5 id=\"Division\\_into\\_structs\">结构划分</h5> <p>样式上下文可分割成多个结构。这些结构体包含了特定类别（如 border 或 color）的样式信息。结构中的属性都是继承的或非继承的。继承属性如果未由元素定义，则继承自其父代。非继承属性（也称为“重置”属性）如果未进行定义，则使用默认值。</p> <p>规则树通过缓存整个结构（包含计算出的端值）为我们提供帮助。这一想法假定底层节点没有提供结构的定义，则可使用上层节点中的缓存结构。</p> <h5 id=\"Computing\\_the\\_style\\_contexts\\_using\\_the\\_rule\\_tree\">使用规则树计算样式上下文</h5> <p>在计算某个特定元素的样式上下文时，我们首先计算规则树中的对应路径，或者使用现有的路径。然后我们沿此路径应用规则，在新的样式上下文中填充结构。我们从路径中拥有最高优先级的底层节点（通常也是最特殊的选择器）开始，并向上遍历规则树，直到结构填充完毕。如果该规则节点对于此结构没有任何规范，那么我们可以实现更好的优化：寻找路径更上层的节点，找到后指定完整的规范并指向相关节点即可。这是最好的优化方法，因为整个结构都能共享。这可以减少端值的计算量并节约内存。 <br>如果我们找到了部分定义，就会向上遍历规则树，直到结构填充完毕。</p> <p>如果我们找不到结构的任何定义，那么假如该结构是“继承”类型，我们会在<strong>上下文树</strong>中指向父代的结构，这样也可以共享结构。如果是 reset 类型的结构，则会使用默认值。</p> <p>如果最特殊的节点确实添加了值，那么我们需要另外进行一些计算，以便将这些值转化成实际值。然后我们将结果缓存在树节点中，供子代使用。</p> <p>如果某个元素与其同级元素都指向同一个树节点，那么它们就可以共享<strong>整个样式上下文</strong>。</p> <p>让我们来看一个例子，假设我们有如下 HTML 代码：</p> <pre class=\"prettyprint\"><span class=\"tag\"><html></span><span class=\"tag\"><body></span><span class=\"tag\"><div</span><span class=\"atn\">class</span><span class=\"pun\">=</span><span class=\"atv\">\"err\"</span><span class=\"atn\">id</span><span class=\"pun\">=</span><span class=\"atv\">\"div1\"</span><span class=\"tag\">></span><span class=\"tag\"><p></span><span class=\"pln\"> this is a </span><span class=\"tag\"><span</span><span class=\"atn\">class</span><span class=\"pun\">=</span><span class=\"atv\">\"big\"</span><span class=\"tag\">></span><span class=\"pln\"> big error </span><span class=\"tag\"></span></span><span class=\"pln\"> this is also a </span><span class=\"tag\"><span</span><span class=\"atn\">class</span><span class=\"pun\">=</span><span class=\"atv\">\"big\"</span><span class=\"tag\">></span><span class=\"pln\"> very big error</span><span class=\"tag\"></span></span><span class=\"pln\"> error </span><span class=\"tag\"></p></span><span class=\"tag\"></div></span><span class=\"tag\"><div</span><span class=\"atn\">class</span><span class=\"pun\">=</span><span class=\"atv\">\"err\"</span><span class=\"atn\">id</span><span class=\"pun\">=</span><span class=\"atv\">\"div2\"</span><span class=\"tag\">></span><span class=\"pln\">another error</span><span class=\"tag\"></div></span><span class=\"tag\"></body></span><span class=\"tag\"></html></span></pre> 还有如下规则：<ol class=\"linenums\"> <li class=\"L0\"><span class=\"pln\">div </span><span class=\"pun\">{</span><span class=\"kwd\">margin</span><span class=\"pun\">:</span><span class=\"lit\">5px</span><span class=\"pun\">;</span><span class=\"kwd\">color</span><span class=\"pun\">:</span><span class=\"pln\">black</span><span class=\"pun\">}</span></li> <li class=\"L1\"><span class=\"pun\">.</span><span class=\"pln\">err </span><span class=\"pun\">{</span><span class=\"kwd\">color</span><span class=\"pun\">:</span><span class=\"pln\">red</span><span class=\"pun\">}</span></li> <li class=\"L2\"><span class=\"pun\">.</span><span class=\"pln\">big </span><span class=\"pun\">{</span><span class=\"kwd\">margin-top</span><span class=\"pun\">:</span><span class=\"lit\">3px</span><span class=\"pun\">}</span></li> <li class=\"L3\"><span class=\"pln\">div span </span><span class=\"pun\">{</span><span class=\"kwd\">margin-bottom</span><span class=\"pun\">:</span><span class=\"lit\">4px</span><span class=\"pun\">}</span></li> <li class=\"L4\"><span class=\"pun\">#</span><span class=\"pln\">div1 </span><span class=\"pun\">{</span><span class=\"kwd\">color</span><span class=\"pun\">:</span><span class=\"pln\">blue</span><span class=\"pun\">}</span></li> <li class=\"L5\"><span class=\"pun\">#</span><span class=\"pln\">div2 </span><span class=\"pun\">{</span><span class=\"kwd\">color</span><span class=\"pun\">:</span><span class=\"pln\">green</span><span class=\"pun\">}</span></li> </ol> <p>为了简便起见，我们只需要填充两个结构：color 结构和 margin 结构。color 结构只包含一个成员（即“color”），而 margin 结构包含四条边。 <br>形成的规则树如下图所示（节点的标记方式为“节点名 : 指向的规则序号”）：</p> <p>                                                          <img src=\"https://pic002.cnblogs.com/images/2012/40481/2012103113313363.png\" alt=\"\">                                                                                                                      </p> <p><span data-count=\"15\">                                                                                     图</span>：规则树                                                                                                             上下文树如下图所示（节点名 : 指向的规则节点）：</p> <p>                                      ', 0, 1, 0);
INSERT INTO `post` (`id`, `createAt`, `updateAt`, `title`, `description`, `thumb`, `url`, `html`, `markdown`, `views`, `status`, `push`) VALUES
(14, '2018-04-23 11:01:41.428774', '2018-04-23 11:01:41.428774', '一个数字键盘引发的血案——移动端H5输入框、光标、数字键盘全假套件实现', '为啥要写假键盘？还是输入框、光标全假的假键盘？手机自带的不用非得写个假的，吃饱没事干吧？装逼？炫技？宝宝也是被逼的，宝宝也很委屈~.~问题产生背景移动端H5项目需求点：进入某页面自动弹出带小数点的数字键盘，并且自带输入验证，比如金额——只能输入数字和小数点，并且只能输入一位小数点、小数位不超过2位，且输入前验证不合法就不让输入、(UE特加功能——定制光标颜色>...-1){varvalue=document.getElementById(\'amount-input\').value;if(key===\'.\'', 'https://pic1.zhimg.com/v2-9399e6080964d19962b38589b2d1537b_1200x500.jpg', 'https://zhuanlan.zhihu.com/p/30360629', '<h2>为啥要写假键盘？</h2><h2>还是输入框、光标全假的假键盘？</h2><h2>手机自带的不用非得写个假的，吃饱没事干吧？</h2><h2>装逼？炫技？</h2><h2>宝宝也是被逼的，宝宝也很委屈~.~</h2><figure><noscript><img src=\"https://pic3.zhimg.com/v2-8a8fc89e4fd84dd4f7f10c8c9ae7fc6d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"230\" data-rawheight=\"212\" class=\"content_image\" width=\"230\"></noscript><img src=\"data:image/svg+xml;utf8,%3Csvg%20xmlns=%27http://www.w3.org/2000/svg%27%20width=%27230%27%20height=%27212%27%3E%3C/svg%3E\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"230\" data-rawheight=\"212\" class=\"content_image lazy\" width=\"230\" data-actualsrc=\"https://pic3.zhimg.com/v2-8a8fc89e4fd84dd4f7f10c8c9ae7fc6d_b.jpg\"></figure><h2>问题产生背景</h2><p><br></p><p>移动端H5项目需求点：</p><p>进入某页面自动弹出带小数点的数字键盘，并且自带输入验证，比如金额——只能输入数字和小数点，并且只能输入一位小数点、小数位不超过2位，且输入前验证不合法就不让输入、(UE特加功能——定制光标颜色>.<简直是反人类的需求)。细分如下：</p><ul><li>进入相关页面，输入框自动获取焦点</li><li>键盘自动弹出</li><li>弹出带小数点的数字键盘</li><li>数字输入前自动验证，只能输入一个小数点，小数位数不超过2位，超过就不能继续输入</li><li>如果光标在第一位，此时键入的是\'.\'，则自动放入\'0\'再插入\'.\'</li></ul><hr><h2>实现方案拟定</h2><p><br></p><h2>1. 基于input + 手机自带键盘实现方案</h2><p><br></p><p><b>（1）</b>针对功能点1，可以给 input 设置属性 autofocus , 输入框就能自动聚焦。 <b>轻松搞定</b></p><p><b>（2）</b>针对功能点2 ，给input设置属性 autofocus 会自动聚焦但是键盘并不会自动弹出; </p><p>必须手动点击输入框键盘才会弹出; 于是在进入页面的时候用js触发click或者foucus，发现键</p><p>盘也不会自动弹出，延时click、focus也没能弹出;那么只有最后一种方案——就是让NA端提</p><p>供让键盘弹出的方法。 <b>纯前端无法搞定，需要NA端协助/，或者找PM砍掉自动弹键盘的需求</b></p><p><b>>.<（勉强能够接受）</b></p><p><b>（3）</b>针对功能点3，弹数字键盘的方法可以设置 type = \"number\" 或者type = \"tel\"; 前者</p><p>在Andriod可以弹出数字键盘在ios端只能弹全键盘，后者在Android和ios弹出的都是数字键</p><p>盘，但是！！坑爹的，弹出的数字键盘没有小数点！（我的华为荣耀9倒是很给力的给我弹了</p><p>个带小数点的数字键盘，不容易啊啊） <b>只能选择type = \"number\",勉强能接受ios弹全键盘吧</b></p><p><b>（4）</b>针对功能点4，  设置type = \"number\"，发现可以不停的输入小数点啊啊</p><p>啊啊看着真的要疯了，第一次输入小数点也不能自动变成\'0.\'</p><p><br></p><figure><noscript><img src=\"https://pic3.zhimg.com/v2-3e355dff8e3f76b396a85bc44065678f_b.gif\" data-size=\"normal\" data-rawwidth=\"459\" data-rawheight=\"195\" data-thumbnail=\"https://pic3.zhimg.com/v2-3e355dff8e3f76b396a85bc44065678f_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"459\" data-original=\"https://pic3.zhimg.com/v2-3e355dff8e3f76b396a85bc44065678f_r.jpg\"></noscript><img src=\"data:image/svg+xml;utf8,%3Csvg%20xmlns=%27http://www.w3.org/2000/svg%27%20width=%27459%27%20height=%27195%27%3E%3C/svg%3E\" data-size=\"normal\" data-rawwidth=\"459\" data-rawheight=\"195\" data-thumbnail=\"https://pic3.zhimg.com/v2-3e355dff8e3f76b396a85bc44065678f_b.jpg\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"459\" data-original=\"https://pic3.zhimg.com/v2-3e355dff8e3f76b396a85bc44065678f_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-3e355dff8e3f76b396a85bc44065678f_b.gif\"><figcaption>图1 原生input type=number 效果</figcaption></figure><p><br></p><p>这时候聪明的你一定想到要使用事件监听键入的字符，在输入之前进行判断，然后决定 </p><p>是否放入输入框。</p><p>你肯定又会开心的想到一堆可能有用的事件：onkeydown，onkeyup，onchange，oninput，</p><p>onpropertychange，textInput。</p><figure><noscript><img src=\"https://pic2.zhimg.com/v2-7e1e63bfdf6f413677ffc31afad75463_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"204\" data-rawheight=\"233\" class=\"content_image\" width=\"204\"></noscript><img src=\"data:image/svg+xml;utf8,%3Csvg%20xmlns=%27http://www.w3.org/2000/svg%27%20width=%27204%27%20height=%27233%27%3E%3C/svg%3E\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"204\" data-rawheight=\"233\" class=\"content_image lazy\" width=\"204\" data-actualsrc=\"https://pic2.zhimg.com/v2-7e1e63bfdf6f413677ffc31afad75463_b.jpg\"></figure><p>路漫漫其修远兮啊~经过不断尝试之后仍然发现很多问题。</p><ul><li>onkeyup——虽然每增加删除字符都会触发，但增加字符的时候是值输入之后才触发，无法做到输入前验证;</li><li>onchange——是在内容改变（两次内容有可能相等）且失去焦点时触发，也无法做到输入前验证。</li><li>onpropertychange——onchange事件在内容改变（两次内容有可能还是相等的）且失去焦点时触发；即每增加或删除一个字符就会触发，通过js改变也会触发该事件，但是该事件IE专有。</li><li>oninput——移动端很多手机不支持。 </li></ul><p>            （只剩下onkeyup/textInput，还有一线希望刚芭蕾>.<。）</p><ul><li>onkeyup——其事件有两个相关属性event.key和event.keyCode。event.key在我的华为荣耀9手机上都不生效（其他低版本手机可想而知）。但其还有一个属性event.keyCode其在PC端的值是键入字符的ascii码。但在手机端输入任何数字或者小数点其值均为229（华为荣耀9测试），所以onkeyup也不能用。</li><li>ontextInput——在pc和移动端都支持！！！（功夫不负有心人）其event.data可以获取到输入的值。欢天喜地，举国欢庆，啊哈哈~~</li></ul><p>终于松了一口气，只要能在输入前获取值就能验证了呀。</p><p>自信满满的一口气写完验证过程：</p><p>html</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span><input\n    id=\"amount-input\"\n    autofocus\n    type=\"number\"\n    @textInput=\"checkNumber\"\n    v-model=\"amount\"\n    require/> \n</code></pre></div><p>js</p><div class=\"highlight\"><pre><code class=\"language-js\"><span></span><span class=\"nx\">checkNumber</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">key</span> <span class=\"o\">=</span> <span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">data</span> <span class=\"o\">||</span> <span class=\"s1\">\'\'</span><span class=\"p\">;</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">key</span><span class=\"p\">.</span><span class=\"nx\">search</span><span class=\"p\">(</span><span class=\"sr\">/[0-9\\.]/</span><span class=\"p\">)</span> <span class=\"o\">></span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n     <span class=\"kd\">var</span> <span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s1\">\'amount-input\'</span><span class=\"p\">).</span><span class=\"nx\">value</span><span class=\"p\">;</span>\n     <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">key</span> <span class=\"o\">===</span> <span class=\"s1\">\'.\'</span> <span class=\"o\">&&</span> <span class=\"nx\">value</span><span class=\"p\">.</span><span class=\"nx\">search</span><span class=\"p\">(</span><span class=\"sr\">/\\./</span><span class=\"p\">)</span> <span class=\"o\">></span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">preventDefault</span><span class=\"p\">();</span>\n     <span class=\"p\">}</span>\n     <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">.</span><span class=\"nx\">search</span><span class=\"p\">(</span><span class=\"sr\">/\\.\\d{2}/</span><span class=\"p\">)</span> <span class=\"o\">></span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n       <span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">preventDefault</span><span class=\"p\">();</span>\n     <span class=\"p\">}</span>\n  <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n     <span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">preventDefault</span><span class=\"p\">();</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">},</span>\n</code></pre></div><p>杯具再次发生了~~~~~我所期望的效果仍然没有达到。</p><p><br></p><p><b>通过value获取输入框内所有字符失败</b></p><p><br></p><p>发现 <b>input type = number 取到的value只能是数值</b>，<b>无法获取输入框里的所有字符。</b></p><p><b>也就是说如果输入\'12.\'，通过value获取到是\'12\'，只输入\'.\'，value获取到的是\' \'空字符串，</b></p><p><b>获取不到小数点。</b></p><p><b>这样就无法判断是否输入小数点，因而不能判断是否还能输入小数点，那就还是能输入无数个</b></p><p><b>小数点，问题依然得不到解决。</b></p><p><br></p><p><b>尝试：</b></p><ul><li>使用VUE中双向绑定的this.amount来获取输入的所有字符，发现this.amount获取到的和value获取值的情况相同。尝试失败。</li><li>通过textInput获取到的输入值，自己维护一个字符数组。但是textInput在删除时不会触发，因而不能实时获取input输入框里面的所有准确字符；而且由于无法获取光标在input输入框的具体位置而无法确定删除的是哪个字符，因而字符数组无法准确维护。尝试失败。</li></ul><p><br></p><p><b>（5）</b>针对功能点5，功能4解决了，功能5是小case。。。</p><p><br></p><p>所以基于input + 手机自带键盘实现方案要满足以上需求难以实现。</p><p><br></p><h2>2. 基于input + 假数字键盘实现方案</h2><p>若是用假键盘加原生input输入框，需要做到：</p><ul><li>禁用手机自带键盘</li><li>获取Input输入框中的内容</li></ul><p>禁用手机自带键盘，在没有NA暴露的方法支持的情况下，可以设置Input的readonly属性。这</p><p>样的话输入框也不能添加删除字符了。</p><p>若在可以要NA端提供禁用手机自带键盘的方法的前提下，要实现点击假键盘输入框能添加删</p><p>除字符。</p><p>若是只从后面添加删除，很容易实现，只需要将点击键盘对应的字符拼接到 Input type=text </p><p>获取到的value的后面，删除同理。</p><p>但是要是光标不在最后一位，而是在中间</p><figure><noscript><img src=\"https://pic1.zhimg.com/v2-417f567a92b4286b5893c2eea41182b4_b.jpg\" data-size=\"normal\" data-rawwidth=\"261\" data-rawheight=\"51\" class=\"content_image\" width=\"261\"></noscript><img src=\"data:image/svg+xml;utf8,%3Csvg%20xmlns=%27http://www.w3.org/2000/svg%27%20width=%27261%27%20height=%2751%27%3E%3C/svg%3E\" data-size=\"normal\" data-rawwidth=\"261\" data-rawheight=\"51\" class=\"content_image lazy\" width=\"261\" data-actualsrc=\"https://pic1.zhimg.com/v2-417f567a92b4286b5893c2eea41182b4_b.jpg\"><figcaption>图2 光标在数字中间示例图</figcaption></figure><p>那么当我们点击假键盘添加或删除字符的时候，如何能知道添加或删除字符的位置呢。</p><p>也许需要获取光标位置。</p><p>目前只有IE和火狐支持的document.selection，selectionStart可以获取光标位置。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span></span><span class=\"c1\">// 获取光标位置</span>\n<span class=\"kd\">function</span> <span class=\"nx\">getCursortPosition</span> <span class=\"p\">(</span><span class=\"nx\">textDom</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n <span class=\"kd\">var</span> <span class=\"nx\">cursorPos</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">selection</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// IE Support</span>\n  <span class=\"nx\">textDom</span><span class=\"p\">.</span><span class=\"nx\">focus</span> <span class=\"p\">();</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">selectRange</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">selection</span><span class=\"p\">.</span><span class=\"nx\">createRange</span><span class=\"p\">();</span>\n  <span class=\"nx\">selectRange</span><span class=\"p\">.</span><span class=\"nx\">moveStart</span> <span class=\"p\">(</span><span class=\"s1\">\'character\'</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"nx\">textDom</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">);</span>\n  <span class=\"nx\">cursorPos</span> <span class=\"o\">=</span> <span class=\"nx\">selectRange</span><span class=\"p\">.</span><span class=\"nx\">text</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span>\n <span class=\"p\">}</span><span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">textDom</span><span class=\"p\">.</span><span class=\"nx\">selectionStart</span> <span class=\"o\">||</span> <span class=\"nx\">textDom</span><span class=\"p\">.</span><span class=\"nx\">selectionStart</span> <span class=\"o\">==</span> <span class=\"s1\">\'0\'</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// Firefox support</span>\n  <span class=\"nx\">cursorPos</span> <span class=\"o\">=</span> <span class=\"nx\">textDom</span><span class=\"p\">.</span><span class=\"nx\">selectionStart</span><span class=\"p\">;</span>\n <span class=\"p\">}</span>\n <span class=\"k\">return</span> <span class=\"nx\">cursorPos</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p><br></p><p>由于我们的是移动端H5开发项目，考虑兼容性，显然以上方法不能兼容大部分的机型。</p><p><br></p><h2>3. 输入框、光标、数字键盘全假实现方案</h2><p>以上两种方案均难以实现，因此我只能大胆想象，要实现满足以上需求的假键盘就得实现假输</p><p>入框、假光标、假keyboard的一套装备。这样所有的元素我都能控制，上面的那些问题全</p><p>部可以解决。</p><p><br></p><p><b>雏形</b></p><p>若是实现只能从最后面增加删除没有光标的假键盘非常容易，只需要给每个键绑定一个click事</p><p>件，维护一个数组，每次从后面push或者pop就能维护输入框中的内容。</p><figure><noscript><img src=\"https://pic1.zhimg.com/v2-cdb4e085a8f48d3e3bb4c86f3f1ca657_b.gif\" data-size=\"normal\" data-rawwidth=\"291\" data-rawheight=\"522\" data-thumbnail=\"https://pic1.zhimg.com/v2-cdb4e085a8f48d3e3bb4c86f3f1ca657_b.jpg\" class=\"content_image\" width=\"291\"></noscript><img src=\"data:image/svg+xml;utf8,%3Csvg%20xmlns=%27http://www.w3.org/2000/svg%27%20width=%27291%27%20height=%27522%27%3E%3C/svg%3E\" data-size=\"normal\" data-rawwidth=\"291\" data-rawheight=\"522\" data-thumbnail=\"https://pic1.zhimg.com/v2-cdb4e085a8f48d3e3bb4c86f3f1ca657_b.jpg\" class=\"content_image lazy\" width=\"291\" data-actualsrc=\"https://pic1.zhimg.com/v2-cdb4e085a8f48d3e3bb4c86f3f1ca657_b.gif\"><figcaption>图3 只能从最后添加、删除且没有光标的效果图</figcaption></figure><p>但是这样跟正真的输入框效果比体验太差了。</p><p><br></p><p><b>难点</b></p><p>要实现体验跟原生键盘一样并且自带输入验证的假键盘，难点主要在于：</p><ul><li>有光标，且光标闪动</li><li>光标定位，点击数字中间光标自动移过去 </li><li>根据光标的位置实现插入删除</li><li>失去焦点光标隐藏，点击输入框光标显示并且弹出键盘</li></ul><p><br></p><p><b>原生js实现</b> </p><p>对于光标实现，创造一个元素设置背景色，可以控制它隐藏和出现。</p><p>对于“点击数字中间光标自动移过去 ”，可以每添加一个数字或者小数点就先加一个带点击事件的空元素space，再添加要输入的字符。space是为了绑定一个点击事件，告诉光标要移动到的位置。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span></span><span class=\"c1\">//字符插入，在光标前插入字符</span>\n<span class=\"kd\">function</span> <span class=\"nx\">insert</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n	<span class=\"kd\">var</span> <span class=\"nx\">span</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"s2\">\"span\"</span><span class=\"p\">);</span> <span class=\"c1\">//创建包含值的元素</span>\n	<span class=\"nx\">span</span><span class=\"p\">.</span><span class=\"nx\">className</span> <span class=\"o\">=</span> <span class=\"s1\">\'val\'</span><span class=\"p\">;</span>\n	<span class=\"nx\">span</span><span class=\"p\">.</span><span class=\"nx\">innerText</span> <span class=\"o\">=</span> <span class=\"nx\">value</span><span class=\"p\">;</span>\n\n	<span class=\"kd\">var</span> <span class=\"nx\">space</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"s2\">\"span\"</span><span class=\"p\">);</span>\n	<span class=\"nx\">space</span><span class=\"p\">.</span><span class=\"nx\">className</span> <span class=\"o\">=</span> <span class=\"s1\">\'space\'</span><span class=\"p\">;</span>\n	<span class=\"nx\">space</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">\'click\'</span><span class=\"p\">,</span> <span class=\"nx\">moveCursor</span><span class=\"p\">);</span>\n\n	<span class=\"kd\">var</span> <span class=\"nx\">cursor</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementsByClassName</span><span class=\"p\">(</span><span class=\"s1\">\'cursor\'</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n\n	<span class=\"nx\">inputArea</span><span class=\"p\">.</span><span class=\"nx\">insertBefore</span><span class=\"p\">(</span><span class=\"nx\">space</span><span class=\"p\">,</span> <span class=\"nx\">cursor</span><span class=\"p\">);</span><span class=\"c1\">//插入空列</span>\n	<span class=\"nx\">inputArea</span><span class=\"p\">.</span><span class=\"nx\">insertBefore</span><span class=\"p\">(</span><span class=\"nx\">span</span><span class=\"p\">,</span> <span class=\"nx\">cursor</span><span class=\"p\">);</span><span class=\"c1\">//插入值</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>删除时也是先删除光标之前的数字字符，再删除space元素。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span></span><span class=\"c1\">//删除元素</span>\n<span class=\"kd\">function</span> <span class=\"nx\">deleteElement</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n	<span class=\"nx\">setCursorFlash</span><span class=\"p\">();</span>\n	<span class=\"kd\">var</span> <span class=\"nx\">cursor</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementsByClassName</span><span class=\"p\">(</span><span class=\"s1\">\'cursor\'</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n	<span class=\"kd\">var</span> <span class=\"nx\">n</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">;</span> <span class=\"c1\">//两个删除动作</span>\n 	<span class=\"k\">while</span><span class=\"p\">(</span><span class=\"nx\">cursor</span><span class=\"p\">.</span><span class=\"nx\">previousSibling</span> <span class=\"o\">&&</span> <span class=\"nx\">n</span> <span class=\"o\">></span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">inputArea</span><span class=\"p\">.</span><span class=\"nx\">removeChild</span><span class=\"p\">(</span><span class=\"nx\">cursor</span><span class=\"p\">.</span><span class=\"nx\">previousSibling</span> <span class=\"p\">);</span>\n    <span class=\"nx\">n</span><span class=\"o\">--</span><span class=\"p\">;</span>\n 	<span class=\"p\">}</span>\n	<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">getInputStr</span><span class=\"p\">().</span><span class=\"nx\">search</span><span class=\"p\">(</span><span class=\"sr\">/^\\.\\d*/</span><span class=\"p\">)</span> <span class=\"o\">></span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n		<span class=\"nx\">insert</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n	<span class=\"p\">}</span>\n	<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">getInputStr</span><span class=\"p\">()</span> <span class=\"o\">===</span> <span class=\"s1\">\'\'</span><span class=\"p\">){</span> <span class=\"c1\">//元素为空placeholder显示</span>\n		<span class=\"kd\">var</span> <span class=\"nx\">placeHolder</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementsByClassName</span><span class=\"p\">(</span><span class=\"s1\">\'holder\'</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n		<span class=\"nx\">placeHolder</span><span class=\"p\">.</span><span class=\"nx\">className</span> <span class=\"o\">=</span> <span class=\"s1\">\'holder\'</span><span class=\"p\">;</span>\n	<span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>通过chrome里面元素审查可以看到添加删除的过程。</p><figure><noscript><img src=\"https://pic3.zhimg.com/v2-c74b46d12b1c54f332decbae912a3374_b.gif\" data-size=\"normal\" data-rawwidth=\"511\" data-rawheight=\"389\" data-thumbnail=\"https://pic3.zhimg.com/v2-c74b46d12b1c54f332decbae912a3374_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"511\" data-original=\"https://pic3.zhimg.com/v2-c74b46d12b1c54f332decbae912a3374_r.jpg\"></noscript><img src=\"data:image/svg+xml;utf8,%3Csvg%20xmlns=%27http://www.w3.org/2000/svg%27%20width=%27511%27%20height=%27389%27%3E%3C/svg%3E\" data-size=\"normal\" data-rawwidth=\"511\" data-rawheight=\"389\" data-thumbnail=\"https://pic3.zhimg.com/v2-c74b46d12b1c54f332decbae912a3374_b.jpg\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"511\" data-original=\"https://pic3.zhimg.com/v2-c74b46d12b1c54f332decbae912a3374_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-c74b46d12b1c54f332decbae912a3374_b.gif\"><figcaption>图4 添加、删除、光标移动元素变化图</figcaption></figure><p>每一个space元素都绑定一个click事件，用来移动光标，最右边有个right-space可以用来放placeholder,也可以添加click事件，点击时光标总是移到最后一位。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span></span><span class=\"c1\">//移动光标位置</span>\n<span class=\"kd\">function</span> <span class=\"nx\">moveCursor</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n	<span class=\"kd\">var</span> <span class=\"nx\">cursor</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementsByClassName</span><span class=\"p\">(</span><span class=\"s1\">\'cursor\'</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">];</span><span class=\"c1\">//获取光标</span>\n	<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">currentTarget</span><span class=\"p\">.</span><span class=\"nx\">className</span> <span class=\"o\">==</span> <span class=\"s1\">\'right-space\'</span><span class=\"p\">){</span>\n		<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">cursor</span><span class=\"p\">.</span><span class=\"nx\">nextSibling</span> <span class=\"o\">||</span> <span class=\"nx\">cursor</span><span class=\"p\">.</span><span class=\"nx\">nextSibling</span><span class=\"p\">.</span><span class=\"nx\">nodeName</span> <span class=\"o\">==</span> <span class=\"s1\">\'#text\'</span><span class=\"p\">){</span>\n			<span class=\"k\">return</span><span class=\"p\">;</span>\n		<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n			<span class=\"kd\">var</span> <span class=\"nx\">ele</span> <span class=\"o\">=</span> <span class=\"nx\">cursor</span><span class=\"p\">.</span><span class=\"nx\">nextSibling</span><span class=\"p\">;</span>\n			<span class=\"nx\">inputArea</span><span class=\"p\">.</span><span class=\"nx\">insertBefore</span><span class=\"p\">(</span><span class=\"nx\">inputArea</span><span class=\"p\">.</span><span class=\"nx\">lastElementChild</span><span class=\"p\">,</span> <span class=\"nx\">ele</span><span class=\"p\">);</span>\n			<span class=\"nx\">inputArea</span><span class=\"p\">.</span><span class=\"nx\">appendChild</span><span class=\"p\">(</span><span class=\"nx\">cursor</span><span class=\"p\">);</span>\n		<span class=\"p\">}</span>\n	<span class=\"p\">}</span><span class=\"k\">else</span> <span class=\"p\">{</span>\n		<span class=\"kd\">var</span> <span class=\"nx\">tempEle</span> <span class=\"o\">=</span> <span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">currentTarget</span><span class=\"p\">.</span><span class=\"nx\">nextSibling</span><span class=\"p\">;</span>\n		<span class=\"c1\">// var nodeName = event.currentTarget.nextSibling.nodeName;</span>\n		<span class=\"c1\">// var cursor = document.getElementsByClassName(\'cursor\')[0];</span>\n		<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">tempEle</span> <span class=\"o\">||</span> <span class=\"nx\">tempEle</span><span class=\"p\">.</span><span class=\"nx\">nodeName</span> <span class=\"o\">==</span> <span class=\"s1\">\'#text\'</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n			<span class=\"kd\">var</span> <span class=\"nx\">temp</span> <span class=\"o\">=</span> <span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">currentTarget</span><span class=\"p\">.</span><span class=\"nx\">previousSibling</span><span class=\"p\">;</span>\n			<span class=\"kd\">var</span> <span class=\"nx\">ele</span> <span class=\"o\">=</span> <span class=\"nx\">inputArea</span><span class=\"p\">.</span><span class=\"nx\">replaceChild</span><span class=\"p\">(</span> <span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">currentTarget</span><span class=\"p\">,</span> <span class=\"nx\">cursor</span><span class=\"p\">);</span><span class=\"c1\">//把光标替换成当前元素</span>\n			<span class=\"nx\">inputArea</span><span class=\"p\">.</span><span class=\"nx\">appendChild</span><span class=\"p\">(</span><span class=\"nx\">ele</span><span class=\"p\">);</span>\n		<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n			<span class=\"kd\">var</span> <span class=\"nx\">temp</span> <span class=\"o\">=</span> <span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">currentTarget</span><span class=\"p\">.</span><span class=\"nx\">nextSibling</span><span class=\"p\">;</span>\n			<span class=\"kd\">var</span> <span class=\"nx\">ele</span> <span class=\"o\">=</span> <span class=\"nx\">inputArea</span><span class=\"p\">.</span><span class=\"nx\">replaceChild</span><span class=\"p\">(</span> <span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">currentTarget</span><span class=\"p\">,</span> <span class=\"nx\">cursor</span><span class=\"p\">);</span><span class=\"c1\">//把光标替换成当前元素</span>\n			<span class=\"nx\">inputArea</span><span class=\"p\">.</span><span class=\"nx\">insertBefore</span><span class=\"p\">(</span><span class=\"nx\">ele</span><span class=\"p\">,</span> <span class=\"nx\">temp</span><span class=\"p\">);</span>\n		<span class=\"p\">}</span>\n	<span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>从上面的GIF图可以看出，光标始终只有一个而且有个定时任务。光标的闪动设置如下，使用原生的setInterval实现。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span></span><span class=\"c1\">//设置光标定时任务</span>\n<span class=\"kd\">function</span> <span class=\"nx\">setCursorFlash</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n	<span class=\"c1\">//placeholder 隐藏</span>\n	<span class=\"kd\">var</span> <span class=\"nx\">placeHolder</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementsByClassName</span><span class=\"p\">(</span><span class=\"s1\">\'holder\'</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n	<span class=\"nx\">placeHolder</span><span class=\"p\">.</span><span class=\"nx\">className</span> <span class=\"o\">=</span> <span class=\"s1\">\'holder hidden\'</span><span class=\"p\">;</span>\n\n	<span class=\"kd\">var</span> <span class=\"nx\">cursor</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementsByClassName</span><span class=\"p\">(</span><span class=\"s1\">\'cursor\'</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n	<span class=\"kd\">var</span> <span class=\"nx\">inputContainer</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementsByClassName</span><span class=\"p\">(</span><span class=\"s1\">\'input-container\'</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n	<span class=\"nx\">cursor</span><span class=\"p\">.</span><span class=\"nx\">className</span> <span class=\"o\">=</span> <span class=\"s2\">\"cursor\"</span><span class=\"p\">;</span>\n	<span class=\"kd\">var</span> <span class=\"nx\">isShowCursor</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n	<span class=\"nx\">inputContainer</span><span class=\"p\">.</span><span class=\"nx\">focus</span><span class=\"p\">();</span>\n	<span class=\"nx\">showKeyBoard</span><span class=\"p\">();</span>\n	<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">intervalId</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n		<span class=\"nx\">clearInterval</span><span class=\"p\">(</span><span class=\"nx\">intervalId</span><span class=\"p\">);</span>\n	<span class=\"p\">}</span>\n	<span class=\"nx\">intervalId</span> <span class=\"o\">=</span> <span class=\"nx\">setInterval</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n		<span class=\"nx\">isShowCursor</span> <span class=\"o\">=</span> <span class=\"o\">!</span><span class=\"nx\">isShowCursor</span><span class=\"p\">;</span>\n		<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">isShowCursor</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n			<span class=\"nx\">cursor</span><span class=\"p\">.</span><span class=\"nx\">className</span> <span class=\"o\">=</span> <span class=\"s1\">\'cursor\'</span><span class=\"p\">;</span>\n		<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n			<span class=\"nx\">cursor</span><span class=\"p\">.</span><span class=\"nx\">className</span> <span class=\"o\">=</span> <span class=\"s1\">\'cursor hidden\'</span><span class=\"p\">;</span>\n		<span class=\"p\">}</span>\n	<span class=\"p\">},</span> <span class=\"mi\">1000</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div><p><br></p><p>最终使用原生js实现的带输入框、光标，keyboard的假数字键盘。</p><p>除了完成以上功能，还实现了输入前验证功能，为了跟接近真实输入框表现，同时实现了点击</p><p>输入框获取焦点、光标闪动、弹出键盘；失去焦点光标消失。</p><p><b>为什么不使用jQuery？</b> </p><p>一是因为，当前的H5项目没有使用jQuery。</p><p>二是因为使用VUE之后很少需要直接操作DOM，少数方法自己实现更轻量，若是只为了使用</p><p>其一两个方法而引入jQuery，会使得项目更重。</p><p><br></p><p><b>原生js实现效果</b></p><figure><noscript><img src=\"https://pic1.zhimg.com/v2-db1a34ae65534a06c036ae1e338d3a76_b.gif\" data-size=\"normal\" data-rawwidth=\"292\" data-rawheight=\"521\" data-thumbnail=\"https://pic1.zhimg.com/v2-db1a34ae65534a06c036ae1e338d3a76_b.jpg\" class=\"content_image\" width=\"292\"></noscript><img src=\"data:image/svg+xml;utf8,%3Csvg%20xmlns=%27http://www.w3.org/2000/svg%27%20width=%27292%27%20height=%27521%27%3E%3C/svg%3E\" data-size=\"normal\" data-rawwidth=\"292\" data-rawheight=\"521\" data-thumbnail=\"https://pic1.zhimg.com/v2-db1a34ae65534a06c036ae1e338d3a76_b.jpg\" class=\"content_image lazy\" width=\"292\" data-actualsrc=\"https://pic1.zhimg.com/v2-db1a34ae65534a06c036ae1e338d3a76_b.gif\"><figcaption>图5 原生js实现输入框、光标、键盘全假套件效果图</figcaption></figure><p>源码<a href=\"https://link.zhihu.com/?target=https%3A//github.com/DaisyWang88/js-keyboard\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/DaisyWang88/</span><span class=\"invisible\">js-keyboard</span><span class=\"ellipsis\"></span></a></p><p>手机扫码验证：</p><p><a href=\"https://link.zhihu.com/?target=http%3A//sandbox.runjs.cn/show/mvjrcagy\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">sandbox.runjs.cn/show/m</span><span class=\"invisible\">vjrcagy</span><span class=\"ellipsis\"></span></a> (chrome插件url二维码生成器<a href=\"https://link.zhihu.com/?target=http%3A//getcrx.cn/%23%21/crxid/acedjabgpolnckckknijpejicghpfbnj\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">GetCrx.cn</a>)</p><p><br></p><p>由于移动端click事件有300毫秒延时，因此原生js实现的效果，有点不是很流畅。若使用原生</p><p>JS实现版的需要使fastclick或zepto的tap事件解决延时问题。</p><p><br></p><p><b>PS</b>：<b>之前说‘VUE本身解决300毫秒延时问题’，考证之后发现不对，给大家带来困扰实在抱歉。</b></p><p><b>考证之后发现VUE的click事件都是原生的click并没有处理这个延时。</b></p><p><b>为了不让大家困扰，github上的demo已经使用fastClick解决了延时问题，（之前太懒了>.<）。现在原生的js实现效果也很顺畅了。</b></p><hr><h2>VUE组件化</h2><p><br></p><p>考虑到项目里有的应用场景有多个输入框，当然输入的时候只需要一个键盘，因此组件化的时</p><p>候将输入框作为一个组件v-input，键盘作为一个组件v-keyboard。</p><p><br></p><p><b>输入框和键盘的交互</b></p><p>交互图如下：</p><figure><noscript><img src=\"https://pic4.zhimg.com/v2-2519fd80c5656b1ec9799640f33d28bf_b.jpg\" data-size=\"normal\" data-rawwidth=\"597\" data-rawheight=\"425\" class=\"origin_image zh-lightbox-thumb\" width=\"597\" data-original=\"https://pic4.zhimg.com/v2-2519fd80c5656b1ec9799640f33d28bf_r.jpg\"></noscript><img src=\"data:image/svg+xml;utf8,%3Csvg%20xmlns=%27http://www.w3.org/2000/svg%27%20width=%27597%27%20height=%27425%27%3E%3C/svg%3E\" data-size=\"normal\" data-rawwidth=\"597\" data-rawheight=\"425\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"597\" data-original=\"https://pic4.zhimg.com/v2-2519fd80c5656b1ec9799640f33d28bf_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-2519fd80c5656b1ec9799640f33d28bf_b.jpg\"><figcaption>图6 VUE组件交互图</figcaption></figure><p>考虑到本项目里面存在一个页面多个输入框的场景，因此需要控制键盘与哪个输入框配合使</p><p>用。</p><p>为了达到这样的目的，采用“<b>当点击输入框获取焦点的时候，将当前v-input输入框组件的实</b></p><p><b>例传给v-keyboard键盘组件</b>”的方式。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span></span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">$refs</span><span class=\"p\">.</span><span class=\"nx\">virtualKeyBoard</span><span class=\"p\">.</span><span class=\"nx\">$emit</span><span class=\"p\">(</span><span class=\"s1\">\'getInputVm\'</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">$refs</span><span class=\"p\">.</span><span class=\"nx\">virtualInput</span><span class=\"p\">);</span>\n</code></pre></div><p>如图6 ，v-keyboard组件会监听\'getInputVm\'事件，获取v-input的实例。</p><p>键盘组件v-keyboard获取到输入框组件v-input的实例之后就可以根据键盘的点击事件——添</p><p>加或删除，操作输入框组件v-input来放入或者删除字符了。</p><p>这样即使有多个输入框，也方便控制键盘和输入框之间的操作。</p><p><br></p><p><b>输入框自动获取焦点，键盘自动弹出</b></p><p><br></p><p>需求里要求进入某个页面输入框自动获取焦点，键盘自动弹出。</p><ul><li>输入框自动获取焦点可以通过设置is-auto-focus来控制是否自动获取焦点。</li></ul><div class=\"highlight\"><pre><code class=\"language-html\"><span></span><span class=\"p\"><</span><span class=\"nt\">v-input</span>\n    <span class=\"na\">ref</span><span class=\"o\">=</span><span class=\"s\">\"virtualInput\"</span>\n    <span class=\"na\">v-model</span><span class=\"o\">=</span><span class=\"s\">\"amount\"</span>\n    <span class=\"na\">:placeholder</span><span class=\"o\">=</span><span class=\"s\">\"placeText\"</span>\n    <span class=\"na\">:is-auto-focus</span><span class=\"o\">=</span><span class=\"s\">\"true\"</span>\n    <span class=\"err\">@</span><span class=\"na\">show-key-board</span><span class=\"o\">=</span><span class=\"s\">\"showKeyBoard\"</span><span class=\"p\">></span>\n<span class=\"p\"></</span><span class=\"nt\">v-input</span><span class=\"p\">></span>\n</code></pre></div><ul><li>要自动弹出键盘如图6，需要在页面实例化完成之后将相应的输入框组件v-input的实例传给键盘组件v-keyboard。</li></ul><div class=\"highlight\"><pre><code class=\"language-js\"><span></span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">$refs</span><span class=\"p\">.</span><span class=\"nx\">virtualKeyBoard</span><span class=\"p\">.</span><span class=\"nx\">$emit</span><span class=\"p\">(</span><span class=\"s1\">\'getInputVm\'</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">$refs</span><span class=\"p\">.</span><span class=\"nx\">virtualInput</span><span class=\"p\">);</span>\n</code></pre></div><p>键盘组间捕获\'getInputVm\'事件之后获取了相应输入框的实例，同时自动弹出。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span></span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">$on</span><span class=\"p\">(</span><span class=\"s1\">\'getInputVm\'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n     <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">refObject</span> <span class=\"o\">=</span> <span class=\"nx\">obj</span><span class=\"p\">;</span>\n     <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">isShow</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n<span class=\"p\">});</span>\n</code></pre></div><p><br></p><p><b>v-model支持</b></p><p><br></p><p>vue支持自定义v-model，子组件设置一个value 的 props。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span></span><span class=\"nx\">props</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">value</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n      <span class=\"nx\">type</span><span class=\"o\">:</span> <span class=\"nb\">String</span><span class=\"p\">,</span>\n      <span class=\"k\">default</span><span class=\"o\">:</span> <span class=\"s1\">\'\'</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>在value改变的时候$emit一个\'input\'事件并把相应的值传出去就可以实现v-model的双向绑定了。this.getInputStr()是用来获取输入框中字符串的函数。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span></span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">$emit</span><span class=\"p\">(</span><span class=\"s1\">\'input\'</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">getInputStr</span><span class=\"p\">());</span>\n</code></pre></div><p>效果如下：</p><figure><noscript><img src=\"https://pic1.zhimg.com/v2-a45bdd3e95974c12853efce15487a1c9_b.gif\" data-size=\"normal\" data-rawwidth=\"291\" data-rawheight=\"519\" data-thumbnail=\"https://pic1.zhimg.com/v2-a45bdd3e95974c12853efce15487a1c9_b.jpg\" class=\"content_image\" width=\"291\"></noscript><img src=\"data:image/svg+xml;utf8,%3Csvg%20xmlns=%27http://www.w3.org/2000/svg%27%20width=%27291%27%20height=%27519%27%3E%3C/svg%3E\" data-size=\"normal\" data-rawwidth=\"291\" data-rawheight=\"519\" data-thumbnail=\"https://pic1.zhimg.com/v2-a45bdd3e95974c12853efce15487a1c9_b.jpg\" class=\"content_image lazy\" width=\"291\" data-actualsrc=\"https://pic1.zhimg.com/v2-a45bdd3e95974c12853efce15487a1c9_b.gif\"><figcaption>图7 vue版效果图</figcaption></figure><p>源码参见<a href=\"https://link.zhihu.com/?target=https%3A//github.com/DaisyWang88/VUE-keyboard\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/DaisyWang88/</span><span class=\"invisible\">VUE-keyboard</span><span class=\"ellipsis\"></span></a>。</p><h2>总结</h2><p>原生的input 设置type = number，想要做输入前验证控制小数点个数和小数位数等功能基本很</p><p>难实现，要在输入前取到值也是存在各种兼容性问题，目前只有ontextInput在移动端能在输入</p><p>前准确取到值，还有个关键的问题type = number的时候取到的value不包含小数点，导致输入</p><p>前使用正则验证几乎无法实现；若是设置type= text 虽然能取到输入框中所有字符，但是就无</p><p>法弹出数字键盘。要想使用原生input输入小数，就必须有所取舍。</p><ul><li>要么不做输入前验证，使用type = number ，可以输入多个小数点，只在数值数值不合法的时候提示输入不合法，但是只有android可以弹出数字键盘，IOS仍然弹出全键盘。用户体验可能差些。</li><li>要么使用type = text，虽然可以做到输入前验证（因为可以取到全部字符），但是所有机型都只会弹全键盘了，用户体验也一般。</li><li>以上两种都无法实现进入页面键盘自动弹出，只能借助NA提供的方法实现。</li><li>如果你是强迫症癌晚期患者，用户体验之上者，那么你就可以跟我一样做个假键盘，这样以上问题都不是问题。还可以添加附加功能，比如输入的时候若在第一位输入小数点的时候，前面自动补\'0\'；删除的时候，若小数点在第一位前面自动补\'0\'；还可以定制光标颜色、键盘样式等等。</li></ul><p>很不幸，我就是一个强迫症癌晚期患者，目前实现的键盘套件改造成VUE组件已经成功在项目</p><p>中使用，有单输入框的页面，也有多输入框的页面，支持placeholder 和v-model。</p><p></p><p></p><p></p>', '为啥要写假键盘？\n--------\n\n还是输入框、光标全假的假键盘？\n---------------\n\n手机自带的不用非得写个假的，吃饱没事干吧？\n---------------------\n\n装逼？炫技？\n------\n\n宝宝也是被逼的，宝宝也很委屈~.~\n-----------------\n\n<img src=\"https://pic3.zhimg.com/v2-8a8fc89e4fd84dd4f7f10c8c9ae7fc6d\\_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"230\" data-rawheight=\"212\" class=\"content\\_image\" width=\"230\">\n\n![](data:image/svg+xml;utf8,%3Csvg%20xmlns=%27http://www.w3.org/2000/svg%27%20width=%27230%27%20height=%27212%27%3E%3C/svg%3E)\n\n问题产生背景\n------\n\n  \n\n移动端H5项目需求点：\n\n进入某页面自动弹出带小数点的数字键盘，并且自带输入验证，比如金额——只能输入数字和小数点，并且只能输入一位小数点、小数位不超过2位，且输入前验证不合法就不让输入、(UE特加功能——定制光标颜色>.<简直是反人类的需求)。细分如下：\n\n*   进入相关页面，输入框自动获取焦点\n*   键盘自动弹出\n*   弹出带小数点的数字键盘\n*   数字输入前自动验证，只能输入一个小数点，小数位数不超过2位，超过就不能继续输入\n*   如果光标在第一位，此时键入的是\'.\'，则自动放入\'0\'再插入\'.\'\n\n* * *\n\n实现方案拟定\n------\n\n  \n\n1\\. 基于input + 手机自带键盘实现方案\n------------------------\n\n  \n\n**（1）**针对功能点1，可以给 input 设置属性 autofocus , 输入框就能自动聚焦。 **轻松搞定**\n\n**（2）**针对功能点2 ，给input设置属性 autofocus 会自动聚焦但是键盘并不会自动弹出;\n\n必须手动点击输入框键盘才会弹出; 于是在进入页面的时候用js触发click或者foucus，发现键\n\n盘也不会自动弹出，延时click、focus也没能弹出;那么只有最后一种方案——就是让NA端提\n\n供让键盘弹出的方法。 **纯前端无法搞定，需要NA端协助/，或者找PM砍掉自动弹键盘的需求**\n\n**>.<（勉强能够接受）**\n\n**（3）**针对功能点3，弹数字键盘的方法可以设置 type = \"number\" 或者type = \"tel\"; 前者\n\n在Andriod可以弹出数字键盘在ios端只能弹全键盘，后者在Android和ios弹出的都是数字键\n\n盘，但是！！坑爹的，弹出的数字键盘没有小数点！（我的华为荣耀9倒是很给力的给我弹了\n\n个带小数点的数字键盘，不容易啊啊） **只能选择type = \"number\",勉强能接受ios弹全键盘吧**\n\n**（4）**针对功能点4， 设置type = \"number\"，发现可以不停的输入小数点啊啊\n\n啊啊看着真的要疯了，第一次输入小数点也不能自动变成\'0.\'\n\n  \n\n<img src=\"https://pic3.zhimg.com/v2-3e355dff8e3f76b396a85bc44065678f\\_b.gif\" data-size=\"normal\" data-rawwidth=\"459\" data-rawheight=\"195\" data-thumbnail=\"https://pic3.zhimg.com/v2-3e355dff8e3f76b396a85bc44065678f\\_b.jpg\" class=\"origin\\_image zh-lightbox-thumb\" width=\"459\" data-original=\"https://pic3.zhimg.com/v2-3e355dff8e3f76b396a85bc44065678f\\_r.jpg\">\n\n![](data:image/svg+xml;utf8,%3Csvg%20xmlns=%27http://www.w3.org/2000/svg%27%20width=%27459%27%20height=%27195%27%3E%3C/svg%3E)\n\n图1 原生input type=number 效果\n\n  \n\n这时候聪明的你一定想到要使用事件监听键入的字符，在输入之前进行判断，然后决定\n\n是否放入输入框。\n\n你肯定又会开心的想到一堆可能有用的事件：onkeydown，onkeyup，onchange，oninput，\n\nonpropertychange，textInput。\n\n<img src=\"https://pic2.zhimg.com/v2-7e1e63bfdf6f413677ffc31afad75463\\_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"204\" data-rawheight=\"233\" class=\"content\\_image\" width=\"204\">\n\n![](data:image/svg+xml;utf8,%3Csvg%20xmlns=%27http://www.w3.org/2000/svg%27%20width=%27204%27%20height=%27233%27%3E%3C/svg%3E)\n\n路漫漫其修远兮啊~经过不断尝试之后仍然发现很多问题。\n\n*   onkeyup——虽然每增加删除字符都会触发，但增加字符的时候是值输入之后才触发，无法做到输入前验证;\n*   onchange——是在内容改变（两次内容有可能相等）且失去焦点时触发，也无法做到输入前验证。\n*   onpropertychange——onchange事件在内容改变（两次内容有可能还是相等的）且失去焦点时触发；即每增加或删除一个字符就会触发，通过js改变也会触发该事件，但是该事件IE专有。\n*   oninput——移动端很多手机不支持。\n\n（只剩下onkeyup/textInput，还有一线希望刚芭蕾>.<。）\n\n*   onkeyup——其事件有两个相关属性event.key和event.keyCode。event.key在我的华为荣耀9手机上都不生效（其他低版本手机可想而知）。但其还有一个属性event.keyCode其在PC端的值是键入字符的ascii码。但在手机端输入任何数字或者小数点其值均为229（华为荣耀9测试），所以onkeyup也不能用。\n*   ontextInput——在pc和移动端都支持！！！（功夫不负有心人）其event.data可以获取到输入的值。欢天喜地，举国欢庆，啊哈哈~~\n\n终于松了一口气，只要能在输入前获取值就能验证了呀。\n\n自信满满的一口气写完验证过程：\n\nhtml\n\n     \n    \n\njs\n\n    checkNumber(event) {\n      var key = event.data || \'\';\n      if (key.search(/[0-9\\.]/) > -1) {\n         var value = document.getElementById(\'amount-input\').value;\n         if (key === \'.\' && value.search(/\\./) > -1) {\n            event.preventDefault();\n         }\n         if (value.search(/\\.\\d{2}/) > -1) {\n           event.preventDefault();\n         }\n      } else {\n         event.preventDefault();\n      }\n    },\n    \n\n杯具再次发生了~~~~~我所期望的效果仍然没有达到。\n\n  \n\n**通过value获取输入框内所有字符失败**\n\n  \n\n发现 **input type = number 取到的value只能是数值**，**无法获取输入框里的所有字符。**\n\n**也就是说如果输入\'12.\'，通过value获取到是\'12\'，只输入\'.\'，value获取到的是\' \'空字符串，**\n\n**获取不到小数点。**\n\n**这样就无法判断是否输入小数点，因而不能判断是否还能输入小数点，那就还是能输入无数个**\n\n**小数点，问题依然得不到解决。**\n\n  \n\n**尝试：**\n\n*   使用VUE中双向绑定的this.amount来获取输入的所有字符，发现this.amount获取到的和value获取值的情况相同。尝试失败。\n*   通过textInput获取到的输入值，自己维护一个字符数组。但是textInput在删除时不会触发，因而不能实时获取input输入框里面的所有准确字符；而且由于无法获取光标在input输入框的具体位置而无法确定删除的是哪个字符，因而字符数组无法准确维护。尝试失败。\n\n  \n\n**（5）**针对功能点5，功能4解决了，功能5是小case。。。\n\n  \n\n所以基于input + 手机自带键盘实现方案要满足以上需求难以实现。\n\n  \n\n2\\. 基于input + 假数字键盘实现方案\n-----------------------\n\n若是用假键盘加原生input输入框，需要做到：\n\n*   禁用手机自带键盘\n*   获取Input输入框中的内容\n\n禁用手机自带键盘，在没有NA暴露的方法支持的情况下，可以设置Input的readonly属性。这\n\n样的话输入框也不能添加删除字符了。\n\n若在可以要NA端提供禁用手机自带键盘的方法的前提下，要实现点击假键盘输入框能添加删\n\n除字符。\n\n若是只从后面添加删除，很容易实现，只需要将点击键盘对应的字符拼接到 Input type=text\n\n获取到的value的后面，删除同理。\n\n但是要是光标不在最后一位，而是在中间\n\n<img src=\"https://pic1.zhimg.com/v2-417f567a92b4286b5893c2eea41182b4\\_b.jpg\" data-size=\"normal\" data-rawwidth=\"261\" data-rawheight=\"51\" class=\"content\\_image\" width=\"261\">\n\n![](data:image/svg+xml;utf8,%3Csvg%20xmlns=%27http://www.w3.org/2000/svg%27%20width=%27261%27%20height=%2751%27%3E%3C/svg%3E)\n\n图2 光标在数字中间示例图\n\n那么当我们点击假键盘添加或删除字符的时候，如何能知道添加或删除字符的位置呢。\n\n也许需要获取光标位置。\n\n目前只有IE和火狐支持的document.selection，selectionStart可以获取光标位置。\n\n    // 获取光标位置\n    function getCursortPosition (textDom) {\n     var cursorPos = 0;\n     if (document.selection) {\n      // IE Support\n      textDom.focus ();\n      var selectRange = document.selection.createRange();\n      selectRange.moveStart (\'character\', -textDom.value.length);\n      cursorPos = selectRange.text.length;\n     }else if (textDom.selectionStart || textDom.selectionStart == \'0\') {\n      // Firefox support\n      cursorPos = textDom.selectionStart;\n     }\n     return cursorPos;\n    }\n    \n\n  \n\n由于我们的是移动端H5开发项目，考虑兼容性，显然以上方法不能兼容大部分的机型。\n\n  \n\n3\\. 输入框、光标、数字键盘全假实现方案\n---------------------\n\n以上两种方案均难以实现，因此我只能大胆想象，要实现满足以上需求的假键盘就得实现假输\n\n入框、假光标、假keyboard的一套装备。这样所有的元素我都能控制，上面的那些问题全\n\n部可以解决。\n\n  \n\n**雏形**\n\n若是实现只能从最后面增加删除没有光标的假键盘非常容易，只需要给每个键绑定一个click事\n\n件，维护一个数组，每次从后面push或者pop就能维护输入框中的内容。\n\n<img src=\"https://pic1.zhimg.com/v2-cdb4e085a8f48d3e3bb4c86f3f1ca657\\_b.gif\" data-size=\"normal\" data-rawwidth=\"291\" data-rawheight=\"522\" data-thumbnail=\"https://pic1.zhimg.com/v2-cdb4e085a8f48d3e3bb4c86f3f1ca657\\_b.jpg\" class=\"content_image\" width=\"291\">\n\n![](data:image/svg+xml;utf8,%3Csvg%20xmlns=%27http://www.w3.org/2000/svg%27%20width=%27291%27%20height=%27522%27%3E%3C/svg%3E)\n\n图3 只能从最后添加、删除且没有光标的效果图\n\n但是这样跟正真的输入框效果比体验太差了。\n\n  \n\n**难点**\n\n要实现体验跟原生键盘一样并且自带输入验证的假键盘，难点主要在于：\n\n*   有光标，且光标闪动\n*   光标定位，点击数字中间光标自动移过去\n*   根据光标的位置实现插入删除\n*   失去焦点光标隐藏，点击输入框光标显示并且弹出键盘\n\n  \n\n**原生js实现**\n\n对于光标实现，创造一个元素设置背景色，可以控制它隐藏和出现。\n\n对于“点击数字中间光标自动移过去 ”，可以每添加一个数字或者小数点就先加一个带点击事件的空元素space，再添加要输入的字符。space是为了绑定一个点击事件，告诉光标要移动到的位置。\n\n    //字符插入，在光标前插入字符\n    function insert(value) {\n    	var span = document.createElement(\"span\"); //创建包含值的元素\n    	span.className = \'val\';\n    	span.innerText = value;\n    \n    	var space = document.createElement(\"span\");\n    	space.className = \'space\';\n    	space.addEventListener(\'click\', moveCursor);\n    \n    	var cursor = document.getElementsByClassName(\'cursor\')[0];\n    \n    	inputArea.insertBefore(space, cursor);//插入空列\n    	inputArea.insertBefore(span, cursor);//插入值\n    }\n    \n\n删除时也是先删除光标之前的数字字符，再删除space元素。\n\n    //删除元素\n    function deleteElement() {\n    	setCursorFlash();\n    	var cursor = document.getElementsByClassName(\'cursor\')[0];\n    	var n = 2; //两个删除动作\n     	while(cursor.previousSibling && n > 0) {\n        inputArea.removeChild(cursor.previousSibling );\n        n--;\n     	}\n    	if(getInputStr().search(/^\\.\\d*/) > -1) {\n    		insert(0);\n    	}\n    	if(getInputStr() === \'\'){ //元素为空placeholder显示\n    		var placeHolder = document.getElementsByClassName(\'holder\')[0];\n    		placeHolder.className = \'holder\';\n    	}\n    }\n    \n\n通过chrome里面元素审查可以看到添加删除的过程。\n\n<img src=\"https://pic3.zhimg.com/v2-c74b46d12b1c54f332decbae912a3374\\_b.gif\" data-size=\"normal\" data-rawwidth=\"511\" data-rawheight=\"389\" data-thumbnail=\"https://pic3.zhimg.com/v2-c74b46d12b1c54f332decbae912a3374\\_b.jpg\" class=\"origin\\_image zh-lightbox-thumb\" width=\"511\" data-original=\"https://pic3.zhimg.com/v2-c74b46d12b1c54f332decbae912a3374\\_r.jpg\">\n\n![](data:image/svg+xml;utf8,%3Csvg%20xmlns=%27http://www.w3.org/2000/svg%27%20width=%27511%27%20height=%27389%27%3E%3C/svg%3E)\n\n图4 添加、删除、光标移动元素变化图\n\n每一个space元素都绑定一个click事件，用来移动光标，最右边有个right-space可以用来放placeholder,也可以添加click事件，点击时光标总是移到最后一位。\n\n    //移动光标位置\n    function moveCursor(event) {\n    	var cursor = document.getElementsByClassName(\'cursor\')[0];//获取光标\n    	if(event.currentTarget.className == \'right-space\'){\n    		if(!cursor.nextSibling || cursor.nextSibling.nodeName == \'#text\'){\n    			return;\n    		} else {\n    			var ele = cursor.nextSibling;\n    			inputArea.insertBefore(inputArea.lastElementChild, ele);\n    			inputArea.appendChild(cursor);\n    		}\n    	}else {\n    		var tempEle = event.currentTarget.nextSibling;\n    		// var nodeName = event.currentTarget.nextSibling.nodeName;\n    		// var cursor = document.getElementsByClassName(\'cursor\')[0];\n    		if(!tempEle || tempEle.nodeName == \'#text\') {\n    			var temp = event.currentTarget.previousSibling;\n    			var ele = inputArea.replaceChild( event.currentTarget, cursor);//把光标替换成当前元素\n    			inputArea.appendChild(ele);\n    		} else {\n    			var temp = event.currentTarget.nextSibling;\n    			var ele = inputArea.replaceChild( event.currentTarget, cursor);//把光标替换成当前元素\n    			inputArea.insertBefore(ele, temp);\n    		}\n    	}\n    }\n    \n\n从上面的GIF图可以看出，光标始终只有一个而且有个定时任务。光标的闪动设置如下，使用原生的setInterval实现。\n\n    //设置光标定时任务\n    function setCursorFlash() {\n    	//placeholder 隐藏\n    	var placeHolder = document.getElementsByClassName(\'holder\')[0];\n    	placeHolder.className = \'holder hidden\';\n    \n    	var cursor = document.getElementsByClassName(\'cursor\')[0];\n    	var inputContainer = document.getElementsByClassName(\'input-container\')[0];\n    	cursor.className = \"cursor\";\n    	var isShowCursor = true;\n    	inputContainer.focus();\n    	showKeyBoard();\n    	if (intervalId) {\n    		clearInterval(intervalId);\n    	}\n    	intervalId = setInterval(function() {\n    		isShowCursor = !isShowCursor;\n    		if (isShowCursor) {\n    			cursor.className = \'cursor\';\n    		} else {\n    			cursor.className = \'cursor hidden\';\n    		}\n    	}, 1000);\n    }\n    \n\n  \n\n最终使用原生js实现的带输入框、光标，keyboard的假数字键盘。\n\n除了完成以上功能，还实现了输入前验证功能，为了跟接近真实输入框表现，同时实现了点击\n\n输入框获取焦点、光标闪动、弹出键盘；失去焦点光标消失。\n\n**为什么不使用jQuery？**\n\n一是因为，当前的H5项目没有使用jQuery。\n\n二是因为使用VUE之后很少需要直接操作DOM，少数方法自己实现更轻量，若是只为了使用\n\n其一两个方法而引入jQuery，会使得项目更重。\n\n  \n\n**原生js实现效果**\n\n<img src=\"https://pic1.zhimg.com/v2-db1a34ae65534a06c036ae1e338d3a76\\_b.gif\" data-size=\"normal\" data-rawwidth=\"292\" data-rawheight=\"521\" data-thumbnail=\"https://pic1.zhimg.com/v2-db1a34ae65534a06c036ae1e338d3a76\\_b.jpg\" class=\"content_image\" width=\"292\">\n\n![](data:image/svg+xml;utf8,%3Csvg%20xmlns=%27http://www.w3.org/2000/svg%27%20width=%27292%27%20height=%27521%27%3E%3C/svg%3E)\n\n图5 原生js实现输入框、光标、键盘全假套件效果图\n\n源码[https://github.com/DaisyWang88/js-keyboard](https://link.zhihu.com/?target=https%3A//github.com/DaisyWang88/js-keyboard)\n\n手机扫码验证：\n\n[http://sandbox.runjs.cn/show/mvjrcagy](https://link.zhihu.com/?target=http%3A//sandbox.runjs.cn/show/mvjrcagy) (chrome插件url二维码生成器[GetCrx.cn](https://link.zhihu.com/?target=http%3A//getcrx.cn/%23%21/crxid/acedjabgpolnckckknijpejicghpfbnj))\n\n  \n\n由于移动端click事件有300毫秒延时，因此原生js实现的效果，有点不是很流畅。若使用原生\n\nJS实现版的需要使fastclick或zepto的tap事件解决延时问题。\n\n  \n\n**PS**：**之前说‘VUE本身解决300毫秒延时问题’，考证之后发现不对，给大家带来困扰实在抱歉。**\n\n**考证之后发现VUE的click事件都是原生的click并没有处理这个延时。**\n\n**为了不让大家困扰，github上的demo已经使用fastClick解决了延时问题，（之前太懒了>.<）。现在原生的js实现效果也很顺畅了。**\n\n* * *\n\nVUE组件化\n------\n\n  \n\n考虑到项目里有的应用场景有多个输入框，当然输入的时候只需要一个键盘，因此组件化的时\n\n候将输入框作为一个组件v-input，键盘作为一个组件v-keyboard。\n\n  \n\n**输入框和键盘的交互**\n\n交互图如下：\n\n<img src=\"https://pic4.zhimg.com/v2-2519fd80c5656b1ec9799640f33d28bf\\_b.jpg\" data-size=\"normal\" data-rawwidth=\"597\" data-rawheight=\"425\" class=\"origin\\_image zh-lightbox-thumb\" width=\"597\" data-original=\"https://pic4.zhimg.com/v2-2519fd80c5656b1ec9799640f33d28bf_r.jpg\">\n\n![](data:image/svg+xml;utf8,%3Csvg%20xmlns=%27http://www.w3.org/2000/svg%27%20width=%27597%27%20height=%27425%27%3E%3C/svg%3E)\n\n图6 VUE组件交互图\n\n考虑到本项目里面存在一个页面多个输入框的场景，因此需要控制键盘与哪个输入框配合使\n\n用。\n\n为了达到这样的目的，采用“**当点击输入框获取焦点的时候，将当前v-input输入框组件的实**\n\n**例传给v-keyboard键盘组件**”的方式。\n\n    this.$refs.virtualKeyBoard.$emit(\'getInputVm\', this.$refs.virtualInput);\n    \n\n如图6 ，v-keyboard组件会监听\'getInputVm\'事件，获取v-input的实例。\n\n键盘组件v-keyboard获取到输入框组件v-input的实例之后就可以根据键盘的点击事件——添\n\n加或删除，操作输入框组件v-input来放入或者删除字符了。\n\n这样即使有多个输入框，也方便控制键盘和输入框之间的操作。\n\n  \n\n**输入框自动获取焦点，键盘自动弹出**\n\n  \n\n需求里要求进入某个页面输入框自动获取焦点，键盘自动弹出。\n\n*   输入框自动获取焦点可以通过设置is-auto-focus来控制是否自动获取焦点。\n\n    <v-input\n        ref=\"virtualInput\"\n        v-model=\"amount\"\n        :placeholder=\"placeText\"\n        :is-auto-focus=\"true\"\n        @show-key-board=\"showKeyBoard\">\n    v-input>\n    \n\n*   要自动弹出键盘如图6，需要在页面实例化完成之后将相应的输入框组件v-input的实例传给键盘组件v-keyboard。\n\n    this.$refs.virtualKeyBoard.$emit(\'getInputVm\', this.$refs.virtualInput);\n    \n\n键盘组间捕获\'getInputVm\'事件之后获取了相应输入框的实例，同时自动弹出。\n\n    this.$on(\'getInputVm\', function(obj) {\n         this.refObject = obj;\n         this.isShow = true;\n    });\n    \n\n  \n\n**v-model支持**\n\n  \n\nvue支持自定义v-model，子组件设置一个value 的 props。\n\n    props: {\n        value: {\n          type: String,\n          default: \'\',\n        },\n    }\n    \n\n在value改变的时候$emit一个\'input\'事件并把相应的值传出去就可以实现v-model的双向绑定了。this.getInputStr()是用来获取输入框中字符串的函数。\n\n    this.$emit(\'input\', this.getInputStr());\n    \n\n效果如下：\n\n<img src=\"https://pic1.zhimg.com/v2-a45bdd3e95974c12853efce15487a1c9\\_b.gif\" data-size=\"normal\" data-rawwidth=\"291\" data-rawheight=\"519\" data-thumbnail=\"https://pic1.zhimg.com/v2-a45bdd3e95974c12853efce15487a1c9\\_b.jpg\" class=\"content_image\" width=\"291\">\n\n![](data:image/svg+xml;utf8,%3Csvg%20xmlns=%27http://www.w3.org/2000/svg%27%20width=%27291%27%20height=%27519%27%3E%3C/svg%3E)\n\n图7 vue版效果图\n\n源码参见[https://github.com/DaisyWang88/VUE-keyboard](https://link.zhihu.com/?target=https%3A//github.com/DaisyWang88/VUE-keyboard)。\n\n总结\n--\n\n原生的input 设置type = number，想要做输入前验证控制小数点个数和小数位数等功能基本很\n\n难实现，要在输入前取到值也是存在各种兼容性问题，目前只有ontextInput在移动端能在输入\n\n前准确取到值，还有个关键的问题type = number的时候取到的value不包含小数点，导致输入\n\n前使用正则验证几乎无法实现；若是设置type= text 虽然能取到输入框中所有字符，但是就无\n\n法弹出数字键盘。要想使用原生input输入小数，就必须有所取舍。\n\n*   要么不做输入前验证，使用type = number ，可以输入多个小数点，只在数值数值不合法的时候提示输入不合法，但是只有android可以弹出数字键盘，IOS仍然弹出全键盘。用户体验可能差些。\n*   要么使用type = text，虽然可以做到输入前验证（因为可以取到全部字符），但是所有机型都只会弹全键盘了，用户体验也一般。\n*   以上两种都无法实现进入页面键盘自动弹出，只能借助NA提供的方法实现。\n*   如果你是强迫症癌晚期患者，用户体验之上者，那么你就可以跟我一样做个假键盘，这样以上问题都不是问题。还可以添加附加功能，比如输入的时候若在第一位输入小数点的时候，前面自动补\'0\'；删除的时候，若小数点在第一位前面自动补\'0\'；还可以定制光标颜色、键盘样式等等。\n\n很不幸，我就是一个强迫症癌晚期患者，目前实现的键盘套件改造成VUE组件已经成功在项目\n\n中使用，有单输入框的页面，也有多输入框的页面，支持placeholder 和v-model。', 0, 1, 0);
INSERT INTO `post` (`id`, `createAt`, `updateAt`, `title`, `description`, `thumb`, `url`, `html`, `markdown`, `views`, `status`, `push`) VALUES
(15, '2018-04-23 11:01:41.444940', '2018-04-23 11:01:41.444940', '潜入理解ES６－模块化', '写在前面ES6标准之前，JavaScript并没有模块体系，特别是浏览器端通过引入的代码被当作脚本执行。社区中则制定了一些标准：如CommonJS、AMD、CMD，CommonJS同步加载主要用于服务端，AMD、CMD异步加载则用于浏览器端。ES6静态加载的设计思想，使得在编译时就可以确定模块的依赖关系，以及输入、输出的变量。ES6则在语言层面上实现了模块化，取代CommonJS、AMD、CMD成为服务端和浏览器端通用的模块解决方案。（CommonJS、AMD、CMD运行时确定依赖关系）何为模块ES6模块', 'https://user-gold-cdn.xitu.io/2018/3/22/1624baae42334152', 'https://juejin.im/entry/5ab344055188252c321994d9', '<p></p><figure><img alt=\"图片地址http://imcreator.com/free/tech/i\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2018/3/22/1624baae42334152?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"620\" data-height=\"620\" src=\"https://user-gold-cdn.xitu.io/2018/3/22/1624baae42334152?imageView2/0/w/1280/h/960/ignore-error/1\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\" data-id=\"heading-0\">写在前面</h2>\n<p>ES6标准之前，JavaScript并没有模块体系，特别是浏览器端通过<code><script></code>引入的代码被当作脚本执行。社区中则制定了一些标准：如<a target=\"_blank\" href=\"https://link.juejin.im/?target=https%3A%2F%2Fjuejin.im%2Fpost%2F5ab28582518825611a40603e\" rel=\"nofollow noopener noreferrer\">CommonJS、AMD、CMD</a>，CommonJS同步加载主要用于服务端，AMD、CMD异步加载则用于浏览器端。</p>\n<p>ES6<strong>静态加载</strong>的设计思想，使得在编译时就可以确定模块的依赖关系，以及输入、输出的变量。ES6则在语言层面上实现了模块化，取代CommonJS、AMD、CMD成为服务端和浏览器端通用的模块解决方案。（CommonJS、AMD、CMD运行时确定依赖关系）</p>\n<h2 class=\"heading\" data-id=\"heading-1\">何为模块</h2>\n<ul>\n<li>ES6模块自动运行在严格模式下</li>\n<li>每个模块的作用域独立，模块顶部<code>this</code>为<code>undefined</code></li>\n<li>必须导出外部可访问的函数、变量</li>\n<li>一个模块可以家在多次，但执行一次</li>\n</ul>\n<h2 class=\"heading\" data-id=\"heading-2\">导出 & 导入</h2>\n<h3 class=\"heading\" data-id=\"heading-3\">导出&导入变量/方法</h3>\n<pre><code class=\"hljs javascript\" lang=\"javascript\"><span class=\"hljs-comment\">// example1.js</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span>/<span class=\"hljs-keyword\">var</span>/<span class=\"hljs-keyword\">const</span> param1 = <span class=\"hljs-string\">\'ok\'</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">method1</span> (<span class=\"hljs-params\"></span>) </span>{}\n<span class=\"hljs-comment\">// 先声明再导出 </span>\n<span class=\"hljs-keyword\">let</span>/<span class=\"hljs-keyword\">var</span>/<span class=\"hljs-keyword\">const</span> param2 = <span class=\"hljs-string\">\'error\'</span>\n<span class=\"hljs-keyword\">export</span> param2\n\n<span class=\"hljs-keyword\">import</span> { param1, method1 } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'./example1.js\'</span>\n<span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> example1 <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'./example1.js\'</span>\n\nexample1.param1 <span class=\"hljs-comment\">// \'ok\'</span>\n</code></pre><h3 class=\"heading\" data-id=\"heading-4\">导出&导入默认<code>default</code></h3>\n<pre><code class=\"hljs javascript\" lang=\"javascript\"><span class=\"hljs-comment\">// example2.js</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> val param2 = <span class=\"hljs-string\">\'ok\'</span>\n<span class=\"hljs-comment\">// example3.js</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span> (<span class=\"hljs-params\"></span>) </span>{}\n\n<span class=\"hljs-keyword\">import</span> param2 <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'./example2.js\'</span>\n<span class=\"hljs-keyword\">import</span> foo <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'./example3.js\'</span>\n</code></pre><h3 class=\"heading\" data-id=\"heading-5\">无绑定导入</h3>\n<p>有的模块可以不导出任何东西，他们只<strong>修改全局作用域中的对象</strong>。例如，我们需要为<code>Array</code>原型增加方法，就可以采用无绑定导入。</p>\n<pre><code class=\"hljs javascript\" lang=\"javascript\"><span class=\"hljs-comment\">// example.js</span>\n<span class=\"hljs-built_in\">Array</span>.prototype.pushAll = <span class=\"hljs-function\">(<span class=\"hljs-params\">items</span>) =></span> {\n    <span class=\"hljs-comment\">// ES6数组方法的内部实现，可以写篇文章讨论下</span>\n    <span class=\"hljs-comment\">// isArray方法实现：</span>\n    <span class=\"hljs-comment\">// Object.prototype.toString.call(arg) === \'[object Array]\'</span>\n    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-built_in\">Array</span>.isArray(items)) {\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">TypeError</span>(<span class=\"hljs-string\">\'参数必须是数组\'</span>)\n    }\n    <span class=\"hljs-comment\">// 使用展开运算符</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.push(...items)\n}\n\n<span class=\"hljs-comment\">// 使用时，直接import</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\'./example.js\'</span>\n<span class=\"hljs-keyword\">let</span> items = []\n<span class=\"hljs-keyword\">let</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]\nitems.pushAll(arr)\n</code></pre><h2 class=\"heading\" data-id=\"heading-6\">模块加载</h2>\n<h3 class=\"heading\" data-id=\"heading-7\">传统加载JavaScript脚本</h3>\n<p>默认情况下，浏览器同步加载<code><script></code>，遇到<code><script></code>标签就会停止渲染，执行完脚本才会继续渲染。如果遇到特别大的脚本，就会长时间白屏，用户体验很差。</p>\n<pre><code class=\"hljs javascript\" lang=\"javascript\"><!-- 页面内嵌的脚本 -->\n<span class=\"xml\"><span class=\"hljs-tag\"><<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span>></span><span class=\"undefined\">\n</span><span class=\"hljs-tag\"></<span class=\"hljs-name\">script</span>></span></span>\n<!-- 外部脚本 -->\n<span class=\"xml\"><span class=\"hljs-tag\"><<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"./example.js\"</span>></span><span class=\"undefined\"></span><span class=\"hljs-tag\"></<span class=\"hljs-name\">script</span>></span></span>\n</code></pre><h3 class=\"heading\" data-id=\"heading-8\">使用async、defer属性</h3>\n<p>因为之前说到浏览器同步加载<code><script></code>标签，使用<code>async</code>和<code>defer</code>标签就可以异步加载。区别在于：</p>\n<ul>\n<li>defer等到页面渲染完成才会执行</li>\n<li>async只要脚本加载完成，立即执行</li>\n</ul>\n<pre><code class=\"hljs javascript\" lang=\"javascript\"><script type=<span class=\"hljs-string\">\"text/javascript\"</span> src=<span class=\"hljs-string\">\"./module1.js\"</span> defer><span class=\"xml\"><span class=\"hljs-tag\"></<span class=\"hljs-name\">script</span>></span></span>\n<!-- 这里面无法知道module2、module3那个先执行，因为不知道那个先加载完 -->\n<span class=\"xml\"><span class=\"hljs-tag\"><<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"./module2.js\"</span> <span class=\"hljs-attr\">async</span>></span><span class=\"undefined\"></span><span class=\"hljs-tag\"></<span class=\"hljs-name\">script</span>></span></span>\n<script type=<span class=\"hljs-string\">\"text/javascript\"</span> src=<span class=\"hljs-string\">\"./module3.js\"</span> <span class=\"hljs-keyword\">async</span>><span class=\"xml\"><span class=\"hljs-tag\"></<span class=\"hljs-name\">script</span>></span></span>\n</code></pre><h3 class=\"heading\" data-id=\"heading-9\">浏览器中使用模块</h3>\n<p>在浏览器端使用脚本默认开启<code>defer</code>属性，也就是按照引入的顺序一个一个加载，这也符合<strong>静态化</strong>的思想。</p>\n<p>浏览器端使用ES6模块如下：</p>\n<pre><code class=\"hljs javascript\" lang=\"javascript\"><script  type=\'module\' src=\'module1.js\'></script>\n<script  type=\'module\'>\n    import utils from \'./utils.js\'\n    // 其他代码\n</script>\n</code></pre><h2 class=\"heading\" data-id=\"heading-10\">ES6模块和CommonJS的区别</h2>\n<ul>\n<li>CommonJS模块输出是值的拷贝，ES6模块输出是值的引用（引用时可能修改到模块的值）</li>\n<li>CommonJS是运行时加载，ES6模块是编译时加载</li>\n</ul>\n<pre><code class=\"hljs javascript\" lang=\"javascript\"><span class=\"hljs-comment\">// math.js</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> val = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">add</span> (<span class=\"hljs-params\"></span>) </span>{\n    val++\n}\n<span class=\"hljs-comment\">// test.js</span>\n<span class=\"hljs-keyword\">import</span> { val, add } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'./math.js\'</span>\n<span class=\"hljs-built_in\">console</span>.log(val) <span class=\"hljs-comment\">// 1</span>\nadd()\n<span class=\"hljs-built_in\">console</span>.log(val) <span class=\"hljs-comment\">// 2</span>\n</code></pre>', '![图片地址http://imcreator.com/free/tech/i](https://user-gold-cdn.xitu.io/2018/3/22/1624baae42334152?imageView2/0/w/1280/h/960/ignore-error/1)\n\n写在前面\n----\n\nES6标准之前，JavaScript并没有模块体系，特别是浏览器端通过`</code>引入的代码被当作脚本执行。社区中则制定了一些标准：如<a target=\"_blank\" href=\"https://link.juejin.im/?target=https%3A%2F%2Fjuejin.im%2Fpost%2F5ab28582518825611a40603e\" rel=\"nofollow noopener noreferrer\">CommonJS、AMD、CMD</a>，CommonJS同步加载主要用于服务端，AMD、CMD异步加载则用于浏览器端。</p> <p>ES6<strong>静态加载</strong>的设计思想，使得在编译时就可以确定模块的依赖关系，以及输入、输出的变量。ES6则在语言层面上实现了模块化，取代CommonJS、AMD、CMD成为服务端和浏览器端通用的模块解决方案。（CommonJS、AMD、CMD运行时确定依赖关系）</p> <h2 class=\"heading\" data-id=\"heading-1\">何为模块</h2> <ul> <li>ES6模块自动运行在严格模式下</li> <li>每个模块的作用域独立，模块顶部<code>this</code>为<code>undefined</code></li> <li>必须导出外部可访问的函数、变量</li> <li>一个模块可以家在多次，但执行一次</li> </ul> <h2 class=\"heading\" data-id=\"heading-2\">导出 & 导入</h2> <h3 class=\"heading\" data-id=\"heading-3\">导出&导入变量/方法</h3> <pre><code class=\"hljs javascript\" lang=\"javascript\"><span class=\"hljs-comment\">// example1.js</span> <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span>/<span class=\"hljs-keyword\">var</span>/<span class=\"hljs-keyword\">const</span> param1 = <span class=\"hljs-string\">\'ok\'</span> <span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">method1</span> (<span class=\"hljs-params\"></span>) </span>{} <span class=\"hljs-comment\">// 先声明再导出 </span> <span class=\"hljs-keyword\">let</span>/<span class=\"hljs-keyword\">var</span>/<span class=\"hljs-keyword\">const</span> param2 = <span class=\"hljs-string\">\'error\'</span> <span class=\"hljs-keyword\">export</span> param2 <span class=\"hljs-keyword\">import</span> { param1, method1 } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'./example1.js\'</span> <span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> example1 <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'./example1.js\'</span> example1.param1 <span class=\"hljs-comment\">// \'ok\'</span> </code></pre><h3 class=\"heading\" data-id=\"heading-4\">导出&导入默认<code>default</code></h3> <pre><code class=\"hljs javascript\" lang=\"javascript\"><span class=\"hljs-comment\">// example2.js</span> <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> val param2 = <span class=\"hljs-string\">\'ok\'</span> <span class=\"hljs-comment\">// example3.js</span> <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span> (<span class=\"hljs-params\"></span>) </span>{} <span class=\"hljs-keyword\">import</span> param2 <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'./example2.js\'</span> <span class=\"hljs-keyword\">import</span> foo <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'./example3.js\'</span> </code></pre><h3 class=\"heading\" data-id=\"heading-5\">无绑定导入</h3> <p>有的模块可以不导出任何东西，他们只<strong>修改全局作用域中的对象</strong>。例如，我们需要为<code>Array</code>原型增加方法，就可以采用无绑定导入。</p> <pre><code class=\"hljs javascript\" lang=\"javascript\"><span class=\"hljs-comment\">// example.js</span> <span class=\"hljs-built_in\">Array</span>.prototype.pushAll = <span class=\"hljs-function\">(<span class=\"hljs-params\">items</span>) =></span> { <span class=\"hljs-comment\">// ES6数组方法的内部实现，可以写篇文章讨论下</span> <span class=\"hljs-comment\">// isArray方法实现：</span> <span class=\"hljs-comment\">// Object.prototype.toString.call(arg) === \'[object Array]\'</span> <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-built_in\">Array</span>.isArray(items)) { <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">TypeError</span>(<span class=\"hljs-string\">\'参数必须是数组\'</span>) } <span class=\"hljs-comment\">// 使用展开运算符</span> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.push(...items) } <span class=\"hljs-comment\">// 使用时，直接import</span> <span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\'./example.js\'</span> <span class=\"hljs-keyword\">let</span> items = [] <span class=\"hljs-keyword\">let</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>] items.pushAll(arr) </code></pre><h2 class=\"heading\" data-id=\"heading-6\">模块加载</h2> <h3 class=\"heading\" data-id=\"heading-7\">传统加载JavaScript脚本</h3> <p>默认情况下，浏览器同步加载<code><script></code>，遇到<code><script></code>标签就会停止渲染，执行完脚本才会继续渲染。如果遇到特别大的脚本，就会长时间白屏，用户体验很差。</p> <pre><code class=\"hljs javascript\" lang=\"javascript\"><!-- 页面内嵌的脚本 --> <span class=\"xml\"><span class=\"hljs-tag\"><<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span>></span><span class=\"undefined\"> </span><span class=\"hljs-tag\"></<span class=\"hljs-name\">script</span>></span></span> <!-- 外部脚本 --> <span class=\"xml\"><span class=\"hljs-tag\"><<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"./example.js\"</span>></span><span class=\"undefined\"></span><span class=\"hljs-tag\"></<span class=\"hljs-name\">script</span>></span></span> </code></pre><h3 class=\"heading\" data-id=\"heading-8\">使用async、defer属性</h3> <p>因为之前说到浏览器同步加载<code><script></code>标签，使用<code>async</code>和<code>defer</code>标签就可以异步加载。区别在于：</p> <ul> <li>defer等到页面渲染完成才会执行</li> <li>async只要脚本加载完成，立即执行</li> </ul> <pre><code class=\"hljs javascript\" lang=\"javascript\"><script type=<span class=\"hljs-string\">\"text/javascript\"</span> src=<span class=\"hljs-string\">\"./module1.js\"</span> defer><span class=\"xml\"><span class=\"hljs-tag\"></<span class=\"hljs-name\">script</span>></span></span> <!-- 这里面无法知道module2、module3那个先执行，因为不知道那个先加载完 --> <span class=\"xml\"><span class=\"hljs-tag\"><<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"./module2.js\"</span> <span class=\"hljs-attr\">async</span>></span><span class=\"undefined\"></span><span class=\"hljs-tag\"></<span class=\"hljs-name\">script</span>></span></span> <script type=<span class=\"hljs-string\">\"text/javascript\"</span> src=<span class=\"hljs-string\">\"./module3.js\"</span> <span class=\"hljs-keyword\">async</span>><span class=\"xml\"><span class=\"hljs-tag\"></<span class=\"hljs-name\">script</span>></span></span> </code></pre><h3 class=\"heading\" data-id=\"heading-9\">浏览器中使用模块</h3> <p>在浏览器端使用脚本默认开启<code>defer</code>属性，也就是按照引入的顺序一个一个加载，这也符合<strong>静态化</strong>的思想。</p> <p>浏览器端使用ES6模块如下：</p> <pre><code class=\"hljs javascript\" lang=\"javascript\"><script type=\'module\' src=\'module1.js\'> import utils from \'./utils.js\' // 其他代码`\n\nES6模块和CommonJS的区别\n-----------------\n\n*   CommonJS模块输出是值的拷贝，ES6模块输出是值的引用（引用时可能修改到模块的值）\n*   CommonJS是运行时加载，ES6模块是编译时加载\n\n    // math.js\n    export let val = 1\n    export function add () {\n        val++\n    }\n    // test.js\n    import { val, add } from \'./math.js\'\n    console.log(val) // 1\n    add()\n    console.log(val) // 2', 0, 1, 0),
(16, '2018-04-23 11:01:41.468534', '2018-04-23 11:01:41.468534', 'vim 入坑指南', '个人站点：桃园0.前言0.1简介vim被誉为『编辑器之神』，与之同时代的emacs被誉为『神之编辑器』。可以看得出vim在编辑器的地位是很高的，得益于vim的指法，敲起代码来如行云流水。特别膜拜创始人创始出这么方便的敲代码的指法，这篇文章就是来带你入坑vim指法操作。0.2前端的我为什么要学习vim在当今前端开发工具百花齐放的时代（VSCode、Sublime、Atom以及IDEWebstorm），我为什么还要介绍20多年前开发的一个老古董呢？在这里我想说的是出身虽然老，但是所带来的价值并没有减,一旦习惯', '', 'https://juejin.im/post/5ab1275d5188255588053e70', '<blockquote>\n<p>个人站点：<a target=\"_blank\" href=\"https://link.juejin.im/?target=http%3A%2F%2Fwww.taoweng.site%2F\" rel=\"nofollow noopener noreferrer\">桃园</a></p>\n</blockquote>\n<h2 class=\"heading\" data-id=\"heading-0\">0. 前言</h2>\n<h3 class=\"heading\" data-id=\"heading-1\">0.1 简介</h3>\n<p>vim 被誉为『编辑器之神』，与之同时代的 emacs 被誉为『神之编辑器』。可以看得出 vim 在编辑器的地位是很高的，得益于 vim 的指法，敲起代码来如行云流水。特别膜拜创始人创始出这么方便的敲代码的指法，这篇文章就是来带你入坑 vim 指法操作。</p>\n<h3 class=\"heading\" data-id=\"heading-2\">0.2 前端的我为什么要学习 vim</h3>\n<p>在当今前端开发工具百花齐放的时代（VS Code、Sublime、Atom 以及 IDE Webstorm），我为什么还要介绍 20 多年前开发的一个老古董呢？在这里我想说的是出身虽然老，但是所带来的价值并没有减,一旦习惯了 vim 的指法之后，你会觉得不用 vim 操作写代码会觉得很不习惯，甚至不知道怎么操作。然而用在支持 vim 指法的编辑上写代码你会觉得如行云流水，如果再配个机械键盘，简直是享受，特别符合极客的风格。</p>\n<p>一旦学会了 vim 的指法，会让你终身受益，至少在你敲代码的年代会收益，毫无夸张, 它会让你摆脱烦人的，在敲代码的时候频繁的移动鼠标，这也是 vim 的设计理念之一 -- 脱离鼠标。</p>\n<h3 class=\"heading\" data-id=\"heading-3\">0.3 文章适用读者</h3>\n<p>本篇文章比较适合前端开发者，因为我也只是用 vim 在前端领域做过一些开发，其他领域我没有发言权。</p>\n<h3 class=\"heading\" data-id=\"heading-4\">0.4 Q&A</h3>\n<p>Q：你推荐 vim 是要我们完全放弃以前的编辑器而投入 vim 的怀抱吗？</p>\n<p>A：当然不是。首先 vim 的学习成本还是很高的，因为他跟平时我们用的编辑器敲代码的方式根本不同，因为它是不用鼠标的，纯键盘操作。你想想如果你在你的 vs code 上不用鼠标操作，你上下左右全靠方向键，那敲代码的速度得有多慢。而且初学者想把 vim 打造成一个自己的 IDE 还是很有难度的。所以我这里推荐的是，不管是你的 vs code、sublime等，装一个 vim 插件。我在 vs code 上试过，很爽，只不过现在投身到 emacs 的怀抱了。</p>\n<blockquote>\n<p>虽然我用 emacs 了，我还是会装 vim 插件（Evil）。如果有兴趣，下次可以推荐一下 spacemacs 。</p>\n</blockquote>\n<p>开题说了这么多，就是想吸引一下大家，觉得 vim 的指法是值得去学习的，接下来进入正题。</p>\n<h2 class=\"heading\" data-id=\"heading-5\">1 助记符</h2>\n<p>vim 上的所有定义的快捷键都是有一定的意义的，在这里我先把常用的一些列出来。</p>\n<h3 class=\"heading\" data-id=\"heading-6\">1.1 正则表达式相关</h3>\n<ul>\n<li>$ ： 移动光标到行尾</li>\n<li>^ :  移动光标到当前行的第一个字母位置。</li>\n</ul>\n<h3 class=\"heading\" data-id=\"heading-7\">1.2 移动类（motion）</h3>\n<p>h（左）、l（右）、j（上）、k（下）、f（front）、b（back）、u（up）</p>\n<h3 class=\"heading\" data-id=\"heading-8\">1.3 操作类（operator）</h3>\n<p>d（delete）、i（insert）、a（append）、c（change）、y（copy）、p（paste）</p>\n<h3 class=\"heading\" data-id=\"heading-9\">1.4 一般的缩写</h3>\n<p>w（word）、s（sentence）</p>\n<h2 class=\"heading\" data-id=\"heading-10\">2 理解 vim 中三种常用模式</h2>\n<p>vim 里面有好几种模式，但是因为我这里介绍的是在目前的编辑器里面装 插件，所以像命令模式这种用来保存文件、退出文件的就不介绍了。</p>\n<ol>\n<li>Nomal mode（默认模式，因为使用该模式场景最多，所有定为默认模式）。</li>\n<li>Insert mode （插入模式--少用，用了它 vim 就成 「哑巴」了）。</li>\n<li>Visual mode（可视模式，取名叫光标模式或者选择模式可能还比较好理解）</li>\n</ol>\n<h3 class=\"heading\" data-id=\"heading-11\">2.1 三种模式之间的转换关系</h3>\n<p></p><figure><img alt=\"图片来源参考文章\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2018/3/20/1624401bddd4add7?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"1068\" data-height=\"1130\" src=\"https://user-gold-cdn.xitu.io/2018/3/20/1624401bddd4add7?imageView2/0/w/1280/h/960/ignore-error/1\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\" data-id=\"heading-12\">3 教程篇</h2>\n<p>当我们记住上面的助记符之后，我们就可以像写英文短语一样操作了。</p>\n<blockquote>\n<p>vim 快捷键语法：[operator][count][motion]，例如 删两个单词就是\nd2w，operator 和 motion 我已经在前面给出来一些了。</p>\n</blockquote>\n<h3 class=\"heading\" data-id=\"heading-13\">3.1 移动光标</h3>\n<h4 class=\"heading\" data-id=\"heading-14\">3.1.1 最基本的 h、j、k、l</h4>\n<p>最基本的上下左右移动（跟键盘上下左右的键盘效果相同，但是往往方向键在键盘的右下方，离主键盘区较远，这个也相对比较有优势）：</p>\n<ul>\n<li>h：光标向左移动</li>\n<li>j：光标向下移动</li>\n<li>k：光标向上移动</li>\n<li>l：光标向右移动</li>\n</ul>\n<p>移动属于 motion，所以在前面加上「count」就可以移动多行了，比如向上移动 10 行，就可以 10k。往往编辑器会有行号，定位需要做个加减法，如果采用的是相对行号，用这个就比较方便。不懂相对行号的同学看下图就懂了。\n</p><figure><img alt=\"相对行号\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2018/3/20/1624401bdee388e5?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"846\" data-height=\"616\" src=\"https://user-gold-cdn.xitu.io/2018/3/20/1624401bdee388e5?imageView2/0/w/1280/h/960/ignore-error/1\"><figcaption></figcaption></figure><p></p>\n<h4 class=\"heading\" data-id=\"heading-15\">3.1.2 快速移动</h4>\n<p>w：光标往前移动一个词\nb：光标向后移动一个词\n0：移动光标到当前行首\n^：移动光标到当前行的第一个字母位置(注意与 0 的区别)\n$：移动光标到行尾\nfx：移动光标到当前行的下一个 x 处（x为任意字母）\ntx：和上面一个命令类似，移动到 x 的左边一个位置\n)：移动光标到下一个句子\n( ：移动光标到上一个句子\n{：移动光标到上一段\n}：移动光标到下一段</p>\n<h4 class=\"heading\" data-id=\"heading-16\">3.1.3 快速定位</h4>\n<p>在刚才介绍了通过相对行号来进行移动到行的光标，还有采用绝对定位来移动的。那就是 gg。\n语法： [num]gg</p>\n<ul>\n<li>2gg : 光标移动到第 2 行</li>\n<li>gg： 光标移动到文件首部</li>\n<li>G：移动到文件胃部</li>\n<li>H：移动到屏幕上面</li>\n<li>M：移动到屏幕中间</li>\n<li>L：移动到屏幕下面</li>\n</ul>\n<p>书签功能：这个功能也是很方便，很少有编辑器有的功能，单独列出来讲，强烈推荐。</p>\n<ul>\n<li>m：给当前行加入书签，x 为任意字母（m 是 mark ）</li>\n<li>` ： 单引号加上刚才 m 之后的字母，就会调整到刚才标记的那一行</li>\n</ul>\n<h3 class=\"heading\" data-id=\"heading-17\">3.1.3 屏幕滚动</h3>\n<ul>\n<li>Ctrl + b：向上移动一屏（Foward首字母小写）</li>\n<li>Ctrl + f：向下移动一屏（Backward首字母小写）</li>\n<li>Ctrl + d：向下滚动半屏内容（Down首字母小写）</li>\n<li>Ctrl + u：向上滚动半屏内容（Up首字母小写）</li>\n</ul>\n<h3 class=\"heading\" data-id=\"heading-18\">3.2 剪切、复制、粘贴</h3>\n<ul>\n<li>d[n]w：剪切后面 n 个单词的内容，dw 是剪切当前单词</li>\n<li>[n]dd：剪切n行的内容, dd 为剪切当前行</li>\n<li>D：剪切光标后到行尾的内容</li>\n<li>yy/Y：复制当前行的内容</li>\n<li>p：粘贴到光标后</li>\n<li>P：粘贴到光标前</li>\n</ul>\n<p>在 normal 模式下是没有删除操作的，d 这种删除也是剪切。</p>\n<blockquote>\n<p>以上全是 normal 模式</p>\n</blockquote>\n<h3 class=\"heading\" data-id=\"heading-19\">3.3 编辑模式</h3>\n<p>在前面也说了，进入编辑模式也就变成了「哑巴」vim 了，就跟一般的编辑器没什么区别了。很多人就知道用 i 可以进入，还有很多命令可以让你聪明的进入。</p>\n<ul>\n<li>i：在光标处插入（insert首字母小写）</li>\n<li>I：在行首插入（insert首字母大写）</li>\n<li>a：在光标处后一个字符插入（append首字母小写）</li>\n<li>A：在行尾插入（append首字母大写）</li>\n<li>o：在上一行插入</li>\n<li>O：在下一行插入</li>\n<li>s：清除当前字符并进入插入模式</li>\n<li>cc/S：清除当前行并进入插入模式</li>\n<li>cw: 清除当前单词并进入插入模式</li>\n</ul>\n<h3 class=\"heading\" data-id=\"heading-20\">3.4 可视模式</h3>\n<p>要是前面都学会了，可视模式就比较简单了，而且你将会经常用到这个模式。我会把这个模式称做「选择模式」，接下来我们就来探索一下是如果选择的。</p>\n<p>其实也就两个关键的点：v（字符选择）、V（行选择）</p>\n<h4 class=\"heading\" data-id=\"heading-21\">3.4.1 v（小写 v）</h4>\n<p>在 normal 模式下，按一下 v，然后可以按 l，重复按 l，你会发现右边的在一直被选中（高亮的部分）。同样的操作，按了 v，然后再练习一下按 h、j、k。</p>\n<p>选中的目的是什么呢？就是为了进行一些编辑操作，比如删除 d (实质是剪切)、复制 y。</p>\n<blockquote>\n<p>小提示，常常选中之后用 c 也是比较好的选择哦，剪切并进入插入模式。</p>\n</blockquote>\n<h4 class=\"heading\" data-id=\"heading-22\">3.4.2 V（大写 V）</h4>\n<p>V 就是选中行，也很简单。按了 V 之后，然后按 j、k，就可以上下选择行了，然后一次性删除 d、复制 y，就比较方便。</p>\n<h3 class=\"heading\" data-id=\"heading-23\">3.5 组合操作</h3>\n<p>这个功能就比较强悍了，很适用，强烈推荐。\n先来记公式：operator + i|a + scope</p>\n<blockquote>\n<p>operator 就是我们前面提到的插入（c）、剪切（d）、复制（y）以及选择（v），i 表示 scope 范围内，a 表示包含 scope 标签，scope 就是操作的范围了。</p>\n</blockquote>\n<p>实例：\n以下如果将 i 换成 a，则会将符号也包含进去</p>\n<ul>\n<li>vib（选中小括号内的内容）</li>\n<li>viB（选中大括号内的内容）</li>\n<li>vi\"（选中双引号内的内容）</li>\n<li>vi\'（选中单引号内的内容）</li>\n<li>vi<（选中尖括号内的内容）</li>\n</ul>\n<h3 class=\"heading\" data-id=\"heading-24\">3.6 撤回、查找、替换</h3>\n<ul>\n<li>u： 撤回上次操作(效果跟 command + z 效果一样)</li>\n<li>/|?xxx：表示在整篇文档中搜索匹配xxx的字符串, / 表示向下查找, ? 表示向上查找.其中xxx可以是正规表达式。查找到以后, 再输入 n 查找下一个匹配处, 输入 N 反方向查找.</li>\n<li>:%s/original/replacement：检索第一个 “original” 字符串并将其替换成 “replacement”</li>\n<li>:%s/original/replacement/g： 检索并将所有的 “original” 替换为 “replacement”</li>\n<li>:%s/original/replacement/gc：检索出所有的 “original” 字符串，但在替换成 “replacement” 前，先询问是否替换</li>\n</ul>\n<p>这些操作一般编辑器都自带有很好的快捷键，记不住也没啥。</p>\n<h2 class=\"heading\" data-id=\"heading-25\">4 结束语</h2>\n<p>我写这篇文章的目的不是为了总结什么知识点（其实当你 vim 用熟了，这些命令完全形成肌肉记忆了，根本不用记下来），或者说想发篇文章之类的，仅仅是想给 vim 做一个宣传，让更多的人接触 vim，让更多的开发者在开发上效率更高。如果你觉得这篇文章对你有帮助，请转发给更多的人让他们都了解了解。</p>\n<p>最后想提醒的就是，对于这些快捷键，死记是很难记完的，根据我总结的一些语义话的方式去记，有公式的记公式，可能要快一点，然后就是多实践，敲多了自己就记住了。我刚开始学的时候，还不知道有那些助记符，基本完全靠死记硬背，我就是用一张纸，然后把命令手写抄到纸上，放在我的电脑旁，忘了就马上拿来看看，别说，效果还挺好的。</p>\n<p>祝你们好运！</p>\n<blockquote>\n<p>大家好，我是桃翁，我为自己代言！</p>\n</blockquote>\n<p>个人微信公众号，以后尽量坚持每周一篇干货\n</p><figure><img alt=\"个人微信公众号\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2018/3/20/1624401bdefb8018?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"430\" data-height=\"430\" src=\"https://user-gold-cdn.xitu.io/2018/3/20/1624401bdefb8018?imageView2/0/w/1280/h/960/ignore-error/1\"><figcaption></figcaption></figure><p></p>\n<p>参考文章：\n<a target=\"_blank\" href=\"https://link.juejin.im/?target=https%3A%2F%2Fbaike.baidu.com%2Fitem%2FVim%2F60410\" rel=\"nofollow noopener noreferrer\">VIM 百度百科</a>\n<a target=\"_blank\" href=\"https://link.juejin.im/?target=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzI4MDEwNzAzNg%3D%3D%26amp%3Bmid%3D2649444567%26amp%3Bidx%3D1%26amp%3Bsn%3D98d69cb0005e80312b1f126afe790aed%26amp%3Bchksm%3Df3a271a4c4d5f8b2fa1fb343e641292df4a5295d26f6c7ad1583bbf44ee4f352035586416ef8%26amp%3Bmpshare%3D1%26amp%3Bscene%3D23%26amp%3Bsrcid%3D0103o58Y5CLe1jrliq7AoD9s%2523rd\" rel=\"nofollow noopener noreferrer\">如何用Vim提高开发效率</a></p>\n', '> 个人站点：[桃园](https://link.juejin.im/?target=http%3A%2F%2Fwww.taoweng.site%2F)\n\n0\\. 前言\n------\n\n### 0.1 简介\n\nvim 被誉为『编辑器之神』，与之同时代的 emacs 被誉为『神之编辑器』。可以看得出 vim 在编辑器的地位是很高的，得益于 vim 的指法，敲起代码来如行云流水。特别膜拜创始人创始出这么方便的敲代码的指法，这篇文章就是来带你入坑 vim 指法操作。\n\n### 0.2 前端的我为什么要学习 vim\n\n在当今前端开发工具百花齐放的时代（VS Code、Sublime、Atom 以及 IDE Webstorm），我为什么还要介绍 20 多年前开发的一个老古董呢？在这里我想说的是出身虽然老，但是所带来的价值并没有减,一旦习惯了 vim 的指法之后，你会觉得不用 vim 操作写代码会觉得很不习惯，甚至不知道怎么操作。然而用在支持 vim 指法的编辑上写代码你会觉得如行云流水，如果再配个机械键盘，简直是享受，特别符合极客的风格。\n\n一旦学会了 vim 的指法，会让你终身受益，至少在你敲代码的年代会收益，毫无夸张, 它会让你摆脱烦人的，在敲代码的时候频繁的移动鼠标，这也是 vim 的设计理念之一 -- 脱离鼠标。\n\n### 0.3 文章适用读者\n\n本篇文章比较适合前端开发者，因为我也只是用 vim 在前端领域做过一些开发，其他领域我没有发言权。\n\n### 0.4 Q&A\n\nQ：你推荐 vim 是要我们完全放弃以前的编辑器而投入 vim 的怀抱吗？\n\nA：当然不是。首先 vim 的学习成本还是很高的，因为他跟平时我们用的编辑器敲代码的方式根本不同，因为它是不用鼠标的，纯键盘操作。你想想如果你在你的 vs code 上不用鼠标操作，你上下左右全靠方向键，那敲代码的速度得有多慢。而且初学者想把 vim 打造成一个自己的 IDE 还是很有难度的。所以我这里推荐的是，不管是你的 vs code、sublime等，装一个 vim 插件。我在 vs code 上试过，很爽，只不过现在投身到 emacs 的怀抱了。\n\n> 虽然我用 emacs 了，我还是会装 vim 插件（Evil）。如果有兴趣，下次可以推荐一下 spacemacs 。\n\n开题说了这么多，就是想吸引一下大家，觉得 vim 的指法是值得去学习的，接下来进入正题。\n\n1 助记符\n-----\n\nvim 上的所有定义的快捷键都是有一定的意义的，在这里我先把常用的一些列出来。\n\n### 1.1 正则表达式相关\n\n*   $ ： 移动光标到行尾\n*   ^ : 移动光标到当前行的第一个字母位置。\n\n### 1.2 移动类（motion）\n\nh（左）、l（右）、j（上）、k（下）、f（front）、b（back）、u（up）\n\n### 1.3 操作类（operator）\n\nd（delete）、i（insert）、a（append）、c（change）、y（copy）、p（paste）\n\n### 1.4 一般的缩写\n\nw（word）、s（sentence）\n\n2 理解 vim 中三种常用模式\n----------------\n\nvim 里面有好几种模式，但是因为我这里介绍的是在目前的编辑器里面装 插件，所以像命令模式这种用来保存文件、退出文件的就不介绍了。\n\n1.  Nomal mode（默认模式，因为使用该模式场景最多，所有定为默认模式）。\n2.  Insert mode （插入模式--少用，用了它 vim 就成 「哑巴」了）。\n3.  Visual mode（可视模式，取名叫光标模式或者选择模式可能还比较好理解）\n\n### 2.1 三种模式之间的转换关系\n\n![图片来源参考文章](https://user-gold-cdn.xitu.io/2018/3/20/1624401bddd4add7?imageView2/0/w/1280/h/960/ignore-error/1)\n\n3 教程篇\n-----\n\n当我们记住上面的助记符之后，我们就可以像写英文短语一样操作了。\n\n> vim 快捷键语法：\\[operator\\]\\[count\\]\\[motion\\]，例如 删两个单词就是 d2w，operator 和 motion 我已经在前面给出来一些了。\n\n### 3.1 移动光标\n\n#### 3.1.1 最基本的 h、j、k、l\n\n最基本的上下左右移动（跟键盘上下左右的键盘效果相同，但是往往方向键在键盘的右下方，离主键盘区较远，这个也相对比较有优势）：\n\n*   h：光标向左移动\n*   j：光标向下移动\n*   k：光标向上移动\n*   l：光标向右移动\n\n移动属于 motion，所以在前面加上「count」就可以移动多行了，比如向上移动 10 行，就可以 10k。往往编辑器会有行号，定位需要做个加减法，如果采用的是相对行号，用这个就比较方便。不懂相对行号的同学看下图就懂了。\n\n![相对行号](https://user-gold-cdn.xitu.io/2018/3/20/1624401bdee388e5?imageView2/0/w/1280/h/960/ignore-error/1)\n\n#### 3.1.2 快速移动\n\nw：光标往前移动一个词 b：光标向后移动一个词 0：移动光标到当前行首 ^：移动光标到当前行的第一个字母位置(注意与 0 的区别) $：移动光标到行尾 fx：移动光标到当前行的下一个 x 处（x为任意字母） tx：和上面一个命令类似，移动到 x 的左边一个位置 )：移动光标到下一个句子 ( ：移动光标到上一个句子 {：移动光标到上一段 }：移动光标到下一段\n\n#### 3.1.3 快速定位\n\n在刚才介绍了通过相对行号来进行移动到行的光标，还有采用绝对定位来移动的。那就是 gg。 语法： \\[num\\]gg\n\n*   2gg : 光标移动到第 2 行\n*   gg： 光标移动到文件首部\n*   G：移动到文件胃部\n*   H：移动到屏幕上面\n*   M：移动到屏幕中间\n*   L：移动到屏幕下面\n\n书签功能：这个功能也是很方便，很少有编辑器有的功能，单独列出来讲，强烈推荐。\n\n*   m：给当前行加入书签，x 为任意字母（m 是 mark ）\n*   ` ： 单引号加上刚才 m 之后的字母，就会调整到刚才标记的那一行\n\n### 3.1.3 屏幕滚动\n\n*   Ctrl + b：向上移动一屏（Foward首字母小写）\n*   Ctrl + f：向下移动一屏（Backward首字母小写）\n*   Ctrl + d：向下滚动半屏内容（Down首字母小写）\n*   Ctrl + u：向上滚动半屏内容（Up首字母小写）\n\n### 3.2 剪切、复制、粘贴\n\n*   d\\[n\\]w：剪切后面 n 个单词的内容，dw 是剪切当前单词\n*   \\[n\\]dd：剪切n行的内容, dd 为剪切当前行\n*   D：剪切光标后到行尾的内容\n*   yy/Y：复制当前行的内容\n*   p：粘贴到光标后\n*   P：粘贴到光标前\n\n在 normal 模式下是没有删除操作的，d 这种删除也是剪切。\n\n> 以上全是 normal 模式\n\n### 3.3 编辑模式\n\n在前面也说了，进入编辑模式也就变成了「哑巴」vim 了，就跟一般的编辑器没什么区别了。很多人就知道用 i 可以进入，还有很多命令可以让你聪明的进入。\n\n*   i：在光标处插入（insert首字母小写）\n*   I：在行首插入（insert首字母大写）\n*   a：在光标处后一个字符插入（append首字母小写）\n*   A：在行尾插入（append首字母大写）\n*   o：在上一行插入\n*   O：在下一行插入\n*   s：清除当前字符并进入插入模式\n*   cc/S：清除当前行并进入插入模式\n*   cw: 清除当前单词并进入插入模式\n\n### 3.4 可视模式\n\n要是前面都学会了，可视模式就比较简单了，而且你将会经常用到这个模式。我会把这个模式称做「选择模式」，接下来我们就来探索一下是如果选择的。\n\n其实也就两个关键的点：v（字符选择）、V（行选择）\n\n#### 3.4.1 v（小写 v）\n\n在 normal 模式下，按一下 v，然后可以按 l，重复按 l，你会发现右边的在一直被选中（高亮的部分）。同样的操作，按了 v，然后再练习一下按 h、j、k。\n\n选中的目的是什么呢？就是为了进行一些编辑操作，比如删除 d (实质是剪切)、复制 y。\n\n> 小提示，常常选中之后用 c 也是比较好的选择哦，剪切并进入插入模式。\n\n#### 3.4.2 V（大写 V）\n\nV 就是选中行，也很简单。按了 V 之后，然后按 j、k，就可以上下选择行了，然后一次性删除 d、复制 y，就比较方便。\n\n### 3.5 组合操作\n\n这个功能就比较强悍了，很适用，强烈推荐。 先来记公式：operator + i|a + scope\n\n> operator 就是我们前面提到的插入（c）、剪切（d）、复制（y）以及选择（v），i 表示 scope 范围内，a 表示包含 scope 标签，scope 就是操作的范围了。\n\n实例： 以下如果将 i 换成 a，则会将符号也包含进去\n\n*   vib（选中小括号内的内容）\n*   viB（选中大括号内的内容）\n*   vi\"（选中双引号内的内容）\n*   vi\'（选中单引号内的内容）\n*   vi<（选中尖括号内的内容）\n\n### 3.6 撤回、查找、替换\n\n*   u： 撤回上次操作(效果跟 command + z 效果一样)\n*   /|?xxx：表示在整篇文档中搜索匹配xxx的字符串, / 表示向下查找, ? 表示向上查找.其中xxx可以是正规表达式。查找到以后, 再输入 n 查找下一个匹配处, 输入 N 反方向查找.\n*   :%s/original/replacement：检索第一个 “original” 字符串并将其替换成 “replacement”\n*   :%s/original/replacement/g： 检索并将所有的 “original” 替换为 “replacement”\n*   :%s/original/replacement/gc：检索出所有的 “original” 字符串，但在替换成 “replacement” 前，先询问是否替换\n\n这些操作一般编辑器都自带有很好的快捷键，记不住也没啥。\n\n4 结束语\n-----\n\n我写这篇文章的目的不是为了总结什么知识点（其实当你 vim 用熟了，这些命令完全形成肌肉记忆了，根本不用记下来），或者说想发篇文章之类的，仅仅是想给 vim 做一个宣传，让更多的人接触 vim，让更多的开发者在开发上效率更高。如果你觉得这篇文章对你有帮助，请转发给更多的人让他们都了解了解。\n\n最后想提醒的就是，对于这些快捷键，死记是很难记完的，根据我总结的一些语义话的方式去记，有公式的记公式，可能要快一点，然后就是多实践，敲多了自己就记住了。我刚开始学的时候，还不知道有那些助记符，基本完全靠死记硬背，我就是用一张纸，然后把命令手写抄到纸上，放在我的电脑旁，忘了就马上拿来看看，别说，效果还挺好的。\n\n祝你们好运！\n\n> 大家好，我是桃翁，我为自己代言！\n\n个人微信公众号，以后尽量坚持每周一篇干货\n\n![个人微信公众号](https://user-gold-cdn.xitu.io/2018/3/20/1624401bdefb8018?imageView2/0/w/1280/h/960/ignore-error/1)\n\n参考文章： [VIM 百度百科](https://link.juejin.im/?target=https%3A%2F%2Fbaike.baidu.com%2Fitem%2FVim%2F60410) [如何用Vim提高开发效率](https://link.juejin.im/?target=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzI4MDEwNzAzNg%3D%3D%26amp%3Bmid%3D2649444567%26amp%3Bidx%3D1%26amp%3Bsn%3D98d69cb0005e80312b1f126afe790aed%26amp%3Bchksm%3Df3a271a4c4d5f8b2fa1fb343e641292df4a5295d26f6c7ad1583bbf44ee4f352035586416ef8%26amp%3Bmpshare%3D1%26amp%3Bscene%3D23%26amp%3Bsrcid%3D0103o58Y5CLe1jrliq7AoD9s%2523rd)', 0, 1, 0);
INSERT INTO `post` (`id`, `createAt`, `updateAt`, `title`, `description`, `thumb`, `url`, `html`, `markdown`, `views`, `status`, `push`) VALUES
(17, '2018-04-23 11:01:41.490993', '2018-04-23 11:01:41.490993', '浏览器缓存、CacheStorage、Web Worker 与 Service Worker', '前言最近在翻红宝书，看到WebWorker那章，猛然意识到，通过它竟然可以把几个缓存相关的概念串起来，甚是有趣，撰文记之。最后我也写了一个完整的离线应用Demo，以供运行调试。浏览器缓存传统意义上的浏览器缓存，分为强缓存和协商缓存，其共同点都是通过设置HTTPHeader实现。关于两者的异同已经被讨论得很多，我就不赘述了，附两个参考资料。浏览器的缓存机制,ByAitterhttp协商缓存VS强缓存,Bywonyun这种浏览器缓存（我称之为Header缓存）有两个共同的缺点：当没有网络的时候，应用无法访问，', 'https://user-images.githubusercontent.com/8401872/35846222-a28ddd34-0b50-11e8-9363-6607c79645f6.png', 'https://github.com/youngwind/blog/issues/113', '\n          <h1>前言</h1>\n<p>最近在翻红宝书，看到 Web Worker 那章，猛然意识到，通过它竟然可以把几个缓存相关的概念串起来，甚是有趣，撰文记之。最后我也写了一个完整的<a href=\"https://github.com/youngwind/service-worker-demo\">离线应用 Demo</a>，以供运行调试。</p>\n<h1>浏览器缓存</h1>\n<p>传统意义上的浏览器缓存，分为<strong>强缓存</strong>和<strong>协商缓存</strong>，其共同点都是通过设置 HTTP Header 实现。关于两者的异同已经被讨论得很多，我就不赘述了，附两个参考资料。</p>\n<ol>\n<li><a href=\"http://coderlt.coding.me/2016/11/21/web-cache/\" rel=\"nofollow\">浏览器的缓存机制</a>, By Aitter</li>\n<li><a href=\"http://www.cnblogs.com/wonyun/p/5524617.html\" rel=\"nofollow\">http协商缓存VS强缓存</a>, By wonyun</li>\n</ol>\n<p>这种浏览器缓存（我称之为 Header 缓存）有两个共同的缺点：</p>\n<ol>\n<li>当没有网络的时候，应用无法访问，因为 HTML 页面总得去服务器获取。</li>\n<li>缓存不可编程，无法通过 JS 来精细地对缓存进行增删改查。</li>\n</ol>\n<h1>应用缓存</h1>\n<p>为了在无网络下也能访问应用，HTML5 规范中设计了<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Using_the_application_cache\" rel=\"nofollow\">应用缓存</a>（Application Cache）这么一个新的概念。通过它，我们可以做离线应用。然而，由于<strong>这个 API 的设计有太多的缺陷，被很多人吐槽，最终被废弃</strong>。废弃的原因可以看看这些讨论：</p>\n<ol>\n<li><a href=\"https://www.zhihu.com/question/29876535\" rel=\"nofollow\">为什么app cache没有得到大规模应用？它有哪些硬伤吗？</a></li>\n<li><a href=\"https://alistapart.com/article/application-cache-is-a-douchebag\" rel=\"nofollow\">Application Cache is a Douchebag</a>, By Jake Archibald</li>\n</ol>\n<p>PS：我当年毕设也用到过这种技术，没想到短短几年就被废弃了，技术迭代何其之快也！</p>\n<h1>CacheStorage</h1>\n<p>为了能够精细地、可编程地控制缓存，<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage\" rel=\"nofollow\">CacheStorage</a> 被设计出来。有了它，就<strong>可以用 JS 对缓存进行增删改查</strong>，你也可以在 Chrome 的 DevTools 里面直观地查看。对于传统的 Header 缓存，你是没法知道有哪些缓存，更加没法对缓存进行操作的。你只能被动地修改 URL 让浏览器抛弃旧的缓存，使用新的资源。</p>\n<p><a target=\"_blank\" href=\"https://user-images.githubusercontent.com/8401872/35846222-a28ddd34-0b50-11e8-9363-6607c79645f6.png\"><img src=\"https://user-images.githubusercontent.com/8401872/35846222-a28ddd34-0b50-11e8-9363-6607c79645f6.png\" alt=\"image\" style=\"max-width:100%;\"></a></p>\n<p>PS：CacheStorage 并非只有在 Service Worker 中才能用，它是一个全局性的 API，你在控制台中也可以访问到 caches 全局变量。</p>\n<h1>Web Worker</h1>\n<p>一直以来，一个网页只会有两个线程：GUI  渲染线程和 JS 引擎线程。即便你的 JS 写得再天花乱坠，也只能在一个进程里面执行。然而，JS 引擎线程和 GUI 渲染线程是互斥的，因此在 JS 执行的时候，UI 页面会被阻塞住。<strong>为了在进行高耗时 JS 运算时，UI 页面仍可用</strong>，那么就得另外开辟一个独立的 JS 线程来运行这些高耗时的 JS 代码，这就是 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers\" rel=\"nofollow\">Web Worker</a>。</p>\n<p>Web Worker 有两个特点：</p>\n<ol>\n<li>只能服务于新建它的页面，不同页面之间不能共享同一个 Web Worker。</li>\n<li>当页面关闭时，该页面新建的 Web Worker 也会随之关闭，不会常驻在浏览器中。</li>\n</ol>\n<p>PS：还有一个相关的概念：<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/SharedWorker\" rel=\"nofollow\">Shared Worker</a>，不过这个东西比较复杂，我并未深入研究，感兴趣的读者可以了解，也可以看看 <a href=\"https://stackoverflow.com/questions/28882289/service-worker-vs-shared-worker\" rel=\"nofollow\">Shared Worker 跟 Service Worker 的区别</a>。</p>\n<h1>Service Worker</h1>\n<p>终于说到本文的主角了。<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers\" rel=\"nofollow\">Service Worker</a> 与 Web Worker 相比，相同点是：它们都是在常规的 JS 引擎线程以外开辟了新的 JS 线程。不同点主要包括以下几点：</p>\n<ol>\n<li>Service Worker 不是服务于某个特定页面的，而是服务于多个页面的。（按照同源策略）</li>\n<li>Service Worker 会<strong>常驻在浏览器中</strong>，即便注册它的页面已经关闭，Service Worker 也不会停止。本质上它是一个后台线程，只有你主动终结，或者浏览器回收，这个线程才会结束。</li>\n<li>生命周期、可调用的 API 等等也有很大的不同。</li>\n</ol>\n<p>总而言之，Service Worker 是 Web Worker 进一步发展的产物。关于如何使用 Service Worker，可以参考下面的资料。</p>\n<ol>\n<li><a href=\"http://www.zhangxinxu.com/wordpress/2017/07/service-worker-cachestorage-offline-develop/\" rel=\"nofollow\">借助Service Worker和cacheStorage缓存及离线开发</a>, By 张鑫旭</li>\n<li><a href=\"https://fed.renren.com/2017/10/04/service-worker/\" rel=\"nofollow\">使用Service Worker做一个PWA离线网页应用</a>, By 会编程的银猪</li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/28461857\" rel=\"nofollow\">【译】理解Service Worker</a>, 作者 By Adnan Chowdhury, 译者 By 安秦</li>\n</ol>\n<p>我也写了一个 Service Worker 用作离线应用的 <a href=\"https://github.com/youngwind/service-worker-demo\">Demo</a>，大家可以调试观察。下面我们讨论几个 Service Worker 容易被忽略的地方，以我的 Demo 为例。</p>\n<h2>Service Worker 只是 Service Worker</h2>\n<p>一开始我以为 Service Worker 就是用来做离线应用的，后来渐渐研究才发现不是这样的。→ Service Worker 只是一个常驻在浏览器中的 JS 线程，<strong>它本身做不了什么。它能做什么，全看跟哪些 API 搭配使用</strong>。</p>\n<ol>\n<li>跟 Fetch 搭配，可以从浏览器层面拦截请求，做数据 mock；</li>\n<li>跟 Fetch 和 CacheStorage 搭配，可以做离线应用；</li>\n<li>跟 Push 和 Notification 搭配，可以做像 Native APP 那样的消息推送，这方面可以参考 villainhr 的文章：<a href=\"https://www.villainhr.com/page/2017/01/08/Web%20%E6%8E%A8%E9%80%81%E6%8A%80%E6%9C%AF\" rel=\"nofollow\">Web 推送技术</a></li>\n<li>……</li>\n</ol>\n<p>假如把这些技术融合在一起，再加上 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Manifest\" rel=\"nofollow\">Manifest</a> 等，就差不多成了 <a href=\"https://developer.mozilla.org/en-US/Apps/Progressive\" rel=\"nofollow\">PWA</a> 了。<br>\n总之，Service Worker 是一种非常关键的技术，有了它，我们能更接近浏览器底层，能做更多的事情。</p>\n<blockquote>\n<p>The idea is that we, as browser developers, acknowledge that we are not better at web development than web developers. And as such, we shouldn\'t provide narrow high-level APIs that solve a particular problem using patterns we like, and instead <strong>give you access to the guts of the browser and let you do it how you want</strong>, in a way that works best for your users.</p>\n</blockquote>\n<p>出处：<a href=\"https://developers.google.com/web/fundamentals/primers/service-workers/lifecycle#handling_updates\" rel=\"nofollow\">https://developers.google.com/web/fundamentals/primers/service-workers/lifecycle#handling_updates</a></p>\n<h2>初次访问不会触发 fetch 事件</h2>\n<p>按照官方给的 Demo，Service Worker 注册的代码是放在 HTML 的最后。但是，当我尝试把 Service Worker 的注册代码提到最开头，并且 console 出时间戳，我发现一个现象：即便 Service Worker 注册成功之后再请求资源，这些资源也不会触发 fetch 请求，只有再次访问页面才会触发 fetch 事件。这是为什么呢？后来我在官方文档中找到了答案：<strong>如果你的页面加载时没有 Service Worker，那么它所依赖的其他资源请求也不会触发 fetch 事件</strong>。</p>\n<blockquote>\n<p>The first time you load the demo, even though dog.svg is requested long after the service worker activates, it doesn\'t handle the request, and you still see the image of the dog. The default is consistency, if your page loads without a service worker, neither will its subresources. If you load the demo a second time (in other words, refresh the page), it\'ll be controlled. Both the page and the image will go through fetch events, and you\'ll see a cat instead.</p>\n</blockquote>\n<p>出处：<a href=\"https://developers.google.com/web/fundamentals/primers/service-workers/lifecycle#activate\" rel=\"nofollow\">https://developers.google.com/web/fundamentals/primers/service-workers/lifecycle#activate</a></p>\n<h2>cache.add VS cache.put</h2>\n<p>在 install 事件中用 <code>cache.addAll</code>，在 fetch 事件中用 <code>cache.put</code>，add 和 put 有什么区别吗？→ <strong>cache.add = fetch + cache.put</strong></p>\n<blockquote>\n<p>The add() method of the Cache interface takes a URL, retrieves it, and adds the resulting response object to the given cache. The add() method is functionally equivalent to the following:</p>\n</blockquote>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-en\">fetch</span>(url).<span class=\"pl-en\">then</span>(<span class=\"pl-k\">function</span>(<span class=\"pl-smi\">response</span>) {\n  <span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span><span class=\"pl-smi\">response</span>.<span class=\"pl-smi\">ok</span>) {\n    <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">TypeError</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\'</span>bad response status<span class=\"pl-pds\">\'</span></span>);\n  }\n  <span class=\"pl-k\">return</span> <span class=\"pl-smi\">cache</span>.<span class=\"pl-en\">put</span>(url, response);\n})</pre></div>\n<p>出处：<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Cache/add\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/API/Cache/add</a></p>\n<h2>event.waitUntil 和 event.respondWith</h2>\n<p>先说 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/ExtendableEvent/waitUntil\" rel=\"nofollow\">event.waitUntil</a></p>\n<ol>\n<li>只能在 Service Worker 的 install 或者 activate 事件中使用；</li>\n<li>看起来像是一个 callback，但是，即便你不使用它，<a href=\"https://stackoverflow.com/questions/37902441/what-does-event-waituntil-do-in-service-worker-and-why-is-it-needed\" rel=\"nofollow\">程序也可能正常运行</a>。如果你传递了一个 Promise 给它，那么只有当该 Promise resolved 时，Service Worker 才会完成 install；如果 Promise rejected 掉，那么整个 Service Worker 便会被废弃掉。因此，<code>cache.addAll</code> 里面，只要有一个资源获取失败，整个 Service Worker 便会失效。</li>\n</ol>\n<p>再说 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/respondWith\" rel=\"nofollow\">event.respondWith</a></p>\n<ol>\n<li>只能在 Service Worker 的 fetch 事件中使用；</li>\n<li>作用相当于一个 callback，当传入的 Promise resolved 之后，才会将对应的 response 返回给浏览器。</li>\n</ol>\n<p>总之，虽然 event.waitUntil 和 event.respondWith 中的 event 都是继承于 Event 类，但是<strong>它们与常见的 event 对象差异很大，这些方法也只有在 Service Worker 的那些对应的事件中才存在</strong>。</p>\n<h2>资源的更新</h2>\n<p>以前我们用强缓存的时候，如果资源需要更新，那么我们只需要改变资源的 URL，换上新的 MD5 戳就好了。如果使用 Service Worker + CacheStorage + Fetch 做离线应用，又该如何处理资源的更新呢？</p>\n<ol>\n<li>\n<p>当有任何的资源（HTML、JS、Image、甚至是 sw.js 本身）需要更新时，都需要改变 sw.js。因为有了 sw.js，整个应用的入口变成了 sw.js，而非原先的 HTML。每当用户访问页面时，不管你当前是不是命中了缓存，浏览器都会请求 sw.js，然后将新旧 sw.js 进行字节对比，如果不一样，说明需要更新。因此，你能看到在 Demo 中，我们有一个 <strong>VERSION 字段，它不仅代表 sw.js 本身的版本，更代表整个应用的版本</strong>。</p>\n</li>\n<li>\n<p><strong>不要试图通过改变 sw.js 的名字（如改成 sw_v2.js）来触发浏览器的更新</strong>，因为 HTML 本身会被 sw.js 缓存，而缓存的 HTML 中永远都指向 sw.js，导致浏览器无法得知 sw_v2.js 的更新。虽然，你可以像上面提到的文章：<a href=\"https://fed.renren.com/2017/10/04/service-worker/\" rel=\"nofollow\">使用Service Worker做一个PWA离线网页应用</a> 那样，再结合其他的手段来判断 HTML 的更新状态，但是会更加复杂，官方并不推荐。</p>\n<blockquote>\n<p>you may consider giving each version of your service worker a unique URL. Don\'t do this! This is usually bad practice for service workers, just update the script at its current location.</p>\n</blockquote>\n<p>出处：<a href=\"https://developers.google.com/web/fundamentals/primers/service-workers/lifecycle#avoid_changing_the_url_of_your_service_worker_script\" rel=\"nofollow\">https://developers.google.com/web/fundamentals/primers/service-workers/lifecycle#avoid_changing_the_url_of_your_service_worker_script</a></p>\n</li>\n<li>\n<p>每次 sw.js 的更新，都会根据 VERSION 字段新建一个缓存空间，然后把新的资源缓存在里面。等到旧的 sw.js 所控制的网页全部关闭之后，新的 sw.js 会被激活，然后 在 activate 事件中删除旧缓存空间。这样既能<strong>保证在同时打开多个网页时更新 sw.js 不出差错，也能及时删除冗余的缓存</strong>。</p>\n</li>\n</ol>\n<h2>双重缓存</h2>\n<p>上面我们谈到，当新的 sw.js install 的时候，会重新 fetch addAll 里面的所有资源，不管里面的资源是否需要更新，这显然违背了 Web 增量下载的原则，怎么办呢？ → <strong>结合使用强缓存和 Service Worker，做一个双重缓存</strong>。强缓存在前， Service Worker 在后。举个例子，假如有两个强缓存 a_v1.js 和 b_v1.js，现在 a 不变，b 要改成 b_v2.js，修改 sw.js 的 addAll 和 VERSION。当新的 sw.js install 的时候，addAll 要 fetch a_v1.js ，但是浏览器发现 a_v1.js 是强缓存，所以根本不会发起网络请求，只有 b_v2.js 才会发起网络请求。具体的可以调试我的 Demo 查看现象。</p>\n<p>关于这种方法，有两点要说明一下。</p>\n<ol>\n<li>需要在 <code>cache.addAll</code> 中指定资源的版本号，就如同在 html 中指定那般。因为在使用 Service Worker 之后，HTML 只是加载资源的入口，判断资源是否改变的功能，已经转移到 sw.js 中了。\n<blockquote>\n</blockquote>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">return</span> <span class=\"pl-smi\">cache</span>.<span class=\"pl-en\">addAll</span>([\n    <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>./<span class=\"pl-pds\">\'</span></span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>getList<span class=\"pl-pds\">\'</span></span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>img/avatar_v1.jpg<span class=\"pl-pds\">\'</span></span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>js/index_v2.js<span class=\"pl-pds\">\'</span></span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>js/jquery_v1.js<span class=\"pl-pds\">\'</span></span>\n]);</pre></div>\n</li>\n<li>上面提到的文章：<a href=\"https://fed.renren.com/2017/10/04/service-worker/\" rel=\"nofollow\">使用Service Worker做一个PWA离线网页应用</a> 中也有提到这种多重缓存的做法，但是作者认为浏览器会先读取 Service Worker，没有的话才会读取强缓存，这与我的 Demo 实践结果不相符。</li>\n</ol>\n<h1>总结</h1>\n<p>写到这儿，也差不多结束了，对于 Service Worker，我还有很多不懂的地方。围绕着 Service Worker 的这一系列新兴 API，代表着更好的 Web 体验，也代表着 Web 的未来，以后仍需多加关注学习。</p>\n      ', '前言\n==\n\n最近在翻红宝书，看到 Web Worker 那章，猛然意识到，通过它竟然可以把几个缓存相关的概念串起来，甚是有趣，撰文记之。最后我也写了一个完整的[离线应用 Demo](https://github.com/youngwind/service-worker-demo)，以供运行调试。\n\n浏览器缓存\n=====\n\n传统意义上的浏览器缓存，分为**强缓存**和**协商缓存**，其共同点都是通过设置 HTTP Header 实现。关于两者的异同已经被讨论得很多，我就不赘述了，附两个参考资料。\n\n1.  [浏览器的缓存机制](http://coderlt.coding.me/2016/11/21/web-cache/), By Aitter\n2.  [http协商缓存VS强缓存](http://www.cnblogs.com/wonyun/p/5524617.html), By wonyun\n\n这种浏览器缓存（我称之为 Header 缓存）有两个共同的缺点：\n\n1.  当没有网络的时候，应用无法访问，因为 HTML 页面总得去服务器获取。\n2.  缓存不可编程，无法通过 JS 来精细地对缓存进行增删改查。\n\n应用缓存\n====\n\n为了在无网络下也能访问应用，HTML5 规范中设计了[应用缓存](https://developer.mozilla.org/en-US/docs/Web/HTML/Using_the_application_cache)（Application Cache）这么一个新的概念。通过它，我们可以做离线应用。然而，由于**这个 API 的设计有太多的缺陷，被很多人吐槽，最终被废弃**。废弃的原因可以看看这些讨论：\n\n1.  [为什么app cache没有得到大规模应用？它有哪些硬伤吗？](https://www.zhihu.com/question/29876535)\n2.  [Application Cache is a Douchebag](https://alistapart.com/article/application-cache-is-a-douchebag), By Jake Archibald\n\nPS：我当年毕设也用到过这种技术，没想到短短几年就被废弃了，技术迭代何其之快也！\n\nCacheStorage\n============\n\n为了能够精细地、可编程地控制缓存，[CacheStorage](https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage) 被设计出来。有了它，就**可以用 JS 对缓存进行增删改查**，你也可以在 Chrome 的 DevTools 里面直观地查看。对于传统的 Header 缓存，你是没法知道有哪些缓存，更加没法对缓存进行操作的。你只能被动地修改 URL 让浏览器抛弃旧的缓存，使用新的资源。\n\n[![image](https://user-images.githubusercontent.com/8401872/35846222-a28ddd34-0b50-11e8-9363-6607c79645f6.png)](https://user-images.githubusercontent.com/8401872/35846222-a28ddd34-0b50-11e8-9363-6607c79645f6.png)\n\nPS：CacheStorage 并非只有在 Service Worker 中才能用，它是一个全局性的 API，你在控制台中也可以访问到 caches 全局变量。\n\nWeb Worker\n==========\n\n一直以来，一个网页只会有两个线程：GUI 渲染线程和 JS 引擎线程。即便你的 JS 写得再天花乱坠，也只能在一个进程里面执行。然而，JS 引擎线程和 GUI 渲染线程是互斥的，因此在 JS 执行的时候，UI 页面会被阻塞住。**为了在进行高耗时 JS 运算时，UI 页面仍可用**，那么就得另外开辟一个独立的 JS 线程来运行这些高耗时的 JS 代码，这就是 [Web Worker](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers)。\n\nWeb Worker 有两个特点：\n\n1.  只能服务于新建它的页面，不同页面之间不能共享同一个 Web Worker。\n2.  当页面关闭时，该页面新建的 Web Worker 也会随之关闭，不会常驻在浏览器中。\n\nPS：还有一个相关的概念：[Shared Worker](https://developer.mozilla.org/en-US/docs/Web/API/SharedWorker)，不过这个东西比较复杂，我并未深入研究，感兴趣的读者可以了解，也可以看看 [Shared Worker 跟 Service Worker 的区别](https://stackoverflow.com/questions/28882289/service-worker-vs-shared-worker)。\n\nService Worker\n==============\n\n终于说到本文的主角了。[Service Worker](https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers) 与 Web Worker 相比，相同点是：它们都是在常规的 JS 引擎线程以外开辟了新的 JS 线程。不同点主要包括以下几点：\n\n1.  Service Worker 不是服务于某个特定页面的，而是服务于多个页面的。（按照同源策略）\n2.  Service Worker 会**常驻在浏览器中**，即便注册它的页面已经关闭，Service Worker 也不会停止。本质上它是一个后台线程，只有你主动终结，或者浏览器回收，这个线程才会结束。\n3.  生命周期、可调用的 API 等等也有很大的不同。\n\n总而言之，Service Worker 是 Web Worker 进一步发展的产物。关于如何使用 Service Worker，可以参考下面的资料。\n\n1.  [借助Service Worker和cacheStorage缓存及离线开发](http://www.zhangxinxu.com/wordpress/2017/07/service-worker-cachestorage-offline-develop/), By 张鑫旭\n2.  [使用Service Worker做一个PWA离线网页应用](https://fed.renren.com/2017/10/04/service-worker/), By 会编程的银猪\n3.  [【译】理解Service Worker](https://zhuanlan.zhihu.com/p/28461857), 作者 By Adnan Chowdhury, 译者 By 安秦\n\n我也写了一个 Service Worker 用作离线应用的 [Demo](https://github.com/youngwind/service-worker-demo)，大家可以调试观察。下面我们讨论几个 Service Worker 容易被忽略的地方，以我的 Demo 为例。\n\nService Worker 只是 Service Worker\n--------------------------------\n\n一开始我以为 Service Worker 就是用来做离线应用的，后来渐渐研究才发现不是这样的。→ Service Worker 只是一个常驻在浏览器中的 JS 线程，**它本身做不了什么。它能做什么，全看跟哪些 API 搭配使用**。\n\n1.  跟 Fetch 搭配，可以从浏览器层面拦截请求，做数据 mock；\n2.  跟 Fetch 和 CacheStorage 搭配，可以做离线应用；\n3.  跟 Push 和 Notification 搭配，可以做像 Native APP 那样的消息推送，这方面可以参考 villainhr 的文章：[Web 推送技术](https://www.villainhr.com/page/2017/01/08/Web%20%E6%8E%A8%E9%80%81%E6%8A%80%E6%9C%AF)\n4.  ……\n\n假如把这些技术融合在一起，再加上 [Manifest](https://developer.mozilla.org/en-US/docs/Web/Manifest) 等，就差不多成了 [PWA](https://developer.mozilla.org/en-US/Apps/Progressive) 了。  \n总之，Service Worker 是一种非常关键的技术，有了它，我们能更接近浏览器底层，能做更多的事情。\n\n> The idea is that we, as browser developers, acknowledge that we are not better at web development than web developers. And as such, we shouldn\'t provide narrow high-level APIs that solve a particular problem using patterns we like, and instead **give you access to the guts of the browser and let you do it how you want**, in a way that works best for your users.\n\n出处：[https://developers.google.com/web/fundamentals/primers/service-workers/lifecycle#handling_updates](https://developers.google.com/web/fundamentals/primers/service-workers/lifecycle#handling_updates)\n\n初次访问不会触发 fetch 事件\n-----------------\n\n按照官方给的 Demo，Service Worker 注册的代码是放在 HTML 的最后。但是，当我尝试把 Service Worker 的注册代码提到最开头，并且 console 出时间戳，我发现一个现象：即便 Service Worker 注册成功之后再请求资源，这些资源也不会触发 fetch 请求，只有再次访问页面才会触发 fetch 事件。这是为什么呢？后来我在官方文档中找到了答案：**如果你的页面加载时没有 Service Worker，那么它所依赖的其他资源请求也不会触发 fetch 事件**。\n\n> The first time you load the demo, even though dog.svg is requested long after the service worker activates, it doesn\'t handle the request, and you still see the image of the dog. The default is consistency, if your page loads without a service worker, neither will its subresources. If you load the demo a second time (in other words, refresh the page), it\'ll be controlled. Both the page and the image will go through fetch events, and you\'ll see a cat instead.\n\n出处：[https://developers.google.com/web/fundamentals/primers/service-workers/lifecycle#activate](https://developers.google.com/web/fundamentals/primers/service-workers/lifecycle#activate)\n\ncache.add VS cache.put\n----------------------\n\n在 install 事件中用 `cache.addAll`，在 fetch 事件中用 `cache.put`，add 和 put 有什么区别吗？→ **cache.add = fetch + cache.put**\n\n> The add() method of the Cache interface takes a URL, retrieves it, and adds the resulting response object to the given cache. The add() method is functionally equivalent to the following:\n\n```js\nfetch(url).then(function(response) {\n  if (!response.ok) {\n    throw new TypeError(\'bad response status\');\n  }\n  return cache.put(url, response);\n})\n```\n\n出处：[https://developer.mozilla.org/en-US/docs/Web/API/Cache/add](https://developer.mozilla.org/en-US/docs/Web/API/Cache/add)\n\nevent.waitUntil 和 event.respondWith\n-----------------------------------\n\n先说 [event.waitUntil](https://developer.mozilla.org/en-US/docs/Web/API/ExtendableEvent/waitUntil)\n\n1.  只能在 Service Worker 的 install 或者 activate 事件中使用；\n2.  看起来像是一个 callback，但是，即便你不使用它，[程序也可能正常运行](https://stackoverflow.com/questions/37902441/what-does-event-waituntil-do-in-service-worker-and-why-is-it-needed)。如果你传递了一个 Promise 给它，那么只有当该 Promise resolved 时，Service Worker 才会完成 install；如果 Promise rejected 掉，那么整个 Service Worker 便会被废弃掉。因此，`cache.addAll` 里面，只要有一个资源获取失败，整个 Service Worker 便会失效。\n\n再说 [event.respondWith](https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/respondWith)\n\n1.  只能在 Service Worker 的 fetch 事件中使用；\n2.  作用相当于一个 callback，当传入的 Promise resolved 之后，才会将对应的 response 返回给浏览器。\n\n总之，虽然 event.waitUntil 和 event.respondWith 中的 event 都是继承于 Event 类，但是**它们与常见的 event 对象差异很大，这些方法也只有在 Service Worker 的那些对应的事件中才存在**。\n\n资源的更新\n-----\n\n以前我们用强缓存的时候，如果资源需要更新，那么我们只需要改变资源的 URL，换上新的 MD5 戳就好了。如果使用 Service Worker + CacheStorage + Fetch 做离线应用，又该如何处理资源的更新呢？\n\n1.  当有任何的资源（HTML、JS、Image、甚至是 sw.js 本身）需要更新时，都需要改变 sw.js。因为有了 sw.js，整个应用的入口变成了 sw.js，而非原先的 HTML。每当用户访问页面时，不管你当前是不是命中了缓存，浏览器都会请求 sw.js，然后将新旧 sw.js 进行字节对比，如果不一样，说明需要更新。因此，你能看到在 Demo 中，我们有一个 **VERSION 字段，它不仅代表 sw.js 本身的版本，更代表整个应用的版本**。\n    \n2.  **不要试图通过改变 sw.js 的名字（如改成 sw_v2.js）来触发浏览器的更新**，因为 HTML 本身会被 sw.js 缓存，而缓存的 HTML 中永远都指向 sw.js，导致浏览器无法得知 sw_v2.js 的更新。虽然，你可以像上面提到的文章：[使用Service Worker做一个PWA离线网页应用](https://fed.renren.com/2017/10/04/service-worker/) 那样，再结合其他的手段来判断 HTML 的更新状态，但是会更加复杂，官方并不推荐。\n    \n    > you may consider giving each version of your service worker a unique URL. Don\'t do this! This is usually bad practice for service workers, just update the script at its current location.\n    \n    出处：[https://developers.google.com/web/fundamentals/primers/service-workers/lifecycle#avoid\\_changing\\_the\\_url\\_of\\_your\\_service\\_worker\\_script](https://developers.google.com/web/fundamentals/primers/service-workers/lifecycle#avoid_changing_the_url_of_your_service_worker_script)\n    \n3.  每次 sw.js 的更新，都会根据 VERSION 字段新建一个缓存空间，然后把新的资源缓存在里面。等到旧的 sw.js 所控制的网页全部关闭之后，新的 sw.js 会被激活，然后 在 activate 事件中删除旧缓存空间。这样既能**保证在同时打开多个网页时更新 sw.js 不出差错，也能及时删除冗余的缓存**。\n    \n\n双重缓存\n----\n\n上面我们谈到，当新的 sw.js install 的时候，会重新 fetch addAll 里面的所有资源，不管里面的资源是否需要更新，这显然违背了 Web 增量下载的原则，怎么办呢？ → **结合使用强缓存和 Service Worker，做一个双重缓存**。强缓存在前， Service Worker 在后。举个例子，假如有两个强缓存 a\\_v1.js 和 b\\_v1.js，现在 a 不变，b 要改成 b\\_v2.js，修改 sw.js 的 addAll 和 VERSION。当新的 sw.js install 的时候，addAll 要 fetch a\\_v1.js ，但是浏览器发现 a\\_v1.js 是强缓存，所以根本不会发起网络请求，只有 b\\_v2.js 才会发起网络请求。具体的可以调试我的 Demo 查看现象。\n\n关于这种方法，有两点要说明一下。\n\n1.  需要在 `cache.addAll` 中指定资源的版本号，就如同在 html 中指定那般。因为在使用 Service Worker 之后，HTML 只是加载资源的入口，判断资源是否改变的功能，已经转移到 sw.js 中了。\n    \n    ```js\n    return cache.addAll([\n        \'./\',\n        \'getList\',\n        \'img/avatar_v1.jpg\',\n        \'js/index_v2.js\',\n        \'js/jquery_v1.js\'\n    ]);\n    ```\n    \n2.  上面提到的文章：[使用Service Worker做一个PWA离线网页应用](https://fed.renren.com/2017/10/04/service-worker/) 中也有提到这种多重缓存的做法，但是作者认为浏览器会先读取 Service Worker，没有的话才会读取强缓存，这与我的 Demo 实践结果不相符。\n\n总结\n==\n\n写到这儿，也差不多结束了，对于 Service Worker，我还有很多不懂的地方。围绕着 Service Worker 的这一系列新兴 API，代表着更好的 Web 体验，也代表着 Web 的未来，以后仍需多加关注学习。', 0, 1, 0),
(18, '2018-04-23 11:01:41.532835', '2018-04-23 11:01:41.532835', 'JSON.parse 三种实现方式', '前言近日在翻红宝书，看到JSON那一章节，忽然想到：“如何用JS实现JSON.parse？”带着这个疑问，我找到了JSON之父DouglasCrockford写的ployfill，里面提供了三种实现方式，下面我们逐一来分析。Eval第一种方式最简单，也最直观，就是直接调用eval，代码如下：varjson=\'{\"a\":\"1\",\"b\":2}\';varobj=eval(\"(\"+json+\")\");//obj就是json反序列化之后得到的对象因为JSON脱胎于JS，同时也是JS的子集，所以能够直接交给eval运', 'https://user-images.githubusercontent.com/8401872/36766172-b5133f5a-1c6f-11e8-875a-269df968f7c5.png', 'https://github.com/youngwind/blog/issues/115', '\n          <h1>前言</h1>\n<p>近日在翻红宝书，看到 JSON 那一章节，忽然想到：“<strong>如何用 JS 实现 JSON.parse？</strong>”带着这个疑问，我找到了 <a href=\"https://github.com/douglascrockford/JSON-js\">JSON 之父 Douglas Crockford 写的 ployfill</a>，里面提供了三种实现方式，下面我们逐一来分析。</p>\n<h1>Eval</h1>\n<p>第一种方式最简单，也最直观，就是直接调用 eval，代码如下：</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> json <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\'</span>{\"a\":\"1\", \"b\":2}<span class=\"pl-pds\">\'</span></span>;\n<span class=\"pl-k\">var</span> obj <span class=\"pl-k\">=</span> <span class=\"pl-c1\">eval</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>(<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> json <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>)<span class=\"pl-pds\">\"</span></span>);  <span class=\"pl-c\"><span class=\"pl-c\">//</span> obj 就是 json 反序列化之后得到的对象</span></pre></div>\n<p>因为 JSON 脱胎于 JS，同时也是 JS 的子集，所以能够直接交给 eval 运行。<br>\n然而，通常我们都说 eval 是邪恶的，尽量不要使用。为什么这里又用了呢？<strong>其实 eval 并不邪恶，只是对于新手来说，用了容易出问题，所以不建议使用而已</strong>。如果你水平够高，能正确地使用 Eval，那么它还是有很多用处的，比如<a href=\"https://www.zhihu.com/question/28466557/answer/241364553\" rel=\"nofollow\">静态模板</a>。</p>\n<p>ok，回到上面，我们像新手一样直接调用 eval，会不会出问题呢？ → <strong>会，这里有 XSS 漏洞</strong>。触发条件：参数 json 并非真正的 JSON 数据，而是可执行的 JS 代码。<br>\n那么，该如何规避这个问题呢？→ 老手 Douglas Crockford 给我们做了示范：<strong>对参数 json 做校验，只有真正符合 JSON 格式，才能调用 eval</strong>，具体就是下面这几个正则匹配。</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> We split the second stage into 4 regexp operations in order to work around</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> crippling inefficiencies in IE\'s and Safari\'s regexp engines. First we</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> replace the JSON backslash pairs with \"@\" (a non-JSON character). Second, we</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> replace all simple value tokens with \"]\" characters. Third, we delete all</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> open brackets that follow a colon or comma or that begin the text. Finally,</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> we look to see that the remaining characters are only whitespace or \"]\" or</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> \",\" or \":\" or \"{\" or \"}\". If that is so, then the text is safe for eval.</span>\n\n<span class=\"pl-k\">var</span> rx_one <span class=\"pl-k\">=</span><span class=\"pl-sr\"> <span class=\"pl-pds\">/</span><span class=\"pl-k\">^</span><span class=\"pl-c1\">[<span class=\"pl-cce\">\\]</span>,:{}<span class=\"pl-c1\">\\s</span>]</span><span class=\"pl-k\">*</span><span class=\"pl-k\">$</span><span class=\"pl-pds\">/</span></span>;\n<span class=\"pl-k\">var</span> rx_two <span class=\"pl-k\">=</span><span class=\"pl-sr\"> <span class=\"pl-pds\">/</span><span class=\"pl-cce\">\\\\</span>(?:<span class=\"pl-c1\">[\"<span class=\"pl-cce\">\\\\\\/</span>bfnrt]</span><span class=\"pl-k\">|</span>u<span class=\"pl-c1\">[<span class=\"pl-c1\">0-9a-fA-F</span>]</span><span class=\"pl-k\">{4}</span>)<span class=\"pl-pds\">/</span>g</span>;\n<span class=\"pl-k\">var</span> rx_three <span class=\"pl-k\">=</span><span class=\"pl-sr\"> <span class=\"pl-pds\">/</span>\"<span class=\"pl-c1\">[<span class=\"pl-k\">^</span>\"<span class=\"pl-cce\">\\\\</span><span class=\"pl-c1\">\\n\\r</span>]</span><span class=\"pl-k\">*</span>\"<span class=\"pl-k\">|</span>true<span class=\"pl-k\">|</span>false<span class=\"pl-k\">|</span>null<span class=\"pl-k\">|</span>-<span class=\"pl-k\">?</span><span class=\"pl-c1\">\\d</span><span class=\"pl-k\">+</span>(?:<span class=\"pl-cce\">\\.</span><span class=\"pl-c1\">\\d</span><span class=\"pl-k\">*</span>)<span class=\"pl-k\">?</span>(?:<span class=\"pl-c1\">[eE][+<span class=\"pl-cce\">\\-</span>]</span><span class=\"pl-k\">?</span><span class=\"pl-c1\">\\d</span><span class=\"pl-k\">+</span>)<span class=\"pl-k\">?</span><span class=\"pl-pds\">/</span>g</span>;\n<span class=\"pl-k\">var</span> rx_four <span class=\"pl-k\">=</span><span class=\"pl-sr\"> <span class=\"pl-pds\">/</span>(?:<span class=\"pl-k\">^</span><span class=\"pl-k\">|</span>:<span class=\"pl-k\">|</span>,)(?:<span class=\"pl-c1\">\\s</span><span class=\"pl-k\">*</span><span class=\"pl-cce\">\\[</span>)<span class=\"pl-k\">+</span><span class=\"pl-pds\">/</span>g</span>;\n\n<span class=\"pl-k\">if</span> (\n    <span class=\"pl-smi\">rx_one</span>.<span class=\"pl-c1\">test</span>(\n        json\n            .<span class=\"pl-c1\">replace</span>(rx_two, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>@<span class=\"pl-pds\">\"</span></span>)\n            .<span class=\"pl-c1\">replace</span>(rx_three, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>]<span class=\"pl-pds\">\"</span></span>)\n            .<span class=\"pl-c1\">replace</span>(rx_four, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span>)\n    )\n) {\n    <span class=\"pl-k\">var</span> obj <span class=\"pl-k\">=</span> <span class=\"pl-c1\">eval</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>(<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span>json <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>)<span class=\"pl-pds\">\"</span></span>);\n}</pre></div>\n<p>看到上面的代码，你是否对那么<strong>复杂的正则感到头晕</strong>呢？反正我是很晕，所以我找了一个非常好用的<a href=\"https://regexper.com/\" rel=\"nofollow\">正则可视化工具 Regexper </a>来帮我看懂这些正则，如下图所示。<br>\n<a target=\"_blank\" href=\"https://user-images.githubusercontent.com/8401872/36766172-b5133f5a-1c6f-11e8-875a-269df968f7c5.png\"><img src=\"https://user-images.githubusercontent.com/8401872/36766172-b5133f5a-1c6f-11e8-875a-269df968f7c5.png\" alt=\"image\" style=\"max-width:100%;\"></a><br>\n<a target=\"_blank\" href=\"https://user-images.githubusercontent.com/8401872/36766106-5bb16e8c-1c6f-11e8-828b-82ea9383b2dc.png\"><img src=\"https://user-images.githubusercontent.com/8401872/36766106-5bb16e8c-1c6f-11e8-828b-82ea9383b2dc.png\" alt=\"image\" style=\"max-width:100%;\"></a><br>\n<a target=\"_blank\" href=\"https://user-images.githubusercontent.com/8401872/36766234-f38f94b8-1c6f-11e8-95be-cfd4b5521b06.png\"><img src=\"https://user-images.githubusercontent.com/8401872/36766234-f38f94b8-1c6f-11e8-95be-cfd4b5521b06.png\" alt=\"image\" style=\"max-width:100%;\"></a></p>\n<p>有 2 个地方需要注意：</p>\n<ol>\n<li>\n<p>英文注释中提到：</p>\n<blockquote>\n<p>Third, we delete all open brackets that follow a colon or comma or that begin the text.</p>\n</blockquote>\n<p>表面上看起来要删除 open brackets 开括号<code>(</code>，而实际上正则 rx_four 匹配删除的却是<code>[</code>，这是为什么呢？因为<strong>中英文语义的不同</strong>。在中文里，开括号一般指<code>(</code>，而在英文里开括号一般指<code>[</code>，其间细微差别需要知道。</p>\n</li>\n<li>\n<p>看 rx_three，里面有<code>(?:)</code>结构，这是正则的不捕获分组，具体可以参考<a href=\"https://www.zhihu.com/question/19853431\" rel=\"nofollow\">这里</a>。使用不捕获分组的原因：要解析的 json 有可能是一个很大的 JSON，如果匹配到的每个 token 都缓存起来的话，那么对内存的消耗是巨大的，而这里我们只想替换字符，并不需要知道都匹配到了哪些字符。</p>\n</li>\n</ol>\n<p>拓展阅读：</p>\n<ol>\n<li><a href=\"https://www.zhihu.com/question/20591877\" rel=\"nofollow\">JavaScript 为什么不推荐使用 eval？</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/29958439\" rel=\"nofollow\">JSON: 不要误会,我真的不是JavaScript的子集</a>，翻译 By 浪子，原作者 By Magnus Holm</li>\n</ol>\n<h1>递归</h1>\n<p>第一种 eval 的方法，相当于一股脑儿把 JSON 字符串塞进去。其实我们还可以<strong>手动逐个字符地扫描</strong>，然后进行判断，这就是第二种方法：递归。</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> 调用核心的 next 函数，逐个读取字符</span>\n<span class=\"pl-k\">var</span> <span class=\"pl-en\">next</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">function</span> (<span class=\"pl-smi\">c</span>) {\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> If a c parameter is provided, verify that it matches the current character.</span>\n\n    <span class=\"pl-k\">if</span> (c <span class=\"pl-k\">&&</span> c <span class=\"pl-k\">!==</span> ch) {\n        <span class=\"pl-en\">error</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Expected \'<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> c <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>\' instead of \'<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> ch <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>\'<span class=\"pl-pds\">\"</span></span>);\n    }\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> Get the next character. When there are no more characters,</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> return the empty string.</span>\n\n    ch <span class=\"pl-k\">=</span> <span class=\"pl-smi\">text</span>.<span class=\"pl-c1\">charAt</span>(at);\n    at <span class=\"pl-k\">+=</span> <span class=\"pl-c1\">1</span>;\n    <span class=\"pl-k\">return</span> ch;\n};</pre></div>\n<p>所谓“递归”，就是重复调用 value 函数。</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-en\">value</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">function</span> () {\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> Parse a JSON value. It could be an object, an array, a string, a number,</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> or a word.</span>\n\n    <span class=\"pl-en\">white</span>();\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> 根据当前字符是什么，我们便能推导出后面应该接的是什么类型</span>\n    <span class=\"pl-k\">switch</span> (ch) {\n        <span class=\"pl-k\">case</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>{<span class=\"pl-pds\">\"</span></span>:\n            <span class=\"pl-k\">return</span> <span class=\"pl-en\">object</span>();\n        <span class=\"pl-k\">case</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>[<span class=\"pl-pds\">\"</span></span>:\n            <span class=\"pl-k\">return</span> <span class=\"pl-en\">array</span>();\n        <span class=\"pl-k\">case</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-cce\">\\\"</span><span class=\"pl-pds\">\"</span></span>:\n            <span class=\"pl-k\">return</span> <span class=\"pl-en\">string</span>();\n        <span class=\"pl-k\">case</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>-<span class=\"pl-pds\">\"</span></span>:\n            <span class=\"pl-k\">return</span> <span class=\"pl-en\">number</span>();\n        <span class=\"pl-k\">default</span>:\n            <span class=\"pl-k\">return</span> (ch <span class=\"pl-k\">>=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>0<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">&&</span> ch <span class=\"pl-k\"><=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>9<span class=\"pl-pds\">\"</span></span>)\n                <span class=\"pl-k\">?</span> <span class=\"pl-en\">number</span>()\n                <span class=\"pl-k\">:</span> <span class=\"pl-en\">word</span>();\n    }\n};</pre></div>\n<p>还是以 <code>\'{\"a\":\"1\", \"b\":2}\'</code> 为例，程序大致逻辑是：启动 → 首次调用 <code>value()</code> → 发现是 <code>{</code> → 原来是对象，走 <code>object()</code> → 通过 <code>string()</code> 得到 key 值为 \"a\" → 读取到冒号，哦，后面可能是对象、数组、布尔值等等，具体是什么，还得再次调用 <code>value()</code> 才知道 → ……</p>\n<p>这种实现方案，既没有用 eval，也没有用正则，单纯靠逐个读取字符，所以代码逻辑比较复杂，需要多 debug 才能理清逻辑。lqt0223 也曾分析过这种实现方式：<a href=\"https://juejin.im/post/5a46e174518825698e726486\" rel=\"nofollow\">自己实现JSON、XML的解析 没那么难</a>。</p>\n<h1>状态机</h1>\n<p>状态机名字起得很抽象，应用也非常广泛，比如正则引擎、词法分析，甚至是字符串匹配的 KMP 算法都能用它来解释。它代表着一种本质的逻辑：<strong>在 A 状态下，如果输入 B，就会转移到 C 状态</strong>。</p>\n<p>那么，<strong>状态机与 JSON 字符串的解析有什么关系呢</strong>？→ JSON 字符串是有格式规范的，比如 key 和 value 之间用冒号隔开，比如不同 key-value 对之间用逗号隔开……<strong>这些格式规范可以翻译成状态机的状态转移</strong>，比如“如果检测到冒号，那么意味着下一步可以输入 value” 等等。还是以<code>\'{\"a\":\"1\", \"b\":2}\'</code>为例，我们来看看对这个 JSON 字符串进行解析时，状态机都流经了哪些状态。<br>\n<a target=\"_blank\" href=\"https://user-images.githubusercontent.com/8401872/36772416-298b0190-1c90-11e8-835e-d02f91182e16.png\"><img src=\"https://user-images.githubusercontent.com/8401872/36772416-298b0190-1c90-11e8-835e-d02f91182e16.png\" alt=\"状态机\" style=\"max-width:100%;\"></a></p>\n<p>另外，这第三种实现方式，代码看起来非常的规整，是因为其广泛地应用了访问者模式，比如：</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> string <span class=\"pl-k\">=</span> {   <span class=\"pl-c\"><span class=\"pl-c\">//</span> The actions for string tokens</span>\n    <span class=\"pl-en\">go</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span> () {\n        state <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ok<span class=\"pl-pds\">\"</span></span>;\n    },\n    <span class=\"pl-en\">firstokey</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span> () {\n        key <span class=\"pl-k\">=</span> value;\n        state <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>colon<span class=\"pl-pds\">\"</span></span>;\n    },\n    <span class=\"pl-en\">okey</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span> () {\n        key <span class=\"pl-k\">=</span> value;\n        state <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>colon<span class=\"pl-pds\">\"</span></span>;\n    },\n    <span class=\"pl-en\">ovalue</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span> () {\n        state <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ocomma<span class=\"pl-pds\">\"</span></span>;\n    },\n    <span class=\"pl-en\">firstavalue</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span> () {\n        state <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>acomma<span class=\"pl-pds\">\"</span></span>;\n    },\n    <span class=\"pl-en\">avalue</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span> () {\n        state <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>acomma<span class=\"pl-pds\">\"</span></span>;\n    }\n};</pre></div>\n<h1>后话</h1>\n<p>看似简单的 JSON.parse，要实现起来也是大有可究之处。如果想顺便看 JSON.stringify 的实现方法，可以看<a href=\"https://github.com/douglascrockford/JSON-js/blob/master/json2.js#L373\"> Douglas Crockford 版</a>，也可以看 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON\" rel=\"nofollow\">MDN 版</a>，两者大同小异。另外，鉴于 Douglas Crockford 写的这个 JSON 库有些特殊情况没处理好，后来又出了一个新的库，名为 <a href=\"https://github.com/bestiejs/json3\">JSON3</a>，它们之间的区别详见<a href=\"https://stackoverflow.com/questions/10963723/json-polyfill-json-2-or-json-3\" rel=\"nofollow\">相关的讨论</a>。</p>\n      ', '前言\n==\n\n近日在翻红宝书，看到 JSON 那一章节，忽然想到：“**如何用 JS 实现 JSON.parse？**”带着这个疑问，我找到了 [JSON 之父 Douglas Crockford 写的 ployfill](https://github.com/douglascrockford/JSON-js)，里面提供了三种实现方式，下面我们逐一来分析。\n\nEval\n====\n\n第一种方式最简单，也最直观，就是直接调用 eval，代码如下：\n\n```js\nvar json = \'{\"a\":\"1\", \"b\":2}\';\nvar obj = eval(\"(\" + json + \")\");  // obj 就是 json 反序列化之后得到的对象\n```\n\n因为 JSON 脱胎于 JS，同时也是 JS 的子集，所以能够直接交给 eval 运行。  \n然而，通常我们都说 eval 是邪恶的，尽量不要使用。为什么这里又用了呢？**其实 eval 并不邪恶，只是对于新手来说，用了容易出问题，所以不建议使用而已**。如果你水平够高，能正确地使用 Eval，那么它还是有很多用处的，比如[静态模板](https://www.zhihu.com/question/28466557/answer/241364553)。\n\nok，回到上面，我们像新手一样直接调用 eval，会不会出问题呢？ → **会，这里有 XSS 漏洞**。触发条件：参数 json 并非真正的 JSON 数据，而是可执行的 JS 代码。  \n那么，该如何规避这个问题呢？→ 老手 Douglas Crockford 给我们做了示范：**对参数 json 做校验，只有真正符合 JSON 格式，才能调用 eval**，具体就是下面这几个正则匹配。\n\n```js\n// We split the second stage into 4 regexp operations in order to work around\n// crippling inefficiencies in IE\'s and Safari\'s regexp engines. First we\n// replace the JSON backslash pairs with \"@\" (a non-JSON character). Second, we\n// replace all simple value tokens with \"]\" characters. Third, we delete all\n// open brackets that follow a colon or comma or that begin the text. Finally,\n// we look to see that the remaining characters are only whitespace or \"]\" or\n// \",\" or \":\" or \"{\" or \"}\". If that is so, then the text is safe for eval.\n\nvar rx_one = /^[\\],:{}\\s]*$/;\nvar rx_two = /\\\\(?:[\"\\\\\\/bfnrt]|u[0-9a-fA-F]{4})/g;\nvar rx_three = /\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g;\nvar rx_four = /(?:^|:|,)(?:\\s*\\[)+/g;\n\nif (\n    rx_one.test(\n        json\n            .replace(rx_two, \"@\")\n            .replace(rx_three, \"]\")\n            .replace(rx_four, \"\")\n    )\n) {\n    var obj = eval(\"(\" +json + \")\");\n}\n```\n\n看到上面的代码，你是否对那么**复杂的正则感到头晕**呢？反正我是很晕，所以我找了一个非常好用的[正则可视化工具 Regexper](https://regexper.com/) 来帮我看懂这些正则，如下图所示。  \n[![image](https://user-images.githubusercontent.com/8401872/36766172-b5133f5a-1c6f-11e8-875a-269df968f7c5.png)](https://user-images.githubusercontent.com/8401872/36766172-b5133f5a-1c6f-11e8-875a-269df968f7c5.png)  \n[![image](https://user-images.githubusercontent.com/8401872/36766106-5bb16e8c-1c6f-11e8-828b-82ea9383b2dc.png)](https://user-images.githubusercontent.com/8401872/36766106-5bb16e8c-1c6f-11e8-828b-82ea9383b2dc.png)  \n[![image](https://user-images.githubusercontent.com/8401872/36766234-f38f94b8-1c6f-11e8-95be-cfd4b5521b06.png)](https://user-images.githubusercontent.com/8401872/36766234-f38f94b8-1c6f-11e8-95be-cfd4b5521b06.png)\n\n有 2 个地方需要注意：\n\n1.  英文注释中提到：\n    \n    > Third, we delete all open brackets that follow a colon or comma or that begin the text.\n    \n    表面上看起来要删除 open brackets 开括号`(`，而实际上正则 rx_four 匹配删除的却是`[`，这是为什么呢？因为**中英文语义的不同**。在中文里，开括号一般指`(`，而在英文里开括号一般指`[`，其间细微差别需要知道。\n    \n2.  看 rx_three，里面有`(?:)`结构，这是正则的不捕获分组，具体可以参考[这里](https://www.zhihu.com/question/19853431)。使用不捕获分组的原因：要解析的 json 有可能是一个很大的 JSON，如果匹配到的每个 token 都缓存起来的话，那么对内存的消耗是巨大的，而这里我们只想替换字符，并不需要知道都匹配到了哪些字符。\n    \n\n拓展阅读：\n\n1.  [JavaScript 为什么不推荐使用 eval？](https://www.zhihu.com/question/20591877)\n2.  [JSON: 不要误会,我真的不是JavaScript的子集](https://zhuanlan.zhihu.com/p/29958439)，翻译 By 浪子，原作者 By Magnus Holm\n\n递归\n==\n\n第一种 eval 的方法，相当于一股脑儿把 JSON 字符串塞进去。其实我们还可以**手动逐个字符地扫描**，然后进行判断，这就是第二种方法：递归。\n\n```js\n// 调用核心的 next 函数，逐个读取字符\nvar next = function (c) {\n\n// If a c parameter is provided, verify that it matches the current character.\n\n    if (c && c !== ch) {\n        error(\"Expected \'\" + c + \"\' instead of \'\" + ch + \"\'\");\n    }\n\n// Get the next character. When there are no more characters,\n// return the empty string.\n\n    ch = text.charAt(at);\n    at += 1;\n    return ch;\n};\n```\n\n所谓“递归”，就是重复调用 value 函数。\n\n```js\nvalue = function () {\n\n// Parse a JSON value. It could be an object, an array, a string, a number,\n// or a word.\n\n    white();\n    // 根据当前字符是什么，我们便能推导出后面应该接的是什么类型\n    switch (ch) {\n        case \"{\":\n            return object();\n        case \"[\":\n            return array();\n        case \"\\\"\":\n            return string();\n        case \"-\":\n            return number();\n        default:\n            return (ch >= \"0\" && ch <= \"9\")\n                ? number()\n                : word();\n    }\n};\n```\n\n还是以 `\'{\"a\":\"1\", \"b\":2}\'` 为例，程序大致逻辑是：启动 → 首次调用 `value()` → 发现是 `{` → 原来是对象，走 `object()` → 通过 `string()` 得到 key 值为 \"a\" → 读取到冒号，哦，后面可能是对象、数组、布尔值等等，具体是什么，还得再次调用 `value()` 才知道 → ……\n\n这种实现方案，既没有用 eval，也没有用正则，单纯靠逐个读取字符，所以代码逻辑比较复杂，需要多 debug 才能理清逻辑。lqt0223 也曾分析过这种实现方式：[自己实现JSON、XML的解析 没那么难](https://juejin.im/post/5a46e174518825698e726486)。\n\n状态机\n===\n\n状态机名字起得很抽象，应用也非常广泛，比如正则引擎、词法分析，甚至是字符串匹配的 KMP 算法都能用它来解释。它代表着一种本质的逻辑：**在 A 状态下，如果输入 B，就会转移到 C 状态**。\n\n那么，**状态机与 JSON 字符串的解析有什么关系呢**？→ JSON 字符串是有格式规范的，比如 key 和 value 之间用冒号隔开，比如不同 key-value 对之间用逗号隔开……**这些格式规范可以翻译成状态机的状态转移**，比如“如果检测到冒号，那么意味着下一步可以输入 value” 等等。还是以`\'{\"a\":\"1\", \"b\":2}\'`为例，我们来看看对这个 JSON 字符串进行解析时，状态机都流经了哪些状态。  \n[![状态机](https://user-images.githubusercontent.com/8401872/36772416-298b0190-1c90-11e8-835e-d02f91182e16.png)](https://user-images.githubusercontent.com/8401872/36772416-298b0190-1c90-11e8-835e-d02f91182e16.png)\n\n另外，这第三种实现方式，代码看起来非常的规整，是因为其广泛地应用了访问者模式，比如：\n\n```js\nvar string = {   // The actions for string tokens\n    go: function () {\n        state = \"ok\";\n    },\n    firstokey: function () {\n        key = value;\n        state = \"colon\";\n    },\n    okey: function () {\n        key = value;\n        state = \"colon\";\n    },\n    ovalue: function () {\n        state = \"ocomma\";\n    },\n    firstavalue: function () {\n        state = \"acomma\";\n    },\n    avalue: function () {\n        state = \"acomma\";\n    }\n};\n```\n\n后话\n==\n\n看似简单的 JSON.parse，要实现起来也是大有可究之处。如果想顺便看 JSON.stringify 的实现方法，可以看 [Douglas Crockford 版](https://github.com/douglascrockford/JSON-js/blob/master/json2.js#L373)，也可以看 [MDN 版](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON)，两者大同小异。另外，鉴于 Douglas Crockford 写的这个 JSON 库有些特殊情况没处理好，后来又出了一个新的库，名为 [JSON3](https://github.com/bestiejs/json3)，它们之间的区别详见[相关的讨论](https://stackoverflow.com/questions/10963723/json-polyfill-json-2-or-json-3)。', 0, 1, 0);
INSERT INTO `post` (`id`, `createAt`, `updateAt`, `title`, `description`, `thumb`, `url`, `html`, `markdown`, `views`, `status`, `push`) VALUES
(19, '2018-04-23 11:01:41.547671', '2018-04-23 11:01:41.547671', '从hello world看JavaScript隐藏的黑魔法', '写在最前事情的起因是这段看起来不像代码的代码：有兴趣的同学可以自己先尝试下！([]+[][(![]+[])[!+[]+!![]+!![]]+([]+{})[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+{})[!+[]+!![]+!![]+!![]+!![]]+([]+{})[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[', 'https://user-images.githubusercontent.com/15126694/29723108-f958fe64-89f5-11e7-819e-38805929a3a3.png', 'https://github.com/Aaaaaaaty/blog/issues/16', '\n          <h2>写在最前</h2>\n<p>事情的起因是这段看起来不像代码的代码：</p>\n<p><a target=\"_blank\" href=\"https://user-images.githubusercontent.com/15126694/29723108-f958fe64-89f5-11e7-819e-38805929a3a3.png\"><img src=\"https://user-images.githubusercontent.com/15126694/29723108-f958fe64-89f5-11e7-819e-38805929a3a3.png\" alt=\"_20170825232240\" style=\"max-width:100%;\"></a></p>\n<p>有兴趣的同学可以自己先尝试下！</p>\n<pre><code>([]+[][(![]+[])[!+[]+!![]+!![]]+([]+{})[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+{})[!+[]+!![]+!![]+!![]+!![]]+([]+{})[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+{})[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+{})[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+{})[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+(![]+[])[!+[]+!![]]+([]+{})[+!![]]+([]+{})[!+[]+!![]+!![]+!![]+!![]]+(+{}+[])[+!![]]+(!![]+[])[+[]]+([][[]]+[])[!+[]+!![]+!![]+!![]+!![]]+([]+{})[+!![]]+([][[]]+[])[+!![]])())[+[]]+([][[]]+[])[!+[]+!![]+!![]]+(![]+[])[!+[]+!![]]+(![]+[])[!+[]+!![]]+([]+{})[+!![]]+([]+{})[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+[][(![]+[])[!+[]+!![]+!![]]+([]+{})[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+{})[!+[]+!![]+!![]+!![]+!![]]+([]+{})[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+{})[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+{})[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+{})[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+([][[]]+[])[+[]]+([][[]]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(![]+[])[!+[]+!![]+!![]]+([]+{})[!+[]+!![]+!![]+!![]+!![]]+(+{}+[])[+!![]]+([]+[][(![]+[])[!+[]+!![]+!![]]+([]+{})[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+{})[!+[]+!![]+!![]+!![]+!![]]+([]+{})[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+{})[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+{})[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+{})[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+(![]+[])[!+[]+!![]]+([]+{})[+!![]]+([]+{})[!+[]+!![]+!![]+!![]+!![]]+(+{}+[])[+!![]]+(!![]+[])[+[]]+([][[]]+[])[!+[]+!![]+!![]+!![]+!![]]+([]+{})[+!![]]+([][[]]+[])[+!![]])())[!+[]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]])()([][(![]+[])[!+[]+!![]+!![]]+([]+{})[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+{})[!+[]+!![]+!![]+!![]+!![]]+([]+{})[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+{})[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+{})[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+{})[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(![]+[])[!+[]+!![]+!![]]+([]+{})[!+[]+!![]+!![]+!![]+!![]]+(+{}+[])[+!![]]+([]+[][(![]+[])[!+[]+!![]+!![]]+([]+{})[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+{})[!+[]+!![]+!![]+!![]+!![]]+([]+{})[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+{})[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+{})[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+{})[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+(![]+[])[!+[]+!![]]+([]+{})[+!![]]+([]+{})[!+[]+!![]+!![]+!![]+!![]]+(+{}+[])[+!![]]+(!![]+[])[+[]]+([][[]]+[])[!+[]+!![]+!![]+!![]+!![]]+([]+{})[+!![]]+([][[]]+[])[+!![]])())[!+[]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]])()(([]+{})[+[]])[+[]]+(!+[]+!![]+!![]+!![]+!![]+!![]+!![]+[])+(!+[]+!![]+!![]+!![]+!![]+!![]+!![]+[]))+([]+{})[+!![]]+(!![]+[])[+!![]]+(![]+[])[!+[]+!![]]+([][[]]+[])[!+[]+!![]]+[][(![]+[])[!+[]+!![]+!![]]+([]+{})[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+{})[!+[]+!![]+!![]+!![]+!![]]+([]+{})[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+{})[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+{})[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+{})[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+([][[]]+[])[+[]]+([][[]]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(![]+[])[!+[]+!![]+!![]]+([]+{})[!+[]+!![]+!![]+!![]+!![]]+(+{}+[])[+!![]]+([]+[][(![]+[])[!+[]+!![]+!![]]+([]+{})[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+{})[!+[]+!![]+!![]+!![]+!![]]+([]+{})[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+{})[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+{})[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+{})[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+(![]+[])[!+[]+!![]]+([]+{})[+!![]]+([]+{})[!+[]+!![]+!![]+!![]+!![]]+(+{}+[])[+!![]]+(!![]+[])[+[]]+([][[]]+[])[!+[]+!![]+!![]+!![]+!![]]+([]+{})[+!![]]+([][[]]+[])[+!![]])())[!+[]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]])()([][(![]+[])[!+[]+!![]+!![]]+([]+{})[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+{})[!+[]+!![]+!![]+!![]+!![]]+([]+{})[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+{})[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+{})[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+{})[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(![]+[])[!+[]+!![]+!![]]+([]+{})[!+[]+!![]+!![]+!![]+!![]]+(+{}+[])[+!![]]+([]+[][(![]+[])[!+[]+!![]+!![]]+([]+{})[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+{})[!+[]+!![]+!![]+!![]+!![]]+([]+{})[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+{})[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+{})[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+{})[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+(![]+[])[!+[]+!![]]+([]+{})[+!![]]+([]+{})[!+[]+!![]+!![]+!![]+!![]]+(+{}+[])[+!![]]+(!![]+[])[+[]]+([][[]]+[])[!+[]+!![]+!![]+!![]+!![]]+([]+{})[+!![]]+([][[]]+[])[+!![]])())[!+[]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]])()(([]+{})[+[]])[+[]]+(!+[]+!![]+[])+(+!![]+[]))\n</code></pre>\n<p>作者对着这段代码足足看了一下午，我只想说这不是什么深奥的黑魔法。一点点看下来你就知道其中的原理了。最后会有一段作者自己封装的代码叫nb.js（<a href=\"https://github.com/Aaaaaaaty/Blog/blob/master/NbJs/nb.js\">源码在这里</a>），它实现了输入数字字母后自动生成这种玄学代码片段。就像这样：</p>\n<p><a target=\"_blank\" href=\"https://user-images.githubusercontent.com/15126694/29723156-1e9adf44-89f6-11e7-8732-a55910a2db89.jpg\"><img src=\"https://user-images.githubusercontent.com/15126694/29723156-1e9adf44-89f6-11e7-8732-a55910a2db89.jpg\" alt=\"_20170825233827\" style=\"max-width:100%;\"></a></p>\n<p>欢迎关注<a href=\"https://github.com/Aaaaaaaty/Blog\">我的博客</a>，不定期更新中——</p>\n<h3>JavaScript小众系列开始更新啦</h3>\n<p>——何时完结不确定，写多少看我会多少！这是已经更新的地址：</p>\n<ul>\n<li>小众系列之按位非运算符：<a href=\"https://github.com/Aaaaaaaty/Blog/issues/22\">JavaScript中奇特的~运算符</a></li>\n<li>小众系列之终极类型转换：<a href=\"https://github.com/Aaaaaaaty/Blog/issues/15\">从hello world看JavaScript隐藏的黑魔法制</a></li>\n<li>小众系列之隐式类型转换：<a href=\"https://github.com/Aaaaaaaty/Blog/issues/14\">从[] == ![]看隐式强制转换机制</a></li>\n<li>小众系列之事件循环：<a href=\"https://github.com/Aaaaaaaty/Blog/issues/13\">从HTML5与PromiseA+规范来看事件循环</a></li>\n</ul>\n<p>这个系列旨在对一些人们不常用遇到的知识点，以及可能常用到但不曾深入了解的部分做一个重新梳理，虽然可能有些部分看起来没有什么用，因为平时开发真的用不到！但个人认为糟粕也好精华也罢里面全部蕴藏着JS一些偏本质的东西或者说底层规范，如果能适当避开舒适区来看这些小细节，也许对自己也会有些帮助~文章更新在<a href=\"https://github.com/Aaaaaaaty/Blog\">我的博客</a>，欢迎不定期关注。</p>\n<h2>转换思路</h2>\n<h3>基础思路：通过关键字来获取字母</h3>\n<p>什么意思？比如：f。看到f你会想到哪个关键字？同时这个关键字是要在类型转换的机制下能够被打印出来的。如果类型转换你还不是很了解，可以先读下这篇来理解一下：<a href=\"https://github.com/Aaaaaaaty/Blog/issues/14\">从[] == ![]看隐式强制转换机制</a>。我相信很多同学可以想到是<code>false</code>这个关键字。那么我们的思路就有了也就是要让代码实现<code>\'false\'[0]</code>这件事，这个认识统一之后我相信下面的代码一定不难理解了：</p>\n<pre><code>[[[] == []] + []][+![]][+![]]\n//过程理解为\n[] == [] => false\n[[] == []] => [false]\n[[[] == []] + []] => [\'false\'], [+![]] => 0\n[[[] == []] + []][+![]] => \'false\'\n[[[] == []] + []][+![]][+![]] => \'false\'[0] => \'f\'\n</code></pre>\n<p>其中大体形式可以理解为：[\'false\'][0][0] => \'f\'</p>\n<p>是不是瞬间觉得也不过如此？</p>\n<h3>可通过关键字获取的字符</h3>\n<p>当你知道可以用上面的方式来获取自己需要的字母之后，接下来要做的是思考一下你能从关键字中获取哪些字母呢，作者总结了以下你可以通过关键字获得的字母：</p>\n<pre><code>([][[]]+[]) => \'undefined\'\n+[1+[[][0]+[]][0][3]+400][0]+[] => \'Infinity\'\n[[[] == []] + []][+![]] => \'false\'\n[[[] != []] + []][+![]] => \'true\'\n([]+{}) => \"[object Object]\"\n</code></pre>\n<p>感兴趣的同学自己打印下就明白为什么了。</p>\n<p>接下来要说的是剩下的字母怎么办？当然了你仍然可以通过试图寻找关键字的方式来获取字母。但是如果标点我也想要呢？或者说26个字母我都想要怎么办？<br>\n具体点来说对于“hello world！”这段字符串来看，至少“w”,\"!\"的获取方法通过关键字的形式我们是无从下手的。</p>\n<h3>unescape</h3>\n<blockquote>\n<p>unescape() 函数可对通过 escape() 编码的字符串进行解码。但是已经废弃了</p>\n</blockquote>\n<p>是的现在已经不建议如此使用了，但是浏览器下基本还是支持这个函数的。通过这个函数我们可以通过ascll码来直接得到我们需要的字符：</p>\n<pre><code>unescape(\'%77\') => \'w\'\n</code></pre>\n<p>如此看来，除了我们可以快速得得到一些关键字字母外，用这个方法我们便可以实现任意字母的组合。而作者封装的<a href=\"https://github.com/Aaaaaaaty/Blog/blob/master/NbJs/nb.js\">nb.js</a>也是基于这两者来实现输出黑魔法字符串的。</p>\n<p>那么现在的问题是如果通过字符串来执行<code>unescape(\'%77\')</code>这段代码？</p>\n<h3>来看下hello world那段代码是如何实现的：</h3>\n<p><a target=\"_blank\" href=\"https://camo.githubusercontent.com/9384fc38be6f20468659eb617b74846b6c70ffcd/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031372f382f32362f3730373361393063316432303766663430633136393934663533663232623561\"><img src=\"https://camo.githubusercontent.com/9384fc38be6f20468659eb617b74846b6c70ffcd/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031372f382f32362f3730373361393063316432303766663430633136393934663533663232623561\" alt=\"\" data-canonical-src=\"https://user-gold-cdn.xitu.io/2017/8/26/7073a90c1d207ff40c16994f53f22b5a\" style=\"max-width:100%;\"></a><br>\n在这里也不绕弯子了，作者打印了很多次之后才发现是如此调用的：</p>\n<pre><code>[][\'sort\'][\'constructor\'](\'return unescape\')\n</code></pre>\n<p>因为JS调用方法不光是“.”调用，通过[]也是可以调用的。同时通过return unescape，返回了一个匿名函数形成了闭包。故调用的时候采用如下方式：</p>\n<pre><code>[][\'sort\'][\'constructor\'](\'return unescape\')()(\'%77\') => \'w\'\n</code></pre>\n<p>至于为什么这段代码写出来如此长是因为上面的每一个字母都是一点点拼出来的，也行好上面通过关键字的方式可以得到这些字母=。=不然的话——</p>\n<h2>封装nb.js</h2>\n<p>所以经过上面的分析你会发现，除了字符串长度感人之外，这种通过拼接字符串可以返回函数并且执行的方式还真是蛮炫酷的。为了达到装逼的效果。作者决定封装一个支持字母和数字的函数，当你传入普通的字符串之后，会返回带有黑魔法气息的冗长字符串，尽情拿去装x吧，不客气~</p>\n<h3>封装过程</h3>\n<h4>维护基础对象与ascll表对象</h4>\n<pre><code>var baseAlibrary = {\n    \'a\': \'[[[] == []][0]+[]][0][1]\',\n    \'b\': null,\n    \'c\': \'[[][[[][0] + []][0][4]+[[][0] + []][0][5]+[[][0] + []][0][1]+[[][0] + []][0][2]]+[]][0][3]\',\n    \'d\': \'([][[]]+[])[+!![]+!![]]\',\n    \'e\': \'([][[]]+[])[+!![]+!![]+!![]]\',\n    \'f\': \'([][[]]+[])[+!![]+!![]+!![]+!![]]\',\n    \'g\': null,\n    ...\n    \'0\': \'(+![])\',\n    \'1\': \'(+!![])\',\n    \'2\': \'(+!![]+!![])\',\n    ...\n    \',\': null,\n    \'!\': null,\n	}\n    var ascll = { //ascll表可自行配置, 新添加后需要在上面对象中配置相同key，只是value为null\n        \'A\': \'41\',\n        \'B\': \'42\',\n        ...\n    }\n</code></pre>\n<p>将简单的字母转换方式直接存储下来，如果需要的字符无法从基础对象获取，就记为null，并在ascll表中写入相关转码方式。</p>\n<h4>封装unesacpe</h4>\n<pre><code>var result = \'\'\n	var unescapeStr = \'[][(![]+[])[!+[]+!![]+!![]]+([]+{})[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+{})[!+[]+!![]+!![]+!![]+!![]]+([]+{})[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+{})[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+{})[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+{})[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+([][[]]+[])[+[]]+([][[]]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(![]+[])[!+[]+!![]+!![]]+([]+{})[!+[]+!![]+!![]+!![]+!![]]+(+{}+[])[+!![]]+([]+[][(![]+[])[!+[]+!![]+!![]]+([]+{})[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+{})[!+[]+!![]+!![]+!![]+!![]]+([]+{})[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+{})[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+{})[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+{})[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+(![]+[])[!+[]+!![]]+([]+{})[+!![]]+([]+{})[!+[]+!![]+!![]+!![]+!![]]+(+{}+[])[+!![]]+(!![]+[])[+[]]+([][[]]+[])[!+[]+!![]+!![]+!![]+!![]]+([]+{})[+!![]]+([][[]]+[])[+!![]])())[!+[]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]])\'\n	//将[][\'sort\'][\'constructor\'](\'return unescape\')的黑魔法形式存储起来之后直接调用\n	function changeAscll(ascllItem) {\n		var ascllResult = \'\'\n		var middleValue = \'\'\n		ascll[ascllItem].split(\'\').forEach(function(item) {\n			if(isNaN(item)) { //ascll中遇到字母则需要再次进行unescape转码\n				var str = \'\'\n				ascll[item].split(\'\').forEach(function(data) {\n					str += \'+[\' + baseAlibrary[data] + \']\'\n				})\n				middleValue += \'+\' + unescapeStr + \'()(\'+ baseAlibrary[\'%\']+\'+\' +  str.slice(1) + \')\'\n			} else {\n				middleValue += \'+[\' + baseAlibrary[item] + \']\'\n			}	\n		})\n		ascllResult += \'+\' + unescapeStr + \'()(\'+ baseAlibrary[\'%\']+\'+\' +  middleValue.slice(1) + \')\'\n		return ascllResult\n	}\n	function getUnEscape(str) {\n\n	}\n	strArr.forEach(function(item) {\n		Object.keys(baseAlibrary).forEach(function(obj, i) {\n			if(item.toLocaleLowerCase() === obj) {\n				if(!baseAlibrary[item]) {\n					Object.keys(ascll).forEach(function(ascllItem) {\n						if(obj === ascllItem) {\n							var cbValue = changeAscll(ascllItem).slice(1)\n							result += \'+\' + cbValue\n						}\n					})\n				} else {\n					result += \'+\' + baseAlibrary[obj]\n				}\n			}\n		})\n	})\n	console.log(result.slice(1))\n</code></pre>\n<h3>效果</h3>\n<p>也就是一开始大家看到的：<br>\n<a target=\"_blank\" href=\"https://user-images.githubusercontent.com/15126694/29723156-1e9adf44-89f6-11e7-8732-a55910a2db89.jpg\"><img src=\"https://user-images.githubusercontent.com/15126694/29723156-1e9adf44-89f6-11e7-8732-a55910a2db89.jpg\" alt=\"_20170825233827\" style=\"max-width:100%;\"></a></p>\n<p>作者将函数绑定在了this上，通过<code>this.reallyNb()</code>即可得到你想要的~</p>\n<p>PS：代码请部署在服务器中再打开页面，否则个别字母通过location方法会取不到，主要就是t,p。不过这个问题之后作者会将其以ascll表的方式存储，就没有环境限制了。只是作者嫌弃那样做打印的字符串太长了~</p>\n<h2>最后</h2>\n<p>不定时更新中——<br>\n有问题欢迎在issues下交流。</p>\n      ', '写在最前\n----\n\n事情的起因是这段看起来不像代码的代码：\n\n[![_20170825232240](https://user-images.githubusercontent.com/15126694/29723108-f958fe64-89f5-11e7-819e-38805929a3a3.png)](https://user-images.githubusercontent.com/15126694/29723108-f958fe64-89f5-11e7-819e-38805929a3a3.png)\n\n有兴趣的同学可以自己先尝试下！\n\n    ([]+[][(![]+[])[!+[]+!![]+!![]]+([]+{})[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+{})[!+[]+!![]+!![]+!![]+!![]]+([]+{})[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+{})[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+{})[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+{})[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+(![]+[])[!+[]+!![]]+([]+{})[+!![]]+([]+{})[!+[]+!![]+!![]+!![]+!![]]+(+{}+[])[+!![]]+(!![]+[])[+[]]+([][[]]+[])[!+[]+!![]+!![]+!![]+!![]]+([]+{})[+!![]]+([][[]]+[])[+!![]])())[+[]]+([][[]]+[])[!+[]+!![]+!![]]+(![]+[])[!+[]+!![]]+(![]+[])[!+[]+!![]]+([]+{})[+!![]]+([]+{})[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+[][(![]+[])[!+[]+!![]+!![]]+([]+{})[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+{})[!+[]+!![]+!![]+!![]+!![]]+([]+{})[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+{})[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+{})[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+{})[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+([][[]]+[])[+[]]+([][[]]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(![]+[])[!+[]+!![]+!![]]+([]+{})[!+[]+!![]+!![]+!![]+!![]]+(+{}+[])[+!![]]+([]+[][(![]+[])[!+[]+!![]+!![]]+([]+{})[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+{})[!+[]+!![]+!![]+!![]+!![]]+([]+{})[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+{})[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+{})[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+{})[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+(![]+[])[!+[]+!![]]+([]+{})[+!![]]+([]+{})[!+[]+!![]+!![]+!![]+!![]]+(+{}+[])[+!![]]+(!![]+[])[+[]]+([][[]]+[])[!+[]+!![]+!![]+!![]+!![]]+([]+{})[+!![]]+([][[]]+[])[+!![]])())[!+[]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]])()([][(![]+[])[!+[]+!![]+!![]]+([]+{})[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+{})[!+[]+!![]+!![]+!![]+!![]]+([]+{})[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+{})[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+{})[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+{})[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(![]+[])[!+[]+!![]+!![]]+([]+{})[!+[]+!![]+!![]+!![]+!![]]+(+{}+[])[+!![]]+([]+[][(![]+[])[!+[]+!![]+!![]]+([]+{})[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+{})[!+[]+!![]+!![]+!![]+!![]]+([]+{})[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+{})[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+{})[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+{})[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+(![]+[])[!+[]+!![]]+([]+{})[+!![]]+([]+{})[!+[]+!![]+!![]+!![]+!![]]+(+{}+[])[+!![]]+(!![]+[])[+[]]+([][[]]+[])[!+[]+!![]+!![]+!![]+!![]]+([]+{})[+!![]]+([][[]]+[])[+!![]])())[!+[]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]])()(([]+{})[+[]])[+[]]+(!+[]+!![]+!![]+!![]+!![]+!![]+!![]+[])+(!+[]+!![]+!![]+!![]+!![]+!![]+!![]+[]))+([]+{})[+!![]]+(!![]+[])[+!![]]+(![]+[])[!+[]+!![]]+([][[]]+[])[!+[]+!![]]+[][(![]+[])[!+[]+!![]+!![]]+([]+{})[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+{})[!+[]+!![]+!![]+!![]+!![]]+([]+{})[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+{})[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+{})[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+{})[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+([][[]]+[])[+[]]+([][[]]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(![]+[])[!+[]+!![]+!![]]+([]+{})[!+[]+!![]+!![]+!![]+!![]]+(+{}+[])[+!![]]+([]+[][(![]+[])[!+[]+!![]+!![]]+([]+{})[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+{})[!+[]+!![]+!![]+!![]+!![]]+([]+{})[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+{})[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+{})[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+{})[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+(![]+[])[!+[]+!![]]+([]+{})[+!![]]+([]+{})[!+[]+!![]+!![]+!![]+!![]]+(+{}+[])[+!![]]+(!![]+[])[+[]]+([][[]]+[])[!+[]+!![]+!![]+!![]+!![]]+([]+{})[+!![]]+([][[]]+[])[+!![]])())[!+[]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]])()([][(![]+[])[!+[]+!![]+!![]]+([]+{})[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+{})[!+[]+!![]+!![]+!![]+!![]]+([]+{})[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+{})[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+{})[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+{})[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(![]+[])[!+[]+!![]+!![]]+([]+{})[!+[]+!![]+!![]+!![]+!![]]+(+{}+[])[+!![]]+([]+[][(![]+[])[!+[]+!![]+!![]]+([]+{})[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+{})[!+[]+!![]+!![]+!![]+!![]]+([]+{})[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+{})[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+{})[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+{})[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+(![]+[])[!+[]+!![]]+([]+{})[+!![]]+([]+{})[!+[]+!![]+!![]+!![]+!![]]+(+{}+[])[+!![]]+(!![]+[])[+[]]+([][[]]+[])[!+[]+!![]+!![]+!![]+!![]]+([]+{})[+!![]]+([][[]]+[])[+!![]])())[!+[]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]])()(([]+{})[+[]])[+[]]+(!+[]+!![]+[])+(+!![]+[]))\n    \n\n作者对着这段代码足足看了一下午，我只想说这不是什么深奥的黑魔法。一点点看下来你就知道其中的原理了。最后会有一段作者自己封装的代码叫nb.js（[源码在这里](https://github.com/Aaaaaaaty/Blog/blob/master/NbJs/nb.js)），它实现了输入数字字母后自动生成这种玄学代码片段。就像这样：\n\n[![_20170825233827](https://user-images.githubusercontent.com/15126694/29723156-1e9adf44-89f6-11e7-8732-a55910a2db89.jpg)](https://user-images.githubusercontent.com/15126694/29723156-1e9adf44-89f6-11e7-8732-a55910a2db89.jpg)\n\n欢迎关注[我的博客](https://github.com/Aaaaaaaty/Blog)，不定期更新中——\n\n### JavaScript小众系列开始更新啦\n\n——何时完结不确定，写多少看我会多少！这是已经更新的地址：\n\n*   小众系列之按位非运算符：[JavaScript中奇特的~运算符](https://github.com/Aaaaaaaty/Blog/issues/22)\n*   小众系列之终极类型转换：[从hello world看JavaScript隐藏的黑魔法制](https://github.com/Aaaaaaaty/Blog/issues/15)\n*   小众系列之隐式类型转换：[从\\[\\] == !\\[\\]看隐式强制转换机制](https://github.com/Aaaaaaaty/Blog/issues/14)\n*   小众系列之事件循环：[从HTML5与PromiseA+规范来看事件循环](https://github.com/Aaaaaaaty/Blog/issues/13)\n\n这个系列旨在对一些人们不常用遇到的知识点，以及可能常用到但不曾深入了解的部分做一个重新梳理，虽然可能有些部分看起来没有什么用，因为平时开发真的用不到！但个人认为糟粕也好精华也罢里面全部蕴藏着JS一些偏本质的东西或者说底层规范，如果能适当避开舒适区来看这些小细节，也许对自己也会有些帮助~文章更新在[我的博客](https://github.com/Aaaaaaaty/Blog)，欢迎不定期关注。\n\n转换思路\n----\n\n### 基础思路：通过关键字来获取字母\n\n什么意思？比如：f。看到f你会想到哪个关键字？同时这个关键字是要在类型转换的机制下能够被打印出来的。如果类型转换你还不是很了解，可以先读下这篇来理解一下：[从\\[\\] == !\\[\\]看隐式强制转换机制](https://github.com/Aaaaaaaty/Blog/issues/14)。我相信很多同学可以想到是`false`这个关键字。那么我们的思路就有了也就是要让代码实现`\'false\'[0]`这件事，这个认识统一之后我相信下面的代码一定不难理解了：\n\n    [[[] == []] + []][+![]][+![]]\n    //过程理解为\n    [] == [] => false\n    [[] == []] => [false]\n    [[[] == []] + []] => [\'false\'], [+![]] => 0\n    [[[] == []] + []][+![]] => \'false\'\n    [[[] == []] + []][+![]][+![]] => \'false\'[0] => \'f\'\n    \n\n其中大体形式可以理解为：\\[\'false\'\\]\\[0\\]\\[0\\] => \'f\'\n\n是不是瞬间觉得也不过如此？\n\n### 可通过关键字获取的字符\n\n当你知道可以用上面的方式来获取自己需要的字母之后，接下来要做的是思考一下你能从关键字中获取哪些字母呢，作者总结了以下你可以通过关键字获得的字母：\n\n    ([][[]]+[]) => \'undefined\'\n    +[1+[[][0]+[]][0][3]+400][0]+[] => \'Infinity\'\n    [[[] == []] + []][+![]] => \'false\'\n    [[[] != []] + []][+![]] => \'true\'\n    ([]+{}) => \"[object Object]\"\n    \n\n感兴趣的同学自己打印下就明白为什么了。\n\n接下来要说的是剩下的字母怎么办？当然了你仍然可以通过试图寻找关键字的方式来获取字母。但是如果标点我也想要呢？或者说26个字母我都想要怎么办？  \n具体点来说对于“hello world！”这段字符串来看，至少“w”,\"!\"的获取方法通过关键字的形式我们是无从下手的。\n\n### unescape\n\n> unescape() 函数可对通过 escape() 编码的字符串进行解码。但是已经废弃了\n\n是的现在已经不建议如此使用了，但是浏览器下基本还是支持这个函数的。通过这个函数我们可以通过ascll码来直接得到我们需要的字符：\n\n    unescape(\'%77\') => \'w\'\n    \n\n如此看来，除了我们可以快速得得到一些关键字字母外，用这个方法我们便可以实现任意字母的组合。而作者封装的[nb.js](https://github.com/Aaaaaaaty/Blog/blob/master/NbJs/nb.js)也是基于这两者来实现输出黑魔法字符串的。\n\n那么现在的问题是如果通过字符串来执行`unescape(\'%77\')`这段代码？\n\n### 来看下hello world那段代码是如何实现的：\n\n[![](https://camo.githubusercontent.com/9384fc38be6f20468659eb617b74846b6c70ffcd/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031372f382f32362f3730373361393063316432303766663430633136393934663533663232623561)](https://camo.githubusercontent.com/9384fc38be6f20468659eb617b74846b6c70ffcd/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031372f382f32362f3730373361393063316432303766663430633136393934663533663232623561)  \n在这里也不绕弯子了，作者打印了很多次之后才发现是如此调用的：\n\n    [][\'sort\'][\'constructor\'](\'return unescape\')\n    \n\n因为JS调用方法不光是“.”调用，通过\\[\\]也是可以调用的。同时通过return unescape，返回了一个匿名函数形成了闭包。故调用的时候采用如下方式：\n\n    [][\'sort\'][\'constructor\'](\'return unescape\')()(\'%77\') => \'w\'\n    \n\n至于为什么这段代码写出来如此长是因为上面的每一个字母都是一点点拼出来的，也行好上面通过关键字的方式可以得到这些字母=。=不然的话——\n\n封装nb.js\n-------\n\n所以经过上面的分析你会发现，除了字符串长度感人之外，这种通过拼接字符串可以返回函数并且执行的方式还真是蛮炫酷的。为了达到装逼的效果。作者决定封装一个支持字母和数字的函数，当你传入普通的字符串之后，会返回带有黑魔法气息的冗长字符串，尽情拿去装x吧，不客气~\n\n### 封装过程\n\n#### 维护基础对象与ascll表对象\n\n    var baseAlibrary = {\n        \'a\': \'[[[] == []][0]+[]][0][1]\',\n        \'b\': null,\n        \'c\': \'[[][[[][0] + []][0][4]+[[][0] + []][0][5]+[[][0] + []][0][1]+[[][0] + []][0][2]]+[]][0][3]\',\n        \'d\': \'([][[]]+[])[+!![]+!![]]\',\n        \'e\': \'([][[]]+[])[+!![]+!![]+!![]]\',\n        \'f\': \'([][[]]+[])[+!![]+!![]+!![]+!![]]\',\n        \'g\': null,\n        ...\n        \'0\': \'(+![])\',\n        \'1\': \'(+!![])\',\n        \'2\': \'(+!![]+!![])\',\n        ...\n        \',\': null,\n        \'!\': null,\n    	}\n        var ascll = { //ascll表可自行配置, 新添加后需要在上面对象中配置相同key，只是value为null\n            \'A\': \'41\',\n            \'B\': \'42\',\n            ...\n        }\n    \n\n将简单的字母转换方式直接存储下来，如果需要的字符无法从基础对象获取，就记为null，并在ascll表中写入相关转码方式。\n\n#### 封装unesacpe\n\n    var result = \'\'\n    	var unescapeStr = \'[][(![]+[])[!+[]+!![]+!![]]+([]+{})[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+{})[!+[]+!![]+!![]+!![]+!![]]+([]+{})[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+{})[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+{})[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+{})[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+([][[]]+[])[+[]]+([][[]]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(![]+[])[!+[]+!![]+!![]]+([]+{})[!+[]+!![]+!![]+!![]+!![]]+(+{}+[])[+!![]]+([]+[][(![]+[])[!+[]+!![]+!![]]+([]+{})[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+{})[!+[]+!![]+!![]+!![]+!![]]+([]+{})[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+{})[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+{})[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+{})[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+(![]+[])[!+[]+!![]]+([]+{})[+!![]]+([]+{})[!+[]+!![]+!![]+!![]+!![]]+(+{}+[])[+!![]]+(!![]+[])[+[]]+([][[]]+[])[!+[]+!![]+!![]+!![]+!![]]+([]+{})[+!![]]+([][[]]+[])[+!![]])())[!+[]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]])\'\n    	//将[][\'sort\'][\'constructor\'](\'return unescape\')的黑魔法形式存储起来之后直接调用\n    	function changeAscll(ascllItem) {\n    		var ascllResult = \'\'\n    		var middleValue = \'\'\n    		ascll[ascllItem].split(\'\').forEach(function(item) {\n    			if(isNaN(item)) { //ascll中遇到字母则需要再次进行unescape转码\n    				var str = \'\'\n    				ascll[item].split(\'\').forEach(function(data) {\n    					str += \'+[\' + baseAlibrary[data] + \']\'\n    				})\n    				middleValue += \'+\' + unescapeStr + \'()(\'+ baseAlibrary[\'%\']+\'+\' +  str.slice(1) + \')\'\n    			} else {\n    				middleValue += \'+[\' + baseAlibrary[item] + \']\'\n    			}	\n    		})\n    		ascllResult += \'+\' + unescapeStr + \'()(\'+ baseAlibrary[\'%\']+\'+\' +  middleValue.slice(1) + \')\'\n    		return ascllResult\n    	}\n    	function getUnEscape(str) {\n    \n    	}\n    	strArr.forEach(function(item) {\n    		Object.keys(baseAlibrary).forEach(function(obj, i) {\n    			if(item.toLocaleLowerCase() === obj) {\n    				if(!baseAlibrary[item]) {\n    					Object.keys(ascll).forEach(function(ascllItem) {\n    						if(obj === ascllItem) {\n    							var cbValue = changeAscll(ascllItem).slice(1)\n    							result += \'+\' + cbValue\n    						}\n    					})\n    				} else {\n    					result += \'+\' + baseAlibrary[obj]\n    				}\n    			}\n    		})\n    	})\n    	console.log(result.slice(1))\n    \n\n### 效果\n\n也就是一开始大家看到的：  \n[![_20170825233827](https://user-images.githubusercontent.com/15126694/29723156-1e9adf44-89f6-11e7-8732-a55910a2db89.jpg)](https://user-images.githubusercontent.com/15126694/29723156-1e9adf44-89f6-11e7-8732-a55910a2db89.jpg)\n\n作者将函数绑定在了this上，通过`this.reallyNb()`即可得到你想要的~\n\nPS：代码请部署在服务器中再打开页面，否则个别字母通过location方法会取不到，主要就是t,p。不过这个问题之后作者会将其以ascll表的方式存储，就没有环境限制了。只是作者嫌弃那样做打印的字符串太长了~\n\n最后\n--\n\n不定时更新中——  \n有问题欢迎在issues下交流。', 0, 1, 0);
INSERT INTO `post` (`id`, `createAt`, `updateAt`, `title`, `description`, `thumb`, `url`, `html`, `markdown`, `views`, `status`, `push`) VALUES
(20, '2018-04-23 11:01:41.588360', '2018-04-23 11:01:41.588360', '我们整理了一份 GitHub 上的微信小程序开发工具名单（文末附链接）', '最近，微信方面为满足小程序开发者的变现需求，启动了小程序广告组件的内测。小程序淘金之路指日可待，因此，这里特地整理了一份GitHub上面的小程序开发工具。其中有基本的小程序UI、开发框架、实用功能库、开发工具。也有服务端开发框架、API模拟、全栈搭配开发方案、上线DEMO等。这些项目的链接我放在了文章末尾，大家可以先看看有哪些自己需要的资源。如果想更系统地学习小程序开发，可以点这里UI组件weui-wxss★1873-同微信原生视觉体验一致的基础样式库zanui-weapp★794-好用易扩展的小程序UI', 'https://mmbiz.qpic.cn/mmbiz_jpg/xabgupsPLbTcFBHJJe5EQsOtqYtbicD48kpNibGgt9dkZIMZ3eE0BHL9hMzGBQOM542oYtNzdGTAk7Frj1tzqWTA/640?wx_fmt=jpeg', 'https://mp.weixin.qq.com/s/xiSNsuI-6H_esS7WU5x4OA', '<p><span style=\"font-size: 14px;\"></span></p><p><img class=\"\" data-ratio=\"0.6011111111111112\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/xabgupsPLbTcFBHJJe5EQsOtqYtbicD48kpNibGgt9dkZIMZ3eE0BHL9hMzGBQOM542oYtNzdGTAk7Frj1tzqWTA/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"900\" style=\"\"></p><p><span style=\"font-size: 14px;\">最近，微信方面为满足小程序开发者的变现需求，启动了小程序广告组件的内测。</span><br></p><p><br></p><p><span style=\"font-size: 14px;\">小程序淘金之路指日可待，因此，这里特地整理了一份 GitHub 上面的小程序开发工具。</span></p><p><br></p><p><span style=\"font-size: 14px;\">其中有基本的小程序 UI、开发框架、实用功能库、开发工具。</span></p><p><span style=\"font-size: 14px;\"><br></span></p><p><span style=\"font-size: 14px;\">也有服务端开发框架、API 模拟、全栈搭配开发方案、上线 DEMO 等。</span></p><p><span style=\"font-size: 14px;\"><br></span></p><p><span style=\"font-size: 14px;\">这些项目的链接我放在了文章末尾，大家可以先看看有哪些自己需要的资源。</span></p><p><br></p><p><a class=\"weapp_text_link\" data-miniprogram-appid=\"wxc4f8a61ef62e6e35\" data-miniprogram-path=\"pages/courseintro/courseintro?id=77\" data-miniprogram-nickname=\"极客时间\" href=\"\">如果想更系统地学习小程序开发，可以点这里</a></p><ul class=\" list-paddingleft-2\" style=\"list-style-type: square;\"><li><h2 style=\"margin-top: 24px;margin-bottom: 16px;padding-bottom: 0.3em;font-weight: 600;font-size: 1.5em;max-width: 100%;box-sizing: border-box;line-height: 1.25;border-bottom-width: 1px;border-bottom-style: solid;border-bottom-color: rgb(234, 236, 239);color: rgb(36, 41, 46);word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">UI 组件</span></h2></li></ul><ul class=\" list-paddingleft-2\" style=\"margin-left: 16px;margin-right: 16px;\"><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">weui-wxss ★1873 - 同微信原生视觉体验一致的基础样式库</span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">zanui-weapp ★794 - 好用易扩展的小程序 UI 库</span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">wx-charts ★449 - 微信小程序图表工具</span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">wux ★163 - 微信小程序自定义组件</span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">wemark ★161 - 微信小程序Markdown渲染库</span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">wxapp ★131 - 微信小程序组件</span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">wx-scrollable-tab-view ★116 - 小程序可滑动得tabview</span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">wxapp-img-loader ★101 - 微信小程序的图片预加载组件</span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">WeZRender ★96 - 微信小程序Canvas增强组件</span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">wetoast ★77 - 仿照微信小程序提供的showToast功能</span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">wxSearch ★70 - 微信小程序优雅的搜索框</span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">wx_calendar ★65 - 小程序日历</span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">wxapp-charts ★52 - 微信小程序图表charts组件</span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">chartjs-wechat-mini-app ★42 - chartjs微信小程序适配</span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">citySelect ★42 - 微信小程序城市选择器</span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">WeiXinProject ★36 - 列表的上拉刷新和上拉加载</span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">wepy-com-charts ★20 - 微信小程序wepyjs图表控件</span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">WechatLoading ★14 - 加载框布局LoadingView</span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">wxTabs ★13 - 微信小程序的多tab实现</span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">wxapp-lock ★12 - 微信小程序手势解锁</span></p></li></ul><ul class=\" list-paddingleft-2\" style=\"list-style-type: square;\"><li><h2 style=\"margin-top: 24px;margin-bottom: 16px;padding-bottom: 0.3em;font-weight: 600;font-size: 1.5em;max-width: 100%;box-sizing: border-box;line-height: 1.25;border-bottom-width: 1px;border-bottom-style: solid;border-bottom-color: rgb(234, 236, 239);color: rgb(36, 41, 46);word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">开发框架</span></h2></li></ul><ul class=\" list-paddingleft-2\" style=\"margin-left: 16px;margin-right: 16px;\"><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">wepy ★1325 - 小程序组件化开发框架</span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">Labrador ★785 - 微信小程序模块化开发框架</span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">wxapp-devFrame ★49 - 小程序基本的开发框架</span></p></li></ul><ul class=\" list-paddingleft-2\" style=\"list-style-type: square;\"><li><h2 style=\"margin-top: 24px;margin-bottom: 16px;padding-bottom: 0.3em;font-weight: 600;font-size: 1.5em;max-width: 100%;box-sizing: border-box;line-height: 1.25;border-bottom-width: 1px;border-bottom-style: solid;border-bottom-color: rgb(234, 236, 239);color: rgb(36, 41, 46);word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">实用库</span></h2></li></ul><ul class=\" list-paddingleft-2\" style=\"margin-left: 16px;margin-right: 16px;\"><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">wxParse ★1107 - 微信小程序富文本解析自定义组件</span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">wechat-weapp-redux ★189 - 微信小程序Redux绑定</span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">wxapp-socket-io ★123 - 微信小程序的SocketIO客户端</span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">wafer-client-sdk ★94 - 微信小程序客户端腾讯云增强 SDK</span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">WxNotificationCenter ★86 - 微信小程序通知广播模式类</span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">wilddog-weapp ★67 - 野狗微信小程序客户SDK</span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">wx-query ★62 - 微信小程序仿jQuery插件</span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">wxapp-google-analytics ★59 - 让微信小程序支持谷歌统计</span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">wxapp-jsapi ★49 - 百度地图微信小程序</span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">wxstream ★19 - 微信小程序的响应式编程类库封装</span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">upyun-wxapp-sdk ★16 - 又拍云微信小程序</span></p></li></ul><ul class=\" list-paddingleft-2\" style=\"list-style-type: square;\"><li><h2 style=\"margin-top: 24px;margin-bottom: 16px;padding-bottom: 0.3em;font-weight: 600;font-size: 1.5em;max-width: 100%;box-sizing: border-box;line-height: 1.25;border-bottom-width: 1px;border-bottom-style: solid;border-bottom-color: rgb(234, 236, 239);color: rgb(36, 41, 46);word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">开发工具</span></h2></li></ul><ul class=\" list-paddingleft-2\" style=\"margin-left: 16px;margin-right: 16px;\"><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">wept ★1097 - 实时微信小程序开发工具</span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">weapp-quick ★320 - “微信Web开发者”拷贝工具</span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">Wxapp.vim ★213 - 微信小程序开发 Vim 插件</span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">wechat_web_devtools ★179 - 微信开发者工具Linux版</span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">miniapps ★131 - 小程序项目脚手架工具</span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">Matchmaker ★107 - 专为微信小程序开发的插件</span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">wecos ★64 - 微信小程序 COS 瘦身解决方案</span></p></li></ul><ul class=\" list-paddingleft-2\" style=\"list-style-type: square;\"><li><h2 style=\"margin-top: 24px;margin-bottom: 16px;padding-bottom: 0.3em;font-weight: 600;font-size: 1.5em;max-width: 100%;box-sizing: border-box;line-height: 1.25;border-bottom-width: 1px;border-bottom-style: solid;border-bottom-color: rgb(234, 236, 239);color: rgb(36, 41, 46);word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">服务端</span></h2></li></ul><ul class=\" list-paddingleft-2\" style=\"margin-left: 16px;margin-right: 16px;\"><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">m-mall-admin ★137 - 创建REST API的样板应用</span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">NAMI ★79 - 专为小程序而生的服务端开发容器</span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">weapp-node-server-demo ★72 - Wafer 服务端 Demo</span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">Wafer 服务端 SDK - Java ★67 - 企业级微信小程序全栈方案</span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">xpmjs ★67 - 小程序云端增强 SDK</span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">weapp-php-server-sdk ★42 - 腾讯云微信小程序云端解决方案</span></p></li></ul><ul class=\" list-paddingleft-2\" style=\"list-style-type: square;\"><li><h2 style=\"margin-top: 24px;margin-bottom: 16px;padding-bottom: 0.3em;font-weight: 600;font-size: 1.5em;max-width: 100%;box-sizing: border-box;line-height: 1.25;border-bottom-width: 1px;border-bottom-style: solid;border-bottom-color: rgb(234, 236, 239);color: rgb(36, 41, 46);word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">Demo 部分</span></h2></li></ul><ul class=\" list-paddingleft-2\" style=\"margin-left: 16px;margin-right: 16px;\"><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">weapp-demo ★1086 - 仿豆瓣电影微信小程序</span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">wechat-weapp-mall ★750 - 微信小程序移动端商城</span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">wechat-weapp-gank ★604 - Gank微信小程序</span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">SmallAppForQQ ★561 - 微信小程序高仿QQ应用</span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">weapp-wechat-zhihu ★518 - 微信中的知乎</span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">m-mall ★328 - 实现一个移动端小商城</span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">仿芒果TV ★326 - 微信小程序demo</span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">weChatApp-Run ★265 - 跑步微信小程序Demo</span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">wechat-v2ex ★235 - 简单的v2ex微信小程序</span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">腾讯云微信小程序 ★234 - 一站式解决方案客户端示例</span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">weapp-weipiao ★234 - 微信小程序-微票</span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">wechat-weapp-taobao ★227 - 微信小程序demo 仿手机淘宝</span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">weapp-boilerplate ★220 - 一个为微信小程序开发准备的基础骨架</span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">wechat_mall_applet ★201 - 巴爷微信商城的简单版本</span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">wechat-weapp-movie ★182 - 微信小程序 - 电影推荐</span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">wechat-app-zhihudaily ★173 - 微信小程序-知乎日报</span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">wechat-app-music ★153 - 微信小程序： 音乐播放器</span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">fenda-mock ★153 - 使用微信小程序实现分答这款APP的基础功能</span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">wechat-weapp-mapdemo ★152 - 微信小程序开发demo-地图定位</span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">Artand ★123 - 微信小程序</span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">weapp-douban-film ★112 - 微信小程序 - 豆瓣电影</span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">wepy-wechat-demo ★105 - wepy仿微信聊天界面</span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 15px;box-sizing: border-box !important;word-wrap: break-word !important;\">weapp-one ★104 - 仿 「ONE · 一个」 的微信小程序</span></p></li></ul><hr style=\"max-width: 100%;color: rgb(62, 62, 62);font-size: 16px;white-space: normal;box-sizing: border-box !important;word-wrap: break-word !important;\"><p style=\"margin-right: 1em;margin-left: 1em;max-width: 100%;min-height: 1em;color: rgb(62, 62, 62);font-size: 16px;white-space: normal;widows: 1;background-color: rgb(255, 255, 255);text-align: justify;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;color: rgb(89, 89, 89);letter-spacing: 2px;box-sizing: border-box !important;word-wrap: break-word !important;\"></span><br style=\"max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;\"></p><p style=\"white-space: normal;\"><span style=\"font-size: 14px;color: rgb(0, 0, 0);\">来自公众号：前端你别闹</span></p><p style=\"white-space: normal;\"><span style=\"font-size: 14px;color: rgb(0, 0, 0);\">资料 GitHub 链接：https://github.com/xiaobei666/weixin-xiaochengxu666-info</span></p><p style=\"white-space: normal;\"><span style=\"color: rgb(136, 136, 136);font-size: 12px;\"><br></span></p><p><strong><span style=\"font-size: 14px;\">除了以上免费资料，极客时间也推出了《9小时搞定微信小程序开发》<strong style=\"white-space: normal;\"><span style=\"font-size: 14px;\">课程</span></strong>。目前已经更新了 34 讲，点击下方图片可免费观看 10 讲。</span></strong></p><section data-mpa-powered-by=\"yiban.io\" style=\"max-width: 100%;color: rgb(63, 63, 63);font-size: 14px;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: center;box-sizing: border-box !important;word-wrap: break-word !important;\"><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><mp-miniprogram class=\"miniprogram_element\" data-miniprogram-appid=\"wxc4f8a61ef62e6e35\" data-miniprogram-path=\"pages/courseintro/courseintro?id=77\" data-miniprogram-nickname=\"极客时间\" data-miniprogram-avatar=\"http://mmbiz.qpic.cn/mmbiz_png/Fia4rx9McbESHicIAazVcdZz3mwudc7xIpuTvLE19OSjrdEaLPS2FmgLodsUzsu6pz93Qz1PjzqxjicibiayhpxNy5w/0?wx_fmt=png\" data-miniprogram-title=\"点击下方图片，开始免费试看\" data-miniprogram-imageurl=\"http://mmbiz.qpic.cn/mmbiz_jpg/YriaiaJPb26VOfGNlapibsa0t33k7Zchaqclw7icict6jUukKDgsWJCvkuFfebSwia0DGRGYmR5wu7HXoiap3uicCUlsKw/0?wx_fmt=jpeg\"></mp-miniprogram></p></section><p style=\"max-width: 100%;min-height: 1em;color: rgb(63, 63, 63);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 14px;text-align: left;white-space: normal;box-sizing: border-box !important;word-wrap: break-word !important;\">点击阅读原文，了解课程详情。<br></p>', '最近，微信方面为满足小程序开发者的变现需求，启动了小程序广告组件的内测。  \n\n  \n\n小程序淘金之路指日可待，因此，这里特地整理了一份 GitHub 上面的小程序开发工具。\n\n  \n\n其中有基本的小程序 UI、开发框架、实用功能库、开发工具。\n\n  \n\n也有服务端开发框架、API 模拟、全栈搭配开发方案、上线 DEMO 等。\n\n  \n\n这些项目的链接我放在了文章末尾，大家可以先看看有哪些自己需要的资源。\n\n  \n\n如果想更系统地学习小程序开发，可以点这里\n\n*   UI 组件\n    -----\n    \n\n*   weui-wxss ★1873 - 同微信原生视觉体验一致的基础样式库\n    \n*   zanui-weapp ★794 - 好用易扩展的小程序 UI 库\n    \n*   wx-charts ★449 - 微信小程序图表工具\n    \n*   wux ★163 - 微信小程序自定义组件\n    \n*   wemark ★161 - 微信小程序Markdown渲染库\n    \n*   wxapp ★131 - 微信小程序组件\n    \n*   wx-scrollable-tab-view ★116 - 小程序可滑动得tabview\n    \n*   wxapp-img-loader ★101 - 微信小程序的图片预加载组件\n    \n*   WeZRender ★96 - 微信小程序Canvas增强组件\n    \n*   wetoast ★77 - 仿照微信小程序提供的showToast功能\n    \n*   wxSearch ★70 - 微信小程序优雅的搜索框\n    \n*   wx_calendar ★65 - 小程序日历\n    \n*   wxapp-charts ★52 - 微信小程序图表charts组件\n    \n*   chartjs-wechat-mini-app ★42 - chartjs微信小程序适配\n    \n*   citySelect ★42 - 微信小程序城市选择器\n    \n*   WeiXinProject ★36 - 列表的上拉刷新和上拉加载\n    \n*   wepy-com-charts ★20 - 微信小程序wepyjs图表控件\n    \n*   WechatLoading ★14 - 加载框布局LoadingView\n    \n*   wxTabs ★13 - 微信小程序的多tab实现\n    \n*   wxapp-lock ★12 - 微信小程序手势解锁\n    \n\n*   开发框架\n    ----\n    \n\n*   wepy ★1325 - 小程序组件化开发框架\n    \n*   Labrador ★785 - 微信小程序模块化开发框架\n    \n*   wxapp-devFrame ★49 - 小程序基本的开发框架\n    \n\n*   实用库\n    ---\n    \n\n*   wxParse ★1107 - 微信小程序富文本解析自定义组件\n    \n*   wechat-weapp-redux ★189 - 微信小程序Redux绑定\n    \n*   wxapp-socket-io ★123 - 微信小程序的SocketIO客户端\n    \n*   wafer-client-sdk ★94 - 微信小程序客户端腾讯云增强 SDK\n    \n*   WxNotificationCenter ★86 - 微信小程序通知广播模式类\n    \n*   wilddog-weapp ★67 - 野狗微信小程序客户SDK\n    \n*   wx-query ★62 - 微信小程序仿jQuery插件\n    \n*   wxapp-google-analytics ★59 - 让微信小程序支持谷歌统计\n    \n*   wxapp-jsapi ★49 - 百度地图微信小程序\n    \n*   wxstream ★19 - 微信小程序的响应式编程类库封装\n    \n*   upyun-wxapp-sdk ★16 - 又拍云微信小程序\n    \n\n*   开发工具\n    ----\n    \n\n*   wept ★1097 - 实时微信小程序开发工具\n    \n*   weapp-quick ★320 - “微信Web开发者”拷贝工具\n    \n*   Wxapp.vim ★213 - 微信小程序开发 Vim 插件\n    \n*   wechat\\_web\\_devtools ★179 - 微信开发者工具Linux版\n    \n*   miniapps ★131 - 小程序项目脚手架工具\n    \n*   Matchmaker ★107 - 专为微信小程序开发的插件\n    \n*   wecos ★64 - 微信小程序 COS 瘦身解决方案\n    \n\n*   服务端\n    ---\n    \n\n*   m-mall-admin ★137 - 创建REST API的样板应用\n    \n*   NAMI ★79 - 专为小程序而生的服务端开发容器\n    \n*   weapp-node-server-demo ★72 - Wafer 服务端 Demo\n    \n*   Wafer 服务端 SDK - Java ★67 - 企业级微信小程序全栈方案\n    \n*   xpmjs ★67 - 小程序云端增强 SDK\n    \n*   weapp-php-server-sdk ★42 - 腾讯云微信小程序云端解决方案\n    \n\n*   Demo 部分\n    -------\n    \n\n*   weapp-demo ★1086 - 仿豆瓣电影微信小程序\n    \n*   wechat-weapp-mall ★750 - 微信小程序移动端商城\n    \n*   wechat-weapp-gank ★604 - Gank微信小程序\n    \n*   SmallAppForQQ ★561 - 微信小程序高仿QQ应用\n    \n*   weapp-wechat-zhihu ★518 - 微信中的知乎\n    \n*   m-mall ★328 - 实现一个移动端小商城\n    \n*   仿芒果TV ★326 - 微信小程序demo\n    \n*   weChatApp-Run ★265 - 跑步微信小程序Demo\n    \n*   wechat-v2ex ★235 - 简单的v2ex微信小程序\n    \n*   腾讯云微信小程序 ★234 - 一站式解决方案客户端示例\n    \n*   weapp-weipiao ★234 - 微信小程序-微票\n    \n*   wechat-weapp-taobao ★227 - 微信小程序demo 仿手机淘宝\n    \n*   weapp-boilerplate ★220 - 一个为微信小程序开发准备的基础骨架\n    \n*   wechat\\_mall\\_applet ★201 - 巴爷微信商城的简单版本\n    \n*   wechat-weapp-movie ★182 - 微信小程序 - 电影推荐\n    \n*   wechat-app-zhihudaily ★173 - 微信小程序-知乎日报\n    \n*   wechat-app-music ★153 - 微信小程序： 音乐播放器\n    \n*   fenda-mock ★153 - 使用微信小程序实现分答这款APP的基础功能\n    \n*   wechat-weapp-mapdemo ★152 - 微信小程序开发demo-地图定位\n    \n*   Artand ★123 - 微信小程序\n    \n*   weapp-douban-film ★112 - 微信小程序 - 豆瓣电影\n    \n*   wepy-wechat-demo ★105 - wepy仿微信聊天界面\n    \n*   weapp-one ★104 - 仿 「ONE · 一个」 的微信小程序\n    \n\n* * *\n\n  \n\n来自公众号：前端你别闹\n\n资料 GitHub 链接：https://github.com/xiaobei666/weixin-xiaochengxu666-info\n\n  \n\n**除了以上免费资料，极客时间也推出了《9小时搞定微信小程序开发》**课程**。目前已经更新了 34 讲，点击下方图片可免费观看 10 讲。**\n\n点击阅读原文，了解课程详情。', 0, 1, 0);
INSERT INTO `post` (`id`, `createAt`, `updateAt`, `title`, `description`, `thumb`, `url`, `html`, `markdown`, `views`, `status`, `push`) VALUES
(21, '2018-04-23 11:01:41.709367', '2018-04-23 11:01:41.709367', '如何解构单体前端应用——前端应用的微服务式拆分', '刷新页面？路由拆分？No，动态加载组件。本文分为以下四部分：前端微服务化思想介绍微前端的设计理念实战微前端架构设计基于Mooa进行前端微服务化前端微服化对于前端微服化来说，有这么一些方案：WebComponent显然可以一个很优秀的基础架构。然而，我们并不可能去大量地复写已有的应用。iFrame。你是说真的吗？另外一个微前端框架Single-SPA，显然是一个更好的方式。然而，它并非ProductionReady。通过路由来切分应用，而这个跳转会影响用户体验。等等。因此，当我们考虑前端微服务化的时候，我们', 'https://mmbiz.qpic.cn/mmbiz_jpg/aG1vFUMgRBDebzlNjxUzrEVx67bNGwAibAbxDrK2DDtJQ4Ap8tkZsAKv4RKeb2Y1R1e3MFha9sJJYeanSALq3yQ/640?wx_fmt=jpeg', 'https://mp.weixin.qq.com/s/oAld7YSPYnj8som1TdXdcA', '<blockquote style=\"box-sizing: inherit;padding: 1rem 1.5rem;margin-bottom: 16px;color: rgb(129, 145, 152);border-left-width: 0.3rem;border-left-color: rgb(26, 188, 156);\"><p style=\"box-sizing: inherit;\">刷新页面？路由拆分？No，动态加载组件。</p></blockquote><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\">本文分为以下四部分：</p><ul style=\"list-style-type: circle;\" class=\" list-paddingleft-2\"><li><p><strong>前端微服务化思想介绍</strong></p></li><li><p><strong>微前端的设计理念</strong></p></li><li><p><strong>实战微前端架构设计</strong></p></li><li><p><strong>基于 Mooa 进行前端微服务化</strong></p></li></ul><h2 style=\"box-sizing: inherit;letter-spacing: -0.1rem;margin-bottom: 3rem;margin-top: 3rem;font-size: 28px;line-height: 1.25;color: rgb(56, 68, 82);\">前端微服化</h2><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\">对于前端微服化来说，有这么一些方案：</p><ul style=\"list-style-type: circle;\" class=\" list-paddingleft-2\"><li><p>Web Component 显然可以一个很优秀的基础架构。然而，我们并不可能去大量地复写已有的应用。</p></li><li><p>iFrame。你是说真的吗？</p></li><li><p>另外一个微前端框架 Single-SPA，显然是一个更好的方式。然而，它并非 Production Ready。</p></li><li><p>通过路由来切分应用，而这个跳转会影响用户体验。</p></li><li><p>等等。</p></li></ul><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\">因此，当我们考虑前端微服务化的时候，我们希望：</p><ul style=\"list-style-type: circle;\" class=\" list-paddingleft-2\"><li><p><strong>独立部署</strong></p></li><li><p><strong>独立开发</strong></p></li><li><p><strong>技术无关</strong></p></li><li><p><strong>不影响用户体验</strong></p></li></ul><h3 style=\"box-sizing: inherit;letter-spacing: -0.1rem;margin-bottom: 3rem;margin-top: 3rem;font-size: 24px;line-height: 1.3;color: rgb(56, 68, 82);\">独立开发</h3><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\">在过去的几星期里，我花费了大量的时间在学习 Single-SPA 的代码。但是，我发现它在开发和部署上真的太麻烦了，完全达不到独立部署地标准。按 Single-SPA 的设计，我需要在入口文件中声名我的应用，然后才能去构建：</p><pre class=\"prettyprint linenums prettyprinted\" style=\"box-sizing: inherit;overflow-x: auto;overflow-y: hidden;font-family: Consolas, Menlo, Courier, monospace;font-size: 10px;background-color: rgb(238, 241, 245);margin-bottom: 16px;border-top: none;border-right: none;border-bottom: none;padding: 2px;color: rgb(56, 68, 82);letter-spacing: 0.16px;line-height: 12px;border-left: 0.3rem solid rgb(26, 188, 156) !important;\"><ol class=\"linenums list-paddingleft-2\" style=\"\"><li><p><code style=\"box-sizing: inherit;font-family: monospace, monospace;background: transparent;border-radius: 0.4rem;white-space: nowrap;display: inline;max-width: initial;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;\"><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">declareChildApplication</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">(</span><span class=\"str\" style=\"box-sizing: inherit;color: rgb(113, 140, 0);\">\'inferno\'</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">,</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">()</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">=></span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"kwd\" style=\"box-sizing: inherit;color: rgb(137, 89, 168);\">import</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">(</span><span class=\"str\" style=\"box-sizing: inherit;color: rgb(113, 140, 0);\">\'src/inferno/inferno.app.js\'</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">),</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> pathPrefix</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">(</span><span class=\"str\" style=\"box-sizing: inherit;color: rgb(113, 140, 0);\">\'/inferno\'</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">));</span></code></p></li></ol></pre><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\">同时，在我的应用里，我还需要去指定我的生命周期。这就意味着，当我开发了一个新的应用时，必须更新两份代码：主工程和应用。这时我们还极可能在同一个源码里工作。</p><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\">当出现多个团队的时候，在同一份源码里工作，显然变得相当的不可靠——比如说，对方团队使用的是 Tab，而我们使用的是 2 个空格，隔壁的老王用的是 4 个空格。</p><h3 style=\"box-sizing: inherit;letter-spacing: -0.1rem;margin-bottom: 3rem;margin-top: 3rem;font-size: 24px;line-height: 1.3;color: rgb(56, 68, 82);\">独立部署</h3><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\">一个单体的前端应用最大的问题是，构建出来的 js、css 文件相当的巨大。而微前端则意味着，这个文件被独立地拆分成多个文件，它们便可以独立去部署应用。</p><h3 style=\"box-sizing: inherit;letter-spacing: -0.1rem;margin-bottom: 3rem;margin-top: 3rem;font-size: 24px;line-height: 1.3;color: rgb(56, 68, 82);\">我们真的需要技术无关吗？</h3><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\">等等，我们是否真的需要<strong style=\"box-sizing: inherit;\">技术无关</strong>？如果我们不需要技术无关的话，微前端问题就很容易解决了。</p><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\">事实上，对于大部分的公司和团队来说，技术无关只是一个无关痛痒的话术。当一家公司的几个创始人使用了 Java，那么极有可能在未来的选型上继续使用 Java。除非，一些额外的服务来使用 Python 来实现人工智能。因此，在大部分的情况下，仍然是技术栈唯一。</p><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\">对于前端项目来说，更是如此：一个部门里基本上只会选用一个框架。</p><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\">于是，我们选择了 Angular。</p><h3 style=\"box-sizing: inherit;letter-spacing: -0.1rem;margin-bottom: 3rem;margin-top: 3rem;font-size: 24px;line-height: 1.3;color: rgb(56, 68, 82);\">不影响用户体验</h3><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\">使用路由跳转来进行前端微服务化，是一种很简单、高效的切分方式。然而，路由跳转地过程中，会有一个白屏的过程。在这个过程中，跳转前的应用和将要跳转的应用，都失去了对页面的控制权。如果这个应用出了问题，那么用户就会一脸懵逼。</p><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\">理想的情况下，它应该可以被控制。</p><h2 style=\"box-sizing: inherit;letter-spacing: -0.1rem;margin-bottom: 3rem;margin-top: 3rem;font-size: 28px;line-height: 1.25;color: rgb(56, 68, 82);\">微前端的设计理念</h2><h3 style=\"box-sizing: inherit;letter-spacing: -0.1rem;margin-bottom: 3rem;margin-top: 3rem;font-size: 24px;line-height: 1.3;color: rgb(56, 68, 82);\">设计理念一：中心化路由</h3><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\">互联网本质是去中心化的吗？不，DNS 决定了它不是。TAB，决定了它不是。</p><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\">微服务从本质上来说，它应该是去中心化的。但是，它又不能是完全的去中心化。对于一个微服务来说，它需要一个<strong style=\"box-sizing: inherit;\">服务注册中心</strong>：</p><blockquote style=\"box-sizing: inherit;padding: 1rem 1.5rem;color: rgb(129, 145, 152);border-left-width: 0.3rem;border-left-color: rgb(26, 188, 156);margin-bottom: 16px;\"><p style=\"box-sizing: inherit;\">服务提供方要注册通告服务地址，服务的调用方要能发现目标服务。</p></blockquote><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\">对于一个前端应用来说，这个东西就是路由。</p><p><img class=\"\" data-backh=\"200\" data-backw=\"558\" data-copyright=\"0\" data-ratio=\"0.35833333333333334\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/aG1vFUMgRBDebzlNjxUzrEVx67bNGwAibAbxDrK2DDtJQ4Ap8tkZsAKv4RKeb2Y1R1e3MFha9sJJYeanSALq3yQ/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"1200\" style=\"width: 100%;height: auto;\"></p><figure style=\"box-sizing: inherit;margin-bottom: 16px;color: rgb(56, 68, 82);\"><figcaption style=\"box-sizing: inherit;text-align: center;font-size: 12px;padding: 8px;color: rgb(204, 204, 204);\">Menu</figcaption><br></figure><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\">从页面上来说，只有我们在网页上添加一个菜单链接，用户才能知道某个页面是可以使用的。</p><p><img class=\"\" data-copyright=\"0\" data-ratio=\"0.6666666666666666\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/aG1vFUMgRBDebzlNjxUzrEVx67bNGwAibpicQu1tqxkjfxN1ErlHvND29YTouqtUgn3q0rdxX1uoqvOTUooBnibFA/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"768\" style=\"\"></p><figure style=\"box-sizing: inherit;margin-bottom: 16px;color: rgb(56, 68, 82);\"><figcaption style=\"box-sizing: inherit;text-align: center;font-size: 12px;padding: 8px;color: rgb(204, 204, 204);\">404</figcaption><br></figure><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\">而从代码上来说，那就是我们需要有一个地方来管理我们的应用：**发现存在哪些应用，哪个应用使用哪个路由。</p><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\"><strong style=\"box-sizing: inherit;\">管理好我们的路由，实际上就是管理好我们的应用</strong>。</p><h3 style=\"box-sizing: inherit;letter-spacing: -0.1rem;margin-bottom: 3rem;margin-top: 3rem;font-size: 24px;line-height: 1.3;color: rgb(56, 68, 82);\">设计理念二：标识化应用</h3><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\">在设计一个微前端框架的时候，为<strong style=\"box-sizing: inherit;\">每个项目取一个名字的</strong>问题纠结了我很久——怎么去规范化这个东西。直到，我再一次想到了康威定律：</p><blockquote style=\"box-sizing: inherit;padding: 1rem 1.5rem;color: rgb(129, 145, 152);border-left-width: 0.3rem;border-left-color: rgb(26, 188, 156);margin-bottom: 16px;\"><p style=\"box-sizing: inherit;\">系统设计(产品结构等同组织形式，每个设计系统的组织，其产生的设计等同于组织之间的沟通结构。</p></blockquote><p><img class=\"\" data-copyright=\"0\" data-ratio=\"0.9742857142857143\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/aG1vFUMgRBDebzlNjxUzrEVx67bNGwAibMia0LTbjiaHAqhoPPTF6N4xCbZibwWhWXUicqfdmAImNImvjCjn5iam1Lkg/640?wx_fmt=png\" data-type=\"png\" data-w=\"700\" style=\"\"></p><figure style=\"box-sizing: inherit;margin-bottom: 16px;color: rgb(56, 68, 82);\"><figcaption style=\"box-sizing: inherit;text-align: center;font-size: 12px;padding: 8px;color: rgb(204, 204, 204);\">康威定律</figcaption><br></figure><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\">换句人话说，就是同一个组织下，不可能有两个项目的名称是一样的。</p><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\">所以，这个问题很简单就解决了。</p><h3 style=\"box-sizing: inherit;letter-spacing: -0.1rem;margin-bottom: 3rem;margin-top: 3rem;font-size: 24px;line-height: 1.3;color: rgb(56, 68, 82);\">设计理念三：生命周期</h3><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\">Single-SPA 设计了一个基本的生命周期（虽然它没有统一管理），它包含了五种状态：</p><ul style=\"list-style-type: circle;\" class=\" list-paddingleft-2\"><li><p><strong>load，决定加载哪个应用，并绑定生命周期</strong></p></li><li><p><strong>bootstrap，获取静态资源</strong></p></li><li><p><strong>mount，安装应用，如创建 DOM 节点</strong></p></li><li><p><strong>unload，删除应用的生命周期</strong></p></li><li><p><strong>unmount，卸载应用，如删除 DOM 节点</strong></p></li></ul><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\">于是，我在设计上基本上沿用了这个生命周期。显然，诸如 load 之类对于我的设计是多余的。</p><h3 style=\"box-sizing: inherit;letter-spacing: -0.1rem;margin-bottom: 3rem;margin-top: 3rem;font-size: 24px;line-height: 1.3;color: rgb(56, 68, 82);\">设计理念四：独立部署与配置自动化</h3><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\">从某种意义上来说，整个每系统是围绕着应用配置进行的。如果应用的配置能自动化，那么整个系统就自动化。</p><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\">当我们只开发一个新的组件，那么我们只需要更新我们的组件，并更新配置即可。而这个配置本身也应该是能自动生成的。</p><h2 style=\"box-sizing: inherit;letter-spacing: -0.1rem;margin-bottom: 3rem;margin-top: 3rem;font-size: 28px;line-height: 1.25;color: rgb(56, 68, 82);\">实战微前端架构设计</h2><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\">基于以上的前提，系统的工作流程如下所示：</p><p><img class=\"\" data-copyright=\"0\" data-ratio=\"0.99375\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/aG1vFUMgRBDebzlNjxUzrEVx67bNGwAibicfBRibK468v1fmcJ1YJ1OOqoRBDd7QZZp32IVwJ9dHrbVlrVsFic4F3w/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"800\" style=\"\"></p><figure style=\"box-sizing: inherit;margin-bottom: 16px;color: rgb(56, 68, 82);\"><figcaption style=\"box-sizing: inherit;text-align: center;font-size: 12px;padding: 8px;color: rgb(204, 204, 204);\">系统工作流</figcaption></figure><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\">整体的工程流程如下所示：</p><ol style=\"\" class=\" list-paddingleft-2\"><li><p>主工程在运行的时候，会去服务器获取最新的应用配置。</p></li><li><p>主工程在获取到配置后，将一一创建应用，并为应用绑定生命周期。</p></li><li><p>当主工程监测到路由变化的时候，将寻找是否有对应的路由匹配到应用。</p></li><li><p>当匹配对对应应用时，则加载相应的应用。</p></li></ol><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\">故而，其对应的架构如下图所示：</p><p><img class=\"\" data-backh=\"315\" data-backw=\"558\" data-copyright=\"0\" data-ratio=\"0.5651750972762646\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/aG1vFUMgRBDebzlNjxUzrEVx67bNGwAibfRL4pJL8N1qEoiaUcEncgicEFiaWHsicXvzaLCAIygnLhjibKoLYcDsOkww/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"1028\" style=\"width: 100%;height: auto;\"></p><figure style=\"box-sizing: inherit;margin-bottom: 16px;color: rgb(56, 68, 82);\"><figcaption style=\"box-sizing: inherit;text-align: center;font-size: 12px;padding: 8px;color: rgb(204, 204, 204);\">Architecture</figcaption></figure><h3 style=\"box-sizing: inherit;letter-spacing: -0.1rem;margin-bottom: 3rem;margin-top: 3rem;font-size: 24px;line-height: 1.3;color: rgb(56, 68, 82);\">独立部署与配置自动化</h3><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\">我们做的部署策略如下：我们的应用使用的配置文件叫 <code class=\"prettyprint code-in-text prettyprinted\" style=\"box-sizing: inherit;font-family: Consolas, Menlo, Courier, monospace;font-size: 12px;background: rgb(238, 241, 245);border-radius: 2px;margin-right: 0.2rem;margin-left: 0.2rem;padding: 2px 7px;white-space: nowrap;line-height: 18px;border-width: 0px 0px 0px 0.3rem !important;border-top-style: initial !important;border-right-style: initial !important;border-bottom-style: initial !important;border-left-style: solid !important;border-top-color: initial !important;border-right-color: initial !important;border-bottom-color: initial !important;border-left-color: rgb(26, 188, 156) !important;\"><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(23, 158, 214);\">apps</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(23, 158, 214);\">.</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(23, 158, 214);\">json</span></code>，由主工程去获取这个配置。每次部署的时候，我们只需要将 <code class=\"prettyprint code-in-text prettyprinted\" style=\"box-sizing: inherit;font-family: Consolas, Menlo, Courier, monospace;font-size: 12px;background: rgb(238, 241, 245);border-radius: 2px;margin-right: 0.2rem;margin-left: 0.2rem;padding: 2px 7px;white-space: nowrap;line-height: 18px;border-width: 0px 0px 0px 0.3rem !important;border-top-style: initial !important;border-right-style: initial !important;border-bottom-style: initial !important;border-left-style: solid !important;border-top-color: initial !important;border-right-color: initial !important;border-bottom-color: initial !important;border-left-color: rgb(26, 188, 156) !important;\"><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(23, 158, 214);\">apps</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(23, 158, 214);\">.</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(23, 158, 214);\">json</span></code> 指向最新的配置文件即可。配置的文件类如下所示：</p><ol style=\"\" class=\" list-paddingleft-2\"><li><p>96a7907e5488b6bb.json</p></li><li><p>6ff3bfaaa2cd39ea.json</p></li><li><p>dcd074685c97ab9b.json</p></li></ol><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\">一个应用的配置如下所示：</p><pre class=\"prettyprint linenums prettyprinted\" style=\"box-sizing: inherit;overflow-x: auto;overflow-y: hidden;font-family: Consolas, Menlo, Courier, monospace;font-size: 10px;background-color: rgb(238, 241, 245);margin-bottom: 16px;border-top: none;border-right: none;border-bottom: none;padding: 2px;color: rgb(56, 68, 82);letter-spacing: 0.16px;line-height: 12px;border-left: 0.3rem solid rgb(26, 188, 156) !important;\"><ol class=\"linenums list-paddingleft-2\" style=\"\"><li><p><code class=\"javascript language-javascript\" style=\"box-sizing: inherit;font-family: monospace, monospace;background: transparent;border-radius: 0.4rem;white-space: nowrap;display: inline;max-width: initial;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;\"><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">{</span></code></p></li><li><p><code class=\"javascript language-javascript\" style=\"box-sizing: inherit;font-family: monospace, monospace;background: transparent;border-radius: 0.4rem;white-space: nowrap;display: inline;max-width: initial;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;\"><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"str\" style=\"box-sizing: inherit;color: rgb(113, 140, 0);\">\"name\"</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">:</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"str\" style=\"box-sizing: inherit;color: rgb(113, 140, 0);\">\"help\"</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">,</span></code></p></li><li><p><code class=\"javascript language-javascript\" style=\"box-sizing: inherit;font-family: monospace, monospace;background: transparent;border-radius: 0.4rem;white-space: nowrap;display: inline;max-width: initial;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;\"><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"str\" style=\"box-sizing: inherit;color: rgb(113, 140, 0);\">\"selector\"</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">:</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"str\" style=\"box-sizing: inherit;color: rgb(113, 140, 0);\">\"help-root\"</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">,</span></code></p></li><li><p><code class=\"javascript language-javascript\" style=\"box-sizing: inherit;font-family: monospace, monospace;background: transparent;border-radius: 0.4rem;white-space: nowrap;display: inline;max-width: initial;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;\"><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"str\" style=\"box-sizing: inherit;color: rgb(113, 140, 0);\">\"baseScriptUrl\"</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">:</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"str\" style=\"box-sizing: inherit;color: rgb(113, 140, 0);\">\"/assets/help\"</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">,</span></code></p></li><li><p><code class=\"javascript language-javascript\" style=\"box-sizing: inherit;font-family: monospace, monospace;background: transparent;border-radius: 0.4rem;white-space: nowrap;display: inline;max-width: initial;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;\"><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"str\" style=\"box-sizing: inherit;color: rgb(113, 140, 0);\">\"styles\"</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">:</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">[</span></code></p></li><li><p><code class=\"javascript language-javascript\" style=\"box-sizing: inherit;font-family: monospace, monospace;background: transparent;border-radius: 0.4rem;white-space: nowrap;display: inline;max-width: initial;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;\"><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"str\" style=\"box-sizing: inherit;color: rgb(113, 140, 0);\">\"styles.bundle.css\"</span></code></p></li><li><p><code class=\"javascript language-javascript\" style=\"box-sizing: inherit;font-family: monospace, monospace;background: transparent;border-radius: 0.4rem;white-space: nowrap;display: inline;max-width: initial;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;\"><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">],</span></code></p></li><li><p><code class=\"javascript language-javascript\" style=\"box-sizing: inherit;font-family: monospace, monospace;background: transparent;border-radius: 0.4rem;white-space: nowrap;display: inline;max-width: initial;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;\"><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"str\" style=\"box-sizing: inherit;color: rgb(113, 140, 0);\">\"prefix\"</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">:</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"str\" style=\"box-sizing: inherit;color: rgb(113, 140, 0);\">\"help\"</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">,</span></code></p></li><li><p><code class=\"javascript language-javascript\" style=\"box-sizing: inherit;font-family: monospace, monospace;background: transparent;border-radius: 0.4rem;white-space: nowrap;display: inline;max-width: initial;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;\"><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"str\" style=\"box-sizing: inherit;color: rgb(113, 140, 0);\">\"scripts\"</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">:</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">[</span></code></p></li><li><p><code class=\"javascript language-javascript\" style=\"box-sizing: inherit;font-family: monospace, monospace;background: transparent;border-radius: 0.4rem;white-space: nowrap;display: inline;max-width: initial;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;\"><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"str\" style=\"box-sizing: inherit;color: rgb(113, 140, 0);\">\"inline.bundle.js\"</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">,</span></code></p></li><li><p><code class=\"javascript language-javascript\" style=\"box-sizing: inherit;font-family: monospace, monospace;background: transparent;border-radius: 0.4rem;white-space: nowrap;display: inline;max-width: initial;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;\"><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"str\" style=\"box-sizing: inherit;color: rgb(113, 140, 0);\">\"polyfills.bundle.js\"</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">,</span></code></p></li><li><p><code class=\"javascript language-javascript\" style=\"box-sizing: inherit;font-family: monospace, monospace;background: transparent;border-radius: 0.4rem;white-space: nowrap;display: inline;max-width: initial;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;\"><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"str\" style=\"box-sizing: inherit;color: rgb(113, 140, 0);\">\"main.bundle.js\"</span></code></p></li><li><p><code class=\"javascript language-javascript\" style=\"box-sizing: inherit;font-family: monospace, monospace;background: transparent;border-radius: 0.4rem;white-space: nowrap;display: inline;max-width: initial;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;\"><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">]</span></code></p></li><li><p><code class=\"javascript language-javascript\" style=\"box-sizing: inherit;font-family: monospace, monospace;background: transparent;border-radius: 0.4rem;white-space: nowrap;display: inline;max-width: initial;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;\"><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">}</span></code></p></li></ol></pre><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\">这里的 <code class=\"prettyprint code-in-text prettyprinted\" style=\"box-sizing: inherit;font-family: Consolas, Menlo, Courier, monospace;font-size: 12px;background: rgb(238, 241, 245);border-radius: 2px;margin-right: 0.2rem;margin-left: 0.2rem;padding: 2px 7px;white-space: nowrap;line-height: 18px;border-width: 0px 0px 0px 0.3rem !important;border-top-style: initial !important;border-right-style: initial !important;border-bottom-style: initial !important;border-left-style: solid !important;border-top-color: initial !important;border-right-color: initial !important;border-bottom-color: initial !important;border-left-color: rgb(26, 188, 156) !important;\"><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(23, 158, 214);\">selector</span></code> 对应于应用所需要的 DOM 节点，prefix 则是用于 URL 路由上。这些都是自动从 <code class=\"prettyprint code-in-text prettyprinted\" style=\"box-sizing: inherit;font-family: Consolas, Menlo, Courier, monospace;font-size: 12px;background: rgb(238, 241, 245);border-radius: 2px;margin-right: 0.2rem;margin-left: 0.2rem;padding: 2px 7px;white-space: nowrap;line-height: 18px;border-width: 0px 0px 0px 0.3rem !important;border-top-style: initial !important;border-right-style: initial !important;border-bottom-style: initial !important;border-left-style: solid !important;border-top-color: initial !important;border-right-color: initial !important;border-bottom-color: initial !important;border-left-color: rgb(26, 188, 156) !important;\"><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(23, 158, 214);\">index</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(23, 158, 214);\">.</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(23, 158, 214);\">html</span></code> 文件和 <code class=\"prettyprint code-in-text prettyprinted\" style=\"box-sizing: inherit;font-family: Consolas, Menlo, Courier, monospace;font-size: 12px;background: rgb(238, 241, 245);border-radius: 2px;margin-right: 0.2rem;margin-left: 0.2rem;padding: 2px 7px;white-space: nowrap;line-height: 18px;border-width: 0px 0px 0px 0.3rem !important;border-top-style: initial !important;border-right-style: initial !important;border-bottom-style: initial !important;border-left-style: solid !important;border-top-color: initial !important;border-right-color: initial !important;border-bottom-color: initial !important;border-left-color: rgb(26, 188, 156) !important;\"><span class=\"kwd\" style=\"box-sizing: inherit;color: rgb(23, 158, 214);\">package</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(23, 158, 214);\">.</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(23, 158, 214);\">json</span></code> 中获取生成的。</p><h3 style=\"box-sizing: inherit;letter-spacing: -0.1rem;margin-bottom: 3rem;margin-top: 3rem;font-size: 24px;line-height: 1.3;color: rgb(56, 68, 82);\">应用间路由——事件</h3><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\">由于现在的应用变成了两部分：主工程和应用部分。就会出现一个问题：<strong style=\"box-sizing: inherit;\">只有一个工程能捕获路由变化</strong>。当由主工程去改变应用的二级路由时，就无法有效地传达到子应用。在这时，只能通过事件的方式去通知子应用，子应用也需要监测是否是当前应用的路由。</p><pre class=\"prettyprint linenums prettyprinted\" style=\"box-sizing: inherit;overflow-x: auto;overflow-y: hidden;font-family: Consolas, Menlo, Courier, monospace;font-size: 10px;background-color: rgb(238, 241, 245);margin-bottom: 16px;border-top: none;border-right: none;border-bottom: none;padding: 2px;color: rgb(56, 68, 82);letter-spacing: 0.16px;line-height: 12px;border-left: 0.3rem solid rgb(26, 188, 156) !important;\"><ol class=\"linenums list-paddingleft-2\" style=\"\"><li><p><code class=\"javascript language-javascript\" style=\"box-sizing: inherit;font-family: monospace, monospace;background: transparent;border-radius: 0.4rem;white-space: nowrap;display: inline;max-width: initial;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;\"><span class=\"kwd\" style=\"box-sizing: inherit;color: rgb(137, 89, 168);\">if</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">(</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">event</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">.</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">detail</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">.</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">app</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">.</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">name </span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">===</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> appName</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">)</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">{</span></code></p></li><li><p><code class=\"javascript language-javascript\" style=\"box-sizing: inherit;font-family: monospace, monospace;background: transparent;border-radius: 0.4rem;white-space: nowrap;display: inline;max-width: initial;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;\"><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> let urlPrefix </span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">=</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"str\" style=\"box-sizing: inherit;color: rgb(113, 140, 0);\">\'app\'</span></code></p></li><li><p><code class=\"javascript language-javascript\" style=\"box-sizing: inherit;font-family: monospace, monospace;background: transparent;border-radius: 0.4rem;white-space: nowrap;display: inline;max-width: initial;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;\"><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"kwd\" style=\"box-sizing: inherit;color: rgb(137, 89, 168);\">if</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">(</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">urlPrefix</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">)</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">{</span></code></p></li><li><p><code class=\"javascript language-javascript\" style=\"box-sizing: inherit;font-family: monospace, monospace;background: transparent;border-radius: 0.4rem;white-space: nowrap;display: inline;max-width: initial;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;\"><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> urlPrefix </span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">=</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">`/</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">$</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">{</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">window</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">.</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">mooa</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">.</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">option</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">.</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">urlPrefix</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">}/`</span></code></p></li><li><p><code class=\"javascript language-javascript\" style=\"box-sizing: inherit;font-family: monospace, monospace;background: transparent;border-radius: 0.4rem;white-space: nowrap;display: inline;max-width: initial;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;\"><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">}</span></code></p></li><li><p><code class=\"javascript language-javascript\" style=\"box-sizing: inherit;font-family: monospace, monospace;background: transparent;border-radius: 0.4rem;white-space: nowrap;display: inline;max-width: initial;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;\"><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> router</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">.</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">navigate</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">([</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">event</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">.</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">detail</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">.</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">url</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">.</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">replace</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">(</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">urlPrefix </span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">+</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> appName</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">,</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"str\" style=\"box-sizing: inherit;color: rgb(113, 140, 0);\">\'\'</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">)])</span></code></p></li><li><p><code class=\"javascript language-javascript\" style=\"box-sizing: inherit;font-family: monospace, monospace;background: transparent;border-radius: 0.4rem;white-space: nowrap;display: inline;max-width: initial;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;\"><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">}</span></code></p></li></ol></pre><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\">相似的，当我们需要从应用 A 跳转到应用 B 时，我们也需要这样的一个机制：</p><pre class=\"prettyprint linenums prettyprinted\" style=\"box-sizing: inherit;overflow-x: auto;overflow-y: hidden;font-family: Consolas, Menlo, Courier, monospace;font-size: 10px;background-color: rgb(238, 241, 245);margin-bottom: 16px;border-top: none;border-right: none;border-bottom: none;padding: 2px;color: rgb(56, 68, 82);letter-spacing: 0.16px;line-height: 12px;border-left: 0.3rem solid rgb(26, 188, 156) !important;\"><ol class=\"linenums list-paddingleft-2\" style=\"\"><li><p><code style=\"box-sizing: inherit;font-family: monospace, monospace;background: transparent;border-radius: 0.4rem;white-space: nowrap;display: inline;max-width: initial;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;\"><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">window</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">.</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">addEventListener</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">(</span><span class=\"str\" style=\"box-sizing: inherit;color: rgb(113, 140, 0);\">\'mooa.routing.navigate\'</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">,</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"kwd\" style=\"box-sizing: inherit;color: rgb(137, 89, 168);\">function</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">(</span><span class=\"kwd\" style=\"box-sizing: inherit;color: rgb(137, 89, 168);\">event</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">:</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"typ\" style=\"box-sizing: inherit;color: rgb(66, 113, 174);\">CustomEvent</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">)</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">{</span></code></p></li><li><p><code style=\"box-sizing: inherit;font-family: monospace, monospace;background: transparent;border-radius: 0.4rem;white-space: nowrap;display: inline;max-width: initial;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;\"><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"kwd\" style=\"box-sizing: inherit;color: rgb(137, 89, 168);\">const</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> opts </span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">=</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"kwd\" style=\"box-sizing: inherit;color: rgb(137, 89, 168);\">event</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">.</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">detail</span></code></p></li><li><p><code style=\"box-sizing: inherit;font-family: monospace, monospace;background: transparent;border-radius: 0.4rem;white-space: nowrap;display: inline;max-width: initial;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;\"><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"kwd\" style=\"box-sizing: inherit;color: rgb(137, 89, 168);\">if</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">(</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">opts</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">)</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">{</span></code></p></li><li><p><code style=\"box-sizing: inherit;font-family: monospace, monospace;background: transparent;border-radius: 0.4rem;white-space: nowrap;display: inline;max-width: initial;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;\"><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> navigateAppByName</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">(</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">opts</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">)</span></code></p></li><li><p><code style=\"box-sizing: inherit;font-family: monospace, monospace;background: transparent;border-radius: 0.4rem;white-space: nowrap;display: inline;max-width: initial;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;\"><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">}</span></code></p></li><li><p><code style=\"box-sizing: inherit;font-family: monospace, monospace;background: transparent;border-radius: 0.4rem;white-space: nowrap;display: inline;max-width: initial;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;\"><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">})</span></code></p></li></ol></pre><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\">剩下的诸如 Loading 动画也是类似的。</p><h2 style=\"box-sizing: inherit;letter-spacing: -0.1rem;margin-bottom: 3rem;margin-top: 3rem;font-size: 28px;line-height: 1.25;color: rgb(56, 68, 82);\">使用 Mooa 进行</h2><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\">So，我们就有了前端微服务框架 Mooa。它基于 single-spa && single-spa-angular-cli，并且符合以上的设计思想。</p><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\">GayHub 地址：https://github.com/phodal/mooa</p><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\">对于主工程而言，只需要以下的几行代码就可以完成上面的功能：</p><pre class=\"prettyprint linenums prettyprinted\" style=\"box-sizing: inherit;overflow-x: auto;overflow-y: hidden;font-family: Consolas, Menlo, Courier, monospace;font-size: 10px;background-color: rgb(238, 241, 245);margin-bottom: 16px;border-top: none;border-right: none;border-bottom: none;padding: 2px;color: rgb(56, 68, 82);letter-spacing: 0.16px;line-height: 12px;border-left: 0.3rem solid rgb(26, 188, 156) !important;\"><ol class=\"linenums list-paddingleft-2\" style=\"\"><li><p><code class=\"javascript language-javascript\" style=\"box-sizing: inherit;font-family: monospace, monospace;background: transparent;border-radius: 0.4rem;white-space: nowrap;display: inline;max-width: initial;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;\"><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">http</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">.</span><span class=\"kwd\" style=\"box-sizing: inherit;color: rgb(137, 89, 168);\">get</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"><</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">any</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">[]>(</span><span class=\"str\" style=\"box-sizing: inherit;color: rgb(113, 140, 0);\">\'/assets/apps.json\'</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">)</span></code></p></li><li><p><code class=\"javascript language-javascript\" style=\"box-sizing: inherit;font-family: monospace, monospace;background: transparent;border-radius: 0.4rem;white-space: nowrap;display: inline;max-width: initial;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;\"><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">.</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">subscribe</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">(</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">data </span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">=></span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">{</span></code></p></li><li><p><code class=\"javascript language-javascript\" style=\"box-sizing: inherit;font-family: monospace, monospace;background: transparent;border-radius: 0.4rem;white-space: nowrap;display: inline;max-width: initial;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;\"><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> data</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">.</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">map</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">((</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">config</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">)</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">=></span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">{</span></code></p></li><li><p><code class=\"javascript language-javascript\" style=\"box-sizing: inherit;font-family: monospace, monospace;background: transparent;border-radius: 0.4rem;white-space: nowrap;display: inline;max-width: initial;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;\"><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> that</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">.</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">mooa</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">.</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">registerApplication</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">(</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">config</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">.</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">name</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">,</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> config</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">,</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> mooaRouter</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">.</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">matchRoute</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">(</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">config</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">.</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">prefix</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">));</span></code></p></li><li><p><code class=\"javascript language-javascript\" style=\"box-sizing: inherit;font-family: monospace, monospace;background: transparent;border-radius: 0.4rem;white-space: nowrap;display: inline;max-width: initial;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;\"><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">});</span></code></p></li><li><p><code class=\"javascript language-javascript\" style=\"box-sizing: inherit;font-family: monospace, monospace;background: transparent;border-radius: 0.4rem;white-space: nowrap;display: inline;max-width: initial;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;\"><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"kwd\" style=\"box-sizing: inherit;color: rgb(137, 89, 168);\">this</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">.</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">mooa</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">.</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">start</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">();</span></code></p></li><li><p><code class=\"javascript language-javascript\" style=\"box-sizing: inherit;font-family: monospace, monospace;background: transparent;border-radius: 0.4rem;white-space: nowrap;display: inline;max-width: initial;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;\"><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">});</span></code></p></li><li><p><code class=\"javascript language-javascript\" style=\"box-sizing: inherit;font-family: monospace, monospace;background: transparent;border-radius: 0.4rem;white-space: nowrap;display: inline;max-width: initial;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;\"></code></p></li><li><p><code class=\"javascript language-javascript\" style=\"box-sizing: inherit;font-family: monospace, monospace;background: transparent;border-radius: 0.4rem;white-space: nowrap;display: inline;max-width: initial;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;\"><span class=\"kwd\" style=\"box-sizing: inherit;color: rgb(137, 89, 168);\">this</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">.</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">router</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">.</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">events</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">.</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">subscribe</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">((</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">event</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">:</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> any</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">)</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">=></span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">{</span></code></p></li><li><p><code class=\"javascript language-javascript\" style=\"box-sizing: inherit;font-family: monospace, monospace;background: transparent;border-radius: 0.4rem;white-space: nowrap;display: inline;max-width: initial;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;\"><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"kwd\" style=\"box-sizing: inherit;color: rgb(137, 89, 168);\">if</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">(</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">event </span><span class=\"kwd\" style=\"box-sizing: inherit;color: rgb(137, 89, 168);\">instanceof</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"typ\" style=\"box-sizing: inherit;color: rgb(66, 113, 174);\">NavigationEnd</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">)</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">{</span></code></p></li><li><p><code class=\"javascript language-javascript\" style=\"box-sizing: inherit;font-family: monospace, monospace;background: transparent;border-radius: 0.4rem;white-space: nowrap;display: inline;max-width: initial;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;\"><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> that</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">.</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">mooa</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">.</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">reRouter</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">(</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">event</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">);</span></code></p></li><li><p><code class=\"javascript language-javascript\" style=\"box-sizing: inherit;font-family: monospace, monospace;background: transparent;border-radius: 0.4rem;white-space: nowrap;display: inline;max-width: initial;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;\"><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">}</span></code></p></li><li><p><code class=\"javascript language-javascript\" style=\"box-sizing: inherit;font-family: monospace, monospace;background: transparent;border-radius: 0.4rem;white-space: nowrap;display: inline;max-width: initial;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;\"><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">});</span></code></p></li></ol></pre><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\">并添加一个对应的子应用路由：</p><pre class=\"prettyprint linenums prettyprinted\" style=\"box-sizing: inherit;overflow-x: auto;overflow-y: hidden;font-family: Consolas, Menlo, Courier, monospace;font-size: 10px;background-color: rgb(238, 241, 245);margin-bottom: 16px;border-top: none;border-right: none;border-bottom: none;padding: 2px;color: rgb(56, 68, 82);letter-spacing: 0.16px;line-height: 12px;border-left: 0.3rem solid rgb(26, 188, 156) !important;\"><ol class=\"linenums list-paddingleft-2\" style=\"\"><li><p><code class=\"javascript language-javascript\" style=\"box-sizing: inherit;font-family: monospace, monospace;background: transparent;border-radius: 0.4rem;white-space: nowrap;display: inline;max-width: initial;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;\"><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">{</span></code></p></li><li><p><code class=\"javascript language-javascript\" style=\"box-sizing: inherit;font-family: monospace, monospace;background: transparent;border-radius: 0.4rem;white-space: nowrap;display: inline;max-width: initial;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;\"><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> path</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">:</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"str\" style=\"box-sizing: inherit;color: rgb(113, 140, 0);\">\'app/:appName/:route\'</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">,</span></code></p></li><li><p><code class=\"javascript language-javascript\" style=\"box-sizing: inherit;font-family: monospace, monospace;background: transparent;border-radius: 0.4rem;white-space: nowrap;display: inline;max-width: initial;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;\"><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> component</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">:</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"typ\" style=\"box-sizing: inherit;color: rgb(66, 113, 174);\">HomeComponent</span></code></p></li><li><p><code class=\"javascript language-javascript\" style=\"box-sizing: inherit;font-family: monospace, monospace;background: transparent;border-radius: 0.4rem;white-space: nowrap;display: inline;max-width: initial;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;\"><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">}</span></code></p></li></ol></pre><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\">则如上所述的四个步骤。</p><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\">对于子工程而言，则只需要一个对应的 Hook 操作：</p><pre class=\"prettyprint linenums prettyprinted\" style=\"box-sizing: inherit;overflow-x: auto;overflow-y: hidden;font-family: Consolas, Menlo, Courier, monospace;font-size: 10px;background-color: rgb(238, 241, 245);margin-bottom: 16px;border-top: none;border-right: none;border-bottom: none;padding: 2px;color: rgb(56, 68, 82);letter-spacing: 0.16px;line-height: 12px;border-left: 0.3rem solid rgb(26, 188, 156) !important;\"><ol class=\"linenums list-paddingleft-2\" style=\"\"><li><p><code class=\"javascript language-javascript\" style=\"box-sizing: inherit;font-family: monospace, monospace;background: transparent;border-radius: 0.4rem;white-space: nowrap;display: inline;max-width: initial;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;\"><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">mooaPlatform</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">.</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">mount</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">(</span><span class=\"str\" style=\"box-sizing: inherit;color: rgb(113, 140, 0);\">\'help\'</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">).</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">then</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">((</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">opts</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">)</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">=></span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">{</span></code></p></li><li><p><code class=\"javascript language-javascript\" style=\"box-sizing: inherit;font-family: monospace, monospace;background: transparent;border-radius: 0.4rem;white-space: nowrap;display: inline;max-width: initial;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;\"><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> platformBrowserDynamic</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">().</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">bootstrapModule</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">(</span><span class=\"typ\" style=\"box-sizing: inherit;color: rgb(66, 113, 174);\">AppModule</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">).</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">then</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">((</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">module</span><span class=\"pun\" style=\"box-sizing: inherit;color: rg', '> 刷新页面？路由拆分？No，动态加载组件。\n\n本文分为以下四部分：\n\n*   **前端微服务化思想介绍**\n    \n*   **微前端的设计理念**\n    \n*   **实战微前端架构设计**\n    \n*   **基于 Mooa 进行前端微服务化**\n    \n\n前端微服化\n-----\n\n对于前端微服化来说，有这么一些方案：\n\n*   Web Component 显然可以一个很优秀的基础架构。然而，我们并不可能去大量地复写已有的应用。\n    \n*   iFrame。你是说真的吗？\n    \n*   另外一个微前端框架 Single-SPA，显然是一个更好的方式。然而，它并非 Production Ready。\n    \n*   通过路由来切分应用，而这个跳转会影响用户体验。\n    \n*   等等。\n    \n\n因此，当我们考虑前端微服务化的时候，我们希望：\n\n*   **独立部署**\n    \n*   **独立开发**\n    \n*   **技术无关**\n    \n*   **不影响用户体验**\n    \n\n### 独立开发\n\n在过去的几星期里，我花费了大量的时间在学习 Single-SPA 的代码。但是，我发现它在开发和部署上真的太麻烦了，完全达不到独立部署地标准。按 Single-SPA 的设计，我需要在入口文件中声名我的应用，然后才能去构建：\n\n1.  `declareChildApplication(\'inferno\',()=>import(\'src/inferno/inferno.app.js\'), pathPrefix(\'/inferno\'));`\n    \n\n同时，在我的应用里，我还需要去指定我的生命周期。这就意味着，当我开发了一个新的应用时，必须更新两份代码：主工程和应用。这时我们还极可能在同一个源码里工作。\n\n当出现多个团队的时候，在同一份源码里工作，显然变得相当的不可靠——比如说，对方团队使用的是 Tab，而我们使用的是 2 个空格，隔壁的老王用的是 4 个空格。\n\n### 独立部署\n\n一个单体的前端应用最大的问题是，构建出来的 js、css 文件相当的巨大。而微前端则意味着，这个文件被独立地拆分成多个文件，它们便可以独立去部署应用。\n\n### 我们真的需要技术无关吗？\n\n等等，我们是否真的需要**技术无关**？如果我们不需要技术无关的话，微前端问题就很容易解决了。\n\n事实上，对于大部分的公司和团队来说，技术无关只是一个无关痛痒的话术。当一家公司的几个创始人使用了 Java，那么极有可能在未来的选型上继续使用 Java。除非，一些额外的服务来使用 Python 来实现人工智能。因此，在大部分的情况下，仍然是技术栈唯一。\n\n对于前端项目来说，更是如此：一个部门里基本上只会选用一个框架。\n\n于是，我们选择了 Angular。\n\n### 不影响用户体验\n\n使用路由跳转来进行前端微服务化，是一种很简单、高效的切分方式。然而，路由跳转地过程中，会有一个白屏的过程。在这个过程中，跳转前的应用和将要跳转的应用，都失去了对页面的控制权。如果这个应用出了问题，那么用户就会一脸懵逼。\n\n理想的情况下，它应该可以被控制。\n\n微前端的设计理念\n--------\n\n### 设计理念一：中心化路由\n\n互联网本质是去中心化的吗？不，DNS 决定了它不是。TAB，决定了它不是。\n\n微服务从本质上来说，它应该是去中心化的。但是，它又不能是完全的去中心化。对于一个微服务来说，它需要一个**服务注册中心**：\n\n> 服务提供方要注册通告服务地址，服务的调用方要能发现目标服务。\n\n对于一个前端应用来说，这个东西就是路由。\n\nMenu\n\n  \n\n从页面上来说，只有我们在网页上添加一个菜单链接，用户才能知道某个页面是可以使用的。\n\n404\n\n  \n\n而从代码上来说，那就是我们需要有一个地方来管理我们的应用：**发现存在哪些应用，哪个应用使用哪个路由。\n\n**管理好我们的路由，实际上就是管理好我们的应用**。\n\n### 设计理念二：标识化应用\n\n在设计一个微前端框架的时候，为**每个项目取一个名字的**问题纠结了我很久——怎么去规范化这个东西。直到，我再一次想到了康威定律：\n\n> 系统设计(产品结构等同组织形式，每个设计系统的组织，其产生的设计等同于组织之间的沟通结构。\n\n康威定律\n\n  \n\n换句人话说，就是同一个组织下，不可能有两个项目的名称是一样的。\n\n所以，这个问题很简单就解决了。\n\n### 设计理念三：生命周期\n\nSingle-SPA 设计了一个基本的生命周期（虽然它没有统一管理），它包含了五种状态：\n\n*   **load，决定加载哪个应用，并绑定生命周期**\n    \n*   **bootstrap，获取静态资源**\n    \n*   **mount，安装应用，如创建 DOM 节点**\n    \n*   **unload，删除应用的生命周期**\n    \n*   **unmount，卸载应用，如删除 DOM 节点**\n    \n\n于是，我在设计上基本上沿用了这个生命周期。显然，诸如 load 之类对于我的设计是多余的。\n\n### 设计理念四：独立部署与配置自动化\n\n从某种意义上来说，整个每系统是围绕着应用配置进行的。如果应用的配置能自动化，那么整个系统就自动化。\n\n当我们只开发一个新的组件，那么我们只需要更新我们的组件，并更新配置即可。而这个配置本身也应该是能自动生成的。\n\n实战微前端架构设计\n---------\n\n基于以上的前提，系统的工作流程如下所示：\n\n系统工作流\n\n整体的工程流程如下所示：\n\n1.  主工程在运行的时候，会去服务器获取最新的应用配置。\n    \n2.  主工程在获取到配置后，将一一创建应用，并为应用绑定生命周期。\n    \n3.  当主工程监测到路由变化的时候，将寻找是否有对应的路由匹配到应用。\n    \n4.  当匹配对对应应用时，则加载相应的应用。\n    \n\n故而，其对应的架构如下图所示：\n\nArchitecture\n\n### 独立部署与配置自动化\n\n我们做的部署策略如下：我们的应用使用的配置文件叫 `apps.json`，由主工程去获取这个配置。每次部署的时候，我们只需要将 `apps.json` 指向最新的配置文件即可。配置的文件类如下所示：\n\n1.  96a7907e5488b6bb.json\n    \n2.  6ff3bfaaa2cd39ea.json\n    \n3.  dcd074685c97ab9b.json\n    \n\n一个应用的配置如下所示：\n\n1.  `{`\n    \n2.  `\"name\":\"help\",`\n    \n3.  `\"selector\":\"help-root\",`\n    \n4.  `\"baseScriptUrl\":\"/assets/help\",`\n    \n5.  `\"styles\":[`\n    \n6.  `\"styles.bundle.css\"`\n    \n7.  `],`\n    \n8.  `\"prefix\":\"help\",`\n    \n9.  `\"scripts\":[`\n    \n10.  `\"inline.bundle.js\",`\n    \n11.  `\"polyfills.bundle.js\",`\n    \n12.  `\"main.bundle.js\"`\n    \n13.  `]`\n    \n14.  `}`\n    \n\n这里的 `selector` 对应于应用所需要的 DOM 节点，prefix 则是用于 URL 路由上。这些都是自动从 `index.html` 文件和 `package.json` 中获取生成的。\n\n### 应用间路由——事件\n\n由于现在的应用变成了两部分：主工程和应用部分。就会出现一个问题：**只有一个工程能捕获路由变化**。当由主工程去改变应用的二级路由时，就无法有效地传达到子应用。在这时，只能通过事件的方式去通知子应用，子应用也需要监测是否是当前应用的路由。\n\n1.  `if(event.detail.app.name === appName){`\n    \n2.  ` let urlPrefix =\'app\'`\n    \n3.  `if(urlPrefix){`\n    \n4.  `` urlPrefix =`/${window.mooa.option.urlPrefix}/` ``\n    \n5.  `}`\n    \n6.  ` router.navigate([event.detail.url.replace(urlPrefix + appName,\'\')])`\n    \n7.  `}`\n    \n\n相似的，当我们需要从应用 A 跳转到应用 B 时，我们也需要这样的一个机制：\n\n1.  `window.addEventListener(\'mooa.routing.navigate\',function(event:CustomEvent){`\n    \n2.  `const opts =event.detail`\n    \n3.  `if(opts){`\n    \n4.  ` navigateAppByName(opts)`\n    \n5.  `}`\n    \n6.  `})`\n    \n\n剩下的诸如 Loading 动画也是类似的。\n\n使用 Mooa 进行\n----------\n\nSo，我们就有了前端微服务框架 Mooa。它基于 single-spa && single-spa-angular-cli，并且符合以上的设计思想。\n\nGayHub 地址：https://github.com/phodal/mooa\n\n对于主工程而言，只需要以下的几行代码就可以完成上面的功能：\n\n1.  `http.get<any[]>(\'/assets/apps.json\')`\n    \n2.  `.subscribe(data =>{`\n    \n3.  ` data.map((config)=>{`\n    \n4.  ` that.mooa.registerApplication(config.name, config, mooaRouter.matchRoute(config.prefix));`\n    \n5.  `});`\n    \n6.  `this.mooa.start();`\n    \n7.  `});`\n    \n\n9.  `this.router.events.subscribe((event: any)=>{`\n    \n10.  `if(event instanceofNavigationEnd){`\n    \n11.  ` that.mooa.reRouter(event);`\n    \n12.  `}`\n    \n13.  `});`\n    \n\n并添加一个对应的子应用路由：\n\n1.  `{`\n    \n2.  ` path:\'app/:appName/:route\',`\n    \n3.  ` component:HomeComponent`\n    \n4.  `}`\n    \n\n则如上所述的四个步骤。\n\n对于子工程而言，则只需要一个对应的 Hook 操作：\n\n1.  `mooaPlatform.mount(\'help\').then((opts)=>{`\n    \n2.  ` platformBrowserDynamic().bootstrapModule(AppModule).then((module)=>{`\n    \n3.  ` opts[\'attachUnmount\'](module);`\n    \n4.  `});`\n    \n5.  `});`\n    \n\n并设置好对应的 base_href:\n\n1.  `providers:[`\n    \n2.  `{provide: APP_BASE_HREF, useValue: mooaPlatform.appBase()},`\n    \n3.  `]`\n    \n\n嗯，就是这么简单。DEMO 视频如下：\n\nDemo 地址见：http://mooa.phodal.com/\n\nGitHub 示例：https://github.com/phodal/mooa\n\n  \n\n* * *\n\n  \n\n有钱的捧个钱场\n\n  \n\n  \n\n没钱的捧个关注', 0, 1, 0);
INSERT INTO `post` (`id`, `createAt`, `updateAt`, `title`, `description`, `thumb`, `url`, `html`, `markdown`, `views`, `status`, `push`) VALUES
(22, '2018-04-23 11:01:41.737022', '2018-04-23 11:01:41.737022', '拆分大型 Angular 应用四种策略', '上一个月，我们花了大量的时间设计方案来拆分一个大型的Angular应用。从使用Angular的Lazyload到前端微服务化，进行了一系列的讨论。最后，我们终于有了结果，采用的是Lazyload变体：构建时集成代码的方式。主要是为了达成以下的设计目标：构建插件化的Web开发平台，满足业务快速变化及分布式多团队并行开发的需求构建服务化的中间件，搭建高可用及高复用的前端微服务平台支持前端的独立交付及部署简单地来说，就是要支持应用插件化开发，以及多团队并行开发。应用插件化开发，其所要解决的主要问题是：臃肿的大型', 'https://mmbiz.qpic.cn/mmbiz_jpg/aG1vFUMgRBDZ96SeKzDyK9foK4XiaQIX7GdydMPnia5ibib1Vxszic77jNkBM3Vw1ntrPORomVwcpvMcFFIeCWMuGYw/640?wx_fmt=jpeg', 'https://mp.weixin.qq.com/s/DcwDyOoiTjWFa8c5gAP3eQ', '<p style=\"box-sizing: inherit;margin-bottom: 16px;color: rgb(56, 68, 82);\">上一个月，我们花了大量的时间设计方案来拆分一个大型的 Angular 应用。从使用 Angular 的 Lazyload 到前端微服务化，进行了一系列的讨论。最后，我们终于有了结果，采用的是 Lazyload 变体：<strong style=\"box-sizing: inherit;\">构建时集成代码</strong> 的方式。</p><p style=\"box-sizing: inherit;margin-bottom: 16px;color: rgb(56, 68, 82);\">主要是为了达成以下的设计目标：</p><ul style=\"list-style-type: circle;\" class=\" list-paddingleft-2\"><li><p>构建插件化的 Web 开发平台，满足业务快速变化及分布式多团队并行开发的需求</p></li><li><p>构建服务化的中间件，搭建高可用及高复用的前端微服务平台</p></li><li><p>支持前端的独立交付及部署</p></li></ul><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\">简单地来说，就是要支持<strong style=\"box-sizing: inherit;\">应用插件化开发</strong>，以及<strong style=\"box-sizing: inherit;\">多团队并行开发</strong>。</p><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\"><strong style=\"box-sizing: inherit;\">应用插件化开发</strong>，其所要解决的主要问题是：臃肿的大型应用的拆分问题。大型前端应用，在开发的时候要面临大量的<strong style=\"box-sizing: inherit;\">遗留代码</strong>、不同业务的代码耦合在一起，在线上的时候还要面临加载速度慢，运行效率低的问题。</p><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\">最后就落在了两个方案上：<strong>路由懒加载及其变体</strong>与<strong>前端微服务化</strong>。</p><h2 style=\"box-sizing: inherit;letter-spacing: -0.1rem;margin-bottom: 3rem;margin-top: 3rem;font-size: 28px;line-height: 1.25;color: rgb(56, 68, 82);\">前端微服务化：路由懒加载及其变体</h2><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\">路由懒加载，即通过不同的路由来将应用切成不同的代码快，当路由被访问的时候，才加载对应组件。在诸如 Angular、Vue 框架里都可以通过路由 + Webpack 打包的方式来实现。而，不可避免地就会需要一些问题：</p><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\"><strong style=\"box-sizing: inherit;\">难以多团队并行开发</strong>，路由拆分就意味着我们仍然是在一个源码库里工作的。也可以尝试拆分成不同的项目，再编译到一起。</p><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\"><strong style=\"box-sizing: inherit;\">每次发布需要重新编译</strong>，是的，当我们只是更新一个子模块的代码，我们要重新编译整个应用，再重新发布这个应用。而不能独立地去构建它，再发布它。</p><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\"><strong style=\"box-sizing: inherit;\">统一的 Vendor 版本</strong>，统一第三方依赖是一件好事。可问题的关键在于：每当我们添加一个新的依赖，我们可能就需要开会讨论一下。</p><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\">然而，标准 Route Lazyload 最大的问题就是<strong style=\"box-sizing: inherit;\">难以多团队并行开发</strong>，这里之所以说的是 “难以” 是因为，还是有办法解决这个问题。在日常的开发中，一个小的团队会一直在一个代码库里开发，而一个大的团队则应该是在不同的代码库里开发。</p><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\">于是，我们在标准的路由懒加载之上做了一些尝试。</p><h2 style=\"box-sizing: inherit;letter-spacing: -0.1rem;margin-bottom: 3rem;margin-top: 3rem;font-size: 28px;line-height: 1.25;color: rgb(56, 68, 82);\">微服务化方案：子应用模式</h2><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\">除了路由懒加载，我们还可以采用子应用模式，即每个应用都是相互独立地。即我们有一个基座工程，当用户点击相应的路由时，我们去加载这个<strong style=\"box-sizing: inherit;\">独立</strong> 的 Angular 应用；如果是同一个应用下的路由，就不需要重复加载了。而且，这些都可以依赖于浏览器缓存来做。</p><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\">除了路由懒加载，还可以采用的是类似于 Mooa 的应用嵌入方案。如下是基于 Mooa 框架 + Angular 开发而生成的 HTML 示例：</p><pre class=\"prettyprint linenums prettyprinted\" style=\"box-sizing: inherit;overflow-x: auto;overflow-y: hidden;font-family: Consolas, Menlo, Courier, monospace;font-size: 10px;background-color: rgb(238, 241, 245);margin-bottom: 16px;border-top: none;border-right: none;border-bottom: none;padding: 2px;color: rgb(56, 68, 82);letter-spacing: 0.16px;line-height: 12px;border-left: 0.3rem solid rgb(26, 188, 156) !important;\"><ol class=\"linenums list-paddingleft-2\" style=\"\"><li><p><code style=\"box-sizing: inherit;font-family: monospace, monospace;background: transparent;border-radius: 0.4rem;white-space: nowrap;display: inline;max-width: initial;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;\"><span class=\"tag\" style=\"box-sizing: inherit;color: rgb(200, 40, 41);\"><app-root</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> _</span><span class=\"atn\" style=\"box-sizing: inherit;color: rgb(245, 135, 31);\">nghost-c0</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">=</span><span class=\"atv\" style=\"box-sizing: inherit;color: rgb(62, 153, 159);\">\"\"</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"atn\" style=\"box-sizing: inherit;color: rgb(245, 135, 31);\">ng-version</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">=</span><span class=\"atv\" style=\"box-sizing: inherit;color: rgb(62, 153, 159);\">\"4.2.0\"</span><span class=\"tag\" style=\"box-sizing: inherit;color: rgb(200, 40, 41);\">></span></code></p></li><li><p><code style=\"box-sizing: inherit;font-family: monospace, monospace;background: transparent;border-radius: 0.4rem;white-space: nowrap;display: inline;max-width: initial;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;\"><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> ...</span></code></p></li><li><p><code style=\"box-sizing: inherit;font-family: monospace, monospace;background: transparent;border-radius: 0.4rem;white-space: nowrap;display: inline;max-width: initial;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;\"><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"tag\" style=\"box-sizing: inherit;color: rgb(200, 40, 41);\"><app-home</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> _</span><span class=\"atn\" style=\"box-sizing: inherit;color: rgb(245, 135, 31);\">nghost-c2</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">=</span><span class=\"atv\" style=\"box-sizing: inherit;color: rgb(62, 153, 159);\">\"\"</span><span class=\"tag\" style=\"box-sizing: inherit;color: rgb(200, 40, 41);\">></span></code></p></li><li><p><code style=\"box-sizing: inherit;font-family: monospace, monospace;background: transparent;border-radius: 0.4rem;white-space: nowrap;display: inline;max-width: initial;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;\"><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"tag\" style=\"box-sizing: inherit;color: rgb(200, 40, 41);\"><app-app1</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> _</span><span class=\"atn\" style=\"box-sizing: inherit;color: rgb(245, 135, 31);\">nghost-c0</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">=</span><span class=\"atv\" style=\"box-sizing: inherit;color: rgb(62, 153, 159);\">\"\"</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"atn\" style=\"box-sizing: inherit;color: rgb(245, 135, 31);\">ng-version</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">=</span><span class=\"atv\" style=\"box-sizing: inherit;color: rgb(62, 153, 159);\">\"5.2.8\"</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"atn\" style=\"box-sizing: inherit;color: rgb(245, 135, 31);\">style</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">=</span><span class=\"atv\" style=\"box-sizing: inherit;color: rgb(62, 153, 159);\">\"</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">display: none;</span><span class=\"atv\" style=\"box-sizing: inherit;color: rgb(62, 153, 159);\">\"</span><span class=\"tag\" style=\"box-sizing: inherit;color: rgb(200, 40, 41);\">><nav</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> _</span><span class=\"atn\" style=\"box-sizing: inherit;color: rgb(245, 135, 31);\">ngcontent-c0</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">=</span><span class=\"atv\" style=\"box-sizing: inherit;color: rgb(62, 153, 159);\">\"\"</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"atn\" style=\"box-sizing: inherit;color: rgb(245, 135, 31);\">class</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">=</span><span class=\"atv\" style=\"box-sizing: inherit;color: rgb(62, 153, 159);\">\"navbar\"</span><span class=\"tag\" style=\"box-sizing: inherit;color: rgb(200, 40, 41);\">></app-app1></span></code></p></li><li><p><code style=\"box-sizing: inherit;font-family: monospace, monospace;background: transparent;border-radius: 0.4rem;white-space: nowrap;display: inline;max-width: initial;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;\"><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"tag\" style=\"box-sizing: inherit;color: rgb(200, 40, 41);\"><iframe</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"atn\" style=\"box-sizing: inherit;color: rgb(245, 135, 31);\">frameborder</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">=</span><span class=\"atv\" style=\"box-sizing: inherit;color: rgb(62, 153, 159);\">\"\"</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"atn\" style=\"box-sizing: inherit;color: rgb(245, 135, 31);\">width</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">=</span><span class=\"atv\" style=\"box-sizing: inherit;color: rgb(62, 153, 159);\">\"100%\"</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"atn\" style=\"box-sizing: inherit;color: rgb(245, 135, 31);\">height</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">=</span><span class=\"atv\" style=\"box-sizing: inherit;color: rgb(62, 153, 159);\">\"100%\"</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"atn\" style=\"box-sizing: inherit;color: rgb(245, 135, 31);\">src</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">=</span><span class=\"atv\" style=\"box-sizing: inherit;color: rgb(62, 153, 159);\">\"http://localhost:4200/app/help/homeassets/iframe.html\"</span><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"atn\" style=\"box-sizing: inherit;color: rgb(245, 135, 31);\">id</span><span class=\"pun\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\">=</span><span class=\"atv\" style=\"box-sizing: inherit;color: rgb(62, 153, 159);\">\"help_206547\"</span><span class=\"tag\" style=\"box-sizing: inherit;color: rgb(200, 40, 41);\">></iframe></span></code></p></li><li><p><code style=\"box-sizing: inherit;font-family: monospace, monospace;background: transparent;border-radius: 0.4rem;white-space: nowrap;display: inline;max-width: initial;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;\"><span class=\"pln\" style=\"box-sizing: inherit;color: rgb(77, 77, 76);\"> </span><span class=\"tag\" style=\"box-sizing: inherit;color: rgb(200, 40, 41);\"></app-home></span></code></p></li><li><p><code style=\"box-sizing: inherit;font-family: monospace, monospace;background: transparent;border-radius: 0.4rem;white-space: nowrap;display: inline;max-width: initial;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;\"><span class=\"tag\" style=\"box-sizing: inherit;color: rgb(200, 40, 41);\"></app-root></span></code></p></li></ol></pre><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\">Mooa 提供了两种模式，一种是基于 Single-SPA 的实验做的，在同一页面加载、渲染两个 Angular 应用；一种是基于 iFrame 来提供独立的应用容器。</p><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\">解决了以下的问题：</p><ul style=\"list-style-type: circle;\" class=\" list-paddingleft-2\"><li><p><strong style=\"box-sizing: inherit;\">首页加载速度更快</strong>，因为只需要加载首页所需要的功能，而不是所有的依赖。</p></li><li><p><strong style=\"box-sizing: inherit;\">多个团队并行开发</strong>，每个团队里可以独立地在自己的项目里开发。</p></li><li><p><strong style=\"box-sizing: inherit;\">独立地进行模块化更新</strong>，现在我们只需要去单独更新我们的应用，而不需要更新整个完整的应用。</p></li></ul><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\">但是，它仍然包含有以下的问题：</p><ul style=\"list-style-type: circle;\" class=\" list-paddingleft-2\"><li><p>重复加载依赖项，即我们在 A 应用中使用到的模块，在 B 应用中也会重新使用到。有一部分可以通过浏览器的缓存来自动解决。</p></li><li><p>第一次打开对应的应用需要时间，当然<strong style=\"box-sizing: inherit;\">预加载</strong>可以解决一部分问题。</p></li><li><p>在非 iframe 模式下运行，会遇到难以预料的第三方依赖冲突。</p></li></ul><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\">于是在总结了一系列的讨论之后，我们形成了一系列的对比方案：</p><h2 style=\"box-sizing: inherit;letter-spacing: -0.1rem;margin-bottom: 3rem;margin-top: 3rem;font-size: 28px;line-height: 1.25;color: rgb(56, 68, 82);\">方案对比</h2><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\">在这个过程中，我们做了大量的方案设计与对比，便想写一篇文章对比一下之前的结果。先看一下图：</p><p><img class=\"\" data-backh=\"378\" data-backw=\"558\" data-copyright=\"0\" data-ratio=\"0.678125\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/aG1vFUMgRBDZ96SeKzDyK9foK4XiaQIX7GdydMPnia5ibib1Vxszic77jNkBM3Vw1ntrPORomVwcpvMcFFIeCWMuGYw/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"1280\" style=\"width: 100%;height: auto;\"></p><figure style=\"box-sizing: inherit;margin-bottom: 16px;color: rgb(56, 68, 82);\"><figcaption style=\"box-sizing: inherit;text-align: center;font-size: 12px;padding: 8px;color: rgb(204, 204, 204);\">Angular 代码拆分对比</figcaption></figure><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\">表格对比：</p><blockquote></blockquote><p><img class=\"\" data-backh=\"199\" data-backw=\"558\" data-copyright=\"0\" data-ratio=\"0.35608856088560886\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/aG1vFUMgRBDZ96SeKzDyK9foK4XiaQIX7eBdRv1Uic7DxjibSrqDYmWyAKIRJb9f2dlsFmcWvzbdzCmkYSHqwV35A/640?wx_fmt=png\" data-type=\"png\" data-w=\"2168\" style=\"width: 100%;height: auto;\"></p><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\">详细的介绍如下：<br></p><h3 style=\"box-sizing: inherit;letter-spacing: -0.1rem;margin-bottom: 3rem;margin-top: 3rem;font-size: 24px;line-height: 1.3;color: rgb(56, 68, 82);\">标准 LazyLoad</h3><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\">开发流程：多个团队在同一个代码库里开发，构建时只需要拿这一份代码去部署。</p><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\">行为：开发、构建、运行一体</p><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\">适用场景：单一团队，依赖库少、业务单一</p><h3 style=\"box-sizing: inherit;letter-spacing: -0.1rem;margin-bottom: 3rem;margin-top: 3rem;font-size: 24px;line-height: 1.3;color: rgb(56, 68, 82);\">LazyLoad 变体 1：构建时集成</h3><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\">开发流程：多个团队在同不同的代码库里开发，在构建时将不同代码库的代码整合到一起，再去构建这个应用。</p><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\">适用场景：多团队，依赖库少、业务单一</p><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\">变体-构建时集成：开发分离，构建时集成，运行一体</p><h3 style=\"box-sizing: inherit;letter-spacing: -0.1rem;margin-bottom: 3rem;margin-top: 3rem;font-size: 24px;line-height: 1.3;color: rgb(56, 68, 82);\">LazyLoad 变体 2：构建后集成</h3><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\">开发流程：多个团队在同不同的代码库里开发，在构建时将编译成不同的几份代码，运行时会通过懒加载合并到一起。</p><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\">适用场景：多团队，依赖库少、业务单一</p><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\">变体-构建后集成：开发分离，构建分离，运行一体</p><h3 style=\"box-sizing: inherit;letter-spacing: -0.1rem;margin-bottom: 3rem;margin-top: 3rem;font-size: 24px;line-height: 1.3;color: rgb(56, 68, 82);\">前端微服务化</h3><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\">开发流程：多个团队在同不同的代码库里开发，在构建时将编译成不同的几个应用，运行时通过主工程加载。</p><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\">适用场景：多团队，依赖库多、业务复杂</p><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\">前端微服务化：开发、构建、运行分离</p><h2 style=\"box-sizing: inherit;letter-spacing: -0.1rem;margin-bottom: 3rem;margin-top: 3rem;font-size: 28px;line-height: 1.25;color: rgb(56, 68, 82);\">总对比</h2><p style=\"box-sizing: inherit;margin-bottom: 16px;margin-top: 15px;color: rgb(56, 68, 82);\">总体的对比如下表所示：</p><p><img class=\"\" data-backh=\"309\" data-backw=\"558\" data-copyright=\"0\" data-ratio=\"0.5529685681024447\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/aG1vFUMgRBDZ96SeKzDyK9foK4XiaQIX7kNHGX7Z0OTZDAKkc3nQy4e05ogmhW1fwTE4dKICAiblQctgyjDxa3WA/640?wx_fmt=png\" data-type=\"png\" data-w=\"1718\" style=\"width: 100%;height: auto;\"></p><p><br></p><p><span style=\"color: rgb(80, 97, 109);\"></span><span style=\"color: rgb(80, 97, 109);\">So，你怎么看呢？</span><br></p><p style=\"text-align: center;\"><span style=\"color: rgb(80, 97, 109);\"><strong>扫码关注最新前端技术实践</strong></span></p><p style=\"text-align: center;\"><span style=\"color: rgb(80, 97, 109);\"><strong><br></strong></span></p><p><img class=\"\" data-copyright=\"0\" data-ratio=\"0.6541479820627802\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/aG1vFUMgRBBU81RPhjv4xJB88hs9Sq5oRhjcLZxAaLEt4VLia8ZGib5169BngpmWvAAh9Bib4j1zdV5KQttj3eYgA/640?wx_fmt=png\" data-type=\"png\" data-w=\"1784\" style=\"\"></p><p><br></p><p style=\"text-align: center;\"><span style=\"color: rgb(80, 97, 109);\"><strong>感谢支持~~</strong></span></p><p><br></p><p style=\"text-align: center;\"><img class=\"\" data-copyright=\"0\" data-ratio=\"1.005\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/aG1vFUMgRBC5wFcvIHY6mOOU5VzZiaFDC9MsDdf4a5s6oUmjYKOia2laD2vHY6ulFIauQ6yVL3CbfgVjyv0DdbaQ/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"200\" style=\"\"></p><p><br></p>', '上一个月，我们花了大量的时间设计方案来拆分一个大型的 Angular 应用。从使用 Angular 的 Lazyload 到前端微服务化，进行了一系列的讨论。最后，我们终于有了结果，采用的是 Lazyload 变体：**构建时集成代码** 的方式。\n\n主要是为了达成以下的设计目标：\n\n*   构建插件化的 Web 开发平台，满足业务快速变化及分布式多团队并行开发的需求\n    \n*   构建服务化的中间件，搭建高可用及高复用的前端微服务平台\n    \n*   支持前端的独立交付及部署\n    \n\n简单地来说，就是要支持**应用插件化开发**，以及**多团队并行开发**。\n\n**应用插件化开发**，其所要解决的主要问题是：臃肿的大型应用的拆分问题。大型前端应用，在开发的时候要面临大量的**遗留代码**、不同业务的代码耦合在一起，在线上的时候还要面临加载速度慢，运行效率低的问题。\n\n最后就落在了两个方案上：**路由懒加载及其变体**与**前端微服务化**。\n\n前端微服务化：路由懒加载及其变体\n----------------\n\n路由懒加载，即通过不同的路由来将应用切成不同的代码快，当路由被访问的时候，才加载对应组件。在诸如 Angular、Vue 框架里都可以通过路由 + Webpack 打包的方式来实现。而，不可避免地就会需要一些问题：\n\n**难以多团队并行开发**，路由拆分就意味着我们仍然是在一个源码库里工作的。也可以尝试拆分成不同的项目，再编译到一起。\n\n**每次发布需要重新编译**，是的，当我们只是更新一个子模块的代码，我们要重新编译整个应用，再重新发布这个应用。而不能独立地去构建它，再发布它。\n\n**统一的 Vendor 版本**，统一第三方依赖是一件好事。可问题的关键在于：每当我们添加一个新的依赖，我们可能就需要开会讨论一下。\n\n然而，标准 Route Lazyload 最大的问题就是**难以多团队并行开发**，这里之所以说的是 “难以” 是因为，还是有办法解决这个问题。在日常的开发中，一个小的团队会一直在一个代码库里开发，而一个大的团队则应该是在不同的代码库里开发。\n\n于是，我们在标准的路由懒加载之上做了一些尝试。\n\n微服务化方案：子应用模式\n------------\n\n除了路由懒加载，我们还可以采用子应用模式，即每个应用都是相互独立地。即我们有一个基座工程，当用户点击相应的路由时，我们去加载这个**独立** 的 Angular 应用；如果是同一个应用下的路由，就不需要重复加载了。而且，这些都可以依赖于浏览器缓存来做。\n\n除了路由懒加载，还可以采用的是类似于 Mooa 的应用嵌入方案。如下是基于 Mooa 框架 + Angular 开发而生成的 HTML 示例：\n\n1.  ` _nghost-c0=\"\"ng-version=\"4.2.0\">`\n    \n2.  ` ...`\n    \n3.  ` _nghost-c2=\"\">`\n    \n4.  ` _nghost-c0=\"\"ng-version=\"5.2.8\"style=\"display: none;\"> _ngcontent-c0=\"\"class=\"navbar\">`\n    \n5.  `frameborder=\"\"width=\"100%\"height=\"100%\"src=\"http://localhost:4200/app/help/homeassets/iframe.html\"id=\"help_206547\">`\n    \n\nMooa 提供了两种模式，一种是基于 Single-SPA 的实验做的，在同一页面加载、渲染两个 Angular 应用；一种是基于 iFrame 来提供独立的应用容器。\n\n解决了以下的问题：\n\n*   **首页加载速度更快**，因为只需要加载首页所需要的功能，而不是所有的依赖。\n    \n*   **多个团队并行开发**，每个团队里可以独立地在自己的项目里开发。\n    \n*   **独立地进行模块化更新**，现在我们只需要去单独更新我们的应用，而不需要更新整个完整的应用。\n    \n\n但是，它仍然包含有以下的问题：\n\n*   重复加载依赖项，即我们在 A 应用中使用到的模块，在 B 应用中也会重新使用到。有一部分可以通过浏览器的缓存来自动解决。\n    \n*   第一次打开对应的应用需要时间，当然**预加载**可以解决一部分问题。\n    \n*   在非 iframe 模式下运行，会遇到难以预料的第三方依赖冲突。\n    \n\n于是在总结了一系列的讨论之后，我们形成了一系列的对比方案：\n\n方案对比\n----\n\n在这个过程中，我们做了大量的方案设计与对比，便想写一篇文章对比一下之前的结果。先看一下图：\n\nAngular 代码拆分对比\n\n表格对比：\n\n详细的介绍如下：  \n\n### 标准 LazyLoad\n\n开发流程：多个团队在同一个代码库里开发，构建时只需要拿这一份代码去部署。\n\n行为：开发、构建、运行一体\n\n适用场景：单一团队，依赖库少、业务单一\n\n### LazyLoad 变体 1：构建时集成\n\n开发流程：多个团队在同不同的代码库里开发，在构建时将不同代码库的代码整合到一起，再去构建这个应用。\n\n适用场景：多团队，依赖库少、业务单一\n\n变体-构建时集成：开发分离，构建时集成，运行一体\n\n### LazyLoad 变体 2：构建后集成\n\n开发流程：多个团队在同不同的代码库里开发，在构建时将编译成不同的几份代码，运行时会通过懒加载合并到一起。\n\n适用场景：多团队，依赖库少、业务单一\n\n变体-构建后集成：开发分离，构建分离，运行一体\n\n### 前端微服务化\n\n开发流程：多个团队在同不同的代码库里开发，在构建时将编译成不同的几个应用，运行时通过主工程加载。\n\n适用场景：多团队，依赖库多、业务复杂\n\n前端微服务化：开发、构建、运行分离\n\n总对比\n---\n\n总体的对比如下表所示：\n\n  \n\nSo，你怎么看呢？  \n\n**扫码关注最新前端技术实践**\n\n  \n\n**感谢支持~~**', 0, 1, 0),
(23, '2018-04-23 11:01:41.760215', '2018-04-23 11:01:41.760215', '关于setTimeout', '面试官：“你知道定时器吗？”我：“知道”面试官：“那你说说什么是定时器”我：“定时器是可以用setTimeout来实现的”面试官：“setTimeout(function(){console.log(\"1\")},0);console.log(\"2\");那你说说控制台上输出顺序是什么？”我：支支吾吾......so....就有了这篇文章,唠叨了这么久，正文开始了！setTimeout的语法功能：setTimeout()方法用于在指定的毫秒数后调用函数或计算表达式为了解释上面的那句话，来个简单的小例子：set', 'https://gold-cdn.xitu.io/images/logo-bold.svg', 'https://juejin.im/post/5aa4c47af265da239866e236', '<h5 class=\"heading\" data-id=\"heading-0\">面试官：“你知道定时器吗？”<br>我：“知道”<br>面试官：“那你说说什么是定时器”<br>我：“定时器是可以用setTimeout来实现的”<br>面试官：“setTimeout(function () { console.log(\"1\") },0);<br>console.log(\"2\");那你说说控制台上输出顺序是什么？”<br>我：支支吾吾......</h5>\n<h4 class=\"heading\" data-id=\"heading-1\">so....就有了这篇文章,唠叨了这么久，正文开始了！</h4>\n<h2 class=\"heading\" data-id=\"heading-2\">setTimeout的语法功能：</h2>\n<h5 class=\"heading\" data-id=\"heading-3\">setTimeout() 方法用于在指定的毫秒数后调用函数或计算表达式</h5>\n<p>为了解释上面的那句话，来个简单的小例子：</p>\n<pre><code class=\"hljs bash\" lang=\"bash\"><!DOCTYPE html>\n<head>\n    <title><span class=\"hljs-built_in\">set</span>Timeout</title>\n    <meta http-equiv=<span class=\"hljs-string\">\"Content-Type\"</span> content=<span class=\"hljs-string\">\"text/html; charset=utf-8\"</span>/>\n</head>\n<body>\n    <h1><span class=\"hljs-built_in\">set</span>Timeout</h1>\n    <span id=<span class=\"hljs-string\">\"content\"</span>>测试</span>\n    <script>\n       <span class=\"hljs-built_in\">set</span>Timeout(<span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span> () {\n           <span class=\"hljs-built_in\">let</span> content = document.getElementById(<span class=\"hljs-string\">\'content\'</span>);\n           content.innerHTML = <span class=\"hljs-string\">\"<div>一秒后</div>\"</span>;\n       },1000);\n    </script>\n</body>\n</html>\n</code></pre><p>span标签里面的内容一秒之后由“测试”变成了“一秒后”。</p>\n<h3 class=\"heading\" data-id=\"heading-4\">记时器功能：</h3>\n<p>来实现了：</p>\n<pre><code class=\"hljs bash\" lang=\"bash\"><!DOCTYPE html>\n<head>\n    <title><span class=\"hljs-built_in\">set</span>Timeout</title>\n    <meta http-equiv=<span class=\"hljs-string\">\"Content-Type\"</span> content=<span class=\"hljs-string\">\"text/html; charset=utf-8\"</span>/>\n</head>\n<body>\n    <h1><span class=\"hljs-built_in\">set</span>Timeout</h1>\n    <span id=<span class=\"hljs-string\">\"content\"</span>>时间</span>\n    <button onclick=<span class=\"hljs-string\">\"start()\"</span>>开始</button>\n    <script>\n        var x = 00,\n            y = 00,\n            z = 00;\n        <span class=\"hljs-keyword\">function</span> <span class=\"hljs-function\"><span class=\"hljs-title\">start</span></span> () {\n            <span class=\"hljs-keyword\">if</span> (x<= 59 && x>=0 && y<=59 && y>=0 && z<=59 && z>=0) {\n               <span class=\"hljs-built_in\">let</span> content = document.getElementById(<span class=\"hljs-string\">\'content\'</span>);\n               content.innerHTML = z + <span class=\"hljs-string\">\":\"</span> + y + <span class=\"hljs-string\">\":\"</span> + x;\n               console.log(x);\n               x = x + 1;\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (y<=59 && y>=0 && z<=59 && z>=0) {\n                y = y + 1;\n                x = 0;\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (z<=59 && z>=0){\n                z = z + 1;\n                x = 0;\n                y = 0;\n            }\n            <span class=\"hljs-built_in\">set</span>Timeout (<span class=\"hljs-string\">\"start()\"</span>,1000);  //注意，这里调用要用引号包围\n        }\n    </script>\n</body>\n</html>\n</code></pre><p>控制台输出：\n</p><figure><img class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2018/3/11/162142401c1e4c77?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"884\" data-height=\"668\"><figcaption></figcaption></figure><p></p>\n<p>这里点击之后执行start()函数，在函数里面setTimeout()函数又调用了start(),所以就是一秒钟调用一次start()函数。</p>\n<h2 class=\"heading\" data-id=\"heading-5\">setTimeout()的参数：</h2>\n<p>大家都知道setInterval()和setTimeout()可以接收两个参数，第一个参数是需要回调的函数，必须传入的参数，第二个参数是时间间隔，毫秒数，可以省略。但其实他可以接收更多的参数，那么这些参数是干什么用的呢？从第三个参数开始，依次用来表示传入回调函数的参数。</p>\n<p>例子：</p>\n<pre><code class=\"hljs bash\" lang=\"bash\"><span class=\"hljs-built_in\">set</span>Timeout(<span class=\"hljs-keyword\">function</span>(a,b){\n   console.log(0+a+b);//这里打印的是：7\n},1000,3,4);\n</code></pre><h5 class=\"heading\" data-id=\"heading-6\">注意：IE 9.0及以下版本，只允许setTimeout有两个参数，不支持更多的参数</h5>\n<p>如果想向回调函数传参，可以用bind()。<br>\neg:</p>\n<pre><code class=\"hljs bash\" lang=\"bash\"><span class=\"hljs-built_in\">set</span>Timeout( <span class=\"hljs-keyword\">function</span>(a,b){}.bind(3,4), 1000 );\n</code></pre><h5 class=\"heading\" data-id=\"heading-7\">那我怎么去除定时器呢(惆怅脸)？别急，别急，我来告诉你！</h5>\n<h2 class=\"heading\" data-id=\"heading-8\">clearTimeout():</h2>\n<p>setTimeout函数，返回一个表示计数器编号的整数值，将该整数传入clearTimeout函数，就可以取消对应的定时器。</p>\n<p>clearTimout()有以下语法: clearTimeout(timeoutID)<br>\n要使用 clearTimeout( ), 我们设定 setTimeout( ) 时, 要给予这 setTimout( ) 一个名称, 这名称就是 timeoutID , 我们叫停时, 就是用这 timeoutID来叫停, 这是一个自定义名称。</p>\n<p>用法：</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">var id1 = <span class=\"hljs-built_in\">set</span>Timeout(f,1000);  //id1就是timeoutID\nvar id2 = <span class=\"hljs-built_in\">set</span>Interval(f,1000); //id2就是timeoutID\n\nclearTimeout(id1);\nclearInterval(id2);\n</code></pre><h2 class=\"heading\" data-id=\"heading-9\">setTimeout()的this指向：</h2>\n<p>对于javascript中的this指向问题，之前也是困扰了我好久，哎呀，哪儿有那么难嘛，其实一句话就是说:谁调用的就是指向谁啊！意思就是说调用的对象是谁this就是指向谁。</p>\n<p>那这样说来个栗子咯：</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">var x = 1;\nvar obj = {\n  x: 2,\n  y: <span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span>(){\n    console.log(this.x);\n  }\n};\n<span class=\"hljs-built_in\">set</span>Timeout(obj.y,1000);  // 1\n\n</code></pre><p>why?不是说了哪个对象调用的就是指向哪个对象的嘛，这里不是setTimeout函数调用了obj对象里面的y方法吗，那不还是被setTimeout调用了吗，对啊，没错啊，就是setTimeout调用的，但是setTimeout函数是属于window的，知道吧，所以setTimeout的对象是window，所以一切都明了了。</p>\n<h5 class=\"heading\" data-id=\"heading-10\">懂了吧，那就来考考你，准备接招啦！</h5>\n<pre><code class=\"hljs bash\" lang=\"bash\"><span class=\"hljs-keyword\">function</span> Animal(login) {\n  this.login = login;\n  this.sayHi = <span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span>() {\n    console.log(this.login);  //undefined\n  }\n}\nvar dog = new Animal(<span class=\"hljs-string\">\'John\'</span>);\n<span class=\"hljs-built_in\">set</span>Timeout(dog.sayHi, 1000);\n\n</code></pre><p>哈哈哈，答对了吧，哇👋，但是没有奖励😂</p>\n<p>等到dog.sayHi执行时，它是在全局对象中执行，但是this.login取不到值。</p>\n<h2 class=\"heading\" data-id=\"heading-11\">setTimeout()之延迟时间为0</h2>\n<p>要回答面试官问我的问题了😂。哇，血的教训，来来来\n直接一点来栗子吧：</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">    console.log(<span class=\"hljs-string\">\'a\'</span>);\n    <span class=\"hljs-built_in\">set</span>Timeout(<span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span>(){\n    console.log(<span class=\"hljs-string\">\'b\'</span>);\n    },0);\n    console.log(<span class=\"hljs-string\">\'c\'</span>);\n    console.log(<span class=\"hljs-string\">\'d\'</span>);\n</code></pre><p>控制台输出：<br>\na <br>\nc <br>\nd <br>\nb <br>\n我也不截图了。\n知道为什么吗，理论上他延迟时间为0不是应该马上执行吗，不是的。因为setTimeout运行机制说过，必须要等到当前脚本的同步任务和“任务队列”中已有的事件，全部处理完以后，才会执行setTimeout指定的任务。也就是说，setTimeout的真正作用是，在“任务队列”的现有事件的后面再添加一个事件，规定在指定时间执行某段代码。setTimeout添加的事件，会在下一次Event Loop执行。好吧，对事件循环不清楚的推荐看看<a target=\"_blank\" href=\"https://link.juejin.im/?target=http%3A%2F%2Fwww.ruanyifeng.com%2Fblog%2F2014%2F10%2Fevent-loop.html\" rel=\"nofollow noopener noreferrer\">阮一峰-avaScript 运行机制详解</a></p>\n<h5 class=\"heading\" data-id=\"heading-12\">到这里setTimeout还有什么没有说的呢，就是setTimeout的执行机制啊</h5>\n<h2 class=\"heading\" data-id=\"heading-13\">事件循环中的setTimeout():</h2>\n<p>众所周知，Javascript引擎（以下简称JS引擎）是单线程的，在某一个特定的时间内只能执行一个任务，并阻塞其他任务的执行，也就是说这些任务是串行的。这样的话，用户不得不等待一个耗时的操作完成之后才能进行后面的操作，这显然是不能容忍的，但是实际开发中我们却可以使用异步代码来解决。<br></p>\n<p>当异步方法比如这里的setTimeout()，或者ajax请求、DOM事件执行的时候，会交由浏览器内核的其他模块去管理。当异步的方法满足触发条件后，该模块就会将方法推入到一个任务队列中，当主线程代码执行完毕处于空闲状态的时候，就会去检查任务队列，将队列中第一个任务入栈执行，完毕后继续检查任务队列，如此循环。前提条件是主线程处于空闲状态，这就是事件循环的模型。</p>\n<p>正经的讲了一波理论，来个栗子吧：</p>\n<pre><code class=\"hljs bash\" lang=\"bash\"><span class=\"hljs-built_in\">set</span>Timeout(<span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span> () {\n    console.log(<span class=\"hljs-string\">\"b\"</span>);\n},0)\nconsole.log(<span class=\"hljs-string\">\"a\"</span>);\n</code></pre><p>控制台输出：<br>\na  <br>\nb <br>\n原理，就是上面两段话当中解释的，执行时把setTimeout()放入任务队列中去，主线程执行完主线程的任务之后去任务队列里面执行setTimeout出来执行。</p>\n<p>一样的道理：</p>\n<pre><code class=\"hljs bash\" lang=\"bash\"><span class=\"hljs-built_in\">set</span>Timeout(<span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span>(){\n  console.log(1111);\n},0)\n<span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {};\n</code></pre><p>这里控制台是永远不会输出东西的，因为主线程已经造成了死循环，主线程一直是不会空闲的，他不会到任务队列里面去执行拿setTimeout函数来执行。<br>\n推荐一篇文章，更好的理解：<a target=\"_blank\" href=\"https://link.juejin.im/?target=https%3A%2F%2Fwww.jianshu.com%2Fp%2F3e482748369d%3Ffrom%3Dgroupmessage\" rel=\"nofollow noopener noreferrer\">彻底理解setTimeout()</a></p>\n<h4 class=\"heading\" data-id=\"heading-14\">总结：<br></h4>\n<p>说了这么多，setTimeout是不是很强大，啊哈哈。但是如不能熟练掌握，不建议多用。毕竟在某些情景之下毕竟在某些情景之下，setTimeout作为一个hack的方式而存在的。</p>\n<p>到这里，首先，恭喜你，应该是收获满满了。其次可以点个赞😜</p>', '##### 面试官：“你知道定时器吗？”  \n我：“知道”  \n面试官：“那你说说什么是定时器”  \n我：“定时器是可以用setTimeout来实现的”  \n面试官：“setTimeout(function () { console.log(\"1\") },0);  \nconsole.log(\"2\");那你说说控制台上输出顺序是什么？”  \n我：支支吾吾......\n\n#### so....就有了这篇文章,唠叨了这么久，正文开始了！\n\nsetTimeout的语法功能：\n----------------\n\n##### setTimeout() 方法用于在指定的毫秒数后调用函数或计算表达式\n\n为了解释上面的那句话，来个简单的小例子：\n\n    \n    \n        <span class=\"hljs-built_in\">set</span>Timeout\n        \"Content-Type\" content=\"text/html; charset=utf-8\"/>\n    \n    \n        setTimeout\n        \"content\">测试\n        \n           <span class=\"hljs-built_in\">set</span>Timeout(<span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span> () {\n               <span class=\"hljs-built_in\">let</span> content = document.getElementById(<span class=\"hljs-string\">\'content\'</span>);\n               content.innerHTML = <span class=\"hljs-string\">\"<div>一秒后</div>\"</span>;\n           },1000);\n        \n    \n    \n    \n\nspan标签里面的内容一秒之后由“测试”变成了“一秒后”。\n\n### 记时器功能：\n\n来实现了：\n\n    \n    \n        <span class=\"hljs-built_in\">set</span>Timeout\n        \"Content-Type\" content=\"text/html; charset=utf-8\"/>\n    \n    \n        setTimeout\n        \"content\">时间\n        \"start()\">开始\n        \n            var x = 00,\n                y = 00,\n                z = 00;\n            <span class=\"hljs-keyword\">function</span> <span class=\"hljs-function\"><span class=\"hljs-title\">start</span></span> () {\n                <span class=\"hljs-keyword\">if</span> (x<= 59 && x>=0 && y<=59 && y>=0 && z<=59 && z>=0) {\n                   <span class=\"hljs-built_in\">let</span> content = document.getElementById(<span class=\"hljs-string\">\'content\'</span>);\n                   content.innerHTML = z + <span class=\"hljs-string\">\":\"</span> + y + <span class=\"hljs-string\">\":\"</span> + x;\n                   console.log(x);\n                   x = x + 1;\n                } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (y<=59 && y>=0 && z<=59 && z>=0) {\n                    y = y + 1;\n                    x = 0;\n                } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (z<=59 && z>=0){\n                    z = z + 1;\n                    x = 0;\n                    y = 0;\n                }\n                <span class=\"hljs-built_in\">set</span>Timeout (<span class=\"hljs-string\">\"start()\"</span>,1000);  //注意，这里调用要用引号包围\n            }\n        \n    \n    \n    \n\n控制台输出：\n\n这里点击之后执行start()函数，在函数里面setTimeout()函数又调用了start(),所以就是一秒钟调用一次start()函数。\n\nsetTimeout()的参数：\n----------------\n\n大家都知道setInterval()和setTimeout()可以接收两个参数，第一个参数是需要回调的函数，必须传入的参数，第二个参数是时间间隔，毫秒数，可以省略。但其实他可以接收更多的参数，那么这些参数是干什么用的呢？从第三个参数开始，依次用来表示传入回调函数的参数。\n\n例子：\n\n    setTimeout(function(a,b){\n       console.log(0+a+b);//这里打印的是：7\n    },1000,3,4);\n    \n\n##### 注意：IE 9.0及以下版本，只允许setTimeout有两个参数，不支持更多的参数\n\n如果想向回调函数传参，可以用bind()。  \neg:\n\n    setTimeout( function(a,b){}.bind(3,4), 1000 );\n    \n\n##### 那我怎么去除定时器呢(惆怅脸)？别急，别急，我来告诉你！\n\nclearTimeout():\n---------------\n\nsetTimeout函数，返回一个表示计数器编号的整数值，将该整数传入clearTimeout函数，就可以取消对应的定时器。\n\nclearTimout()有以下语法: clearTimeout(timeoutID)  \n要使用 clearTimeout( ), 我们设定 setTimeout( ) 时, 要给予这 setTimout( ) 一个名称, 这名称就是 timeoutID , 我们叫停时, 就是用这 timeoutID来叫停, 这是一个自定义名称。\n\n用法：\n\n    var id1 = setTimeout(f,1000);  //id1就是timeoutID\n    var id2 = setInterval(f,1000); //id2就是timeoutID\n    \n    clearTimeout(id1);\n    clearInterval(id2);\n    \n\nsetTimeout()的this指向：\n--------------------\n\n对于javascript中的this指向问题，之前也是困扰了我好久，哎呀，哪儿有那么难嘛，其实一句话就是说:谁调用的就是指向谁啊！意思就是说调用的对象是谁this就是指向谁。\n\n那这样说来个栗子咯：\n\n    var x = 1;\n    var obj = {\n      x: 2,\n      y: function(){\n        console.log(this.x);\n      }\n    };\n    setTimeout(obj.y,1000);  // 1\n    \n    \n\nwhy?不是说了哪个对象调用的就是指向哪个对象的嘛，这里不是setTimeout函数调用了obj对象里面的y方法吗，那不还是被setTimeout调用了吗，对啊，没错啊，就是setTimeout调用的，但是setTimeout函数是属于window的，知道吧，所以setTimeout的对象是window，所以一切都明了了。\n\n##### 懂了吧，那就来考考你，准备接招啦！\n\n    function Animal(login) {\n      this.login = login;\n      this.sayHi = function() {\n        console.log(this.login);  //undefined\n      }\n    }\n    var dog = new Animal(\'John\');\n    setTimeout(dog.sayHi, 1000);\n    \n    \n\n哈哈哈，答对了吧，哇👋，但是没有奖励😂\n\n等到dog.sayHi执行时，它是在全局对象中执行，但是this.login取不到值。\n\nsetTimeout()之延迟时间为0\n-------------------\n\n要回答面试官问我的问题了😂。哇，血的教训，来来来 直接一点来栗子吧：\n\n        console.log(\'a\');\n        setTimeout(function(){\n        console.log(\'b\');\n        },0);\n        console.log(\'c\');\n        console.log(\'d\');\n    \n\n控制台输出：  \na  \nc  \nd  \nb  \n我也不截图了。 知道为什么吗，理论上他延迟时间为0不是应该马上执行吗，不是的。因为setTimeout运行机制说过，必须要等到当前脚本的同步任务和“任务队列”中已有的事件，全部处理完以后，才会执行setTimeout指定的任务。也就是说，setTimeout的真正作用是，在“任务队列”的现有事件的后面再添加一个事件，规定在指定时间执行某段代码。setTimeout添加的事件，会在下一次Event Loop执行。好吧，对事件循环不清楚的推荐看看[阮一峰-avaScript 运行机制详解](https://link.juejin.im/?target=http%3A%2F%2Fwww.ruanyifeng.com%2Fblog%2F2014%2F10%2Fevent-loop.html)\n\n##### 到这里setTimeout还有什么没有说的呢，就是setTimeout的执行机制啊\n\n事件循环中的setTimeout():\n-------------------\n\n众所周知，Javascript引擎（以下简称JS引擎）是单线程的，在某一个特定的时间内只能执行一个任务，并阻塞其他任务的执行，也就是说这些任务是串行的。这样的话，用户不得不等待一个耗时的操作完成之后才能进行后面的操作，这显然是不能容忍的，但是实际开发中我们却可以使用异步代码来解决。  \n\n当异步方法比如这里的setTimeout()，或者ajax请求、DOM事件执行的时候，会交由浏览器内核的其他模块去管理。当异步的方法满足触发条件后，该模块就会将方法推入到一个任务队列中，当主线程代码执行完毕处于空闲状态的时候，就会去检查任务队列，将队列中第一个任务入栈执行，完毕后继续检查任务队列，如此循环。前提条件是主线程处于空闲状态，这就是事件循环的模型。\n\n正经的讲了一波理论，来个栗子吧：\n\n    setTimeout(function () {\n        console.log(\"b\");\n    },0)\n    console.log(\"a\");\n    \n\n控制台输出：  \na  \nb  \n原理，就是上面两段话当中解释的，执行时把setTimeout()放入任务队列中去，主线程执行完主线程的任务之后去任务队列里面执行setTimeout出来执行。\n\n一样的道理：\n\n    setTimeout(function(){\n      console.log(1111);\n    },0)\n    while (true) {};\n    \n\n这里控制台是永远不会输出东西的，因为主线程已经造成了死循环，主线程一直是不会空闲的，他不会到任务队列里面去执行拿setTimeout函数来执行。  \n推荐一篇文章，更好的理解：[彻底理解setTimeout()](https://link.juejin.im/?target=https%3A%2F%2Fwww.jianshu.com%2Fp%2F3e482748369d%3Ffrom%3Dgroupmessage)\n\n#### 总结：  \n\n说了这么多，setTimeout是不是很强大，啊哈哈。但是如不能熟练掌握，不建议多用。毕竟在某些情景之下毕竟在某些情景之下，setTimeout作为一个hack的方式而存在的。\n\n到这里，首先，恭喜你，应该是收获满满了。其次可以点个赞😜', 0, 1, 0);
INSERT INTO `post` (`id`, `createAt`, `updateAt`, `title`, `description`, `thumb`, `url`, `html`, `markdown`, `views`, `status`, `push`) VALUES
(24, '2018-04-23 11:01:41.971141', '2018-04-23 11:01:41.971141', '从Nest到Nesk -- 模块化Node框架的实践', '文：达孚本文原创，转载请注明作者及出处首先上一下项目地址：Nest：https://github.com/nestjs/nestNesk：https://github.com/kyoko-df/neskNest初认识Nest是一个深受angular激发的基于express的node框架，按照官网说明是一个旨在提供一个开箱即用的应用程序体系结构，允许轻松创建高度可测试，可扩展，松散耦合且易于维护的应用程序。在设计层面虽然说是深受angular激发，但其实从后端开发角度来说类似于大家熟悉的JavaSpring', 'https://mmbiz.qpic.cn/mmbiz_png/pibXop4Ees9picJsFiaeqLXhBCdFtRLY5vn0ib25NUNHNeB52mDqZBNRZRV1QP1icYPicrVB12a4OPMEdARffZ1bCXSA/640?wx_fmt=png', 'https://mp.weixin.qq.com/s/mG4vf3mAHui2GovsZE3CLw', '<p style=\"margin-right: 8px;margin-bottom: 5px;margin-left: 8px;max-width: 100%;min-height: 1em;color: rgb(62, 62, 62);font-size: 16px;white-space: normal;background-color: rgb(255, 255, 255);text-align: justify;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 12px;color: rgb(136, 136, 136);box-sizing: border-box !important;word-wrap: break-word !important;\">文： 达孚</span></p><h1 style=\"margin-right: 8px;margin-bottom: 5px;margin-left: 8px;max-width: 100%;color: rgb(62, 62, 62);white-space: normal;background-color: rgb(255, 255, 255);text-align: justify;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 12px;color: rgb(136, 136, 136);box-sizing: border-box !important;word-wrap: break-word !important;\">本文原创，转载请注明作者及出处</span></h1><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;\">首先上一下项目地址：</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;\"><span style=\";\">Nest：https://github.com/nestjs/nest</span></p><p>Nesk：https://github.com/kyoko-df/nesk</p><h3 style=\"box-sizing: border-box;margin-top: 1.5rem;margin-bottom: 1rem;color: rgb(21, 153, 87);line-height: 1.35;font-size: 20px;white-space: normal;\">Nest初认识</h3><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;\">Nest是一个深受angular激发的基于express的node框架，按照官网说明是一个旨在提供一个开箱即用的应用程序体系结构，允许轻松创建高度可测试，可扩展，松散耦合且易于维护的应用程序。</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;\">在设计层面虽然说是深受angular激发，但其实从后端开发角度来说类似于大家熟悉的Java Spring架构，使用了大量切面编程技巧，再通过装饰器的结合完全了关注上的分离。同时使用了Typescript(也支持Javascript)为主要开发语言，更保证了整个后端系统的健壮性。</p><h3 style=\"box-sizing: border-box;margin-top: 1.5rem;margin-bottom: 1rem;color: rgb(21, 153, 87);line-height: 1.35;font-size: 20px;white-space: normal;\">强大的Nest架构</h3><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;\">那首先为什么需要Nest框架，我们从去年开始大规模使用Node来替代原有的后端View层开发，给予了前端开发除了SPA以外的前后端分离方式。早期Node层的工作很简单-渲染页面代理接口，但在渐渐使用中大家会给Node层更多的寄托，尤其是一些内部项目中，你让后端还要将一些现有的SOA接口进行包装，对方往往是不愿意的。那么我们势必要在Node层承接更多的业务，包括不限于对数据的组合包装，对请求的权限校验，对请求数据的validate等等，早期我们的框架是最传统的MVC架构，但是我们翻阅业务代码，往往最后变成复杂且很难维护的Controller层代码（从权限校验到页面渲染一把撸到底:)）。</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;\">那么我们现在看看Nest可以做什么？从一个最简单的官方例子开始看：</p><pre class=\"prettyprint linenums prettyprinted\" style=\"box-sizing: border-box;margin-top: 0px;margin-bottom: 0px;padding: 8px 0px 6px;background-color: rgb(32, 32, 29);border-radius: 0px;overflow-y: auto;color: rgb(80, 97, 109);font-size: 10px;line-height: 12px;\"><ol class=\"linenums list-paddingleft-2\" style=\"list-style-type: none;\"><li><p><span style=\"box-sizing: border-box;color: rgb(74, 74, 74);display: block;line-height: 22px;font-size: 14px !important;word-break: inherit !important;\"><span style=\"box-sizing: border-box;line-height: 22px;display: block;word-break: inherit !important;\"><code class=\"ts language-ts\" style=\"box-sizing: border-box;margin-left: -20px;display: flex;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;font-size: 10px;font-family: inherit !important;white-space: pre !important;\"><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(184, 84, 212);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">async</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\"> </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(184, 84, 212);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">function</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\"> bootstrap</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">()</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\"> </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">{</span></code></span></span></p></li><li><p><span style=\"box-sizing: border-box;color: rgb(74, 74, 74);display: block;line-height: 22px;font-size: 14px !important;word-break: inherit !important;\"><span style=\"box-sizing: border-box;line-height: 22px;display: block;word-break: inherit !important;\"><code class=\"ts language-ts\" style=\"box-sizing: border-box;margin-left: -20px;display: flex;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;font-size: 10px;font-family: inherit !important;white-space: pre !important;\"><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">  </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(184, 84, 212);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">const</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\"> app </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">=</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\"> </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(184, 84, 212);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">await</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\"> </span><span class=\"typ\" style=\"box-sizing: border-box;color: rgb(102, 132, 225);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">NestFactory</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">.</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">create</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">(</span><span class=\"typ\" style=\"box-sizing: border-box;color: rgb(102, 132, 225);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">ApplicationModule</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">);</span></code></span></span></p></li><li><p><span style=\"box-sizing: border-box;color: rgb(74, 74, 74);display: block;line-height: 22px;font-size: 14px !important;word-break: inherit !important;\"><span style=\"box-sizing: border-box;line-height: 22px;display: block;word-break: inherit !important;\"><code class=\"ts language-ts\" style=\"box-sizing: border-box;margin-left: -20px;display: flex;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;font-size: 10px;font-family: inherit !important;white-space: pre !important;\"><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">  app</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">.</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">useGlobalPipes</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">(</span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(184, 84, 212);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">new</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\"> </span><span class=\"typ\" style=\"box-sizing: border-box;color: rgb(102, 132, 225);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">ValidationPipe</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">());</span></code></span></span></p></li><li><p><span style=\"box-sizing: border-box;color: rgb(74, 74, 74);display: block;line-height: 22px;font-size: 14px !important;word-break: inherit !important;\"><span style=\"box-sizing: border-box;line-height: 22px;display: block;word-break: inherit !important;\"><code class=\"ts language-ts\" style=\"box-sizing: border-box;margin-left: -20px;display: flex;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;font-size: 10px;font-family: inherit !important;white-space: pre !important;\"><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">  </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(184, 84, 212);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">await</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\"> app</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">.</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">listen</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">(</span><span class=\"lit\" style=\"box-sizing: border-box;color: rgb(182, 86, 17);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">3000</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">);</span></code></span></span></p></li><li><p><span style=\"box-sizing: border-box;color: rgb(74, 74, 74);display: block;line-height: 22px;font-size: 14px !important;word-break: inherit !important;\"><span style=\"box-sizing: border-box;line-height: 22px;display: block;word-break: inherit !important;\"><code class=\"ts language-ts\" style=\"box-sizing: border-box;margin-left: -20px;display: flex;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;font-size: 10px;font-family: inherit !important;white-space: pre !important;\"><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">}</span></code></span></span></p></li><li><p><span style=\"box-sizing: border-box;color: rgb(74, 74, 74);display: block;line-height: 22px;font-size: 14px !important;word-break: inherit !important;\"><span style=\"box-sizing: border-box;line-height: 22px;display: block;word-break: inherit !important;\"><code class=\"ts language-ts\" style=\"box-sizing: border-box;margin-left: -20px;display: flex;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;font-size: 10px;font-family: inherit !important;white-space: pre !important;\"><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">bootstrap</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">();</span></code></span></span></p></li></ol></pre><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;\">这里就启动了一个nest实例，先不看这个ValidationPipe，看ApplicationModule的内容：</p><pre class=\"prettyprint linenums prettyprinted\" style=\"box-sizing: border-box;margin-top: 0px;margin-bottom: 0px;padding: 8px 0px 6px;background-color: rgb(32, 32, 29);border-radius: 0px;overflow-y: auto;color: rgb(80, 97, 109);font-size: 10px;line-height: 12px;\"><ol class=\"linenums list-paddingleft-2\" style=\"list-style-type: none;\"><li><p><span style=\"box-sizing: border-box;color: rgb(74, 74, 74);display: block;line-height: 22px;font-size: 14px !important;word-break: inherit !important;\"><span style=\"box-sizing: border-box;line-height: 22px;display: block;word-break: inherit !important;\"><code class=\"ts language-ts\" style=\"box-sizing: border-box;margin-left: -20px;display: flex;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;font-size: 10px;font-family: inherit !important;white-space: pre !important;\"><span class=\"lit\" style=\"box-sizing: border-box;color: rgb(182, 86, 17);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">@Module</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">({</span></code></span></span></p></li><li><p><span style=\"box-sizing: border-box;color: rgb(74, 74, 74);display: block;line-height: 22px;font-size: 14px !important;word-break: inherit !important;\"><span style=\"box-sizing: border-box;line-height: 22px;display: block;word-break: inherit !important;\"><code class=\"ts language-ts\" style=\"box-sizing: border-box;margin-left: -20px;display: flex;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;font-size: 10px;font-family: inherit !important;white-space: pre !important;\"><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">  imports</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">:</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\"> </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">[</span><span class=\"typ\" style=\"box-sizing: border-box;color: rgb(102, 132, 225);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">CatsModule</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">],</span></code></span></span></p></li><li><p><span style=\"box-sizing: border-box;color: rgb(74, 74, 74);display: block;line-height: 22px;font-size: 14px !important;word-break: inherit !important;\"><span style=\"box-sizing: border-box;line-height: 22px;display: block;word-break: inherit !important;\"><code class=\"ts language-ts\" style=\"box-sizing: border-box;margin-left: -20px;display: flex;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;font-size: 10px;font-family: inherit !important;white-space: pre !important;\"><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">})</span></code></span></span></p></li><li><p><span style=\"box-sizing: border-box;color: rgb(74, 74, 74);display: block;line-height: 22px;font-size: 14px !important;word-break: inherit !important;\"><span style=\"box-sizing: border-box;line-height: 22px;display: block;word-break: inherit !important;\"><code class=\"ts language-ts\" style=\"box-sizing: border-box;margin-left: -20px;display: flex;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;font-size: 10px;font-family: inherit !important;white-space: pre !important;\"><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(184, 84, 212);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">export</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\"> </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(184, 84, 212);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">class</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\"> </span><span class=\"typ\" style=\"box-sizing: border-box;color: rgb(102, 132, 225);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">ApplicationModule</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\"> </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(184, 84, 212);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">implements</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\"> </span><span class=\"typ\" style=\"box-sizing: border-box;color: rgb(102, 132, 225);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">NestModule</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\"> </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">{</span></code></span></span></p></li><li><p><span style=\"box-sizing: border-box;color: rgb(74, 74, 74);display: block;line-height: 22px;font-size: 14px !important;word-break: inherit !important;\"><span style=\"box-sizing: border-box;line-height: 22px;display: block;word-break: inherit !important;\"><code class=\"ts language-ts\" style=\"box-sizing: border-box;margin-left: -20px;display: flex;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;font-size: 10px;font-family: inherit !important;white-space: pre !important;\"><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">  configure</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">(</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">consumer</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">:</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\"> </span><span class=\"typ\" style=\"box-sizing: border-box;color: rgb(102, 132, 225);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">MiddlewaresConsumer</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">):</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\"> </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(184, 84, 212);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">void</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\"> </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">{</span></code></span></span></p></li><li><p><span style=\"box-sizing: border-box;color: rgb(74, 74, 74);display: block;line-height: 22px;font-size: 14px !important;word-break: inherit !important;\"><span style=\"box-sizing: border-box;line-height: 22px;display: block;word-break: inherit !important;\"><code class=\"ts language-ts\" style=\"box-sizing: border-box;margin-left: -20px;display: flex;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;font-size: 10px;font-family: inherit !important;white-space: pre !important;\"><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">    consumer</span></code></span></span></p></li><li><p><span style=\"box-sizing: border-box;color: rgb(74, 74, 74);display: block;line-height: 22px;font-size: 14px !important;word-break: inherit !important;\"><span style=\"box-sizing: border-box;line-height: 22px;display: block;word-break: inherit !important;\"><code class=\"ts language-ts\" style=\"box-sizing: border-box;margin-left: -20px;display: flex;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;font-size: 10px;font-family: inherit !important;white-space: pre !important;\"><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">      </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">.</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">apply</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">(</span><span class=\"typ\" style=\"box-sizing: border-box;color: rgb(102, 132, 225);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">LoggerMiddleware</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">)</span></code></span></span></p></li><li><p><span style=\"box-sizing: border-box;color: rgb(74, 74, 74);display: block;line-height: 22px;font-size: 14px !important;word-break: inherit !important;\"><span style=\"box-sizing: border-box;line-height: 22px;display: block;word-break: inherit !important;\"><code class=\"ts language-ts\" style=\"box-sizing: border-box;margin-left: -20px;display: flex;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;font-size: 10px;font-family: inherit !important;white-space: pre !important;\"><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">      </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">.</span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(184, 84, 212);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">with</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">(</span><span class=\"str\" style=\"box-sizing: border-box;color: rgb(96, 172, 57);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">\'ApplicationModule\'</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">)</span></code></span></span></p></li><li><p><span style=\"box-sizing: border-box;color: rgb(74, 74, 74);display: block;line-height: 22px;font-size: 14px !important;word-break: inherit !important;\"><span style=\"box-sizing: border-box;line-height: 22px;display: block;word-break: inherit !important;\"><code class=\"ts language-ts\" style=\"box-sizing: border-box;margin-left: -20px;display: flex;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;font-size: 10px;font-family: inherit !important;white-space: pre !important;\"><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">      </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">.</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">forRoutes</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">(</span><span class=\"typ\" style=\"box-sizing: border-box;color: rgb(102, 132, 225);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">CatsController</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">);</span></code></span></span></p></li><li><p><span style=\"box-sizing: border-box;color: rgb(74, 74, 74);display: block;line-height: 22px;font-size: 14px !important;word-break: inherit !important;\"><span style=\"box-sizing: border-box;line-height: 22px;display: block;word-break: inherit !important;\"><code class=\"ts language-ts\" style=\"box-sizing: border-box;margin-left: -20px;display: flex;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;font-size: 10px;font-family: inherit !important;white-space: pre !important;\"><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">  </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">}</span></code></span></span></p></li><li><p><span style=\"box-sizing: border-box;color: rgb(74, 74, 74);display: block;line-height: 22px;font-size: 14px !important;word-break: inherit !important;\"><span style=\"box-sizing: border-box;line-height: 22px;display: block;word-break: inherit !important;\"><code class=\"ts language-ts\" style=\"box-sizing: border-box;margin-left: -20px;display: flex;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;font-size: 10px;font-family: inherit !important;white-space: pre !important;\"><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">}</span></code></span></span></p></li></ol></pre><pre class=\"prettyprint linenums prettyprinted\" style=\"box-sizing: border-box;margin-top: 0px;margin-bottom: 0px;padding: 8px 0px 6px;background-color: rgb(32, 32, 29);border-radius: 0px;overflow-y: auto;color: rgb(80, 97, 109);font-size: 10px;line-height: 12px;\"><ol class=\"linenums list-paddingleft-2\" style=\"list-style-type: none;\"><li><p><span style=\"box-sizing: border-box;color: rgb(74, 74, 74);display: block;line-height: 22px;font-size: 14px !important;word-break: inherit !important;\"><span style=\"box-sizing: border-box;line-height: 22px;display: block;word-break: inherit !important;\"><code class=\"ts language-ts\" style=\"box-sizing: border-box;margin-left: -20px;display: flex;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;font-size: 10px;font-family: inherit !important;white-space: pre !important;\"><span class=\"lit\" style=\"box-sizing: border-box;color: rgb(182, 86, 17);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">@Module</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">({</span></code></span></span></p></li><li><p><span style=\"box-sizing: border-box;color: rgb(74, 74, 74);display: block;line-height: 22px;font-size: 14px !important;word-break: inherit !important;\"><span style=\"box-sizing: border-box;line-height: 22px;display: block;word-break: inherit !important;\"><code class=\"ts language-ts\" style=\"box-sizing: border-box;margin-left: -20px;display: flex;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;font-size: 10px;font-family: inherit !important;white-space: pre !important;\"><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">  controllers</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">:</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\"> </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">[</span><span class=\"typ\" style=\"box-sizing: border-box;color: rgb(102, 132, 225);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">CatsController</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">],</span></code></span></span></p></li><li><p><span style=\"box-sizing: border-box;color: rgb(74, 74, 74);display: block;line-height: 22px;font-size: 14px !important;word-break: inherit !important;\"><span style=\"box-sizing: border-box;line-height: 22px;display: block;word-break: inherit !important;\"><code class=\"ts language-ts\" style=\"box-sizing: border-box;margin-left: -20px;display: flex;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;font-size: 10px;font-family: inherit !important;white-space: pre !important;\"><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">  components</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">:</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\"> </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">[</span><span class=\"typ\" style=\"box-sizing: border-box;color: rgb(102, 132, 225);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">CatsService</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">],</span></code></span></span></p></li><li><p><span style=\"box-sizing: border-box;color: rgb(74, 74, 74);display: block;line-height: 22px;font-size: 14px !important;word-break: inherit !important;\"><span style=\"box-sizing: border-box;line-height: 22px;display: block;word-break: inherit !important;\"><code class=\"ts language-ts\" style=\"box-sizing: border-box;margin-left: -20px;display: flex;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;font-size: 10px;font-family: inherit !important;white-space: pre !important;\"><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">})</span></code></span></span></p></li><li><p><span style=\"box-sizing: border-box;color: rgb(74, 74, 74);display: block;line-height: 22px;font-size: 14px !important;word-break: inherit !important;\"><span style=\"box-sizing: border-box;line-height: 22px;display: block;word-break: inherit !important;\"><code class=\"ts language-ts\" style=\"box-sizing: border-box;margin-left: -20px;display: flex;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;font-size: 10px;font-family: inherit !important;white-space: pre !important;\"><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(184, 84, 212);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">export</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\"> </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(184, 84, 212);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">class</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\"> </span><span class=\"typ\" style=\"box-sizing: border-box;color: rgb(102, 132, 225);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">CatsModule</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\"> </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">{}</span></code></span></span></p></li></ol></pre><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;\">这里看到nest的第一层入口module，也就是模块化开发的根本，所有的controller，component等等都可以根据业务切分到某个模块，然后模块之间还可以嵌套，成为一个完整的体系，借用张nest官方的图：</p><p style=\"text-align: center;\"><img class=\"\" data-copyright=\"0\" data-ratio=\"0.5422680412371134\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/pibXop4Ees9picJsFiaeqLXhBCdFtRLY5vn0ib25NUNHNeB52mDqZBNRZRV1QP1icYPicrVB12a4OPMEdARffZ1bCXSA/640?wx_fmt=png\" data-type=\"png\" data-w=\"970\" style=\"\"></p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;\">在nest中的component概念其实一切可以注入的对象，对于依赖注入这个概念在此不做深入解释，可以理解为开发者不需要实例化类，框架会进行实例化且保存为单例供使用。</p><pre class=\"prettyprint linenums prettyprinted\" style=\"box-sizing: border-box;margin-top: 0px;margin-bottom: 0px;padding: 8px 0px 6px;background-color: rgb(32, 32, 29);border-radius: 0px;overflow-y: auto;color: rgb(80, 97, 109);font-size: 10px;line-height: 12px;\"><ol class=\"linenums list-paddingleft-2\" style=\"list-style-type: none;\"><li><p><span style=\"box-sizing: border-box;color: rgb(74, 74, 74);display: block;line-height: 22px;font-size: 14px !important;word-break: inherit !important;\"><span style=\"box-sizing: border-box;line-height: 22px;display: block;word-break: inherit !important;\"><code class=\"ts language-ts\" style=\"box-sizing: border-box;margin-left: -20px;display: flex;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;font-size: 10px;font-family: inherit !important;white-space: pre !important;\"><span class=\"lit\" style=\"box-sizing: border-box;color: rgb(182, 86, 17);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">@Controller</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">(</span><span class=\"str\" style=\"box-sizing: border-box;color: rgb(96, 172, 57);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">\'cats\'</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">)</span></code></span></span></p></li><li><p><span style=\"box-sizing: border-box;color: rgb(74, 74, 74);display: block;line-height: 22px;font-size: 14px !important;word-break: inherit !important;\"><span style=\"box-sizing: border-box;line-height: 22px;display: block;word-break: inherit !important;\"><code class=\"ts language-ts\" style=\"box-sizing: border-box;margin-left: -20px;display: flex;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;font-size: 10px;font-family: inherit !important;white-space: pre !important;\"><span class=\"lit\" style=\"box-sizing: border-box;color: rgb(182, 86, 17);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">@UseGuards</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">(</span><span class=\"typ\" style=\"box-sizing: border-box;color: rgb(102, 132, 225);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">RolesGuard</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">)</span></code></span></span></p></li><li><p><span style=\"box-sizing: border-box;color: rgb(74, 74, 74);display: block;line-height: 22px;font-size: 14px !important;word-break: inherit !important;\"><span style=\"box-sizing: border-box;line-height: 22px;display: block;word-break: inherit !important;\"><code class=\"ts language-ts\" style=\"box-sizing: border-box;margin-left: -20px;display: flex;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;font-size: 10px;font-family: inherit !important;white-space: pre !important;\"><span class=\"lit\" style=\"box-sizing: border-box;color: rgb(182, 86, 17);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">@UseInterceptors</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">(</span><span class=\"typ\" style=\"box-sizing: border-box;color: rgb(102, 132, 225);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">LoggingInterceptor</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">,</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\"> </span><span class=\"typ\" style=\"box-sizing: border-box;color: rgb(102, 132, 225);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">TransformInterceptor</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">)</span></code></span></span></p></li><li><p><span style=\"box-sizing: border-box;color: rgb(74, 74, 74);display: block;line-height: 22px;font-size: 14px !important;word-break: inherit !important;\"><span style=\"box-sizing: border-box;line-height: 22px;display: block;word-break: inherit !important;\"><code class=\"ts language-ts\" style=\"box-sizing: border-box;margin-left: -20px;display: flex;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;font-size: 10px;font-family: inherit !important;white-space: pre !important;\"><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(184, 84, 212);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">export</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\"> </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(184, 84, 212);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">class</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\"> </span><span class=\"typ\" style=\"box-sizing: border-box;color: rgb(102, 132, 225);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">CatsController</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\"> </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">{</span></code></span></span></p></li><li><p><span style=\"box-sizing: border-box;color: rgb(74, 74, 74);display: block;line-height: 22px;font-size: 14px !important;word-break: inherit !important;\"><span style=\"box-sizing: border-box;line-height: 22px;display: block;word-break: inherit !important;\"><code class=\"ts language-ts\" style=\"box-sizing: border-box;margin-left: -20px;display: flex;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;font-size: 10px;font-family: inherit !important;white-space: pre !important;\"><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">  constructor</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">(</span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(184, 84, 212);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">private</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\"> </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(184, 84, 212);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">readonly</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\"> catsService</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">:</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\"> </span><span class=\"typ\" style=\"box-sizing: border-box;color: rgb(102, 132, 225);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">CatsService</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">)</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\"> </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">{}</span></code></span></span></p></li><li><p><span style=\"box-sizing: border-box;color: rgb(74, 74, 74);display: block;line-height: 22px;font-size: 14px !important;word-break: inherit !important;\"><span style=\"box-sizing: border-box;line-height: 22px;display: block;word-break: inherit !important;\"><code class=\"ts language-ts\" style=\"box-sizing: border-box;margin-left: -20px;display: flex;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;font-size: 10px;font-family: inherit !important;white-space: pre !important;\"></code></span></span></p></li><li><p><span style=\"box-sizing: border-box;color: rgb(74, 74, 74);display: block;line-height: 22px;font-size: 14px !important;word-break: inherit !important;\"><span style=\"box-sizing: border-box;line-height: 22px;display: block;word-break: inherit !important;\"><code class=\"ts language-ts\" style=\"box-sizing: border-box;margin-left: -20px;display: flex;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;font-size: 10px;font-family: inherit !important;white-space: pre !important;\"><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">  </span><span class=\"lit\" style=\"box-sizing: border-box;color: rgb(182, 86, 17);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">@Post</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">()</span></code></span></span></p></li><li><p><span style=\"box-sizing: border-box;color: rgb(74, 74, 74);display: block;line-height: 22px;font-size: 14px !important;word-break: inherit !important;\"><span style=\"box-sizing: border-box;line-height: 22px;display: block;word-break: inherit !important;\"><code class=\"ts language-ts\" style=\"box-sizing: border-box;margin-left: -20px;display: flex;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;font-size: 10px;font-family: inherit !important;white-space: pre !important;\"><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">  </span><span class=\"lit\" style=\"box-sizing: border-box;color: rgb(182, 86, 17);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">@Roles</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">(</span><span class=\"str\" style=\"box-sizing: border-box;color: rgb(96, 172, 57);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">\'admin\'</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">)</span></code></span></span></p></li><li><p><span style=\"box-sizing: border-box;color: rgb(74, 74, 74);display: block;line-height: 22px;font-size: 14px !important;word-break: inherit !important;\"><span style=\"box-sizing: border-box;line-height: 22px;display: block;word-break: inherit !important;\"><code class=\"ts language-ts\" style=\"box-sizing: border-box;margin-left: -20px;display: flex;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;font-size: 10px;font-family: inherit !important;white-space: pre !important;\"><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">  </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(184, 84, 212);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">async</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\"> create</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">(</span><span class=\"lit\" style=\"box-sizing: border-box;color: rgb(182, 86, 17);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">@Body</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">()</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\"> createCatDto</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">:</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\"> </span><span class=\"typ\" style=\"box-sizing: border-box;color: rgb(102, 132, 225);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">CreateCatDto</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">)</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\"> </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">{</span></code></span></span></p></li><li><p><span style=\"box-sizing: border-box;color: rgb(74, 74, 74);display: block;line-height: 22px;font-size: 14px !important;word-break: inherit !important;\"><span style=\"box-sizing: border-box;line-height: 22px;display: block;word-break: inherit !important;\"><code class=\"ts language-ts\" style=\"box-sizing: border-box;margin-left: -20px;display: flex;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;font-size: 10px;font-family: inherit !important;white-space: pre !important;\"><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">    </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(184, 84, 212);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">this</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">.</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">catsService</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">.</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">create</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">(</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">createCatDto</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">);</span></code></span></span></p></li><li><p><span style=\"box-sizing: border-box;color: rgb(74, 74, 74);display: block;line-height: 22px;font-size: 14px !important;word-break: inherit !important;\"><span style=\"box-sizing: border-box;line-height: 22px;display: block;word-break: inherit !important;\"><code class=\"ts language-ts\" style=\"box-sizing: border-box;margin-left: -20px;display: flex;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;font-size: 10px;font-family: inherit !important;white-space: pre !important;\"><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">  </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">}</span></code></span></span></p></li><li><p><span style=\"box-sizing: border-box;color: rgb(74, 74, 74);display: block;line-height: 22px;font-size: 14px !important;word-break: inherit !important;\"><span style=\"box-sizing: border-box;line-height: 22px;display: block;word-break: inherit !important;\"><code class=\"ts language-ts\" style=\"box-sizing: border-box;margin-left: -20px;display: flex;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;font-size: 10px;font-family: inherit !important;white-space: pre !important;\"></code></span></span></p></li><li><p><span style=\"box-sizing: border-box;color: rgb(74, 74, 74);display: block;line-height: 22px;font-size: 14px !important;word-break: inherit !important;\"><span style=\"box-sizing: border-box;line-height: 22px;display: block;word-break: inherit !important;\"><code class=\"ts language-ts\" style=\"box-sizing: border-box;margin-left: -20px;display: flex;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;font-size: 10px;font-family: inherit !important;white-space: pre !important;\"><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">  </span><span class=\"lit\" style=\"box-sizing: border-box;color: rgb(182, 86, 17);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">@Get</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">()</span></code></span></span></p></li><li><p><span style=\"box-sizing: border-box;color: rgb(74, 74, 74);display: block;line-height: 22px;font-size: 14px !important;word-break: inherit !important;\"><span style=\"box-sizing: border-box;line-height: 22px;display: block;word-break: inherit !important;\"><code class=\"ts language-ts\" style=\"box-sizing: border-box;margin-left: -20px;display: flex;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;font-size: 10px;font-family: inherit !important;white-space: pre !important;\"><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">  </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(184, 84, 212);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">async</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\"> findAll</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">():</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\"> </span><span class=\"typ\" style=\"box-sizing: border-box;color: rgb(102, 132, 225);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">Promise</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\"><</span><span class=\"typ\" style=\"box-sizing: border-box;color: rgb(102, 132, 225);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">Cat</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">[]></span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\"> </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">{</span></code></span></span></p></li><li><p><span style=\"box-sizing: border-box;color: rgb(74, 74, 74);display: block;line-height: 22px;font-size: 14px !important;word-break: inherit !important;\"><span style=\"box-sizing: border-box;line-height: 22px;display: block;word-break: inherit !important;\"><code class=\"ts language-ts\" style=\"box-sizing: border-box;margin-left: -20px;display: flex;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;font-size: 10px;font-family: inherit !important;white-space: pre !important;\"><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">    </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(184, 84, 212);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">return</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\"> </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(184, 84, 212);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">this</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">.</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">catsService</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">.</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">findAll</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">();</span></code></span></span></p></li><li><p><span style=\"box-sizing: border-box;color: rgb(74, 74, 74);display: block;line-height: 22px;font-size: 14px !important;word-break: inherit !important;\"><span style=\"box-sizing: border-box;line-height: 22px;display: block;word-break: inherit !important;\"><code class=\"ts language-ts\" style=\"box-sizing: border-box;margin-left: -20px;display: flex;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;font-size: 10px;font-family: inherit !important;white-space: pre !important;\"><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">  </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">}</span></code></span></span></p></li><li><p><span style=\"box-sizing: border-box;color: rgb(74, 74, 74);display: block;line-height: 22px;font-size: 14px !important;word-break: inherit !important;\"><span style=\"box-sizing: border-box;line-height: 22px;display: block;word-break: inherit !important;\"><code class=\"ts language-ts\" style=\"box-sizing: border-box;margin-left: -20px;display: flex;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;font-size: 10px;font-family: inherit !important;white-space: pre !important;\"></code></span></span></p></li><li><p><span style=\"box-sizing: border-box;color: rgb(74, 74, 74);display: block;line-height: 22px;font-size: 14px !important;word-break: inherit !important;\"><span style=\"box-sizing: border-box;line-height: 22px;display: block;word-break: inherit !important;\"><code class=\"ts language-ts\" style=\"box-sizing: border-box;margin-left: -20px;display: flex;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;font-size: 10px;font-family: inherit !important;white-space: pre !important;\"><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">  </span><span class=\"lit\" style=\"box-sizing: border-box;color: rgb(182, 86, 17);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">@Get</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">(</span><span class=\"str\" style=\"box-sizing: border-box;color: rgb(96, 172, 57);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">\':id\'</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">)</span></code></span></span></p></li><li><p><span style=\"box-sizing: border-box;color: rgb(74, 74, 74);display: block;line-height: 22px;font-size: 14px !important;word-break: inherit !important;\"><span style=\"box-sizing: border-box;line-height: 22px;display: block;word-break: inherit !important;\"><code class=\"ts language-ts\" style=\"box-sizing: border-box;margin-left: -20px;display: flex;overflow: initial;line-height: 12px;word-wrap: normal;border-width: 0px;border-style: initial;border-color: initial;font-size: 10px;font-family: inherit !important;white-space: pre !important;\"><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">  findOne</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(254, 251, 236);line-height: 20px;font-size: 13px !important;white-space: inherit !important;\">(</span></c', '文： 达孚\n\n本文原创，转载请注明作者及出处\n===============\n\n首先上一下项目地址：\n\nNest：https://github.com/nestjs/nest\n\nNesk：https://github.com/kyoko-df/nesk\n\n### Nest初认识\n\nNest是一个深受angular激发的基于express的node框架，按照官网说明是一个旨在提供一个开箱即用的应用程序体系结构，允许轻松创建高度可测试，可扩展，松散耦合且易于维护的应用程序。\n\n在设计层面虽然说是深受angular激发，但其实从后端开发角度来说类似于大家熟悉的Java Spring架构，使用了大量切面编程技巧，再通过装饰器的结合完全了关注上的分离。同时使用了Typescript(也支持Javascript)为主要开发语言，更保证了整个后端系统的健壮性。\n\n### 强大的Nest架构\n\n那首先为什么需要Nest框架，我们从去年开始大规模使用Node来替代原有的后端View层开发，给予了前端开发除了SPA以外的前后端分离方式。早期Node层的工作很简单-渲染页面代理接口，但在渐渐使用中大家会给Node层更多的寄托，尤其是一些内部项目中，你让后端还要将一些现有的SOA接口进行包装，对方往往是不愿意的。那么我们势必要在Node层承接更多的业务，包括不限于对数据的组合包装，对请求的权限校验，对请求数据的validate等等，早期我们的框架是最传统的MVC架构，但是我们翻阅业务代码，往往最后变成复杂且很难维护的Controller层代码（从权限校验到页面渲染一把撸到底:)）。\n\n那么我们现在看看Nest可以做什么？从一个最简单的官方例子开始看：\n\n1.  `async  function bootstrap()  {`\n    \n2.   `const app =  await  NestFactory.create(ApplicationModule);`\n    \n3.   `app.useGlobalPipes(new  ValidationPipe());`\n    \n4.   `await app.listen(3000);`\n    \n5.  `}`\n    \n6.  `bootstrap();`\n    \n\n这里就启动了一个nest实例，先不看这个ValidationPipe，看ApplicationModule的内容：\n\n1.  `@Module({`\n    \n2.   `imports:  [CatsModule],`\n    \n3.  `})`\n    \n4.  `export  class  ApplicationModule  implements  NestModule  {`\n    \n5.   `configure(consumer:  MiddlewaresConsumer):  void  {`\n    \n6.   `consumer`\n    \n7.   `.apply(LoggerMiddleware)`\n    \n8.   `.with(\'ApplicationModule\')`\n    \n9.   `.forRoutes(CatsController);`\n    \n10.   `}`\n    \n11.  `}`\n    \n\n1.  `@Module({`\n    \n2.   `controllers:  [CatsController],`\n    \n3.   `components:  [CatsService],`\n    \n4.  `})`\n    \n5.  `export  class  CatsModule  {}`\n    \n\n这里看到nest的第一层入口module，也就是模块化开发的根本，所有的controller，component等等都可以根据业务切分到某个模块，然后模块之间还可以嵌套，成为一个完整的体系，借用张nest官方的图：\n\n在nest中的component概念其实一切可以注入的对象，对于依赖注入这个概念在此不做深入解释，可以理解为开发者不需要实例化类，框架会进行实例化且保存为单例供使用。\n\n1.  `@Controller(\'cats\')`\n    \n2.  `@UseGuards(RolesGuard)`\n    \n3.  `@UseInterceptors(LoggingInterceptor,  TransformInterceptor)`\n    \n4.  `export  class  CatsController  {`\n    \n5.   `constructor(private  readonly catsService:  CatsService)  {}`\n    \n\n7.   `@Post()`\n    \n8.   `@Roles(\'admin\')`\n    \n9.   `async create(@Body() createCatDto:  CreateCatDto)  {`\n    \n10.   `this.catsService.create(createCatDto);`\n    \n11.   `}`\n    \n\n13.   `@Get()`\n    \n14.   `async findAll():  Promise<Cat[]>  {`\n    \n15.   `return  this.catsService.findAll();`\n    \n16.   `}`\n    \n\n18.   `@Get(\':id\')`\n    \n19.   `findOne(`\n    \n20.   `@Param(\'id\',  new  ParseIntPipe())`\n    \n21.   `id,`\n    \n22.   `):  Promise<Cat>  {`\n    \n23.   `return  this.catsService.findOne(id);`\n    \n24.   `}`\n    \n25.  `}`\n    \n\nController的代码非常精简，很多重复的工作都通过guards和interceptors解决，第一个装饰器Controller可以接受一个字符串参数，即为路由参数，也就是这个Controller会负责/cats路由下的所有处理。首先RolesGuard会进行权限校验，这个校验是自己实现的，大致结构如下：\n\n1.  `@Guard()`\n    \n2.  `export  class  RolesGuard  implements  CanActivate  {`\n    \n3.   `constructor(private  readonly reflector:  Reflector)  {}`\n    \n\n5.   `canActivate(request, context:  ExecutionContext):  boolean  {`\n    \n6.   `const  { parent, handler }  = context;`\n    \n7.   `const roles =  this.reflector.get<string[]>(\'roles\', handler);`\n    \n8.   `if  (!roles)  {`\n    \n9.   `return  true;`\n    \n10.   `}`\n    \n\n12.   `// 自行实现`\n    \n13.   `}`\n    \n14.  `}`\n    \n\ncontext可以获取controller的相关信息，再通过反射拿到handler上是否有定义roles的元信息，如果有就可以在逻辑里根据自己实现的auth方法或者用户类型来决定是否让用户访问相关handler。\n\ninterceptors即拦截器，它可以：\n\n*   在方法执行之前/之后绑定额外的逻辑\n    \n*   转换从函数返回的结果\n    \n*   转换从函数抛出的异常\n    \n*   根据所选条件完全重写函数 (例如, 缓存目的)\n    \n\n本示例有两个拦截器一个用来记录函数执行的时间，另一个对结果进行一层包装，这两个需求都是开发中很常见的需求，而且拦截器会提供一个rxjs的观察者流来处理函数返回，支持异步函数，我们可以通过map()来mutate这个流的结果，可以通过do运算符来观察函数观察序列的执行状况，另外可以通过不返回流的方式，从而阻止函数的执行，LoggingInterceptor例子如下：\n\n1.  `@Interceptor()`\n    \n2.  `export  class  LoggingInterceptor  implements  NestInterceptor  {`\n    \n3.   `intercept(dataOrRequest, context:  ExecutionContext, stream$:  Observable):  Observable  {`\n    \n4.   `console.log(\'Before...\');`\n    \n5.   `const now =  Date.now();`\n    \n\n7.   `return stream$.do(`\n    \n8.   ``()  => console.log(`After... ${Date.now() - now}ms`),``\n    \n9.   `);`\n    \n10.   `}`\n    \n11.  `}`\n    \n\n回到最初的ValidationPipe，它是一个强大的校验工具，我们看到前面的controller代码中插入操作中有一个CreateCatDto，dto是一种数据传输对象，一个dto可以这样定义：\n\n1.  `export  class  CreateCatDto  {`\n    \n2.   `@IsString()  readonly name:  string;`\n    \n\n4.   `@IsInt()  readonly age: number;`\n    \n\n6.   `@IsString()  readonly breed:  string;`\n    \n7.  `}`\n    \n\n然后ValidationPipe会检查body是否符合这个dto，如果不符合就会就会执行你在pipe中设置的处理方案。具体是如何实现的可以再写一篇文章了，所以我推荐你看nest中文指南(https://docs.nestjs.cn/)(顺便感谢翻译的同学们)\n\n示例的完整代码可以看01-cats-app（https://github.com/nestjs/nest/tree/master/examples/01-cats-app）\n\n也就是说业务团队中的熟练工或者架构师可以开发大量的模块，中间件，异常过滤器，管道，看守器，拦截器等等，而不太熟练的开发者只需要完成controller的开发，在controller上像搭积木般使用这些设施，即完成了对业务的完整搭建。\n\n### Nesk-一个落地方案的尝试\n\n虽然我个人很喜欢Nest，但是我们公司已经有一套基于koa2的成熟框架Aconite，而Nest是基于express的，查看了下Nest的源码，对express有一定的依赖，但是koa2和express在都支持async语法后，差异属于可控范围下。另外nest接受一个express的实例，在nesk中我们只需要调整为koa实例，那么也可以是继承于koa的任何项目实例，我们的框架在2.0版本也是一个在koa上继承下来的node框架，基于此，我们只需要一个简单的adapter层就可以无缝接入Aconite到nesk中，这样减少了nesk和内部服务的捆绑，而将所有的公共内部服务整合保留在Aconite中。Nest对于我们来说只是一个更完美的开发范式，不承接任何公共模块。\n\n所以我们需要的工作可以简单总结为：\n\n1.  支持Koa\n    \n2.  适配Aconite\n    \n\n支持Koa我们在Nest的基础上做了一些小改动完成了Nesk来兼容Koa体系。我们只需要完成Nesk和Aconite中间的Adapter层，就可以完成Nesk的落地，最后启动处的代码变成：\n\n1.  `import  {  NeskFactory  }  from  \'@neskjs/core\';`\n    \n2.  `import  {  NeskAconite  }  from  \'@hujiang/nesk-aconite\';`\n    \n3.  `import  {  ApplicationModule  }  from  \'./app.module\';`\n    \n4.  `import  { config }  from  \'./common/config\';`\n    \n5.  `import  { middwares }  from  \'./common/middlware\';`\n    \n\n7.  `async  function bootstrap()  {`\n    \n8.   `const server =  new  NeskAconite({`\n    \n9.   `projectRoot: __dirname,`\n    \n10.   `middlewares,`\n    \n11.   `config`\n    \n12.   `});`\n    \n13.   `const app =  await  NeskFactory.create(ApplicationModule, server);`\n    \n14.   `await app.listen(config.port);`\n    \n15.  `}`\n    \n\n最后Nest有很多@nest scope下的包，方便一些工具接入nest，如果他们与express没有关系，我们其实是可以直接使用的。但是包内部往往依赖@nest/common或者@nesk/core，这里可以使用module-alias，进行一个重指向（你可以尝试下graphql的例子）:\n\n1.  `\"_moduleAliases\":  {`\n    \n2.   `\"@nestjs/common\":  \"node_modules/@neskjs/common\",`\n    \n3.   `\"@nestjs/core\":  \"node_modules/@neskjs/core\"`\n    \n4.  `}`\n    \n\nNesk的地址Nesk（https://github.com/kyoko-df/nesk），我们对Nesk做了基本流程测试目前覆盖了common和core，其它的在等待改进，欢迎一切愿意一起改动的开发者。\n\n### 不足与期待\n\n其实从一个更好的方面来说，我们应当允许nest接受不同的底层框架，即既可以使用express，也可以使用koa，通过一个adapter层抹平差异。不过这一块的改造成本会大一些。\n\n另一方面nest有一些本身的不足，在依赖注入上，还是选择了ReflectiveInjector，而Angular已经开始使用了StaticInjector，理论上StaticInjector减少了对Map层级的查找，有更好的性能，这也是我们决定分叉出一个nesk的原因，可以做一些更大胆的内部代码修改。另外angular的依赖注入更强大，有例如useFactory和deps等方便测试替换的功能，是需要nest补充的.\n\n最后所有的基于Koa的框架都会问到一个问题，能不能兼容eggjs(:))，其实无论是Nest还是Nesk都是一个强制开发规范的框架，只要eggjs还建立在koa的基础上，就可以完成集成，只是eggjs在启动层面的改动较大，而且开发范式和nest差异比较多，两者的融合并没有显著的优势。\n\n总之Node作为一个比较灵活的后端开发方式，每个人心中都有自己觉得合适的开发范式，如果你喜欢这种方式，不妨尝试下Nest或者Nesk。\n\n  \n\n  \n\n**推荐阅读**\n\n[从 SQL Server 到 MySQL （一）：异构数据库迁移](http://mp.weixin.qq.com/s?__biz=MzI1MTE2NTE1Ng==&mid=2649517604&idx=1&sn=3dd2f1792d2af0798bf33f9f58cd2770&chksm=f1efeeafc69867b9ed9220c91c32d170082ee0f03e618c13664101bf160b801c838217f7d22b&scene=21#wechat_redirect)  \n\n[追溯 React Hot Loader 的实现](http://mp.weixin.qq.com/s?__biz=MzI1MTE2NTE1Ng==&mid=2649517585&idx=1&sn=1c2e6ea19bb85e508f74ba17253c8a74&chksm=f1efee9ac698678c9ee4b673357682c05b16762ace4850e1c1f01fbc7d75cd7891ba0c0d9efc&scene=21#wechat_redirect)  \n\n[马斯洛的锤子](http://mp.weixin.qq.com/s?__biz=MzI1MTE2NTE1Ng==&mid=2649517578&idx=1&sn=26aeb6d2d396fd6f973ef3de24be4c25&chksm=f1efee81c6986797c2c9f34a860dcb7b2b133006f5251b40e7f70f52c7cf9fd8e4872a5ef8ce&scene=21#wechat_redirect)  \n\n[自动生成测试脚本方案浅析](http://mp.weixin.qq.com/s?__biz=MzI1MTE2NTE1Ng==&mid=2649517573&idx=1&sn=59ee5fce712175538dba928ea0121105&chksm=f1efee8ec69867985c93cf6cf1ad04c89177016d555405ca901db69a3a62d554c66aa04e50d2&scene=21#wechat_redirect)  \n\n[纠正你对区块链的认知偏见](http://mp.weixin.qq.com/s?__biz=MzI1MTE2NTE1Ng==&mid=2649517567&idx=1&sn=57938142554393b7945592b668a42647&chksm=f1efed74c6986462dc41aac8fed73bd5541866cdeb9c89bd9dcb03709b8ff93cfd03fc9cf9ea&scene=21#wechat_redirect)', 0, 1, 0);
INSERT INTO `post` (`id`, `createAt`, `updateAt`, `title`, `description`, `thumb`, `url`, `html`, `markdown`, `views`, `status`, `push`) VALUES
(25, '2018-04-23 11:01:42.002103', '2018-04-23 11:01:42.002103', '2018 前端性能检查表', '原文地址：http://www.smashed.by/perf-checklist作者|VitalyFriedman译者|OpenWeb开发者三三众所周知，性能十分重要。然而，我们真的知道性能瓶颈具体在哪儿吗？是执行复杂的JavaScript，下载缓慢的Web字体，巨大的图片，还是卡顿的渲染？研究摇树（TreeShaking），作用域提升（ScopeHoisting），或是各种各样的与IntersectionObserver、ClientsHints、CSScontainment、HTTP/2和Servi', 'https://pic4.zhimg.com/v2-d04ea8b209300bbec7b69d348e05385f_1200x500.jpg', 'https://zhuanlan.zhihu.com/p/35210707', '<p></p><figure><noscript><img src=\"https://pic2.zhimg.com/v2-e908aa8981996c338f3eb22f044b715a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"674\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-e908aa8981996c338f3eb22f044b715a_r.jpg\"></noscript><img src=\"data:image/svg+xml;utf8,%3Csvg%20xmlns=%27http://www.w3.org/2000/svg%27%20width=%271080%27%20height=%27674%27%3E%3C/svg%3E\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"674\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-e908aa8981996c338f3eb22f044b715a_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-e908aa8981996c338f3eb22f044b715a_b.jpg\"></figure><p><br></p><blockquote>原文地址：<a href=\"https://link.zhihu.com/?target=http%3A//www.smashed.by/perf-checklist\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://www.</span><span class=\"visible\">smashed.by/perf-checkli</span><span class=\"invisible\">st</span><span class=\"ellipsis\"></span></a> <br>作者 | Vitaly Friedman <br>译者 | OpenWeb开发者 三三</blockquote><p>众所周知，性能十分重要。然而，我们真的知道性能瓶颈具体在哪儿吗？是执行复杂的 JavaScript，下载缓慢的 Web 字体，巨大的图片，还是卡顿的渲染？研究摇树（Tree Shaking），作用域提升（Scope Hoisting），或是各种各样的与 IntersectionObserver、Clients Hints、CSS containment、HTTP/2 和 Service Worker 一同工作的华丽的加载模式真的有价值吗？最重要的是，<b>我们从哪里开始优化性能</b>，以及我们如何建立长期的性能文化呢？</p><p>以前，性能往往只是事后的想法。通常直到项目最后的时候才会被考虑，然后被归结为压缩、合并、静态资源优化或者对服务器配置文件的一些细微调整。现在回想起来，事情似乎已经发生了很大的变化。</p><p>性能不仅仅是一个技术问题：它很重要，而且当把它引入到工作流时，设计决策必须根据其性能影响来决定。<b>我们必须不断的测量、监视和改进性能</b>，而且 Web 日益复杂的情况带来了新的挑战，使得性能指标难以被跟踪，因为性能指标将因设备、浏览器、协议、网络类型和延迟（CDN、运营商、缓存、代理、防火墙、负载平衡器和服务器都在其中发挥作用）而有很大差异。</p><p>因此，如果我们创作一个在提高性能时必须牢记的所有事项的概述——从流程的一开始到网站的最终发布——这样的列表将是什么样子？下面就是 2018 前端性能检查表（但愿不偏不倚和足够客观）——说明您可能需要考虑的问题，以确保您的站点响应时间快、用户交互流畅，并且不会用尽用户的带宽。</p><p>下面是您可能需要考虑的<b>前端性能问题</b>的概述，以确保您的响应时间快速而流畅。</p><p>（译注：原文详细地阐述了文中所涉及的所有优化策略的原理和来龙去脉。此处仅翻译了原文中附带的 PDF 检查表文件，意在提供一个快速、简洁的性能优化清单。）</p><p><b>一、准备：规划和指标</b></p><h2><b>01 建立性能文化</b></h2><p>只要团队之间没有协作，高性能就无法长期维持。研究用户反馈中常见的抱怨，看看提高性能是否可以帮助缓解其中一些问题。用真实数据来建立适合自己的案例和模型。在设计过程中就开始规划加载顺序和权衡。</p><h2><b>02 选择正确的性能指标</b></h2><p>并非每个指标都同等重要。研究最重要的度量标准：一般而言，它与您开始渲染最重要像素的速度以及提供输入响应的速度有关。根据客户的感受确定页面加载的优先级。可交互时间、页面大标题元素的渲染时间、首次有效绘制时间（FMP）、速度指数（Speed Index）一般都很重要。</p><h2><b>03 比你的竞争对手快至少 20%</b></h2><p>收集代表您受众的设备上的数据。在数据来源上，真实设备比模拟数据更好。选择一台 Moto G4、中端三星设备或者 Nexus 5X 等性能良好的中端设备。或者，也可以通过在电脑上，通过设置网络限速（例如：150ms RTT，1.5Mbps 下载，0.7Mbps 上传）和 CPU 限速（5 倍慢速）以模拟移动体验。最后在常规 3G、4G 和 Wi-Fi 之间切换。收集数据、设置电子表格、将指标提高 20% 并设置目标（即，“性能预算”）。</p><h2><b>04 把这张检查表分享给你的同事</b></h2><p>确保团队中的每个成员都熟悉该清单。每一个决策都涉及性能问题，前端开发人员的积极参与将使您的项目受益匪浅。将你的性能预算映射到设计决策上。</p><p><b>二、制定现实的目标</b></p><h2><b>05 100 毫秒的响应时间 + 每秒60帧</b></h2><p>每帧动画应在少于 16 毫秒（理想情况下为 10 毫秒）内完成，从而达到每秒 60 帧（1 秒 ÷ 60 = 16.6毫秒）。保持乐观，明智地利用空闲时间。对于像动画这样的高压点，只要能，就不要做任何其它事情。预计输入延迟时间（Estimated Input Latency）应低于 50 毫秒。</p><h2><b>06 速度指数（SpeedIndex）小于 1250，可交互时间（Time-To-Interactive）在 3G 上小于 5 秒</b></h2><p>目标是在 1 秒内（在高速网络下）完成首次绘制（FMP），速度指数（SpeedIndex）低于 1250 毫秒。考虑速度基线是一台有着 3G 网络的，价格为 200 美元左右的 Android 手机（译注：国产千元机水平），那么可以以 400 毫秒 RTT 和 400kb/s 的传输速度进行网络模拟，以达成可交互时间（Time-To-Interactive）小于 5 秒，第二次打开的速度低于 2 秒。尽你所能地降低这些指标。</p><h2><b>07 核心块 = 15kb，关键文件 < 170 kb</b></h2><p>HTML 的前 14~15kb 是最关键的核心块（chunk），也是整个文件中唯一可以在第一个 RTT 内被下载的部分。要实现上述目标，请设定关键文件的最大尺寸“预算”。170kb gzip 后的文件（原始文件尺寸 0.8~1mb），在普通手机上可能需要 1 秒才能解析和编译完成。</p><p><b>三、定义环境</b></p><h2><b>08 选择并设置你的构建工具</b></h2><p>不要太注意所谓的“酷”。只要您能够快速获得结果，而且在维护构建过程上没有问题就很好了。</p><h2><b>09 渐进增强</b></h2><p>首先设计和构建核心功能，然后再在此基础上为功能强大的浏览器的高级功能增强效果，从而创建弹性的体验。如果您的网站在性能差、网络差的机器上还能运行得比较快，那在性能好、网络棒的机器上只会运行得更快。</p><h2><b>10 设定硬性的性能基准</b></h2><p>用 JavaScript 实现交互效果的成本相当高昂。170kb 的尺寸预算已经包含了核心的 HTML / CSS / JavaScript、路由、状态管理、工具函数、框架还有产品逻辑，因此，请彻底检查我们选择的框架的网络传输成本、解析 / 编译时间和其运行时的时间成本。</p><h2><b>11 圣战止于智者：Angular, React 还是 Ember</b></h2><p>并不是每个项目都需要框架。但是如果你的项目需要框架，那么最好选择使用一个支持服务器端渲染（SSR）的框架。在使用框架之前，请确保在移动设备上以服务器端渲染和客户端渲染两种模式来评估框架的启动时间。了解您将依赖的框架的具体细节。了解 PRPL 模式和 App Shell 模型。</p><h2><b>12 你会使用 AMP 或者 Instant Articles 吗</b></h2><p>（译注：AMP 为 Google 的开源项目，意在以组件化的形式以提升移动设备对网站的访问速度；Instant Articles 是 Facebook 的协议，意在通过渲染页面的精简版本以提升页面在 Facebook App 内的打开速度。在国内，MIP 是和 AMP 类似的解决方案。）</p><p>没有它们，你也可以获得良好的性能。但是 AMP 提供了一个可靠的性能框架，有免费的 CDN ，而 Instant Articles 将提高你在 Facebook 上的知名度和性能。你也可以构建一个渐进式 AMP（译注：Progressive Web AMP，PWA 和 AMP 的结合体）。</p><h2><b>13 选择合适的 CDN</b></h2><p>您可以将部分内容“外包”给静态站点生成器，然后将其推送到 CDN，并从CDN 提供静态版本，从而避免数据库请求（即 JAMStack）。当然，这取决于您拥有的动态数据量。仔细检查 CDN 是否为您执行了内容压缩和转换、智能 HTTP/2 和边缘端包含（ESI, edge-side includes）。</p><p><b>四、优化构建</b></p><h2><b>14 合理安排优先级</b></h2><p>把你所有的静态资源（JavaScript，图片，字体，第三方脚本，尺寸大的模块）列成一个表，然后把它们按优先级分成三组：基本核心功能（老浏览器也能浏览的核心内容）、增强体验效果（为现代浏览器设计的强大功能和丰富体验）、附加功能（不一定需要并且可以惰性加载的资源，比如字体、轮播脚本、视频播放器、分享按钮等）。</p><h2><b>15 使用“符合标准”技术</b></h2><p>（译注：“符合标准”技术（cutting-the-mustard technique）是 BBC News 开发者博客提出的，一种基于浏览器特性来检测其支持程度，并以此选择要加载哪些功能的技术。）</p><p>对老旧的浏览器，仅输出核心功能代码；对现代浏览器输出增强的功能代码。严格按标准加载静态资源：直接加载核心代码，在 DOMContentLoaded 事件中加载增强代码，并在 load 事件中加载剩下的代码。注意：廉价的 Android 手机虽然很符合标准，但这些手机的内存和 CPU 性能有限。因此，您可能需要使用读取设备内存大小的 JavaScript API 来检测设备性能，只有不支持的时候才按“符合标准”技术来。</p><h2><b>16 减少 JavaScript 体积</b></h2><p>由于解析 JavaScript 很耗时，所以请尽可能的减少 JavaScript 的体积。在构建 SPA 时，您可能需要用一定时间初始化应用程序之后，才能开始渲染页面。寻找可以加快初始渲染事件的模块和技术（在低端移动设备上，这可以轻松将速度提高 2-5 倍）。彻底检查每一个 JavaScript 依赖，以找出谁在消耗初始化的宝贵时间。</p><h2><b>17 使用微优化和渐进式启动</b></h2><p>使用服务器端渲染来获得快速的首次有效绘制时间（FMP），但也在页面里输出一些最小功能的 JavaScript 来保持交互时间（TTI）接近首次有效绘制时间（FMP）。然后，如果有需要或者有多余的时间，才开始启动应用程序的非必要部分。在加载时显示一个骨架屏幕，而不是“加载中”动画。</p><h2><b>18 使用摇树和代码分割</b></h2><p>使用摇树（Tree Shaking）技术和代码分割（Code Splitting）技术以减少代码体积。</p><p>摇树（Tree Shaking）技术是一种通过丢弃未使用的代码以在构建过程清理代码的方法。代码分割（Code Splitting）技术将您的代码拆分为按需加载的“chunks（块）”。作用域提升（Scope Hoisting）技术使得链式的依赖能被无缝地转换成行内函数。通过 WebPack 将上述技术用于您的代码。使用 AOT 编译器（译注：例如 Closure Compiler）将一些客户端计算移到服务端。</p><h2><b>19 异步加载 JavaScript</b></h2><p>作为开发者，我们必须显式地使用 <code>defer</code> 和 <code>async</code> 属性来告诉浏览器不要等待脚本下载、开始渲染页面。如果你不需要关注 IE 9 及以下版本的浏览器，那么使用 <code>defer</code> 更好；否则，使用 <code>async</code> 更好。使用静态的分享按钮、静态链接交互式地图而不是使用第三方库。</p><h2><b>20 HTTP 缓存头是否设置好了</b></h2><p>重新检查你是否正确的设置了 Expires, Cache-Control, Max-Age 等 HTTP 缓存控制响应头。通常而言，一个资源要么只被缓存很短的时间（比如经常修改的资源），要么永久缓存（比如不会被更改的那种资源）。使用专为带哈希指纹的静态文件设计的响应头 <code>Cache-Control: imuutable</code> 以避免浏览器重新请求文件。</p><p><b>五、静态资源优化</b></p><h2><b>21 是否使用了 Brotli 或 Zopfli 压缩</b></h2><p>Brotli 是一种新的无损压缩格式。现在，所有的现代浏览器都支持它。它比 Gzip 和 Deflate 压缩率更高，压缩非常慢，但是解压速度很快。使用最高压缩比的 Brotli+Gzip 预压缩静态文件，并使用 1~4 级的 Brotli 实时压缩动态内容。也顺便检查一下 CDN 是否支持 Brotli。或者，你也可以试试在不常变化的资源上使用 Zopfli —— 它将数据用 Deflate、Gzip 和 Zlib 格式压缩，并且被设计为一次压缩、多次下载。</p><h2><b>22 图片是否被正确优化</b></h2><p>尽可能使用通过 <code>srcset</code>、<code>sizes</code> 和 <code><picture></code> 元素实现的响应式图片。使用 WebP 格式的图片；这可通过 <code><picutre></code> 标签配合 JPEG fallback，或者通过 <code>Accept</code> 请求头来实现。对于核心图片，使用渐进式的 JPEG 并用高斯滤镜模糊掉不重要的部分。</p><h2><b>23 Web Font 是否被正确优化</b></h2><p>您使用的 Web Font 很可能包含未真正被使用的执行和额外的特性。制作字体的子集（译注：仅包含部分文字的字体，如 fontmin 等方案）。优先使用 WOFF2 并使用 WOFF 作为后备。立即使用后备字体显示文字、异步加载字体（例如，使用 loadCSS），然后再切换字体。同时也考虑本地操作系统中已经安装了的字体。不要忘记在 CSS 中写 <code>font-display: optional</code>；如果你无法从您的服务器加载字体，请记得使用 Font Load Events。</p><p><b>六、分发优化</b></p><h2><b>24 快速推送核心 CSS</b></h2><p>将所有首屏渲染所需要的 CSS 放在一起，然后方法在 <code><head></code> 标签中。考虑有选择的内联的方法。或者，使用 HTTP/2 服务端推送；但这样你可能需要构建一个可感知缓存的 HTTP/2 服务端推送机制。</p><h2><b>25 使用 babel-preset-env 以仅转译 ES2015+ 特性</b></h2><p>由于 ES2015 已被广泛支持了，您可以考虑使用 <code>babel-preset-env</code> 以仅转译现代浏览器不支持的 ES2015+ 特性。然后你可以编译两份，一份是 ES6 ，另一份是 ES5。使用 <code><script type=\"module\"></code> 使得有 ESM 支持的浏览器加载新文件，剩下的老的浏览器可以使用 <code><script nomodule></code> 来加载老的文件。</p><h2><b>26 提升渲染性能</b></h2><p>使用 CSS 包含（CSS Containment）隔离渲染十分耗时的组件。请保证在滑动页面或者元素动画的时候，页面不会卡顿，而且你的页面能持续以 60fps 的速度渲染。如果那不可能，那么至少也要把 fps 控制在 15~60 之间。使用 CSS 的 <code>will-change</code> 属性通知浏览器哪个元素将会变化。</p><h2><b>27 使用 Intersection Observer 懒加载大型脚本</b></h2><p>Intersection Observer API 提供了异步监听目标元素与祖先元素或顶层文档视口交点中的更改的能力。浏览器支持？Chrome, Firefox, Edge 和三星浏览器都支持了。WebKit 还在开发。浏览器不支持？懒加载一个 polyfill。</p><h2><b>28 是否优化了渲染体验</b></h2><p>不要低估感知性能的作用。在加载静态文件时，尽量始终领先用户一步，这样在后台发生很多事情时，会感觉体验上很快。例如，要让用户持续关注你的页面，请使用骨架屏幕而不是一些加载中的动画。</p><h2><b>29 预热连接以加快分发速度</b></h2><p>使用骨架屏幕，然后懒加载所有的大型组件，比如字体、JavaScript、轮播图、视频和 iframe 等。使用资源提示（Resource Hints），如 <code>dns-prefetch</code>、<code>preconnect</code>、<code>prefetch</code> 和 <code>preload</code>来节省时间。</p><p><b>七、HTTP/2</b></p><h2><b>30 为 HTTP/2 做准备</b></h2><p>HTTP/2 支持很好，而且提供了不小的性能提升。缺点是，您必须迁移到 HTTPS；根据您不支持 HTTP/2 的用户群大小，你可能需要为 HTTP/1.1 和 HTTP/2 的用户返回不同版本的代码，这就要求您调整您的编译工具。</p><h2><b>31 正确地部署 HTTP/2</b></h2><p>您需要在打包模块和并行加载许多小模块之间找到一个良好的平衡。将整个界面分解为许多小模块；然后分组、压缩和打包。整个网站分为大约 6 到 10 个包应该是一个不错的折衷方案（对于传统浏览器来说也不错）。通过实验和数据监测来为您的网站找到正确的平衡。</p><h2><b>32 你为 Save-Data 头节约数据流量了吗</b></h2><p>Save-Data 请求提示头可以让我们为关心流量费用和性能的用户提供个性化的响应。例如，你可以把所有高清的图片都改成低清的，不用 Web Font 和华丽的动效，关掉视频自动播放和服务器推送，甚至修改你的应用界面。</p><h2><b>34 确保服务器上的安全性是无懈可击的</b></h2><p>再次检查安全标头是否设置正确，消除已知漏洞，并检查 SSL 证书。确保所有外部插件和跟踪脚本都是通过 HTTPS 加载的、没有 XSS，并且 HSTS 响应头和内容安全策略（CSP）响应头都已正确设置。</p><h2><b>35 你的服务器和 CDN 都支持 HTTP/2 吗</b></h2><p>不同的服务器和 CDN 可能对 HTTP/2 有不同的支持。使用 Is TLS Fast Yet? 来检查你的设置，或者直接看看你的服务器性能如何，支持的特性情况怎么样。</p><h2><b>36 是否启用了 OCSP Stapling</b></h2><p>在服务器上启用 OCSP Stapling 有助于提升 TLS 握手速度。OCSP 协议可以让浏览器无需下载并检索证书信息，从而减少握手时间。</p><h2><b>37 你使用 IPv6 了吗</b></h2><p>研究标明，IPv6 的邻居发现（NDP）和路由优化可以使网站快 10% ~ 15%。升级到支持 IPv6 的 DNS 以为未来做好准备。只需确保双栈网络能正常工作——这使得 IPv6 和 IPv4 能同时运行。毕竟，IPv6 不是向后兼容的。</p><h2><b>38 HPACK 压缩启用了吗</b></h2><p>如果你使用了 HTTP/2，再次检查你的服务器是否实现了 HPACK 压缩。HPACK 压缩可以压缩 HTTP 响应头，以减少不必要的开支。由于 HTTP/2 服务器现在都很新，他们可能不能完全支持包括 HPACK 压缩在内的所有标准。H2spec 是一个非常好的用于检测标准支持程度的工具。</p><h2><b>39 你使用了 Service Worker 来缓存或者提供离线内容吗</b></h2><p>网络再怎么优化，也不会比本地缓存更快。如果你的网站使用了 HTTPS，那么你可以把静态资源放在 Service Worker 的缓存中，而不用请求网络。</p><p><b>八、测试和监控</b></p><h2><b>40 监控混合内容警告</b></h2><p>如果您最近从 HTTP 迁移到了 HTTPS，请确保使用类似 <a href=\"https://link.zhihu.com/?target=http%3A//Report-URI.io\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">Report-URI.io</span><span class=\"invisible\"></span></a> 之类的服务监控了严格的或被动的混合内容报警。你也可以用 Mixed Content Scan 来扫描你的 HTTPS 站点上是否有非 HTTPS 的混合内容。</p><h2><b>41 使用 DevTools 的开发工作流是优化过的吗</b></h2><p>选择一个调试工具，并试着点击每一个按钮。请确保您理解如何分析渲染性能、控制台输出、调试 JavaScript 和编辑 CSS 样式。</p><h2><b>42 是否在代理浏览器和老式浏览器上测试过了</b></h2><p>在 Chrome 和 Firefox 上测试是不够的。请看看你的网站在代理浏览器和老式浏览器（包括 UC 浏览器和 Opera Mini 等。译者注：此处的代理浏览器即指国内浏览器中常见的云加速功能）上是什么样子。统计你受众国家的网络平均速度，避免出现重大意外。使用网络节流并模拟高 DPI 设备。虽然 BrowserStack 很好，但也得在真机上测试。</p><h2><b>43 是否设置了持续的监控</b></h2><p>良好的性能指标是被动和主动监控工具的组合。拥有 WebPagetest 的私有实例和使用 Lighthouse 确实有利于快速测试，但也需要使用诸如 Calibre、speedscurve 等 RUM 工具建立持续的监控体系。设置您自己的用户计时打点以监控特定的业务速度指标。</p><p><b>九、速战速决</b></p><p>此列表相当全面，完成所有优化可能需要相当长的时间。如果你只有一个小时的时间，但又想获得显著的提升，你应该怎么做？我们挑出了 10 个最容易实现的方法。显然，在开始之前和完成之后，请统计结果，包括 3G 和有线连接上的开始渲染时间和速度指数（SpeedIndex）。</p><ol><li>统计真实的用户体验，设置可接受的目标。一个好的目标大致是：FMP < 1s，速度指数 < 1250，TTI 在 3G 网络上 < 5s 、二次访问 < 2s。优化开始渲染时间和 TTI。</li><li>为你的主模板准备核心 CSS，并放在 <code><head></code> 标签里（你的预算是 14KB）。对于 CSS/JS，请保证核心文件尺寸最大为 170kb （gzip 后的尺寸；压缩前 0.8~1Mb）</li><li>延迟或懒加载尽可能多的脚本，不管是你自己的还是第三方的——特别是分享按钮、视频播放器和其它的复杂模块。</li><li>增加资源提示，包括 <code>dns-lookup</code>, <code>preconnect</code>, <code>prefetch</code> 和 <code>preload</code>。</li><li>为 Web Font 创建子集，并异步加载（或者干脆别用）。</li><li>优化图片。考虑在关键的页面（比如落地页）上用 WebP 格式。</li><li>检查 HTTP 缓存头和安全头是否正确设置了。</li><li>在服务器上启用 Brotli 或者 Zopfli 压缩。如果不支持，别忘了开 gzip。</li><li>如果有 HTTP/2，启用 HPACK 压缩并上报混合内容警告。如果使用了 LTS，那么请打开 OCSP 装订。</li><li>如果可能，将静态资源（包括字体、样式、脚本和图片等）尽可能多地在 service worker 里缓存起来。</li></ol><p><i>Huge thanks to Yoav Weiss, Addy Osmani, Artem Denysov, Denys Mishunov, Ilya Pukhalski, Jeremy Wagner, Colin Bendell, Mark Zeman, Patrick Meenan, Leonardo Losoviz, Guy Podjarny, Andy Davies, Rachel Andrew, Anselm Hannemann, Patrick Hamann, Andy Davies, Tim Kadlec, Rey Bango, Matthias Ott, Mariana Peralta, Philipp Tellis, Ryan Townsend, Mohamed Hussain S H, Jacob Groß, Tim Swalling, Bob Visser, Kev Adamson and Rodney Rehm for reviewing this article, as well as our fantastic community, which has shared techniques and lessons learned from its work in performance optimization for everybody to use. You are truly smashing!</i></p>', '<img src=\"https://pic2.zhimg.com/v2-e908aa8981996c338f3eb22f044b715a\\_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"674\" class=\"origin\\_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-e908aa8981996c338f3eb22f044b715a_r.jpg\">\n\n![](data:image/svg+xml;utf8,%3Csvg%20xmlns=%27http://www.w3.org/2000/svg%27%20width=%271080%27%20height=%27674%27%3E%3C/svg%3E)\n\n  \n\n> 原文地址：[http://www.smashed.by/perf-checklist](https://link.zhihu.com/?target=http%3A//www.smashed.by/perf-checklist)  \n> 作者 | Vitaly Friedman  \n> 译者 | OpenWeb开发者 三三\n\n众所周知，性能十分重要。然而，我们真的知道性能瓶颈具体在哪儿吗？是执行复杂的 JavaScript，下载缓慢的 Web 字体，巨大的图片，还是卡顿的渲染？研究摇树（Tree Shaking），作用域提升（Scope Hoisting），或是各种各样的与 IntersectionObserver、Clients Hints、CSS containment、HTTP/2 和 Service Worker 一同工作的华丽的加载模式真的有价值吗？最重要的是，**我们从哪里开始优化性能**，以及我们如何建立长期的性能文化呢？\n\n以前，性能往往只是事后的想法。通常直到项目最后的时候才会被考虑，然后被归结为压缩、合并、静态资源优化或者对服务器配置文件的一些细微调整。现在回想起来，事情似乎已经发生了很大的变化。\n\n性能不仅仅是一个技术问题：它很重要，而且当把它引入到工作流时，设计决策必须根据其性能影响来决定。**我们必须不断的测量、监视和改进性能**，而且 Web 日益复杂的情况带来了新的挑战，使得性能指标难以被跟踪，因为性能指标将因设备、浏览器、协议、网络类型和延迟（CDN、运营商、缓存、代理、防火墙、负载平衡器和服务器都在其中发挥作用）而有很大差异。\n\n因此，如果我们创作一个在提高性能时必须牢记的所有事项的概述——从流程的一开始到网站的最终发布——这样的列表将是什么样子？下面就是 2018 前端性能检查表（但愿不偏不倚和足够客观）——说明您可能需要考虑的问题，以确保您的站点响应时间快、用户交互流畅，并且不会用尽用户的带宽。\n\n下面是您可能需要考虑的**前端性能问题**的概述，以确保您的响应时间快速而流畅。\n\n（译注：原文详细地阐述了文中所涉及的所有优化策略的原理和来龙去脉。此处仅翻译了原文中附带的 PDF 检查表文件，意在提供一个快速、简洁的性能优化清单。）\n\n**一、准备：规划和指标**\n\n**01 建立性能文化**\n-------------\n\n只要团队之间没有协作，高性能就无法长期维持。研究用户反馈中常见的抱怨，看看提高性能是否可以帮助缓解其中一些问题。用真实数据来建立适合自己的案例和模型。在设计过程中就开始规划加载顺序和权衡。\n\n**02 选择正确的性能指标**\n----------------\n\n并非每个指标都同等重要。研究最重要的度量标准：一般而言，它与您开始渲染最重要像素的速度以及提供输入响应的速度有关。根据客户的感受确定页面加载的优先级。可交互时间、页面大标题元素的渲染时间、首次有效绘制时间（FMP）、速度指数（Speed Index）一般都很重要。\n\n**03 比你的竞争对手快至少 20%**\n---------------------\n\n收集代表您受众的设备上的数据。在数据来源上，真实设备比模拟数据更好。选择一台 Moto G4、中端三星设备或者 Nexus 5X 等性能良好的中端设备。或者，也可以通过在电脑上，通过设置网络限速（例如：150ms RTT，1.5Mbps 下载，0.7Mbps 上传）和 CPU 限速（5 倍慢速）以模拟移动体验。最后在常规 3G、4G 和 Wi-Fi 之间切换。收集数据、设置电子表格、将指标提高 20% 并设置目标（即，“性能预算”）。\n\n**04 把这张检查表分享给你的同事**\n--------------------\n\n确保团队中的每个成员都熟悉该清单。每一个决策都涉及性能问题，前端开发人员的积极参与将使您的项目受益匪浅。将你的性能预算映射到设计决策上。\n\n**二、制定现实的目标**\n\n**05 100 毫秒的响应时间 + 每秒60帧**\n--------------------------\n\n每帧动画应在少于 16 毫秒（理想情况下为 10 毫秒）内完成，从而达到每秒 60 帧（1 秒 ÷ 60 = 16.6毫秒）。保持乐观，明智地利用空闲时间。对于像动画这样的高压点，只要能，就不要做任何其它事情。预计输入延迟时间（Estimated Input Latency）应低于 50 毫秒。\n\n**06 速度指数（SpeedIndex）小于 1250，可交互时间（Time-To-Interactive）在 3G 上小于 5 秒**\n---------------------------------------------------------------------\n\n目标是在 1 秒内（在高速网络下）完成首次绘制（FMP），速度指数（SpeedIndex）低于 1250 毫秒。考虑速度基线是一台有着 3G 网络的，价格为 200 美元左右的 Android 手机（译注：国产千元机水平），那么可以以 400 毫秒 RTT 和 400kb/s 的传输速度进行网络模拟，以达成可交互时间（Time-To-Interactive）小于 5 秒，第二次打开的速度低于 2 秒。尽你所能地降低这些指标。\n\n**07 核心块 = 15kb，关键文件 < 170 kb**\n-------------------------------\n\nHTML 的前 14~15kb 是最关键的核心块（chunk），也是整个文件中唯一可以在第一个 RTT 内被下载的部分。要实现上述目标，请设定关键文件的最大尺寸“预算”。170kb gzip 后的文件（原始文件尺寸 0.8~1mb），在普通手机上可能需要 1 秒才能解析和编译完成。\n\n**三、定义环境**\n\n**08 选择并设置你的构建工具**\n------------------\n\n不要太注意所谓的“酷”。只要您能够快速获得结果，而且在维护构建过程上没有问题就很好了。\n\n**09 渐进增强**\n-----------\n\n首先设计和构建核心功能，然后再在此基础上为功能强大的浏览器的高级功能增强效果，从而创建弹性的体验。如果您的网站在性能差、网络差的机器上还能运行得比较快，那在性能好、网络棒的机器上只会运行得更快。\n\n**10 设定硬性的性能基准**\n----------------\n\n用 JavaScript 实现交互效果的成本相当高昂。170kb 的尺寸预算已经包含了核心的 HTML / CSS / JavaScript、路由、状态管理、工具函数、框架还有产品逻辑，因此，请彻底检查我们选择的框架的网络传输成本、解析 / 编译时间和其运行时的时间成本。\n\n**11 圣战止于智者：Angular, React 还是 Ember**\n-------------------------------------\n\n并不是每个项目都需要框架。但是如果你的项目需要框架，那么最好选择使用一个支持服务器端渲染（SSR）的框架。在使用框架之前，请确保在移动设备上以服务器端渲染和客户端渲染两种模式来评估框架的启动时间。了解您将依赖的框架的具体细节。了解 PRPL 模式和 App Shell 模型。\n\n**12 你会使用 AMP 或者 Instant Articles 吗**\n-------------------------------------\n\n（译注：AMP 为 Google 的开源项目，意在以组件化的形式以提升移动设备对网站的访问速度；Instant Articles 是 Facebook 的协议，意在通过渲染页面的精简版本以提升页面在 Facebook App 内的打开速度。在国内，MIP 是和 AMP 类似的解决方案。）\n\n没有它们，你也可以获得良好的性能。但是 AMP 提供了一个可靠的性能框架，有免费的 CDN ，而 Instant Articles 将提高你在 Facebook 上的知名度和性能。你也可以构建一个渐进式 AMP（译注：Progressive Web AMP，PWA 和 AMP 的结合体）。\n\n**13 选择合适的 CDN**\n----------------\n\n您可以将部分内容“外包”给静态站点生成器，然后将其推送到 CDN，并从CDN 提供静态版本，从而避免数据库请求（即 JAMStack）。当然，这取决于您拥有的动态数据量。仔细检查 CDN 是否为您执行了内容压缩和转换、智能 HTTP/2 和边缘端包含（ESI, edge-side includes）。\n\n**四、优化构建**\n\n**14 合理安排优先级**\n--------------\n\n把你所有的静态资源（JavaScript，图片，字体，第三方脚本，尺寸大的模块）列成一个表，然后把它们按优先级分成三组：基本核心功能（老浏览器也能浏览的核心内容）、增强体验效果（为现代浏览器设计的强大功能和丰富体验）、附加功能（不一定需要并且可以惰性加载的资源，比如字体、轮播脚本、视频播放器、分享按钮等）。\n\n**15 使用“符合标准”技术**\n-----------------\n\n（译注：“符合标准”技术（cutting-the-mustard technique）是 BBC News 开发者博客提出的，一种基于浏览器特性来检测其支持程度，并以此选择要加载哪些功能的技术。）\n\n对老旧的浏览器，仅输出核心功能代码；对现代浏览器输出增强的功能代码。严格按标准加载静态资源：直接加载核心代码，在 DOMContentLoaded 事件中加载增强代码，并在 load 事件中加载剩下的代码。注意：廉价的 Android 手机虽然很符合标准，但这些手机的内存和 CPU 性能有限。因此，您可能需要使用读取设备内存大小的 JavaScript API 来检测设备性能，只有不支持的时候才按“符合标准”技术来。\n\n**16 减少 JavaScript 体积**\n-----------------------\n\n由于解析 JavaScript 很耗时，所以请尽可能的减少 JavaScript 的体积。在构建 SPA 时，您可能需要用一定时间初始化应用程序之后，才能开始渲染页面。寻找可以加快初始渲染事件的模块和技术（在低端移动设备上，这可以轻松将速度提高 2-5 倍）。彻底检查每一个 JavaScript 依赖，以找出谁在消耗初始化的宝贵时间。\n\n**17 使用微优化和渐进式启动**\n------------------\n\n使用服务器端渲染来获得快速的首次有效绘制时间（FMP），但也在页面里输出一些最小功能的 JavaScript 来保持交互时间（TTI）接近首次有效绘制时间（FMP）。然后，如果有需要或者有多余的时间，才开始启动应用程序的非必要部分。在加载时显示一个骨架屏幕，而不是“加载中”动画。\n\n**18 使用摇树和代码分割**\n----------------\n\n使用摇树（Tree Shaking）技术和代码分割（Code Splitting）技术以减少代码体积。\n\n摇树（Tree Shaking）技术是一种通过丢弃未使用的代码以在构建过程清理代码的方法。代码分割（Code Splitting）技术将您的代码拆分为按需加载的“chunks（块）”。作用域提升（Scope Hoisting）技术使得链式的依赖能被无缝地转换成行内函数。通过 WebPack 将上述技术用于您的代码。使用 AOT 编译器（译注：例如 Closure Compiler）将一些客户端计算移到服务端。\n\n**19 异步加载 JavaScript**\n----------------------\n\n作为开发者，我们必须显式地使用 `defer` 和 `async` 属性来告诉浏览器不要等待脚本下载、开始渲染页面。如果你不需要关注 IE 9 及以下版本的浏览器，那么使用 `defer` 更好；否则，使用 `async` 更好。使用静态的分享按钮、静态链接交互式地图而不是使用第三方库。\n\n**20 HTTP 缓存头是否设置好了**\n---------------------\n\n重新检查你是否正确的设置了 Expires, Cache-Control, Max-Age 等 HTTP 缓存控制响应头。通常而言，一个资源要么只被缓存很短的时间（比如经常修改的资源），要么永久缓存（比如不会被更改的那种资源）。使用专为带哈希指纹的静态文件设计的响应头 `Cache-Control: imuutable` 以避免浏览器重新请求文件。\n\n**五、静态资源优化**\n\n**21 是否使用了 Brotli 或 Zopfli 压缩**\n-------------------------------\n\nBrotli 是一种新的无损压缩格式。现在，所有的现代浏览器都支持它。它比 Gzip 和 Deflate 压缩率更高，压缩非常慢，但是解压速度很快。使用最高压缩比的 Brotli+Gzip 预压缩静态文件，并使用 1~4 级的 Brotli 实时压缩动态内容。也顺便检查一下 CDN 是否支持 Brotli。或者，你也可以试试在不常变化的资源上使用 Zopfli —— 它将数据用 Deflate、Gzip 和 Zlib 格式压缩，并且被设计为一次压缩、多次下载。\n\n**22 图片是否被正确优化**\n----------------\n\n尽可能使用通过 `srcset`、`sizes` 和 元素实现的响应式图片。使用 WebP 格式的图片；这可通过 标签配合 JPEG fallback，或者通过 `Accept` 请求头来实现。对于核心图片，使用渐进式的 JPEG 并用高斯滤镜模糊掉不重要的部分。\n\n**23 Web Font 是否被正确优化**\n-----------------------\n\n您使用的 Web Font 很可能包含未真正被使用的执行和额外的特性。制作字体的子集（译注：仅包含部分文字的字体，如 fontmin 等方案）。优先使用 WOFF2 并使用 WOFF 作为后备。立即使用后备字体显示文字、异步加载字体（例如，使用 loadCSS），然后再切换字体。同时也考虑本地操作系统中已经安装了的字体。不要忘记在 CSS 中写 `font-display: optional`；如果你无法从您的服务器加载字体，请记得使用 Font Load Events。\n\n**六、分发优化**\n\n**24 快速推送核心 CSS**\n-----------------\n\n将所有首屏渲染所需要的 CSS 放在一起，然后方法在 标签中。考虑有选择的内联的方法。或者，使用 HTTP/2 服务端推送；但这样你可能需要构建一个可感知缓存的 HTTP/2 服务端推送机制。\n\n**25 使用 babel-preset-env 以仅转译 ES2015+ 特性**\n------------------------------------------\n\n由于 ES2015 已被广泛支持了，您可以考虑使用 `babel-preset-env` 以仅转译现代浏览器不支持的 ES2015+ 特性。然后你可以编译两份，一份是 ES6 ，另一份是 ES5。使用 `</code> 使得有 ESM 支持的浏览器加载新文件，剩下的老的浏览器可以使用 <code><script nomodule></code> 来加载老的文件。</p><h2><b>26 提升渲染性能</b></h2><p>使用 CSS 包含（CSS Containment）隔离渲染十分耗时的组件。请保证在滑动页面或者元素动画的时候，页面不会卡顿，而且你的页面能持续以 60fps 的速度渲染。如果那不可能，那么至少也要把 fps 控制在 15~60 之间。使用 CSS 的 <code>will-change</code> 属性通知浏览器哪个元素将会变化。</p><h2><b>27 使用 Intersection Observer 懒加载大型脚本</b></h2><p>Intersection Observer API 提供了异步监听目标元素与祖先元素或顶层文档视口交点中的更改的能力。浏览器支持？Chrome, Firefox, Edge 和三星浏览器都支持了。WebKit 还在开发。浏览器不支持？懒加载一个 polyfill。</p><h2><b>28 是否优化了渲染体验</b></h2><p>不要低估感知性能的作用。在加载静态文件时，尽量始终领先用户一步，这样在后台发生很多事情时，会感觉体验上很快。例如，要让用户持续关注你的页面，请使用骨架屏幕而不是一些加载中的动画。</p><h2><b>29 预热连接以加快分发速度</b></h2><p>使用骨架屏幕，然后懒加载所有的大型组件，比如字体、JavaScript、轮播图、视频和 iframe 等。使用资源提示（Resource Hints），如 <code>dns-prefetch</code>、<code>preconnect</code>、<code>prefetch</code> 和 <code>preload</code>来节省时间。</p><p><b>七、HTTP/2</b></p><h2><b>30 为 HTTP/2 做准备</b></h2><p>HTTP/2 支持很好，而且提供了不小的性能提升。缺点是，您必须迁移到 HTTPS；根据您不支持 HTTP/2 的用户群大小，你可能需要为 HTTP/1.1 和 HTTP/2 的用户返回不同版本的代码，这就要求您调整您的编译工具。</p><h2><b>31 正确地部署 HTTP/2</b></h2><p>您需要在打包模块和并行加载许多小模块之间找到一个良好的平衡。将整个界面分解为许多小模块；然后分组、压缩和打包。整个网站分为大约 6 到 10 个包应该是一个不错的折衷方案（对于传统浏览器来说也不错）。通过实验和数据监测来为您的网站找到正确的平衡。</p><h2><b>32 你为 Save-Data 头节约数据流量了吗</b></h2><p>Save-Data 请求提示头可以让我们为关心流量费用和性能的用户提供个性化的响应。例如，你可以把所有高清的图片都改成低清的，不用 Web Font 和华丽的动效，关掉视频自动播放和服务器推送，甚至修改你的应用界面。</p><h2><b>34 确保服务器上的安全性是无懈可击的</b></h2><p>再次检查安全标头是否设置正确，消除已知漏洞，并检查 SSL 证书。确保所有外部插件和跟踪脚本都是通过 HTTPS 加载的、没有 XSS，并且 HSTS 响应头和内容安全策略（CSP）响应头都已正确设置。</p><h2><b>35 你的服务器和 CDN 都支持 HTTP/2 吗</b></h2><p>不同的服务器和 CDN 可能对 HTTP/2 有不同的支持。使用 Is TLS Fast Yet? 来检查你的设置，或者直接看看你的服务器性能如何，支持的特性情况怎么样。</p><h2><b>36 是否启用了 OCSP Stapling</b></h2><p>在服务器上启用 OCSP Stapling 有助于提升 TLS 握手速度。OCSP 协议可以让浏览器无需下载并检索证书信息，从而减少握手时间。</p><h2><b>37 你使用 IPv6 了吗</b></h2><p>研究标明，IPv6 的邻居发现（NDP）和路由优化可以使网站快 10% ~ 15%。升级到支持 IPv6 的 DNS 以为未来做好准备。只需确保双栈网络能正常工作——这使得 IPv6 和 IPv4 能同时运行。毕竟，IPv6 不是向后兼容的。</p><h2><b>38 HPACK 压缩启用了吗</b></h2><p>如果你使用了 HTTP/2，再次检查你的服务器是否实现了 HPACK 压缩。HPACK 压缩可以压缩 HTTP 响应头，以减少不必要的开支。由于 HTTP/2 服务器现在都很新，他们可能不能完全支持包括 HPACK 压缩在内的所有标准。H2spec 是一个非常好的用于检测标准支持程度的工具。</p><h2><b>39 你使用了 Service Worker 来缓存或者提供离线内容吗</b></h2><p>网络再怎么优化，也不会比本地缓存更快。如果你的网站使用了 HTTPS，那么你可以把静态资源放在 Service Worker 的缓存中，而不用请求网络。</p><p><b>八、测试和监控</b></p><h2><b>40 监控混合内容警告</b></h2><p>如果您最近从 HTTP 迁移到了 HTTPS，请确保使用类似 <a href=\"https://link.zhihu.com/?target=http%3A//Report-URI.io\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">Report-URI.io</span><span class=\"invisible\"></span></a> 之类的服务监控了严格的或被动的混合内容报警。你也可以用 Mixed Content Scan 来扫描你的 HTTPS 站点上是否有非 HTTPS 的混合内容。</p><h2><b>41 使用 DevTools 的开发工作流是优化过的吗</b></h2><p>选择一个调试工具，并试着点击每一个按钮。请确保您理解如何分析渲染性能、控制台输出、调试 JavaScript 和编辑 CSS 样式。</p><h2><b>42 是否在代理浏览器和老式浏览器上测试过了</b></h2><p>在 Chrome 和 Firefox 上测试是不够的。请看看你的网站在代理浏览器和老式浏览器（包括 UC 浏览器和 Opera Mini 等。译者注：此处的代理浏览器即指国内浏览器中常见的云加速功能）上是什么样子。统计你受众国家的网络平均速度，避免出现重大意外。使用网络节流并模拟高 DPI 设备。虽然 BrowserStack 很好，但也得在真机上测试。</p><h2><b>43 是否设置了持续的监控</b></h2><p>良好的性能指标是被动和主动监控工具的组合。拥有 WebPagetest 的私有实例和使用 Lighthouse 确实有利于快速测试，但也需要使用诸如 Calibre、speedscurve 等 RUM 工具建立持续的监控体系。设置您自己的用户计时打点以监控特定的业务速度指标。</p><p><b>九、速战速决</b></p><p>此列表相当全面，完成所有优化可能需要相当长的时间。如果你只有一个小时的时间，但又想获得显著的提升，你应该怎么做？我们挑出了 10 个最容易实现的方法。显然，在开始之前和完成之后，请统计结果，包括 3G 和有线连接上的开始渲染时间和速度指数（SpeedIndex）。</p><ol><li>统计真实的用户体验，设置可接受的目标。一个好的目标大致是：FMP < 1s，速度指数 < 1250，TTI 在 3G 网络上 < 5s 、二次访问 < 2s。优化开始渲染时间和 TTI。</li><li>为你的主模板准备核心 CSS，并放在 <code><head></code> 标签里（你的预算是 14KB）。对于 CSS/JS，请保证核心文件尺寸最大为 170kb （gzip 后的尺寸；压缩前 0.8~1Mb）</li><li>延迟或懒加载尽可能多的脚本，不管是你自己的还是第三方的——特别是分享按钮、视频播放器和其它的复杂模块。</li><li>增加资源提示，包括 <code>dns-lookup</code>, <code>preconnect</code>, <code>prefetch</code> 和 <code>preload</code>。</li><li>为 Web Font 创建子集，并异步加载（或者干脆别用）。</li><li>优化图片。考虑在关键的页面（比如落地页）上用 WebP 格式。</li><li>检查 HTTP 缓存头和安全头是否正确设置了。</li><li>在服务器上启用 Brotli 或者 Zopfli 压缩。如果不支持，别忘了开 gzip。</li><li>如果有 HTTP/2，启用 HPACK 压缩并上报混合内容警告。如果使用了 LTS，那么请打开 OCSP 装订。</li><li>如果可能，将静态资源（包括字体、样式、脚本和图片等）尽可能多地在 service worker 里缓存起来。</li></ol><p><i>Huge thanks to Yoav Weiss, Addy Osmani, Artem Denysov, Denys Mishunov, Ilya Pukhalski, Jeremy Wagner, Colin Bendell, Mark Zeman, Patrick Meenan, Leonardo Losoviz, Guy Podjarny, Andy Davies, Rachel Andrew, Anselm Hannemann, Patrick Hamann, Andy Davies, Tim Kadlec, Rey Bango, Matthias Ott, Mariana Peralta, Philipp Tellis, Ryan Townsend, Mohamed Hussain S H, Jacob Groß, Tim Swalling, Bob Visser, Kev Adamson and Rodney Rehm for reviewing this article, as well as our fantastic community, which has shared techniques and lessons learned from its work in performance optimization for everybody to use. You are truly smashing!</i></p></x-turndown>`', 0, 1, 0);
INSERT INTO `post` (`id`, `createAt`, `updateAt`, `title`, `description`, `thumb`, `url`, `html`, `markdown`, `views`, `status`, `push`) VALUES
(26, '2018-04-23 11:01:42.036591', '2018-04-23 11:01:42.036591', '不好意思！耽误你的十分钟，让MVVM原理还给你', '时间在嘀嗒嘀嗒的走着既然来了就继续看看吧这篇文章其实没有什么鸟用，只不过对于现在的前端面试而言，已经是一个被问烦了的考点了既然是考点，那么我就想简简单单的来给大家划一下重点众所周知当下是MVVM盛行的时代，从早期的Angular到现在的React和Vue，再从最初的三分天下到现在的两虎相争。无疑不给我们的开发带来了一种前所未有的新体验，告别了操作DOM的思维，换上了数据驱动页面的思想，果然时代的进步，改变了我们许多许多。啰嗦话多了起来，这样不好。我们来进入今天的主题划重点MVVM双向数据绑定在Angula', 'https://user-gold-cdn.xitu.io/2018/4/1/1627ec0f75ce9f31?imageView2/1/w/1304/h/734/q/85/interlace/1', 'https://juejin.im/post/5abdd6f6f265da23793c4458?utm_source=gold_browser_extension', '<h3 class=\"heading\" data-id=\"heading-0\">时间在嘀嗒嘀嗒的走着</h3>\n<h4 class=\"heading\" data-id=\"heading-1\">既然来了就继续看看吧</h4>\n<ul>\n<li>这篇文章其实没有什么鸟用，只不过对于现在的<strong>前端面试</strong>而言，已经是一个被问烦了的考点了</li>\n<li>既然是考点，那么我就想简简单单的来给大家划一下重点</li>\n</ul>\n<p>众所周知当下是MVVM盛行的时代，从早期的Angular到现在的React和Vue，再从最初的三分天下到现在的两虎相争。</p>\n<p>无疑不给我们的开发带来了一种前所未有的新体验，告别了操作DOM的思维，换上了数据驱动页面的思想，果然时代的进步，改变了我们许多许多。</p>\n<p>啰嗦话多了起来，这样不好。我们来进入今天的主题</p>\n<h3 class=\"heading\" data-id=\"heading-2\">划重点</h3>\n<p>MVVM 双向数据绑定 在Angular1.x版本的时候通过的是<strong>脏值检测</strong>来处理</p>\n<p>而现在无论是React还是Vue还是最新的Angular，其实实现方式都更相近了</p>\n<p>那就是通过<strong>数据劫持+发布订阅模式</strong></p>\n<p>真正实现其实靠的也是ES5中提供的<strong>Object.defineProperty</strong>，当然这是不兼容的所以Vue等只支持了IE8+</p>\n<h4 class=\"heading\" data-id=\"heading-3\">为什么是它</h4>\n<p>Object.defineProperty()说实在的我们大家在开发中确实用的不多，多数是修改内部特性，不过就是定义对象上的属性和值么？干嘛搞的这么费劲(纯属个人想法)</p>\n<p>But在实现框架or库的时候却发挥了大用场了，这个就不多说了，只不过轻舟一片而已，还没到写库的实力</p>\n<p><strong>知其然要知其所以然，来看看如何使用</strong></p>\n<pre><code class=\"hljs bash\" lang=\"bash\"><span class=\"hljs-built_in\">let</span> obj = {};\n<span class=\"hljs-built_in\">let</span> song = <span class=\"hljs-string\">\'发如雪\'</span>; \nobj.singer = <span class=\"hljs-string\">\'周杰伦\'</span>;  \n\nObject.defineProperty(obj, <span class=\"hljs-string\">\'music\'</span>, {\n    // 1. value: <span class=\"hljs-string\">\'七里香\'</span>,\n    configurable: <span class=\"hljs-literal\">true</span>,     // 2. 可以配置对象，删除属性\n    // writable: <span class=\"hljs-literal\">true</span>,         // 3. 可以修改对象\n    enumerable: <span class=\"hljs-literal\">true</span>,        // 4. 可以枚举\n    // ☆ get,<span class=\"hljs-built_in\">set</span>设置时不能设置writable和value，它们代替了二者且是互斥的\n    <span class=\"hljs-function\"><span class=\"hljs-title\">get</span></span>() {     // 5. 获取obj.music的时候就会调用get方法\n        <span class=\"hljs-built_in\">return</span> song;\n    },\n    <span class=\"hljs-built_in\">set</span>(val) {      // 6. 将修改的值重新赋给song\n        song = val;   \n    }\n});\n\n// 下面打印的部分分别是对应代码写入顺序执行\nconsole.log(obj);   // {singer: <span class=\"hljs-string\">\'周杰伦\'</span>, music: <span class=\"hljs-string\">\'七里香\'</span>}  // 1\n\ndelete obj.music;   // 如果想对obj里的属性进行删除，configurable要设为<span class=\"hljs-literal\">true</span>  2\nconsole.log(obj);   // 此时为  {singer: <span class=\"hljs-string\">\'周杰伦\'</span>}\n\nobj.music = <span class=\"hljs-string\">\'听妈妈的话\'</span>;   // 如果想对obj的属性进行修改，writable要设为<span class=\"hljs-literal\">true</span>  3\nconsole.log(obj);   // {singer: <span class=\"hljs-string\">\'周杰伦\'</span>, music: <span class=\"hljs-string\">\"听妈妈的话\"</span>}\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">let</span> key <span class=\"hljs-keyword\">in</span> obj) {    \n    // 默认情况下通过defineProperty定义的属性是不能被枚举(遍历)的\n    // 需要设置enumerable为<span class=\"hljs-literal\">true</span>才可以\n    // 不然你是拿不到music这个属性的，你只能拿到singer\n    console.log(key);   // singer, music    4\n}\n\nconsole.log(obj.music);   // <span class=\"hljs-string\">\'发如雪\'</span>  5\nobj.music = <span class=\"hljs-string\">\'夜曲\'</span>;       // 调用<span class=\"hljs-built_in\">set</span>设置新的值\nconsole.log(obj.music);   // <span class=\"hljs-string\">\'夜曲\'</span>    6\n</code></pre><p>以上是关于Object.defineProperty的用法</p>\n<p>下面我们来写个实例看看，这里我们以Vue为参照去实现怎么写MVVM</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">// index.html\n<body>\n    <div id=<span class=\"hljs-string\">\"app\"</span>>\n        <h1>{{song}}</h1>\n        <p>《{{album.name}}》是{{singer}}2005年11月发行的专辑</p>\n        <p>主打歌为{{album.theme}}</p>\n        <p>作词人为{{singer}}等人。</p>\n        为你弹奏肖邦的{{album.theme}}\n    </div>\n    <!--实现的mvvm-->\n    <script src=<span class=\"hljs-string\">\"mvvm.js\"</span>></script>\n    <script>\n        // 写法和Vue一样\n        <span class=\"hljs-built_in\">let</span> mvvm = new Mvvm({\n            el: <span class=\"hljs-string\">\'#app\'</span>,\n            data: {     // Object.defineProperty(obj, <span class=\"hljs-string\">\'song\'</span>, <span class=\"hljs-string\">\'发如雪\'</span>);\n                song: <span class=\"hljs-string\">\'发如雪\'</span>,\n                album: {\n                    name: <span class=\"hljs-string\">\'十一月的萧邦\'</span>,\n                    theme: <span class=\"hljs-string\">\'夜曲\'</span>\n                },\n                singer: <span class=\"hljs-string\">\'周杰伦\'</span>\n            }\n        });\n    </script>\n</body>\n</code></pre><p>上面是html里的写法，相信用过Vue的同学并不陌生</p>\n<p>那么现在就开始实现一个自己的MVVM吧</p>\n<h3 class=\"heading\" data-id=\"heading-4\">打造MVVM</h3>\n<pre><code class=\"hljs bash\" lang=\"bash\">// 创建一个Mvvm构造函数\n// 这里用es6方法将options赋一个初始值，防止没传，等同于options || {}\n<span class=\"hljs-keyword\">function</span> Mvvm(options = {}) {   \n    // vm.<span class=\"hljs-variable\">$options</span> Vue上是将所有属性挂载到上面\n    // 所以我们也同样实现,将所有属性挂载到了<span class=\"hljs-variable\">$options</span>\n    this.<span class=\"hljs-variable\">$options</span> = options;\n    // this._data 这里也和Vue一样\n    <span class=\"hljs-built_in\">let</span> data = this._data = this.<span class=\"hljs-variable\">$options</span>.data;\n    \n    // 数据劫持\n    observe(data);\n}\n</code></pre><h4 class=\"heading\" data-id=\"heading-5\">数据劫持</h4>\n<p>为什么要做数据劫持？</p>\n<ul>\n<li>观察对象，给对象增加Object.defineProperty</li>\n<li>vue特点是不能新增不存在的属性 不存在的属性没有get和set</li>\n<li>深度响应 因为每次赋予一个新对象时会给这个新对象增加defineProperty(数据劫持)</li>\n</ul>\n<p>多说无益，一起看代码</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">// 创建一个Observe构造函数\n// 写数据劫持的主要逻辑\n<span class=\"hljs-keyword\">function</span> Observe(data) {\n    // 所谓数据劫持就是给对象增加get,<span class=\"hljs-built_in\">set</span>\n    // 先遍历一遍对象再说\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">let</span> key <span class=\"hljs-keyword\">in</span> data) {     // 把data属性通过defineProperty的方式定义属性\n        <span class=\"hljs-built_in\">let</span> val = data[key];\n        observe(val);   // 递归继续向下找，实现深度的数据劫持\n        Object.defineProperty(data, key, {\n            configurable: <span class=\"hljs-literal\">true</span>,\n            <span class=\"hljs-function\"><span class=\"hljs-title\">get</span></span>() {\n                <span class=\"hljs-built_in\">return</span> val;\n            },\n            <span class=\"hljs-built_in\">set</span>(newVal) {   // 更改值的时候\n                <span class=\"hljs-keyword\">if</span> (val === newVal) {   // 设置的值和以前值一样就不理它\n                    <span class=\"hljs-built_in\">return</span>;\n                }\n                val = newVal;   // 如果以后再获取值(get)的时候，将刚才设置的值再返回去\n                observe(newVal);    // 当设置为新值后，也需要把新值再去定义成属性\n            }\n        });\n    }\n}\n\n// 外面再写一个函数\n// 不用每次调用都写个new\n// 也方便递归调用\n<span class=\"hljs-keyword\">function</span> observe(data) {\n    // 如果不是对象的话就直接<span class=\"hljs-built_in\">return</span>掉\n    // 防止递归溢出\n    <span class=\"hljs-keyword\">if</span> (!data || typeof data !== <span class=\"hljs-string\">\'object\'</span>) <span class=\"hljs-built_in\">return</span>;\n    <span class=\"hljs-built_in\">return</span> new Observe(data);\n}\n</code></pre><p>以上代码就实现了数据劫持，不过可能也有些疑惑的地方比如：递归</p>\n<p>再来细说一下为什么递归吧，看这个🌰</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">    <span class=\"hljs-built_in\">let</span> mvvm = new Mvvm({\n        el: <span class=\"hljs-string\">\'#app\'</span>,\n        data: {\n            a: {\n                b: 1\n            },\n            c: 2\n        }\n    });\n</code></pre><p>我们在控制台里看下</p>\n<p></p><figure><img class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2018/3/31/162797a1132d2905?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"361\" data-height=\"269\"><figcaption></figcaption></figure>\n被标记的地方就是通过<strong>递归</strong>observe(val)进行数据劫持添加上了get和set，递归继续向a里面的对象去定义属性，亲测通过可放心食用<p></p>\n<p>接下来说一下observe(newVal)这里为什么也要递归</p>\n<p>还是在可爱的控制台上，敲下这么一段代码 mvvm._data.a = {b:\'ok\'}</p>\n<p>然后继续看图说话\n</p><figure><img class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2018/3/31/1627983927aca52a?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"313\" data-height=\"235\"><figcaption></figcaption></figure>\n通过observe(newVal)加上了\n<figure><img class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2018/3/31/1627983e0e528729?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"303\" data-height=\"259\"><figcaption></figcaption></figure>\n现在大致明白了为什么要对设置的新值也进行递归observe了吧，哈哈，so easy<p></p>\n<p>数据劫持已完成，我们再做个数据代理</p>\n<h4 class=\"heading\" data-id=\"heading-6\">数据代理</h4>\n<p>数据代理就是让我们每次拿data里的数据时，不用每次都写一长串，如mvvm._data.a.b这种，我们其实可以直接写成mvvm.a.b这种显而易见的方式</p>\n<p>下面继续看下去，+号表示实现部分</p>\n<pre><code class=\"hljs bash\" lang=\"bash\"><span class=\"hljs-keyword\">function</span> Mvvm(options = {}) {  \n    // 数据劫持\n    observe(data);\n    // this 代理了this._data\n+   <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">let</span> key <span class=\"hljs-keyword\">in</span> data) {\n        Object.defineProperty(this, key, {\n            configurable: <span class=\"hljs-literal\">true</span>,\n            <span class=\"hljs-function\"><span class=\"hljs-title\">get</span></span>() {\n                <span class=\"hljs-built_in\">return</span> this._data[key];     // 如this.a = {b: 1}\n            },\n            <span class=\"hljs-built_in\">set</span>(newVal) {\n                this._data[key] = newVal;\n            }\n        });\n+   }\n}\n\n// 此时就可以简化写法了\nconsole.log(mvvm.a.b);   // 1\nmvvm.a.b = <span class=\"hljs-string\">\'ok\'</span>;    \nconsole.log(mvvm.a.b);  // <span class=\"hljs-string\">\'ok\'</span>\n</code></pre><p>写到这里数据劫持和数据代理都实现了，那么接下来就需要编译一下了，把{{}}里面的内容解析出来</p>\n<h4 class=\"heading\" data-id=\"heading-7\">数据编译</h4>\n<pre><code class=\"hljs bash\" lang=\"bash\"><span class=\"hljs-keyword\">function</span> Mvvm(options = {}) {\n    // observe(data);\n        \n    // 编译    \n+   new Compile(options.el, this);    \n}\n\n// 创建Compile构造函数\n<span class=\"hljs-keyword\">function</span> Compile(el, vm) {\n    // 将el挂载到实例上方便调用\n    vm.<span class=\"hljs-variable\">$el</span> = document.querySelector(el);\n    // 在el范围里将内容都拿到，当然不能一个一个的拿\n    // 可以选择移到内存中去然后放入文档碎片中，节省开销\n    <span class=\"hljs-built_in\">let</span> fragment = document.createDocumentFragment();\n    \n    <span class=\"hljs-keyword\">while</span> (child = vm.<span class=\"hljs-variable\">$el</span>.firstChild) {\n        fragment.appendChild(child);    // 此时将el中的内容放入内存中\n    }\n    // 对el里面的内容进行替换\n    <span class=\"hljs-keyword\">function</span> replace(frag) {\n        Array.from(frag.childNodes).forEach(node => {\n            <span class=\"hljs-built_in\">let</span> txt = node.textContent;\n            <span class=\"hljs-built_in\">let</span> reg = /\\{\\{(.*?)\\}\\}/g;   // 正则匹配{{}}\n            \n            <span class=\"hljs-keyword\">if</span> (node.nodeType === 3 && reg.test(txt)) { // 即是文本节点又有大括号的情况{{}}\n                console.log(RegExp.<span class=\"hljs-variable\">$1</span>); // 匹配到的第一个分组 如： a.b, c\n                <span class=\"hljs-built_in\">let</span> arr = RegExp.<span class=\"hljs-variable\">$1</span>.split(<span class=\"hljs-string\">\'.\'</span>);\n                <span class=\"hljs-built_in\">let</span> val = vm;\n                arr.forEach(key => {\n                    val = val[key];     // 如this.a.b\n                });\n                // 用trim方法去除一下首尾空格\n                node.textContent = txt.replace(reg, val).trim();\n            }\n            // 如果还有子节点，继续递归replace\n            <span class=\"hljs-keyword\">if</span> (node.childNodes && node.childNodes.length) {\n                replace(node);\n            }\n        });\n    }\n    \n    replace(fragment);  // 替换内容\n    \n    vm.<span class=\"hljs-variable\">$el</span>.appendChild(fragment);   // 再将文档碎片放入el中\n}\n</code></pre><p>看到这里在面试中已经可以初露锋芒了，那就一鼓作气，做事做全套，来个一条龙</p>\n<p>现在数据已经可以编译了，但是我们手动修改后的数据并没有在页面上发生改变</p>\n<p>下面我们就来看看怎么处理，其实这里就用到了特别常见的设计模式，发布订阅模式</p>\n<h4 class=\"heading\" data-id=\"heading-8\">发布订阅</h4>\n<p>发布订阅主要靠的就是数组关系，订阅就是放入函数，发布就是让数组里的函数执行</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">// 发布订阅模式  订阅和发布 如[fn1, fn2, fn3]\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-function\"><span class=\"hljs-title\">Dep</span></span>() {\n    // 一个数组(存放函数的事件池)\n    this.subs = [];\n}\nDep.prototype = {\n    addSub(sub) {   \n        this.subs.push(sub);    \n    },\n    <span class=\"hljs-function\"><span class=\"hljs-title\">notify</span></span>() {\n        // 绑定的方法，都有一个update方法\n        this.subs.forEach(sub => sub.update());\n    }\n};\n// 监听函数\n// 通过Watcher这个类创建的实例，都拥有update方法\n<span class=\"hljs-keyword\">function</span> Watcher(fn) {\n    this.fn = fn;   // 将fn放到实例上\n}\nWatcher.prototype.update = <span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span>() {\n    this.fn();  \n};\n\n<span class=\"hljs-built_in\">let</span> watcher = new Watcher(() => console.log(111));  // \n<span class=\"hljs-built_in\">let</span> dep = new Dep();\ndep.addSub(watcher);    // 将watcher放到数组中,watcher自带update方法， => [watcher]\ndep.addSub(watcher);\ndep.notify();   //  111, 111\n</code></pre><h4 class=\"heading\" data-id=\"heading-9\">数据更新视图</h4>\n<ul>\n<li>现在我们要订阅一个事件，当数据改变需要重新刷新视图，这就需要在replace替换的逻辑里来处理</li>\n<li>通过new Watcher把数据订阅一下，数据一变就执行改变内容的操作</li>\n</ul>\n<pre><code class=\"hljs bash\" lang=\"bash\"><span class=\"hljs-keyword\">function</span> replace(frag) {\n    // 省略...\n    // 替换的逻辑\n    node.textContent = txt.replace(reg, val).trim();\n    // 监听变化\n    // 给Watcher再添加两个参数，用来取新的值(newVal)给回调函数传参\n+   new Watcher(vm, RegExp.<span class=\"hljs-variable\">$1</span>, newVal => {\n        node.textContent = txt.replace(reg, newVal).trim();    \n+   });\n}\n\n// 重写Watcher构造函数\n<span class=\"hljs-keyword\">function</span> Watcher(vm, exp, fn) {\n    this.fn = fn;\n+   this.vm = vm;\n+   this.exp = exp;\n    // 添加一个事件\n    // 这里我们先定义一个属性\n+   Dep.target = this;\n+   <span class=\"hljs-built_in\">let</span> arr = exp.split(<span class=\"hljs-string\">\'.\'</span>);\n+   <span class=\"hljs-built_in\">let</span> val = vm;\n+   arr.forEach(key => {    // 取值\n+      val = val[key];     // 获取到this.a.b，默认就会调用get方法\n+   });\n+   Dep.target = null;\n}\n</code></pre><p>当获取值的时候就会自动调用get方法，于是我们去找一下数据劫持那里的get方法</p>\n<pre><code class=\"hljs bash\" lang=\"bash\"><span class=\"hljs-keyword\">function</span> Observe(data) {\n+   <span class=\"hljs-built_in\">let</span> dep = new Dep();\n    // 省略...\n    Object.defineProperty(data, key, {\n        <span class=\"hljs-function\"><span class=\"hljs-title\">get</span></span>() {\n+           Dep.target && dep.addSub(Dep.target);   // 将watcher添加到订阅事件中 [watcher]\n            <span class=\"hljs-built_in\">return</span> val;\n        },\n        <span class=\"hljs-built_in\">set</span>(newVal) {\n            <span class=\"hljs-keyword\">if</span> (val === newVal) {\n                <span class=\"hljs-built_in\">return</span>;\n            }\n            val = newVal;\n            observe(newVal);\n+           dep.notify();   // 让所有watcher的update方法执行即可\n        }\n    })\n}\n</code></pre><p>当set修改值的时候执行了dep.notify方法，这个方法是执行watcher的update方法，那么我们再对update进行修改一下</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">Watcher.prototype.update = <span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span>() {\n    // notify的时候值已经更改了\n    // 再通过vm, exp来获取新的值\n+   <span class=\"hljs-built_in\">let</span> arr = this.exp.split(<span class=\"hljs-string\">\'.\'</span>);\n+   <span class=\"hljs-built_in\">let</span> val = this.vm;\n+   arr.forEach(key => {    \n+       val = val[key];   // 通过get获取到新的值\n+   });\n    this.fn(val);   // 将每次拿到的新值去替换{{}}的内容即可\n};\n</code></pre><p>现在我们数据的更改可以修改视图了，这很good，还剩最后一点，我们再来看看面试常考的双向数据绑定吧</p>\n<h4 class=\"heading\" data-id=\"heading-10\">双向数据绑定</h4>\n<pre><code class=\"hljs bash\" lang=\"bash\">    // html结构\n    <input v-model=<span class=\"hljs-string\">\"c\"</span> <span class=\"hljs-built_in\">type</span>=<span class=\"hljs-string\">\"text\"</span>>\n    \n    // 数据部分\n    data: {\n        a: {\n            b: 1\n        },\n        c: 2\n    }\n    \n    <span class=\"hljs-keyword\">function</span> replace(frag) {\n        // 省略...\n+       <span class=\"hljs-keyword\">if</span> (node.nodeType === 1) {  // 元素节点\n            <span class=\"hljs-built_in\">let</span> nodeAttr = node.attributes; // 获取dom上的所有属性,是个类数组\n            Array.from(nodeAttr).forEach(attr => {\n                <span class=\"hljs-built_in\">let</span> name = attr.name;   // v-model  <span class=\"hljs-built_in\">type</span>\n                <span class=\"hljs-built_in\">let</span> exp = attr.value;   // c        text\n                <span class=\"hljs-keyword\">if</span> (name.includes(<span class=\"hljs-string\">\'v-\'</span>)){\n                    node.value = vm[exp];   // this.c 为 2\n                }\n                // 监听变化\n                new Watcher(vm, exp, <span class=\"hljs-keyword\">function</span>(newVal) {\n                    node.value = newVal;   // 当watcher触发时会自动将内容放进输入框中\n                });\n                \n                node.addEventListener(<span class=\"hljs-string\">\'input\'</span>, e => {\n                    <span class=\"hljs-built_in\">let</span> newVal = e.target.value;\n                    // 相当于给this.c赋了一个新值\n                    // 而值的改变会调用<span class=\"hljs-built_in\">set</span>，<span class=\"hljs-built_in\">set</span>中又会调用notify，notify中调用watcher的update方法实现了更新\n                    vm[exp] = newVal;   \n                });\n            });\n+       }\n        <span class=\"hljs-keyword\">if</span> (node.childNodes && node.childNodes.length) {\n            replace(node);\n        }\n    }\n</code></pre><p>大功告成，面试问Vue的东西不过就是这个罢了，什么双向数据绑定怎么实现的，问的一点心意都没有，差评！！！</p>\n<p><strong>大官人请留步</strong>，本来应该收手了，可临时起意(手痒)，再写点功能吧，再加个computed(计算属性)和mounted(钩子函数)吧</p>\n<h4 class=\"heading\" data-id=\"heading-11\">computed(计算属性) && mounted(钩子函数)</h4>\n<pre><code class=\"hljs bash\" lang=\"bash\">    // html结构\n    <p>求和的值是{{sum}}</p>\n    \n    data: { a: 1, b: 9 },\n    computed: {\n        <span class=\"hljs-function\"><span class=\"hljs-title\">sum</span></span>() {\n            <span class=\"hljs-built_in\">return</span> this.a + this.b;\n        },\n        <span class=\"hljs-function\"><span class=\"hljs-title\">noop</span></span>() {}\n    },\n    <span class=\"hljs-function\"><span class=\"hljs-title\">mounted</span></span>() {\n        <span class=\"hljs-built_in\">set</span>Timeout(() => {\n            console.log(<span class=\"hljs-string\">\'所有事情都搞定了\'</span>);\n        }, 1000);\n    }\n    \n    <span class=\"hljs-keyword\">function</span> Mvvm(options = {}) {\n        // 初始化computed,将this指向实例\n+       initComputed.call(this);     \n        // 编译\n        new Compile(options.el, this);\n        // 所有事情处理好后执行mounted钩子函数\n+       options.mounted.call(this); // 这就实现了mounted钩子函数\n    }\n    \n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-function\"><span class=\"hljs-title\">initComputed</span></span>() {\n        <span class=\"hljs-built_in\">let</span> vm = this;\n        <span class=\"hljs-built_in\">let</span> computed = this.<span class=\"hljs-variable\">$options</span>.computed;  // 从options上拿到computed属性   {sum: ƒ, noop: ƒ}\n        // 得到的都是对象的key可以通过Object.keys转化为数组\n        Object.keys(computed).forEach(key => {  // key就是sum,noop\n            Object.defineProperty(vm, key, {\n                // 这里判断是computed里的key是对象还是函数\n                // 如果是函数直接就会调get方法\n                // 如果是对象的话，手动调一下get方法即可\n                // 如： <span class=\"hljs-function\"><span class=\"hljs-title\">sum</span></span>() {<span class=\"hljs-built_in\">return</span> this.a + this.b;},他们获取a和b的值就会调用get方法\n                // 所以不需要new Watcher去监听变化了\n                get: typeof computed[key] === <span class=\"hljs-string\">\'function\'</span> ? computed[key] : computed[key].get,\n                <span class=\"hljs-function\"><span class=\"hljs-title\">set</span></span>() {}\n            });\n        });\n    }\n</code></pre><p>写了这些内容也不算少了，最后做一个形式上的总结吧</p>\n<h3 class=\"heading\" data-id=\"heading-12\">总结</h3>\n<p>通过自己实现的mvvm一共包含了以下东西</p>\n<ol>\n<li>通过Object.defineProperty的get和set进行数据劫持</li>\n<li>通过遍历data数据进行数据代理到this上</li>\n<li>通过{{}}对数据进行编译</li>\n<li>通过发布订阅模式实现数据与视图同步</li>\n<li>通过通过通过，收了，感谢大官人的留步了</li>\n</ol>\n<h3 class=\"heading\" data-id=\"heading-13\">补充</h3>\n<p>针对以上代码在实现编译的时候还是会有一些小bug，再次经过研究和高人指点，完善了编译，下面请看修改后的代码</p>\n<p><strong>修复</strong>：两个相邻的{{}}正则匹配，后一个不能正确编译成对应的文本，如{{album.name}} {{singer}}</p>\n<pre><code class=\"hljs bash\" lang=\"bash\"><span class=\"hljs-keyword\">function</span> Compile(el, vm) {\n    // 省略...\n    <span class=\"hljs-keyword\">function</span> replace(frag) {\n        // 省略...\n        <span class=\"hljs-keyword\">if</span> (node.nodeType === 3 && reg.test(txt)) {\n            <span class=\"hljs-keyword\">function</span> <span class=\"hljs-function\"><span class=\"hljs-title\">replaceTxt</span></span>() {\n                node.textContent = txt.replace(reg, (matched, placeholder) => {   \n                    console.log(placeholder);   // 匹配到的分组 如：song, album.name, singer...\n                    new Watcher(vm, placeholder, replaceTxt);   // 监听变化，进行匹配替换内容\n                    \n                    <span class=\"hljs-built_in\">return</span> placeholder.split(<span class=\"hljs-string\">\'.\'</span>).reduce((val, key) => {\n                        <span class=\"hljs-built_in\">return</span> val[key]; \n                    }, vm);\n                });\n            };\n            // 替换\n            replaceTxt();\n        }\n    }\n}\n</code></pre><p>上面代码主要实现依赖的是reduce方法，reduce 为数组中的每一个元素依次执行回调函数</p>\n<p>如果还有不太清楚的，那我们单独抽出来reduce这部分再看一下</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">    // 将匹配到的每一个值都进行split分割\n    // 如:<span class=\"hljs-string\">\'song\'</span>.split(<span class=\"hljs-string\">\'.\'</span>) => [<span class=\"hljs-string\">\'song\'</span>] => [<span class=\"hljs-string\">\'song\'</span>].reduce((val, key) => val[key]) \n    // 其实就是将vm传给val做初始值，reduce执行一次回调返回一个值\n    // vm[<span class=\"hljs-string\">\'song\'</span>] => <span class=\"hljs-string\">\'周杰伦\'</span>\n    \n    // 上面不够深入，我们再来看一个\n    // 再如：<span class=\"hljs-string\">\'album.name\'</span>.split(<span class=\"hljs-string\">\'.\'</span>) => [<span class=\"hljs-string\">\'album\'</span>, <span class=\"hljs-string\">\'name\'</span>] => [<span class=\"hljs-string\">\'album\'</span>, <span class=\"hljs-string\">\'name\'</span>].reduce((val, key) => val[key])\n    // 这里vm还是做为初始值传给val，进行第一次调用，返回的是vm[<span class=\"hljs-string\">\'album\'</span>]\n    // 然后将返回的vm[<span class=\"hljs-string\">\'album\'</span>]这个对象传给下一次调用的val\n    // 最后就变成了vm[<span class=\"hljs-string\">\'album\'</span>][<span class=\"hljs-string\">\'name\'</span>] => <span class=\"hljs-string\">\'十一月的萧邦\'</span>\n    \n    <span class=\"hljs-built_in\">return</span> placeholder.split(<span class=\"hljs-string\">\'.\'</span>).reduce((val, key) => {\n        <span class=\"hljs-built_in\">return</span> val[key]; \n    }, vm);\n</code></pre><p>reduce的用处多多，比如计算数组求和是比较普通的方法了，还有一种比较好用的妙处是可以进行二维数组的展平(flatten)，各位不妨来看最后一眼</p>\n<pre><code class=\"hljs bash\" lang=\"bash\"><span class=\"hljs-built_in\">let</span> arr = [\n  [1, 2],\n  [3, 4],\n  [5, 6]\n];\n\n<span class=\"hljs-built_in\">let</span> flatten = arr.reduce((previous, current) => {\n  <span class=\"hljs-built_in\">return</span> previous.concat(current);\n});\n\nconsole.log(flatten); // [1, 2, 3, 4, 5, 6]\n\n// ES6中也可以利用...展开运算符来实现的，实现思路一样，只是写法更精简了\nflatten = arr.reduce((a, b) => [...a, ...b]);\nconsole.log(flatten); // [1, 2, 3, 4, 5, 6]\n</code></pre><p>再次感谢父老乡亲，兄弟姐妹们的观看了！这回真的是最后一眼了，已经到底了！</p>', '### 时间在嘀嗒嘀嗒的走着\n\n#### 既然来了就继续看看吧\n\n*   这篇文章其实没有什么鸟用，只不过对于现在的**前端面试**而言，已经是一个被问烦了的考点了\n*   既然是考点，那么我就想简简单单的来给大家划一下重点\n\n众所周知当下是MVVM盛行的时代，从早期的Angular到现在的React和Vue，再从最初的三分天下到现在的两虎相争。\n\n无疑不给我们的开发带来了一种前所未有的新体验，告别了操作DOM的思维，换上了数据驱动页面的思想，果然时代的进步，改变了我们许多许多。\n\n啰嗦话多了起来，这样不好。我们来进入今天的主题\n\n### 划重点\n\nMVVM 双向数据绑定 在Angular1.x版本的时候通过的是**脏值检测**来处理\n\n而现在无论是React还是Vue还是最新的Angular，其实实现方式都更相近了\n\n那就是通过**数据劫持+发布订阅模式**\n\n真正实现其实靠的也是ES5中提供的**Object.defineProperty**，当然这是不兼容的所以Vue等只支持了IE8+\n\n#### 为什么是它\n\nObject.defineProperty()说实在的我们大家在开发中确实用的不多，多数是修改内部特性，不过就是定义对象上的属性和值么？干嘛搞的这么费劲(纯属个人想法)\n\nBut在实现框架or库的时候却发挥了大用场了，这个就不多说了，只不过轻舟一片而已，还没到写库的实力\n\n**知其然要知其所以然，来看看如何使用**\n\n    let obj = {};\n    let song = \'发如雪\'; \n    obj.singer = \'周杰伦\';  \n    \n    Object.defineProperty(obj, \'music\', {\n        // 1. value: \'七里香\',\n        configurable: true,     // 2. 可以配置对象，删除属性\n        // writable: true,         // 3. 可以修改对象\n        enumerable: true,        // 4. 可以枚举\n        // ☆ get,set设置时不能设置writable和value，它们代替了二者且是互斥的\n        get() {     // 5. 获取obj.music的时候就会调用get方法\n            return song;\n        },\n        set(val) {      // 6. 将修改的值重新赋给song\n            song = val;   \n        }\n    });\n    \n    // 下面打印的部分分别是对应代码写入顺序执行\n    console.log(obj);   // {singer: \'周杰伦\', music: \'七里香\'}  // 1\n    \n    delete obj.music;   // 如果想对obj里的属性进行删除，configurable要设为true  2\n    console.log(obj);   // 此时为  {singer: \'周杰伦\'}\n    \n    obj.music = \'听妈妈的话\';   // 如果想对obj的属性进行修改，writable要设为true  3\n    console.log(obj);   // {singer: \'周杰伦\', music: \"听妈妈的话\"}\n    \n    for (let key in obj) {    \n        // 默认情况下通过defineProperty定义的属性是不能被枚举(遍历)的\n        // 需要设置enumerable为true才可以\n        // 不然你是拿不到music这个属性的，你只能拿到singer\n        console.log(key);   // singer, music    4\n    }\n    \n    console.log(obj.music);   // \'发如雪\'  5\n    obj.music = \'夜曲\';       // 调用set设置新的值\n    console.log(obj.music);   // \'夜曲\'    6\n    \n\n以上是关于Object.defineProperty的用法\n\n下面我们来写个实例看看，这里我们以Vue为参照去实现怎么写MVVM\n\n    // index.html\n    \n        \"app\">\n            {{song}}\n            《{{album.name}}》是{{singer}}2005年11月发行的专辑\n            主打歌为{{album.theme}}\n            作词人为{{singer}}等人。\n            为你弹奏肖邦的{{album.theme}}\n        \n        \n        \"mvvm.js\"</span>>\n        \n            // 写法和Vue一样\n            <span class=\"hljs-built_in\">let</span> mvvm = new Mvvm({\n                el: <span class=\"hljs-string\">\'#app\'</span>,\n                data: {     // Object.defineProperty(obj, <span class=\"hljs-string\">\'song\'</span>, <span class=\"hljs-string\">\'发如雪\'</span>);\n                    song: <span class=\"hljs-string\">\'发如雪\'</span>,\n                    album: {\n                        name: <span class=\"hljs-string\">\'十一月的萧邦\'</span>,\n                        theme: <span class=\"hljs-string\">\'夜曲\'</span>\n                    },\n                    singer: <span class=\"hljs-string\">\'周杰伦\'</span>\n                }\n            });\n        \n    \n    \n\n上面是html里的写法，相信用过Vue的同学并不陌生\n\n那么现在就开始实现一个自己的MVVM吧\n\n### 打造MVVM\n\n    // 创建一个Mvvm构造函数\n    // 这里用es6方法将options赋一个初始值，防止没传，等同于options || {}\n    function Mvvm(options = {}) {   \n        // vm.$options Vue上是将所有属性挂载到上面\n        // 所以我们也同样实现,将所有属性挂载到了$options\n        this.$options = options;\n        // this._data 这里也和Vue一样\n        let data = this._data = this.$options.data;\n        \n        // 数据劫持\n        observe(data);\n    }\n    \n\n#### 数据劫持\n\n为什么要做数据劫持？\n\n*   观察对象，给对象增加Object.defineProperty\n*   vue特点是不能新增不存在的属性 不存在的属性没有get和set\n*   深度响应 因为每次赋予一个新对象时会给这个新对象增加defineProperty(数据劫持)\n\n多说无益，一起看代码\n\n    // 创建一个Observe构造函数\n    // 写数据劫持的主要逻辑\n    function Observe(data) {\n        // 所谓数据劫持就是给对象增加get,set\n        // 先遍历一遍对象再说\n        for (let key in data) {     // 把data属性通过defineProperty的方式定义属性\n            let val = data[key];\n            observe(val);   // 递归继续向下找，实现深度的数据劫持\n            Object.defineProperty(data, key, {\n                configurable: true,\n                get() {\n                    return val;\n                },\n                set(newVal) {   // 更改值的时候\n                    if (val === newVal) {   // 设置的值和以前值一样就不理它\n                        return;\n                    }\n                    val = newVal;   // 如果以后再获取值(get)的时候，将刚才设置的值再返回去\n                    observe(newVal);    // 当设置为新值后，也需要把新值再去定义成属性\n                }\n            });\n        }\n    }\n    \n    // 外面再写一个函数\n    // 不用每次调用都写个new\n    // 也方便递归调用\n    function observe(data) {\n        // 如果不是对象的话就直接return掉\n        // 防止递归溢出\n        if (!data || typeof data !== \'object\') return;\n        return new Observe(data);\n    }\n    \n\n以上代码就实现了数据劫持，不过可能也有些疑惑的地方比如：递归\n\n再来细说一下为什么递归吧，看这个🌰\n\n        let mvvm = new Mvvm({\n            el: \'#app\',\n            data: {\n                a: {\n                    b: 1\n                },\n                c: 2\n            }\n        });\n    \n\n我们在控制台里看下\n\n被标记的地方就是通过**递归**observe(val)进行数据劫持添加上了get和set，递归继续向a里面的对象去定义属性，亲测通过可放心食用\n\n接下来说一下observe(newVal)这里为什么也要递归\n\n还是在可爱的控制台上，敲下这么一段代码 mvvm._data.a = {b:\'ok\'}\n\n然后继续看图说话\n\n通过observe(newVal)加上了\n\n现在大致明白了为什么要对设置的新值也进行递归observe了吧，哈哈，so easy\n\n数据劫持已完成，我们再做个数据代理\n\n#### 数据代理\n\n数据代理就是让我们每次拿data里的数据时，不用每次都写一长串，如mvvm._data.a.b这种，我们其实可以直接写成mvvm.a.b这种显而易见的方式\n\n下面继续看下去，+号表示实现部分\n\n    function Mvvm(options = {}) {  \n        // 数据劫持\n        observe(data);\n        // this 代理了this._data\n    +   for (let key in data) {\n            Object.defineProperty(this, key, {\n                configurable: true,\n                get() {\n                    return this._data[key];     // 如this.a = {b: 1}\n                },\n                set(newVal) {\n                    this._data[key] = newVal;\n                }\n            });\n    +   }\n    }\n    \n    // 此时就可以简化写法了\n    console.log(mvvm.a.b);   // 1\n    mvvm.a.b = \'ok\';    \n    console.log(mvvm.a.b);  // \'ok\'\n    \n\n写到这里数据劫持和数据代理都实现了，那么接下来就需要编译一下了，把{{}}里面的内容解析出来\n\n#### 数据编译\n\n    function Mvvm(options = {}) {\n        // observe(data);\n            \n        // 编译    \n    +   new Compile(options.el, this);    \n    }\n    \n    // 创建Compile构造函数\n    function Compile(el, vm) {\n        // 将el挂载到实例上方便调用\n        vm.$el = document.querySelector(el);\n        // 在el范围里将内容都拿到，当然不能一个一个的拿\n        // 可以选择移到内存中去然后放入文档碎片中，节省开销\n        let fragment = document.createDocumentFragment();\n        \n        while (child = vm.$el.firstChild) {\n            fragment.appendChild(child);    // 此时将el中的内容放入内存中\n        }\n        // 对el里面的内容进行替换\n        function replace(frag) {\n            Array.from(frag.childNodes).forEach(node => {\n                let txt = node.textContent;\n                let reg = /\\{\\{(.*?)\\}\\}/g;   // 正则匹配{{}}\n                \n                if (node.nodeType === 3 && reg.test(txt)) { // 即是文本节点又有大括号的情况{{}}\n                    console.log(RegExp.$1); // 匹配到的第一个分组 如： a.b, c\n                    let arr = RegExp.$1.split(\'.\');\n                    let val = vm;\n                    arr.forEach(key => {\n                        val = val[key];     // 如this.a.b\n                    });\n                    // 用trim方法去除一下首尾空格\n                    node.textContent = txt.replace(reg, val).trim();\n                }\n                // 如果还有子节点，继续递归replace\n                if (node.childNodes && node.childNodes.length) {\n                    replace(node);\n                }\n            });\n        }\n        \n        replace(fragment);  // 替换内容\n        \n        vm.$el.appendChild(fragment);   // 再将文档碎片放入el中\n    }\n    \n\n看到这里在面试中已经可以初露锋芒了，那就一鼓作气，做事做全套，来个一条龙\n\n现在数据已经可以编译了，但是我们手动修改后的数据并没有在页面上发生改变\n\n下面我们就来看看怎么处理，其实这里就用到了特别常见的设计模式，发布订阅模式\n\n#### 发布订阅\n\n发布订阅主要靠的就是数组关系，订阅就是放入函数，发布就是让数组里的函数执行\n\n    // 发布订阅模式  订阅和发布 如[fn1, fn2, fn3]\n    function Dep() {\n        // 一个数组(存放函数的事件池)\n        this.subs = [];\n    }\n    Dep.prototype = {\n        addSub(sub) {   \n            this.subs.push(sub);    \n        },\n        notify() {\n            // 绑定的方法，都有一个update方法\n            this.subs.forEach(sub => sub.update());\n        }\n    };\n    // 监听函数\n    // 通过Watcher这个类创建的实例，都拥有update方法\n    function Watcher(fn) {\n        this.fn = fn;   // 将fn放到实例上\n    }\n    Watcher.prototype.update = function() {\n        this.fn();  \n    };\n    \n    let watcher = new Watcher(() => console.log(111));  // \n    let dep = new Dep();\n    dep.addSub(watcher);    // 将watcher放到数组中,watcher自带update方法， => [watcher]\n    dep.addSub(watcher);\n    dep.notify();   //  111, 111\n    \n\n#### 数据更新视图\n\n*   现在我们要订阅一个事件，当数据改变需要重新刷新视图，这就需要在replace替换的逻辑里来处理\n*   通过new Watcher把数据订阅一下，数据一变就执行改变内容的操作\n\n    function replace(frag) {\n        // 省略...\n        // 替换的逻辑\n        node.textContent = txt.replace(reg, val).trim();\n        // 监听变化\n        // 给Watcher再添加两个参数，用来取新的值(newVal)给回调函数传参\n    +   new Watcher(vm, RegExp.$1, newVal => {\n            node.textContent = txt.replace(reg, newVal).trim();    \n    +   });\n    }\n    \n    // 重写Watcher构造函数\n    function Watcher(vm, exp, fn) {\n        this.fn = fn;\n    +   this.vm = vm;\n    +   this.exp = exp;\n        // 添加一个事件\n        // 这里我们先定义一个属性\n    +   Dep.target = this;\n    +   let arr = exp.split(\'.\');\n    +   let val = vm;\n    +   arr.forEach(key => {    // 取值\n    +      val = val[key];     // 获取到this.a.b，默认就会调用get方法\n    +   });\n    +   Dep.target = null;\n    }\n    \n\n当获取值的时候就会自动调用get方法，于是我们去找一下数据劫持那里的get方法\n\n    function Observe(data) {\n    +   let dep = new Dep();\n        // 省略...\n        Object.defineProperty(data, key, {\n            get() {\n    +           Dep.target && dep.addSub(Dep.target);   // 将watcher添加到订阅事件中 [watcher]\n                return val;\n            },\n            set(newVal) {\n                if (val === newVal) {\n                    return;\n                }\n                val = newVal;\n                observe(newVal);\n    +           dep.notify();   // 让所有watcher的update方法执行即可\n            }\n        })\n    }\n    \n\n当set修改值的时候执行了dep.notify方法，这个方法是执行watcher的update方法，那么我们再对update进行修改一下\n\n    Watcher.prototype.update = function() {\n        // notify的时候值已经更改了\n        // 再通过vm, exp来获取新的值\n    +   let arr = this.exp.split(\'.\');\n    +   let val = this.vm;\n    +   arr.forEach(key => {    \n    +       val = val[key];   // 通过get获取到新的值\n    +   });\n        this.fn(val);   // 将每次拿到的新值去替换{{}}的内容即可\n    };\n    \n\n现在我们数据的更改可以修改视图了，这很good，还剩最后一点，我们再来看看面试常考的双向数据绑定吧\n\n#### 双向数据绑定\n\n        // html结构\n        \"c\" type=\"text\">\n        \n        // 数据部分\n        data: {\n            a: {\n                b: 1\n            },\n            c: 2\n        }\n        \n        function replace(frag) {\n            // 省略...\n    +       if (node.nodeType === 1) {  // 元素节点\n                let nodeAttr = node.attributes; // 获取dom上的所有属性,是个类数组\n                Array.from(nodeAttr).forEach(attr => {\n                    let name = attr.name;   // v-model  type\n                    let exp = attr.value;   // c        text\n                    if (name.includes(\'v-\')){\n                        node.value = vm[exp];   // this.c 为 2\n                    }\n                    // 监听变化\n                    new Watcher(vm, exp, function(newVal) {\n                        node.value = newVal;   // 当watcher触发时会自动将内容放进输入框中\n                    });\n                    \n                    node.addEventListener(\'input\', e => {\n                        let newVal = e.target.value;\n                        // 相当于给this.c赋了一个新值\n                        // 而值的改变会调用set，set中又会调用notify，notify中调用watcher的update方法实现了更新\n                        vm[exp] = newVal;   \n                    });\n                });\n    +       }\n            if (node.childNodes && node.childNodes.length) {\n                replace(node);\n            }\n        }\n    \n\n大功告成，面试问Vue的东西不过就是这个罢了，什么双向数据绑定怎么实现的，问的一点心意都没有，差评！！！\n\n**大官人请留步**，本来应该收手了，可临时起意(手痒)，再写点功能吧，再加个computed(计算属性)和mounted(钩子函数)吧\n\n#### computed(计算属性) && mounted(钩子函数)\n\n        // html结构\n        求和的值是{{sum}}\n        \n        data: { a: 1, b: 9 },\n        computed: {\n            sum() {\n                return this.a + this.b;\n            },\n            noop() {}\n        },\n        mounted() {\n            setTimeout(() => {\n                console.log(\'所有事情都搞定了\');\n            }, 1000);\n        }\n        \n        function Mvvm(options = {}) {\n            // 初始化computed,将this指向实例\n    +       initComputed.call(this);     \n            // 编译\n            new Compile(options.el, this);\n            // 所有事情处理好后执行mounted钩子函数\n    +       options.mounted.call(this); // 这就实现了mounted钩子函数\n        }\n        \n        function initComputed() {\n            let vm = this;\n            let computed = this.$options.computed;  // 从options上拿到computed属性   {sum: ƒ, noop: ƒ}\n            // 得到的都是对象的key可以通过Object.keys转化为数组\n            Object.keys(computed).forEach(key => {  // key就是sum,noop\n                Object.defineProperty(vm, key, {\n                    // 这里判断是computed里的key是对象还是函数\n                    // 如果是函数直接就会调get方法\n                    // 如果是对象的话，手动调一下get方法即可\n                    // 如： sum() {return this.a + this.b;},他们获取a和b的值就会调用get方法\n                    // 所以不需要new Watcher去监听变化了\n                    get: typeof computed[key] === \'function\' ? computed[key] : computed[key].get,\n                    set() {}\n                });\n            });\n        }\n    \n\n写了这些内容也不算少了，最后做一个形式上的总结吧\n\n### 总结\n\n通过自己实现的mvvm一共包含了以下东西\n\n1.  通过Object.defineProperty的get和set进行数据劫持\n2.  通过遍历data数据进行数据代理到this上\n3.  通过{{}}对数据进行编译\n4.  通过发布订阅模式实现数据与视图同步\n5.  通过通过通过，收了，感谢大官人的留步了\n\n### 补充\n\n针对以上代码在实现编译的时候还是会有一些小bug，再次经过研究和高人指点，完善了编译，下面请看修改后的代码\n\n**修复**：两个相邻的{{}}正则匹配，后一个不能正确编译成对应的文本，如{{album.name}} {{singer}}\n\n    function Compile(el, vm) {\n        // 省略...\n        function replace(frag) {\n            // 省略...\n            if (node.nodeType === 3 && reg.test(txt)) {\n                function replaceTxt() {\n                    node.textContent = txt.replace(reg, (matched, placeholder) => {   \n                        console.log(placeholder);   // 匹配到的分组 如：song, album.name, singer...\n                        new Watcher(vm, placeholder, replaceTxt);   // 监听变化，进行匹配替换内容\n                        \n                        return placeholder.split(\'.\').reduce((val, key) => {\n                            return val[key]; \n                        }, vm);\n                    });\n                };\n                // 替换\n                replaceTxt();\n            }\n        }\n    }\n    \n\n上面代码主要实现依赖的是reduce方法，reduce 为数组中的每一个元素依次执行回调函数\n\n如果还有不太清楚的，那我们单独抽出来reduce这部分再看一下\n\n        // 将匹配到的每一个值都进行split分割\n        // 如:\'song\'.split(\'.\') => [\'song\'] => [\'song\'].reduce((val, key) => val[key]) \n        // 其实就是将vm传给val做初始值，reduce执行一次回调返回一个值\n        // vm[\'song\'] => \'周杰伦\'\n        \n        // 上面不够深入，我们再来看一个\n        // 再如：\'album.name\'.split(\'.\') => [\'album\', \'name\'] => [\'album\', \'name\'].reduce((val, key) => val[key])\n        // 这里vm还是做为初始值传给val，进行第一次调用，返回的是vm[\'album\']\n        // 然后将返回的vm[\'album\']这个对象传给下一次调用的val\n        // 最后就变成了vm[\'album\'][\'name\'] => \'十一月的萧邦\'\n        \n        return placeholder.split(\'.\').reduce((val, key) => {\n            return val[key]; \n        }, vm);\n    \n\nreduce的用处多多，比如计算数组求和是比较普通的方法了，还有一种比较好用的妙处是可以进行二维数组的展平(flatten)，各位不妨来看最后一眼\n\n    let arr = [\n      [1, 2],\n      [3, 4],\n      [5, 6]\n    ];\n    \n    let flatten = arr.reduce((previous, current) => {\n      return previous.concat(current);\n    });\n    \n    console.log(flatten); // [1, 2, 3, 4, 5, 6]\n    \n    // ES6中也可以利用...展开运算符来实现的，实现思路一样，只是写法更精简了\n    flatten = arr.reduce((a, b) => [...a, ...b]);\n    console.log(flatten); // [1, 2, 3, 4, 5, 6]\n    \n\n再次感谢父老乡亲，兄弟姐妹们的观看了！这回真的是最后一眼了，已经到底了！', 0, 1, 0);
INSERT INTO `post` (`id`, `createAt`, `updateAt`, `title`, `description`, `thumb`, `url`, `html`, `markdown`, `views`, `status`, `push`) VALUES
(27, '2018-04-23 11:01:42.083259', '2018-04-23 11:01:42.083259', '【第1240期】passive 事件监听', '前言今日早读文章由富途@Linda翻译分享。正文从这开始～passive事件监听passive事件监听，是DOM规范的新特性，它可以让开发者选择不阻止touch和wheel事件监听，从而获得更好的滚动性能。开发者可以在监听touch和wheel事件时指定{passive:true}来表明他们不会调用preventDefault。这个特性出现在Chrome51，FireFox49，以及Webkit。看看下面的passive事件监听的效果对比视频：https://youtu.be/NPM6172J22g?t=', 'https://mmbiz.qpic.cn/mmbiz_jpg/meG6Vo0MeviaI3ygODW7eicw9kuwH7hI2nfLVTFFnWAldicwibygyMhibRSLSrqqicDrMWA0a8AcZn1OmkLW4BibV9z6Q/640?wx_fmt=jpeg', 'https://mp.weixin.qq.com/s/TrN50625KykugTiOZ3JVsw', '<p style=\"box-sizing: border-box;margin: 0px 0px 1.125em;color: rgb(51, 51, 51);\">前言</p><p style=\"box-sizing: border-box;margin: 0px 0px 1.125em;color: rgb(51, 51, 51);\">今日早读文章由富途@Linda翻译分享。</p><p style=\"box-sizing: border-box;margin: 0px 0px 1.125em;color: rgb(51, 51, 51);\">正文从这开始～</p><h4 style=\"box-sizing: border-box;margin-top: 1em;margin-bottom: 16px;line-height: 1.4;font-size: 1.15em;font-weight: bold;color: rgb(51, 51, 51);\">passive事件监听</h4><p style=\"box-sizing: border-box;margin: 0px 0px 1.125em;color: rgb(51, 51, 51);\">passive事件监听，是DOM规范的新特性，它可以让开发者选择不阻止touch和wheel事件监听，从而获得更好的滚动性能。开发者可以在监听touch和wheel事件时指定{passive:true}来表明他们不会调用preventDefault。这个特性出现在Chrome51，FireFox49，以及Webkit。看看下面的passive事件监听的效果对比视频：https://youtu.be/NPM6172J22g?t=14</p><h4 style=\"box-sizing: border-box;margin-top: 1em;margin-bottom: 16px;line-height: 1.4;font-size: 1.15em;font-weight: bold;color: rgb(51, 51, 51);\">问题所在</h4><p style=\"box-sizing: border-box;margin: 0px 0px 1.125em;color: rgb(51, 51, 51);\">对于web，尤其是移动设备上的web来说，流畅的滚动性能会直接决定用户体验。所有现代浏览器都有一个单独的线程处理页面滚动，即使是在JavaScript运行的时候也能流畅地滚动，但是这个优化有局限性，因为在需要等待touchstart和 touchmove操作的结果时就无法进行优化。这是因为touchstart等事件处理函数中可能会调用preventDefault()完全阻止滚动。在实际开发中，确实有需要阻止滚动的场景，但是分析结果表明，web上的多数的touch事件处理函数实际上从来不调用preventDefault()，所以浏览器通常不需要阻止滚动。例如，在安卓Chrome中，对滚动性能造成影响的情况中，有80%的事件都没有被阻止 。有10%的情况导致滚动延迟多于100毫秒。1%的情况导致延迟至少500毫秒，简直是毁灭性的影响。</p><p style=\"box-sizing: border-box;margin: 0px 0px 1.125em;color: rgb(51, 51, 51);\">许多开发者注意到在document中简单添加一个空的touch处理函数会对滚动性能有非常明显的负面影响。他们觉得很惊讶，监听一个事件的操作不应该有任何负面影响。</p><p style=\"box-sizing: border-box;margin: 0px 0px 1.125em;color: rgb(51, 51, 51);\">同样的问题并不只出现在touch事件上。wheel事件也遭遇同样的问题。与它们不同，指针事件处理函数被设计为不影响滚动（尽管开发者仍然可以通过touch-action这个CSS属性阻止滚动），所以不用面临这个问题。大体上讲，passive事件监听就是将指针事件的性能带给了touch和wheel事件。</p><p style=\"box-sizing: border-box;margin: 0px 0px 1.125em;color: rgb(51, 51, 51);\">这个提案允许开发者在注册事件处理函数时，指明是否会在处理函数中调用preventDefault()的方法(是否需要一个可以取消的事件)。当touch或wheel事件处理函数并没有需要包含可取消事件时，浏览器就可以在不等待JavaScript执行的情况下，立即开始滚动。也就是，passive监听的事件处理函数对性能没有负面影响。</p><h4 style=\"box-sizing: border-box;margin-top: 1em;margin-bottom: 16px;line-height: 1.4;font-size: 1.15em;font-weight: bold;color: rgb(51, 51, 51);\">EventListenerOptions（事件监听选项）</h4><p style=\"box-sizing: border-box;margin: 0px 0px 1.125em;color: rgb(51, 51, 51);\">首先，我们需要对事件监听附加额外信息的机制。addEventListener中的capture参数是最类似的例子，但是它的用法并不是十分明了：</p><pre class=\"prettyprint prettyprinted\" style=\"box-sizing: border-box;overflow: auto;font-size: 13.6px;margin-top: 0px;margin-bottom: 16px;padding: 10px;line-height: 1.6;background: rgb(246, 246, 246) none repeat scroll 0% 0%;border-radius: 3px;overflow-wrap: break-word;border-color: rgb(221, 221, 221);border-style: solid;border-width: 1px;white-space: pre-wrap;color: rgb(51, 51, 51);font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: normal;letter-spacing: normal;text-align: left;text-indent: 0px;text-transform: none;word-spacing: 0px;-webkit-text-stroke-width: 0px;text-decoration-style: initial;text-decoration-color: initial;\"><code style=\"box-sizing: border-box;font-size: 13.6px;\"><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">document</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">addEventListener</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">(</span><span class=\"str\" style=\"box-sizing: border-box;color: rgb(0, 136, 0);\">\'touchstart\'</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">,</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> handler</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">,</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">true</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">);</span></code></pre><p style=\"box-sizing: border-box;margin: 0px 0px 1.125em;color: rgb(51, 51, 51);\">EventListenerOptions让大家可以以一种更明了的方式指定参数：</p><pre class=\"prettyprint prettyprinted\" style=\"box-sizing: border-box;overflow: auto;font-size: 13.6px;margin-top: 0px;margin-bottom: 16px;padding: 10px;line-height: 1.6;background: rgb(246, 246, 246) none repeat scroll 0% 0%;border-radius: 3px;overflow-wrap: break-word;border-color: rgb(221, 221, 221);border-style: solid;border-width: 1px;white-space: pre-wrap;color: rgb(51, 51, 51);font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: normal;letter-spacing: normal;text-align: left;text-indent: 0px;text-transform: none;word-spacing: 0px;-webkit-text-stroke-width: 0px;text-decoration-style: initial;text-decoration-color: initial;\"><code style=\"box-sizing: border-box;font-size: 13.6px;\"><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">document</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">addEventListener</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">(</span><span class=\"str\" style=\"box-sizing: border-box;color: rgb(0, 136, 0);\">\'touchstart\'</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">,</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> handler</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">,</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">{</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">capture</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">:</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">true</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">});</span></code></pre><p style=\"box-sizing: border-box;margin: 0px 0px 1.125em;color: rgb(51, 51, 51);\">这是指定你希望在捕获阶段还是冒泡阶段监听事件的新语法，它是一种扩展的语法。</p><h4 style=\"box-sizing: border-box;margin-top: 1em;margin-bottom: 16px;line-height: 1.4;font-size: 1.15em;font-weight: bold;color: rgb(51, 51, 51);\">解决方案：passive 选项</h4><p style=\"box-sizing: border-box;margin: 0px 0px 1.125em;color: rgb(51, 51, 51);\">在有了扩展语法之后，我们在注册事件处理时，就可以添加一个新passive选项，用于提前声明监听函数在事件中从不调用preventDefault()。如果它调用，浏览器会忽略请求（并很机智地在控制台警告），就像它已经调用过Event.cancelable=false一样。开发者可以通过在调用preventDefault()之前和之后查看Event.defaultPrevented来进行确认。例如：</p><pre class=\"prettyprint prettyprinted\" style=\"box-sizing: border-box;overflow: auto;font-size: 13.6px;margin-top: 0px;margin-bottom: 16px;padding: 10px;line-height: 1.6;background: rgb(246, 246, 246) none repeat scroll 0% 0%;border-radius: 3px;overflow-wrap: break-word;border-color: rgb(221, 221, 221);border-style: solid;border-width: 1px;white-space: pre-wrap;color: rgb(51, 51, 51);font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: normal;letter-spacing: normal;text-align: left;text-indent: 0px;text-transform: none;word-spacing: 0px;-webkit-text-stroke-width: 0px;text-decoration-style: initial;text-decoration-color: initial;\"><code style=\"box-sizing: border-box;font-size: 13.6px;\"><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">addEventListener</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">(</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">document</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">,</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"str\" style=\"box-sizing: border-box;color: rgb(0, 136, 0);\">\"touchstart\"</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">,</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">function</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">(</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">e</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">)</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">{</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">        console</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">log</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">(</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">e</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">defaultPrevented</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">);</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">  </span><span class=\"com\" style=\"box-sizing: border-box;color: rgb(136, 0, 0);\">// will be false</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">        e</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">preventDefault</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">();</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">   </span><span class=\"com\" style=\"box-sizing: border-box;color: rgb(136, 0, 0);\">// does nothing since the listener is passive</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">        console</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">log</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">(</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">e</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">defaultPrevented</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">);</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">  </span><span class=\"com\" style=\"box-sizing: border-box;color: rgb(136, 0, 0);\">// still false</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\"></span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">},</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"typ\" style=\"box-sizing: border-box;color: rgb(102, 0, 102);\">Modernizr</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">passiveeventlisteners </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">?</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">{</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">passive</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">:</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">true</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">}</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">:</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">false</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">);</span></code></pre><p style=\"box-sizing: border-box;margin: 0px 0px 1.125em;color: rgb(51, 51, 51);\">现在，相比只要有touch或wheel监听就不得不阻止滚动来说，浏览器只需要在有non-passive监听时（参见TouchEvents spec）才阻止滚动。也就是说passive监听可以解决性能问题。</p><p style=\"box-sizing: border-box;margin: 0px 0px 1.125em;color: rgb(51, 51, 51);\">通过指定touch或wheel监听为passive的，开发者就是在承诺处理函数不调用preventDefault()来取消滚动。这使得浏览器能够立刻响应滚动，不用等待JavaScript，以此为用户保证流畅滚动体验。</p><h4 style=\"box-sizing: border-box;margin-top: 1em;margin-bottom: 16px;line-height: 1.4;font-size: 1.15em;font-weight: bold;color: rgb(51, 51, 51);\">特性检测</h4><p style=\"box-sizing: border-box;margin: 0px 0px 1.125em;color: rgb(51, 51, 51);\">由于老旧浏览器会把第三个参数capture传的任何对象看作true值，开发者用这个API时，需要使用特性检测或polyfill，以避免预期之外的结果。对于指定选项的特性检测可以像下面这样：</p><pre class=\"prettyprint prettyprinted\" style=\"box-sizing: border-box;overflow: auto;font-size: 13.6px;margin-top: 0px;margin-bottom: 16px;padding: 10px;line-height: 1.6;background: rgb(246, 246, 246) none repeat scroll 0% 0%;border-radius: 3px;overflow-wrap: break-word;border-color: rgb(221, 221, 221);border-style: solid;border-width: 1px;white-space: pre-wrap;color: rgb(51, 51, 51);font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: normal;letter-spacing: normal;text-align: left;text-indent: 0px;text-transform: none;word-spacing: 0px;-webkit-text-stroke-width: 0px;text-decoration-style: initial;text-decoration-color: initial;\"><code style=\"box-sizing: border-box;font-size: 13.6px;\"><span class=\"com\" style=\"box-sizing: border-box;color: rgb(136, 0, 0);\">// Test via a getter in the options object to see if the passive property is accessed</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\"></span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">var</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> supportsPassive </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">=</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">false</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">;</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\"></span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">try</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">{</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">    </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">var</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> opts </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">=</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"typ\" style=\"box-sizing: border-box;color: rgb(102, 0, 102);\">Object</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">defineProperty</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">({},</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"str\" style=\"box-sizing: border-box;color: rgb(0, 136, 0);\">\'passive\'</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">,</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">{</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">        </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">get</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">:</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">function</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">()</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">{</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">            supportsPassive </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">=</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">true</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">;</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">        </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">}</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">    </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">});</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">    window</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">addEventListener</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">(</span><span class=\"str\" style=\"box-sizing: border-box;color: rgb(0, 136, 0);\">\"test\"</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">,</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">null</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">,</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> opts</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">);</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\"></span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">}</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">catch</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">(</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">e</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">)</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">{}</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\"></span><span class=\"com\" style=\"box-sizing: border-box;color: rgb(136, 0, 0);\">// Use our detect\'s results. passive applied if supported, capture will be false either way.</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">elem</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">addEventListener</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">(</span><span class=\"str\" style=\"box-sizing: border-box;color: rgb(0, 136, 0);\">\'touchstart\'</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">,</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> fn</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">,</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> supportsPassive </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">?</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">{</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> passive</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">:</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">true</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">}</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">:</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">false</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">);</span></code></pre><p style=\"box-sizing: border-box;margin: 0px 0px 1.125em;color: rgb(51, 51, 51);\">为了更简洁，可以使用Detect It的特性检测，例如:</p><pre class=\"prettyprint prettyprinted\" style=\"box-sizing: border-box;overflow: auto;font-size: 13.6px;margin-top: 0px;margin-bottom: 16px;padding: 10px;line-height: 1.6;background: rgb(246, 246, 246) none repeat scroll 0% 0%;border-radius: 3px;overflow-wrap: break-word;border-color: rgb(221, 221, 221);border-style: solid;border-width: 1px;white-space: pre-wrap;color: rgb(51, 51, 51);font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: normal;letter-spacing: normal;text-align: left;text-indent: 0px;text-transform: none;word-spacing: 0px;-webkit-text-stroke-width: 0px;text-decoration-style: initial;text-decoration-color: initial;\"><code style=\"box-sizing: border-box;font-size: 13.6px;\"><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">elem</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">addEventListener</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">(</span><span class=\"str\" style=\"box-sizing: border-box;color: rgb(0, 136, 0);\">\'touchstart\'</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">,</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> fn</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">,</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">detectIt</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">passiveEvents </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">?</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">{</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">passive</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">:</span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">true</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">}</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">:</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">false</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">);</span></code></pre><p style=\"box-sizing: border-box;margin: 0px 0px 1.125em;color: rgb(51, 51, 51);\">Modernizr正在处理这个特性检测，但还没发布。此外有一个关于字典成员特性检测是否提供更简洁API的开放标准讨论。</p><h4 style=\"box-sizing: border-box;margin-top: 1em;margin-bottom: 16px;line-height: 1.4;font-size: 1.15em;font-weight: bold;color: rgb(51, 51, 51);\">消除取消事件的需求</h4><p style=\"box-sizing: border-box;margin: 0px 0px 1.125em;color: rgb(51, 51, 51);\">有一些场景是开发者想要取消所有touch或wheel事件让滚动不可用的情况。这些包含：</p><p style=\"box-sizing: border-box;margin: 0px 0px 1.125em;color: rgb(51, 51, 51);\">1.平移或缩放地图<br style=\"box-sizing: border-box;\">2.全屏游戏</p><p style=\"box-sizing: border-box;margin: 0px 0px 1.125em;color: rgb(51, 51, 51);\">在这些情况下，由于滚动自身是被一直阻止的，现有行为完全能够满足（没有滚动优化）。在这些情况下没有必要使用passive监听，虽然一般还是会添加touch-action: noneCSS属性来显式表达你的意图（例如可以更好地支持那些有pointer事件，但没有touch事件的浏览器）。</p><p style=\"box-sizing: border-box;margin: 0px 0px 1.125em;color: rgb(51, 51, 51);\">然而，在一系列场景中，事件处理函数根本不需要阻塞滚动。例如：</p><ul style=\"margin-left: 0px;margin-right: 0px;\" class=\" list-paddingleft-2\"><li><p>只想知道用户最后活跃是在什么时间的用户动态监控</p></li><li><p>隐藏一些活动UI（像工具栏）的touchstart处理函数。</p></li><li><p style=\"box-sizing: border-box;margin: 0px 0px 1.125em;color: rgb(51, 51, 51);\">改变UI元素样式的touchstart和touchend处理函数（不阻止onclick事件）。</p></li></ul><p style=\"box-sizing: border-box;margin: 0px 0px 1.125em;color: rgb(51, 51, 51);\">在这些场景下，可以不修改其他代码，直接添加passive选项上去（要有适当的特性检测），滑动体验会明显变得更流畅。</p><p style=\"box-sizing: border-box;margin: 0px 0px 1.125em;color: rgb(51, 51, 51);\">还有一些更复杂的场景，只想在一些确定的条件下阻止滑动，例如：</p><p style=\"box-sizing: border-box;margin: 0px 0px 1.125em;color: rgb(51, 51, 51);\">在横向滑动的时候去切换轮播图、移动一个条目，或者切换某个元素展示隐藏，但是仍然允许纵向滚动。</p><ul style=\"margin-left: 0px;margin-right: 0px;\" class=\" list-paddingleft-2\"><li><p>这种情况下，可以使用touch-action: pan-y来声明不需要横向滚动，不需要调用preventDefault()。</p></li><li><p style=\"box-sizing: border-box;margin: 0px 0px 1.125em;color: rgb(51, 51, 51);\">为了在所有浏览器中可以正常运行，preventDefault()的调用应当在缺少特定的touch-action属性支持的条件下使用（Safari9现在只支持 touch-action:manipulation）。</p></li></ul><p style=\"box-sizing: border-box;margin: 0px 0px 1.125em;color: rgb(51, 51, 51);\">一个需要使用横向滚动事件来滑动的UI元素（就像YouTube的声音调节滑动条），但不会改变滚垂直滚轮的行为。由于对于wheel来说没有touch-action的等价事件，这个情况只能用non-passive滚轮监听来实现。</p><p style=\"box-sizing: border-box;margin: 0px 0px 1.125em;color: rgb(51, 51, 51);\">事件代理模式下添加的监听代码，不会知道用户是否会取消事件。</p><ul style=\"margin-left: 0px;margin-right: 0px;\" class=\" list-paddingleft-2\"><li><p>一个可用的方法是单独代理passive和non-passive监听（就好像他们是完全不同种类的事件一样）。</p></li><li><p>像上面那样发挥touch-action的影响力也是可以的。</p></li></ul><h4 style=\"box-sizing: border-box;margin-top: 1em;margin-bottom: 16px;line-height: 1.4;font-size: 1.15em;font-weight: bold;color: rgb(51, 51, 51);\">调试及权衡利益</h4><p style=\"box-sizing: border-box;margin: 0px 0px 1.125em;color: rgb(51, 51, 51);\">通过chrome://flags/#passive-listener-default(chrome 52)强制设置touch/wheel为passive监听，可以快速了解它的优势（以及可能造成的问题）。这使得你能够自己做更直观的对比，像这个视频中的那样。</p><p style=\"box-sizing: border-box;margin: 0px 0px 1.125em;color: rgb(51, 51, 51);\">如何使用Chrome开发者工具识别阻塞滚动的监听，可以看这个视频。你可以监测事件时间戳来衡量滚动的性能，也可以使用Chromium的跟踪系统来查看调试时滚动的输入延迟（InputLatency）记录。</p><p style=\"box-sizing: border-box;margin: 0px 0px 1.125em;color: rgb(51, 51, 51);\">Chrome工作组正在准备关于Performance Timeline API及更多开发工具特性的提案，以帮助web开发者更好的看清这个问题。</p><h4 style=\"box-sizing: border-box;margin-top: 1em;margin-bottom: 16px;line-height: 1.4;font-size: 1.15em;font-weight: bold;color: rgb(51, 51, 51);\">减少和打断长时间运行的JS仍然很重要</h4><p style=\"box-sizing: border-box;margin: 0px 0px 1.125em;color: rgb(51, 51, 51);\">当一个页面展现出大量的滚动卡顿，就表示某些地方有潜在的性能问题。passive事件监听没有对潜在问题做事情，所以我们仍然强烈建议开发者确保他们的应用在低性能设备上能满足性能指导范围。如果你的网站有的逻辑每次运行都大于100ms，那么仍然会在tap和click响应上感觉很缓慢。passive事件监听只是允许开发者解耦了映射到滚动性能的JS响应问题和监控输入事件的请求。特别值得一提的是，第三方库的开发者现在可以更有自信一点说，他们对轻量级事件监听的使用，不会对使用了他们代码的页面的性能造成明显的改变。</p><p style=\"box-sizing: border-box;margin: 0px 0px 1.125em;color: rgb(51, 51, 51);\">最后，为你推荐</p><p style=\"box-sizing: border-box;margin: 0px 0px 1.125em;color: rgb(51, 51, 51);\"><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5MTA1MjAxMQ==&mid=2651227168&idx=1&sn=b03586dc844776e8a34f30cb844f9b32&chksm=bd495da48a3ed4b2eaf263f24da1c50d310601a2b7909241abfcd9c05ba16447e618efcc816a&scene=21#wechat_redirect\" target=\"_blank\">【第1091期】JavaScript：理解同步、异步和事件循环</a></p><p style=\"box-sizing: border-box;margin: 0px 0px 1.125em;color: rgb(51, 51, 51);\"><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5MTA1MjAxMQ==&mid=2651222422&idx=1&sn=8c059af21a4cd7c9041ab719459451d5&scene=21#wechat_redirect\" target=\"_blank\">【第663期】关于Promise：你可能不知道的6件事</a><br></p><p style=\"box-sizing: border-box;margin: 0px 0px 1.125em;color: rgb(51, 51, 51);\">关于本文<br style=\"box-sizing: border-box;\">译者：@Linda<br style=\"box-sizing: border-box;\">译文：https://futu.im/posts/2017-06-06-passive-event-listeners/<br style=\"box-sizing: border-box;\">作者：@RByers<br style=\"box-sizing: border-box;\">原文：https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md</p><p><img class=\"\" data-copyright=\"0\" data-ratio=\"0.4166666666666667\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/meG6Vo0MeviaI3ygODW7eicw9kuwH7hI2nfLVTFFnWAldicwibygyMhibRSLSrqqicDrMWA0a8AcZn1OmkLW4BibV9z6Q/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"720\" style=\"\"></p>', '前言\n\n今日早读文章由富途@Linda翻译分享。\n\n正文从这开始～\n\n#### passive事件监听\n\npassive事件监听，是DOM规范的新特性，它可以让开发者选择不阻止touch和wheel事件监听，从而获得更好的滚动性能。开发者可以在监听touch和wheel事件时指定{passive:true}来表明他们不会调用preventDefault。这个特性出现在Chrome51，FireFox49，以及Webkit。看看下面的passive事件监听的效果对比视频：https://youtu.be/NPM6172J22g?t=14\n\n#### 问题所在\n\n对于web，尤其是移动设备上的web来说，流畅的滚动性能会直接决定用户体验。所有现代浏览器都有一个单独的线程处理页面滚动，即使是在JavaScript运行的时候也能流畅地滚动，但是这个优化有局限性，因为在需要等待touchstart和 touchmove操作的结果时就无法进行优化。这是因为touchstart等事件处理函数中可能会调用preventDefault()完全阻止滚动。在实际开发中，确实有需要阻止滚动的场景，但是分析结果表明，web上的多数的touch事件处理函数实际上从来不调用preventDefault()，所以浏览器通常不需要阻止滚动。例如，在安卓Chrome中，对滚动性能造成影响的情况中，有80%的事件都没有被阻止 。有10%的情况导致滚动延迟多于100毫秒。1%的情况导致延迟至少500毫秒，简直是毁灭性的影响。\n\n许多开发者注意到在document中简单添加一个空的touch处理函数会对滚动性能有非常明显的负面影响。他们觉得很惊讶，监听一个事件的操作不应该有任何负面影响。\n\n同样的问题并不只出现在touch事件上。wheel事件也遭遇同样的问题。与它们不同，指针事件处理函数被设计为不影响滚动（尽管开发者仍然可以通过touch-action这个CSS属性阻止滚动），所以不用面临这个问题。大体上讲，passive事件监听就是将指针事件的性能带给了touch和wheel事件。\n\n这个提案允许开发者在注册事件处理函数时，指明是否会在处理函数中调用preventDefault()的方法(是否需要一个可以取消的事件)。当touch或wheel事件处理函数并没有需要包含可取消事件时，浏览器就可以在不等待JavaScript执行的情况下，立即开始滚动。也就是，passive监听的事件处理函数对性能没有负面影响。\n\n#### EventListenerOptions（事件监听选项）\n\n首先，我们需要对事件监听附加额外信息的机制。addEventListener中的capture参数是最类似的例子，但是它的用法并不是十分明了：\n\n    document.addEventListener(\'touchstart\', handler, true);\n\nEventListenerOptions让大家可以以一种更明了的方式指定参数：\n\n    document.addEventListener(\'touchstart\', handler, {capture: true});\n\n这是指定你希望在捕获阶段还是冒泡阶段监听事件的新语法，它是一种扩展的语法。\n\n#### 解决方案：passive 选项\n\n在有了扩展语法之后，我们在注册事件处理时，就可以添加一个新passive选项，用于提前声明监听函数在事件中从不调用preventDefault()。如果它调用，浏览器会忽略请求（并很机智地在控制台警告），就像它已经调用过Event.cancelable=false一样。开发者可以通过在调用preventDefault()之前和之后查看Event.defaultPrevented来进行确认。例如：\n\n    addEventListener(document, \"touchstart\", function(e) {        console.log(e.defaultPrevented);  // will be false        e.preventDefault();   // does nothing since the listener is passive        console.log(e.defaultPrevented);  // still false}, Modernizr.passiveeventlisteners ? {passive: true} : false);\n\n现在，相比只要有touch或wheel监听就不得不阻止滚动来说，浏览器只需要在有non-passive监听时（参见TouchEvents spec）才阻止滚动。也就是说passive监听可以解决性能问题。\n\n通过指定touch或wheel监听为passive的，开发者就是在承诺处理函数不调用preventDefault()来取消滚动。这使得浏览器能够立刻响应滚动，不用等待JavaScript，以此为用户保证流畅滚动体验。\n\n#### 特性检测\n\n由于老旧浏览器会把第三个参数capture传的任何对象看作true值，开发者用这个API时，需要使用特性检测或polyfill，以避免预期之外的结果。对于指定选项的特性检测可以像下面这样：\n\n    // Test via a getter in the options object to see if the passive property is accessedvar supportsPassive = false;try {    var opts = Object.defineProperty({}, \'passive\', {        get: function() {            supportsPassive = true;        }    });    window.addEventListener(\"test\", null, opts);} catch (e) {}// Use our detect\'s results. passive applied if supported, capture will be false either way.elem.addEventListener(\'touchstart\', fn, supportsPassive ? { passive: true } : false);\n\n为了更简洁，可以使用Detect It的特性检测，例如:\n\n    elem.addEventListener(\'touchstart\', fn,detectIt.passiveEvents ? {passive:true} : false);\n\nModernizr正在处理这个特性检测，但还没发布。此外有一个关于字典成员特性检测是否提供更简洁API的开放标准讨论。\n\n#### 消除取消事件的需求\n\n有一些场景是开发者想要取消所有touch或wheel事件让滚动不可用的情况。这些包含：\n\n1.平移或缩放地图  \n2.全屏游戏\n\n在这些情况下，由于滚动自身是被一直阻止的，现有行为完全能够满足（没有滚动优化）。在这些情况下没有必要使用passive监听，虽然一般还是会添加touch-action: noneCSS属性来显式表达你的意图（例如可以更好地支持那些有pointer事件，但没有touch事件的浏览器）。\n\n然而，在一系列场景中，事件处理函数根本不需要阻塞滚动。例如：\n\n*   只想知道用户最后活跃是在什么时间的用户动态监控\n    \n*   隐藏一些活动UI（像工具栏）的touchstart处理函数。\n    \n*   改变UI元素样式的touchstart和touchend处理函数（不阻止onclick事件）。\n    \n\n在这些场景下，可以不修改其他代码，直接添加passive选项上去（要有适当的特性检测），滑动体验会明显变得更流畅。\n\n还有一些更复杂的场景，只想在一些确定的条件下阻止滑动，例如：\n\n在横向滑动的时候去切换轮播图、移动一个条目，或者切换某个元素展示隐藏，但是仍然允许纵向滚动。\n\n*   这种情况下，可以使用touch-action: pan-y来声明不需要横向滚动，不需要调用preventDefault()。\n    \n*   为了在所有浏览器中可以正常运行，preventDefault()的调用应当在缺少特定的touch-action属性支持的条件下使用（Safari9现在只支持 touch-action:manipulation）。\n    \n\n一个需要使用横向滚动事件来滑动的UI元素（就像YouTube的声音调节滑动条），但不会改变滚垂直滚轮的行为。由于对于wheel来说没有touch-action的等价事件，这个情况只能用non-passive滚轮监听来实现。\n\n事件代理模式下添加的监听代码，不会知道用户是否会取消事件。\n\n*   一个可用的方法是单独代理passive和non-passive监听（就好像他们是完全不同种类的事件一样）。\n    \n*   像上面那样发挥touch-action的影响力也是可以的。\n    \n\n#### 调试及权衡利益\n\n通过chrome://flags/#passive-listener-default(chrome 52)强制设置touch/wheel为passive监听，可以快速了解它的优势（以及可能造成的问题）。这使得你能够自己做更直观的对比，像这个视频中的那样。\n\n如何使用Chrome开发者工具识别阻塞滚动的监听，可以看这个视频。你可以监测事件时间戳来衡量滚动的性能，也可以使用Chromium的跟踪系统来查看调试时滚动的输入延迟（InputLatency）记录。\n\nChrome工作组正在准备关于Performance Timeline API及更多开发工具特性的提案，以帮助web开发者更好的看清这个问题。\n\n#### 减少和打断长时间运行的JS仍然很重要\n\n当一个页面展现出大量的滚动卡顿，就表示某些地方有潜在的性能问题。passive事件监听没有对潜在问题做事情，所以我们仍然强烈建议开发者确保他们的应用在低性能设备上能满足性能指导范围。如果你的网站有的逻辑每次运行都大于100ms，那么仍然会在tap和click响应上感觉很缓慢。passive事件监听只是允许开发者解耦了映射到滚动性能的JS响应问题和监控输入事件的请求。特别值得一提的是，第三方库的开发者现在可以更有自信一点说，他们对轻量级事件监听的使用，不会对使用了他们代码的页面的性能造成明显的改变。\n\n最后，为你推荐\n\n[【第1091期】JavaScript：理解同步、异步和事件循环](http://mp.weixin.qq.com/s?__biz=MjM5MTA1MjAxMQ==&mid=2651227168&idx=1&sn=b03586dc844776e8a34f30cb844f9b32&chksm=bd495da48a3ed4b2eaf263f24da1c50d310601a2b7909241abfcd9c05ba16447e618efcc816a&scene=21#wechat_redirect)\n\n[【第663期】关于Promise：你可能不知道的6件事](http://mp.weixin.qq.com/s?__biz=MjM5MTA1MjAxMQ==&mid=2651222422&idx=1&sn=8c059af21a4cd7c9041ab719459451d5&scene=21#wechat_redirect)  \n\n关于本文  \n译者：@Linda  \n译文：https://futu.im/posts/2017-06-06-passive-event-listeners/  \n作者：@RByers  \n原文：https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md', 0, 1, 0);
INSERT INTO `post` (`id`, `createAt`, `updateAt`, `title`, `description`, `thumb`, `url`, `html`, `markdown`, `views`, `status`, `push`) VALUES
(28, '2018-04-23 11:01:42.130169', '2018-04-23 11:01:42.130169', '再聊移动端页面的适配', '前端圈真乱，这话一点不假。但乱也乱的好处，乱则生变，有变化才有进步。今天还是老调重谈，聊聊移动端页面的适配。因为对于一枚前端而言，天天和页面打交道（H5页面），那么布局的活总是少不了，这也将面临不同终端的适配问题。不知道你是否和我一样，页面布局总是或多或少会有一些蛋疼的事情发生。如果是的话，建议你花点时间阅读完下面我扯蛋的东东。Flexible承载的使命Flexible到今天也有几年的历史了，解救了很多同学针对于H5页面布局的适配问题。而这套方案也相对而言是一个较为成熟的方案。简单的回忆一下，当初为了能让', 'https://www.w3cplus.com/sites/default/files/blogs/2017/1707/vw-layout-1.png', 'https://www.w3cplus.com/css/vw-for-layout.html', '<p>前端圈真乱，这话一点不假。但乱也乱的好处，乱则生变，有变化才有进步。今天还是老调重谈，聊聊移动端页面的适配。因为对于一枚前端而言，天天和页面打交道（H5页面），那么布局的活总是少不了，这也将面临不同终端的适配问题。不知道你是否和我一样，页面布局总是或多或少会有一些蛋疼的事情发生。如果是的话，建议你花点时间阅读完下面我扯蛋的东东。</p>\n\n<h2>Flexible承载的使命</h2>\n\n<p>Flexible到今天也有几年的历史了，解救了很多同学针对于H5页面布局的适配问题。而这套方案也相对而言是一个较为成熟的方案。简单的回忆一下，当初为了能让页面更好的适配各种不同的终端，通过Hack手段来根据设备的<code>dpr</code>值相应改变<code><meta></code>标签中<code>viewport</code>的值：</p>\n\n<pre><code><!-- dpr = 1-->\n<meta name=\"viewport\" content=\"initial-scale=scale,maximum-scale=scale,minimum-scale=scale,user-scalable=no\"> \n<!-- dpr = 2-->\n<meta name=\"viewport\" content=\"initial-scale=0.5,maximum-scale=0.5,minimum-scale=0.5,user-scalable=no\">\n<!-- dpr = 3-->\n<meta name=\"viewport\" content=\"initial-scale=0.3333333333,maximum-scale=0.3333333333,minimum-scale=0.3333333333,user-scalable=no\">\n</code></pre>\n\n<p>从而让页面达么缩放的效果，也变相的实现页面的适配功能。而其主要的思想有三点：</p>\n\n<ul>\n<li>根据<code>dpr</code>的值来修改<code>viewport</code>实现<code>1px</code>的线</li>\n<li>根据<code>dpr</code>的值来修改<code>html</code>的<code>font-size</code>，从而使用<code>rem</code>实现等比缩放</li>\n<li>使用Hack手段用<code>rem</code>模拟<code>vw</code>特性</li>\n</ul>\n\n<p>有关于Flexible方案实现适配，在2015年双十一之后做过这方面的技术文档分享，感兴趣的同学可以移步阅读《<a href=\"https://www.w3cplus.com/mobile/lib-flexible-for-html5-layout.html\">使用Flexible实现手淘H5页面的终端适配</a>》一文。虽然Flexible解决了适配终端很多问题，但它并不是万能的，也不是最优秀的，他还是存在一些问题的，比如<code>iframe</code>的引用，有时候就把我们自己给埋进去了。针对其中的一些不足之处，有些同学对其进行过相关的改造，在网上搜索能找到相关的方案。</p>\n\n<p>那么时代在变化，前端技术在不断的变化，试问：<strong>Flexible还是最佳方案？Flexible还有存在的必要吗？</strong> 最近一直在探讨这方面，这里先告诉大家<strong>Flexible已经完成了他自身的历史使命，我们可以放下Flexible，拥抱新的变化</strong>。接下来的内容，我将分享一下我最近自己探讨的新的适配方案，或许很多团队同学已经开始使用了，如果有不对之处，希望能得到大婶们的指正；如果您有更好的方案，希望能一起分享一起探讨。</p>\n\n<h2>先上菜，再唠嗑</h2>\n\n<p>先上个二维码：</p>\n\n<p><img src=\"https://www.w3cplus.com/sites/default/files/blogs/2017/1707/vw-layout-1.png\" alt=\"\"></p>\n\n<p>你可以使用手淘App、优酷APP、各终端自带的浏览器、UC浏览器、QQ浏览器、Safari浏览器和Chrome浏览器扫描上面的二维码，您看到相应的效果：</p>\n\n<p><img src=\"https://www.w3cplus.com/sites/default/files/blogs/2017/1707/vw-layout-2.png\" alt=\"\"></p>\n\n<p><em>iPhone系列效果</em></p>\n\n<p><img src=\"https://www.w3cplus.com/sites/default/files/blogs/2017/1707/vw-layout-3.png\" alt=\"\"></p>\n\n<p><em>部分Android效果</em></p>\n\n<blockquote>\n  <p><strong>注：</strong>如果扫上面的二维码没有任何效果，你<a href=\"https://huodong.m.taobao.com/act/layouttestvw.html\">可以点击这里</a>，打开在线页面，重新生成你的设备能识别的二维码号 。</p>\n</blockquote>\n\n<p>上面的Demo，测试了Top30的机型。目前未得到支持的：</p>\n\n<table>\n<thead>\n<tr>\n  <th>品牌</th>\n  <th>型号</th>\n  <th>系统版本</th>\n  <th>分辨率</th>\n  <th>屏幕尺寸</th>\n  <th>手淘APP</th>\n  <th>优酷APP</th>\n  <th>原生浏览器</th>\n  <th>QQ浏览器</th>\n  <th>UC浏览器</th>\n  <th>Chrome浏览器</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td>华为</td>\n  <td>Mate9</td>\n  <td>Android7.0</td>\n  <td>1080 x 1920</td>\n  <td>5英寸</td>\n  <td>Yes</td>\n  <td>Yes</td>\n  <td>No</td>\n  <td>Yes</td>\n  <td>Yes</td>\n  <td>Yes</td>\n</tr>\n<tr>\n  <td>华为</td>\n  <td>Mate7</td>\n  <td>Android4.2</td>\n  <td>1080 x 1920</td>\n  <td>5.2英寸</td>\n  <td>Yes</td>\n  <td>Yes</td>\n  <td>No</td>\n  <td>Yes</td>\n  <td>Yes</td>\n  <td>Yes</td>\n</tr>\n<tr>\n  <td>魅族</td>\n  <td>Mx4 (M460 移动4G)</td>\n  <td>Android4.4.2</td>\n  <td>1152 x 1920</td>\n  <td>5.36英寸</td>\n  <td>Yes</td>\n  <td>No</td>\n  <td>No</td>\n  <td>Yes</td>\n  <td>Yes</td>\n  <td>Yes</td>\n</tr>\n<tr>\n  <td>Oppo</td>\n  <td>R7007</td>\n  <td>Android4.3</td>\n  <td>1280 x 720</td>\n  <td>5英寸</td>\n  <td>Yes</td>\n  <td>No</td>\n  <td>No</td>\n  <td>Yes</td>\n  <td>Yes</td>\n  <td>No</td>\n</tr>\n<tr>\n  <td>三星</td>\n  <td>N9008 (Galaxy Note3)</td>\n  <td>Android4.4.2</td>\n  <td>1080 x 1920</td>\n  <td>5.7英寸</td>\n  <td>Yes</td>\n  <td>No</td>\n  <td>Yes</td>\n  <td>Yes</td>\n  <td>Yes</td>\n  <td>Yes</td>\n</tr>\n<tr>\n  <td>华硕</td>\n  <td>ZenFone5(x86)</td>\n  <td>Android4.3</td>\n  <td>720 x 280</td>\n  <td>5英寸</td>\n  <td>No</td>\n  <td>No</td>\n  <td>No</td>\n  <td>Yes</td>\n  <td>No</td>\n  <td>No</td>\n</tr>\n</tbody>\n</table>\n\n<p>Top30机型中不在列表中的，将看到的效果如上图所示。至于敢不敢用，这就得看亲了。必竟第一个吃螃蟹的人是需要一定的勇气！(^_^)</p>\n\n<h2>适配方案</h2>\n\n<p>前面给大家介绍了这个方案目前得到的支持情况以及效果。也扯了不少废话，接下来进入正题吧。</p>\n\n<p>在移动端布局，我们需要面对两个最为重要的问题：</p>\n\n<ul>\n<li>各终端下的适配问题</li>\n<li>Retina屏的细节处理</li>\n</ul>\n\n<p>不同的终端，我们面对的屏幕分辨率、DPR、<code>1px</code>、<code>2x</code>图等一系列的问题。那么这个布局方案也是针对性的解决这些问题，只不过解决这些问题不再是使用Hack手段来处理，而是直接使用原生的CSS技术来处理的。</p>\n\n<h3>适配终端</h3>\n\n<p>首要解决的是适配终端。回想一下，以前的Flexible方案是通过JavaScript来模拟<code>vw</code>的特性，那么到今天为止，<code>vw</code>已经得到了众多浏览器的支持，也就是说，可以直接考虑将<code>vw</code>单位运用于我们的适配布局中。</p>\n\n<p>众所周知，<code>vw</code>是基于Viewport视窗的长度单位，这里的视窗（Viewport）指的就是浏览器可视化的区域，而这个可视区域是<code>window.innerWidth/window.innerHeight</code>的大小。用下图简单的来示意一下：</p>\n\n<p><img src=\"https://www.w3cplus.com/sites/default/files/blogs/2017/1707/vw-layout-4.png\" alt=\"\"></p>\n\n<blockquote>\n  <p>因为Viewport涉及到的知识点很多，要介绍清楚这方面的知识，都需要几篇文章来进行阐述。@PPK大神有<a href=\"https://www.quirksmode.org/mobile/viewports.html\">两篇</a><a href=\"https://www.quirksmode.org/mobile/viewports2.html\">文章</a>详细介绍了这方面的知识。中文可以移步<a href=\"https://www.w3cplus.com/css/viewports.html\">这里</a>进行阅读。</p>\n</blockquote>\n\n<p>在<a href=\"https://www.w3.org/TR/css3-values/\">CSS Values and Units Module Level 3</a>中和Viewport相关的单位有四个，分别为<code>vw</code>、<code>vh</code>、<code>vmin</code>和<code>vmax</code>。</p>\n\n<ul>\n<li><code>vw</code>：是Viewport\'s width的简写,<code>1vw</code>等于<code>window.innerWidth</code>的<code>1%</code></li>\n<li><code>vh</code>：和<code>vw</code>类似，是Viewport\'s height的简写，<code>1vh</code>等于<code>window.innerHeihgt</code>的<code>1%</code></li>\n<li><code>vmin</code>：<code>vmin</code>的值是当前<code>vw</code>和<code>vh</code>中较小的值</li>\n<li><code>vmax</code>：<code>vmax</code>的值是当前<code>vw</code>和<code>vh</code>中较大的值</li>\n</ul>\n\n<blockquote>\n  <p><code>vmin</code>和<code>vmax</code>是根据Viewport中长度偏大的那个维度值计算出来的，如果<code>window.innerHeight > window.innerWidth</code>则<code>vmin</code>取百分之一的<code>window.innerWidth</code>，<code>vmax</code>取百分之一的<code>window.innerHeight</code>计算。</p>\n</blockquote>\n\n<p>还是用一张图来示意吧，一图胜于千言万语：</p>\n\n<p><img src=\"https://www.w3cplus.com/sites/default/files/blogs/2017/1707/vw-layout-5.png\" alt=\"\"></p>\n\n<p>所以在这个方案中大胆的使用<code>vw</code>来替代以前Flexible中的<code>rem</code>缩放方案。先来回归到我们的实际业务中来。目前出视觉设计稿，我们都是使用<code>750px</code>宽度的，从上面的原理来看，那么<code>100vw = 750px</code>，即<code>1vw = 7.5px</code>。那么我们可以根据设计图上的<code>px</code>值直接转换成对应的<code>vw</code>值。看到这里，很多同学开始感到崩溃，又要计算，能不能简便一点，能不能再简单一点，其实是可以的，我们可以使用PostCSS的插件<a href=\"https://github.com/evrone/postcss-px-to-viewport\">postcss-px-to-viewport</a>，让我们可以直接在代码中写<code>px</code>，比如：</p>\n\n<pre><code>[w-369]{\n    width: 369px;\n}\n\n[w-369] h2 span {\n    background: #FF5000;\n    color: #fff;\n    display: inline-block;\n    border-radius: 4px;\n    font-size: 20px;\n    text-shadow: 0 2px 2px #FF5000;\n    padding: 2px 5px;\n    margin-right: 5px;\n}\n</code></pre>\n\n<p>PostCSS编译之后就是我们所需要的带<code>vw</code>代码：</p>\n\n<pre><code>[w-369] {\n    width: 49.2vw;\n}\n[w-369] h2 span {\n    background: #ff5000;\n    color: #fff;\n    display: inline-block;\n    border-radius: .53333vw;\n    text-shadow: 0 0.26667vw 0.26667vw #ff5000;\n    padding: .26667vw .66667vw;\n}\n[w-369] h2 span,\n[w-369] i {\n    font-size: 2.66667vw;\n    margin-right: .66667vw;\n}\n</code></pre>\n\n<p>在实际使用的时候，你可以对该插件进行相关的参数配置：</p>\n\n<pre><code>\"postcss-px-to-viewport\": {\n    viewportWidth: 750,\n    viewportHeight: 1334,\n    unitPrecision: 5,\n    viewportUnit: \'vw\',\n    selectorBlackList: [],\n    minPixelValue: 1,\n    mediaQuery: false\n}\n</code></pre>\n\n<p>假设你的设计稿不是<code>750px</code>而是<code>1125px</code>，那么你就可以修改<code>vewportWidth</code>的值。有关于该插件的详细介绍，<a href=\"https://github.com/evrone/postcss-px-to-viewport\">可以阅读其官方使用文档</a>。</p>\n\n<p>上面解决了<code>px</code>到<code>vw</code>的转换计算。那么在哪些地方可以使用<code>vw</code>来适配我们的页面。根据相关的测试：</p>\n\n<ul>\n<li>容器适配，可以使用<code>vw</code></li>\n<li>文本的适配，可以使用<code>vw</code></li>\n<li>大于<code>1px</code>的边框、圆角、阴影都可以使用<code>vw</code></li>\n<li>内距和外距，可以使用<code>vw</code></li>\n</ul>\n\n<p>另外有一个细节需要特别的提出，比如我们有一个这样的设计：</p>\n\n<p><img src=\"https://www.w3cplus.com/sites/default/files/blogs/2017/1707/vw-layout-6.png\" alt=\"\"></p>\n\n<p>如果我们直接使用：</p>\n\n<pre><code>[w-188-246] {\n    width: 188px;\n}\n[w-187-246]{\n    width: 187px\n}\n</code></pre>\n\n<p>最终的效果会造成<code>[w-187-246]</code>容器的高度小于<code>[w-188-246]</code>容器的高度。这个时候我们就需要考虑到<a href=\"https://www.w3cplus.com/css/aspect-ratio.html\">容器的长宽比缩放</a>。这方面的方案很多，但我还是推荐工具化来处理，这里推荐@一丝 姐姐写的一个PostCSS插件<a href=\"https://github.com/yisibl/postcss-aspect-ratio-mini\">postcss-aspect-ratio-mini</a>。这个插件使用很简单，不需要做任何的配置，你只需要本地安装一下就OK。使用的时候如下：</p>\n\n<pre><code>[aspectratio] {\n    position: relative;\n}\n[aspectratio]::before {\n    content: \'\';\n    display: block;\n    width: 1px;\n    margin-left: -1px;\n    height: 0;\n}\n\n[aspectratio-content] {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    width: 100%;\n    height: 100%;\n}\n[aspectratio][aspect-ratio=\"188/246\"]{\n    aspect-ratio: \'188:246\';\n}\n</code></pre>\n\n<p>编译出来：</p>\n\n<pre><code>[aspectratio][aspect-ratio=\"188/246\"]:before {\n    padding-top: 130.85106382978725%;\n}\n</code></pre>\n\n<p>这样就可以完美的实现长宽比的效果。有关于这方面的原理在这里不做过多阐述，感兴趣的话可以阅读早前整理的文章:</p>\n\n<ul>\n<li><a href=\"https://www.w3cplus.com/css/aspect-ratio.html\">CSS实现长宽比的几种方案</a></li>\n<li><a href=\"https://www.w3cplus.com/css/aspect-ratio-boxes.html\">容器长宽比</a></li>\n<li><a href=\"https://www.w3cplus.com/css/experiments-in-fixed-aspect-ratios.html\">Web中如何实现纵横比</a></li>\n<li><a href=\"https://www.w3cplus.com/css/css-polyfluidsizing-using-calc-vw-breakpoints-and-linear-equations.html\">实现精准的流体排版原理</a></li>\n</ul>\n\n<blockquote>\n  <p>目前采用PostCSS插件只是一个过渡阶段，在将来我们可以直接在CSS中使用<code>aspect-ratio</code>属性来实现长宽比。</p>\n</blockquote>\n\n<h3>解决<code>1px</code>方案</h3>\n\n<p>前面提到过，对于<code>1px</code>是不建议将其转换成对应的<code>vw</code>单位的，但在Retina下，我们始终是需要面对如何解决<code>1px</code>的问题。在《<a href=\"https://www.w3cplus.com/css/fix-1px-for-retina.html\">再谈Retina下<code>1px</code>的解决方案</a>》文章中提供了多种解决<code>1px</code>的方案。在这里的话，个人推荐另外一种解决<code>1px</code>的方案。依旧是使用PostCSS插件，解决<code>1px</code>可以使用<a href=\"https://github.com/jonathantneal/postcss-write-svg\">postcss-write-svg</a>。</p>\n\n<p>使用postcss-write-svg你可以通过<code>border-image</code>或者<code>background-image</code>两种方式来处理。比如：</p>\n\n<pre><code>@svg 1px-border {\n    height: 2px;\n    @rect {\n        fill: var(--color, black);\n        width: 100%;\n        height: 50%;\n    }\n}\n.example {\n    border: 1px solid transparent;\n    border-image: svg(1px-border param(--color #00b1ff)) 2 2 stretch;\n}\n</code></pre>\n\n<p>这样PostCSS会自动帮你把CSS编译出来：</p>\n\n<pre><code>.example {\n    border: 1px solid transparent;\n    border-image: url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns=\'http://www.w3.org/2000/svg\' height=\'2px\'%3E%3Crect fill=\'%2300b1ff\' width=\'100%25\' height=\'50%25\'/%3E%3C/svg%3E\") 2 2 stretch;\n}\n</code></pre>\n\n<p>使用PostCSS的插件是不是比我们修改图片要来得简单与方便。</p>\n\n<p>上面演示的是使用<code>border-image</code>方式，除此之外还可以使用<code>background-image</code>来实现。比如：</p>\n\n<pre><code>@svg square {\n    @rect {\n        fill: var(--color, black);\n        width: 100%;\n        height: 100%;\n    }\n}\n\n#example {\n    background: white svg(square param(--color #00b1ff));\n}\n</code></pre>\n\n<p>编译出来就是：</p>\n\n<pre><code>#example {\n    background: white url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns=\'http://www.w3.org/2000/svg\'%3E%3Crect fill=\'%2300b1ff\' width=\'100%25\' height=\'100%25\'/%3E%3C/svg%3E\");\n}\n</code></pre>\n\n<p>这个方案简单易用，是我所需要的。目前测试下来，基本能达到我所需要的需求。但有一点千万别忘了，记得在<code><head></code>中添加：</p>\n\n<pre><code><meta name=\"viewport\" content=\"width=device-width,initial-scale=1,maximum-scale=1,minimum-scale=1,user-scalable=no\" />\n</code></pre>\n\n<p>上面阐述的是这个适配方案中所用到的技术点，简单的总结一下：</p>\n\n<ul>\n<li>使用<code>vw</code>来实现页面的适配，并且通过PostCSS的插件<a href=\"https://github.com/evrone/postcss-px-to-viewport\">postcss-px-to-viewport</a>把<code>px</code>转换成<code>vw</code>。这样的好处是，我们在撸码的时候，不需要进行任何的计算，你只需要根据设计图写<code>px</code>单位</li>\n<li>为了更好的实现长宽比，特别是针对于<code>img</code>、<code>vedio</code>和<code>iframe</code>元素，通过PostCSS插件<a href=\"https://github.com/yisibl/postcss-aspect-ratio-mini\">postcss-aspect-ratio-mini</a>来实现，在实际使用中，只需要把对应的宽和高写进去即可</li>\n<li>为了解决<code>1px</code>的问题，使用PostCSS插件<a href=\"https://github.com/jonathantneal/postcss-write-svg\">postcss-write-svg</a>,自动生成<code>border-image</code>或者<code>background-image</code>的图片</li>\n</ul>\n\n<p>这里使用了多个PostCSS的插件，其实现在有很多优秀的PostCSS插件能帮助我们解决很多问题。哪果你从未接触过有关于PostCSS相关的知识，建议你可以花点时间去学习一下，在W3cplus提供了一些有<a href=\"https://www.w3cplus.com/blog/tags/516.html\">关于PostCSS相关的文章</a>。如果你想系统的学习PostCSS相关的知识，推荐你购买《<a href=\"https://www.w3cplus.com/preprocessor/postcss-book.html\">深入PostCSS Web设计</a>》一书：</p>\n\n<p><img src=\"https://www.w3cplus.com/sites/default/files/blogs/2017/1707/postcss.jpg\" alt=\"\"></p>\n\n<h2>降级处理</h2>\n\n<p>最开始提到过，到目前为止，T30的机型中还有几款机型是不支持<code>vw</code>的适配方案。那么如果业务需要，应该怎么处理呢？有两种方式可以进行降级处理：</p>\n\n<ul>\n<li><strong>CSS Houdini</strong>：通过<a href=\"https://github.com/w3c/css-houdini-drafts/wiki\">CSS Houdini</a>针对<code>vw</code>做处理，调用<a href=\"https://www.w3.org/TR/css-typed-om-1\">CSS Typed OM Level1</a> 提供的<a href=\"https://www.w3.org/TR/css-typed-om-1/#numericvalue-serialization\"><code>CSSUnitValue</code> API</a>。</li>\n<li><strong>CSS Polyfill</strong>：通过相应的Polyfill做相应的处理，目前针对于<code>vw</code>单位的Polyfill主要有：<a href=\"https://github.com/saabi/vminpoly\">vminpoly</a>、<a href=\"https://github.com/rodneyrehm/viewport-units-buggyfill\">Viewport Units Buggyfill</a>、<a href=\"https://gist.github.com/LeaVerou/1347501\">vunits.js</a>和<a href=\"https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-Browser-Polyfills\">Modernizr</a>。个人推荐采用<a href=\"https://github.com/rodneyrehm/viewport-units-buggyfill\">Viewport Units Buggyfill</a></li>\n</ul>\n\n<h2>Viewport不足之处</h2>\n\n<p>采用<code>vw</code>来做适配处理并不是只有好处没有任何缺点。有一些细节之处还是存在一定的缺陷的。比如当容器使用<code>vw</code>单位，<code>margin</code>采用<code>px</code>单位时，很容易造成整体宽度超过<code>100vw</code>，从而影响布局效果。对于类似这样的现象，我们可以采用相关的技术进行规避。比如将<code>margin</code>换成<code>padding</code>，并且配合<code>box-sizing</code>。只不过这不是最佳方案，随着将来浏览器或者应用自身的Webview对<code>calc()</code>函数的支持之后，碰到<code>vw</code>和<code>px</code>混合使用的时候，可以结合<code>calc()</code>函数一起使用，这样就可以完美的解决。</p>\n\n<p>另外一点，<code>px</code>转换成<code>vw</code>单位，多少还会存在一定的像素差，毕竟很多时候无法完全整除。</p>\n\n<p>到目前为止，我发现的两个不足之处。或许在后面的使用当中，还会碰到一些其他不为人之的坑。事实也是如此，不管任何方案，踩得坑越多，该方案也越来越强大。希望喜欢这个适配方案的同学和我一起踩坑，让其更为完善。</p>\n\n<h2>如何判断自己的应用是否支持</h2>\n\n<p>虽然该文的示例，进行了多方面的测试。但很多同学还是会担忧自己的APP应用是否支持该方案，而不敢大胆尝试或者使用。其实不必要这么担心，你可以拿自己的设备，或者应用扫描下面的二维码：</p>\n\n<p><img src=\"https://www.w3cplus.com/sites/default/files/blogs/2017/1707/vw-layout-7.png\" alt=\"\"></p>\n\n<p>当页面跑完测试之后，找到对应的<strong>Values and Units</strong>列表项：</p>\n\n<p><img src=\"https://www.w3cplus.com/sites/default/files/blogs/2017/1707/vw-layout-8.png\" alt=\"\"></p>\n\n<p>如果<code>vw</code>栏是绿色代表你的设备或应用支持该方案；反之则不支持。另外你也可以经常关注<a href=\"https://github.com/airen/css3test\">css3test</a>相关的更新，后面将会根据相关的规范更新测试代码，让你能快速掌握哪些属性可以大胆使用。</p>\n\n<h2>总结</h2>\n\n<p>H5页面的适配方案总是令人蛋疼的，事实上页面的布局总是令人蛋疼的。但技术是不断革新的，我们可以随着保持对新技术的关注，尝试这些新特性运用到实际项目中，只有这样，我们解决问题的方案才会越来越完善。</p>\n\n<p>到写这篇文章为止，虽然还有那么一两款机型不支持<code>vw</code>，但并不影响我们去使用。只有不断去尝试，才会有进步。在此，希望大家大胆尝试，一起让该方案变得更完美。如果你有更好的建议，或者你踩到任何坑，欢迎在下面的评论中与我分享，或者发邮件给我一起讨论。</p>\n\n<div class=\"blog-author media\"><a class=\"media-object\" href=\"https://weibo.com/w3cplus\" target=\"_blank\"><img src=\"https://www.w3cplus.com/sites/default/files/blogs/author/airen.jpg\"></a><div class=\"media-body\"><h3 class=\"media-heading\"><a href=\"https://weibo.com/w3cplus\" target=\"_blank\">大漠</a></h3><div class=\"media-des\">常用昵称“大漠”，W3CPlus创始人，目前就职于手淘。对HTML5、CSS3和Sass等前端脚本语言有非常深入的认识和丰富的实践经验，尤其专注对CSS3的研究，是国内最早研究和使用CSS3技术的一批人。CSS3、Sass和Drupal中国布道者。2014年出版《<a href=\"https://www.w3cplus.com/book-comment.html\" target=\"_blank\">图解CSS3：核心技术与案例实战</a>》。</div></div></div>\n\n<p>如需转载，烦请注明出处：<a href=\"https://www.w3cplus.com/css/vw-for-layout.html\">https://www.w3cplus.com/css/vw-for-layout.html</a></p>', '前端圈真乱，这话一点不假。但乱也乱的好处，乱则生变，有变化才有进步。今天还是老调重谈，聊聊移动端页面的适配。因为对于一枚前端而言，天天和页面打交道（H5页面），那么布局的活总是少不了，这也将面临不同终端的适配问题。不知道你是否和我一样，页面布局总是或多或少会有一些蛋疼的事情发生。如果是的话，建议你花点时间阅读完下面我扯蛋的东东。\n\nFlexible承载的使命\n-------------\n\nFlexible到今天也有几年的历史了，解救了很多同学针对于H5页面布局的适配问题。而这套方案也相对而言是一个较为成熟的方案。简单的回忆一下，当初为了能让页面更好的适配各种不同的终端，通过Hack手段来根据设备的`dpr`值相应改变标签中`viewport`的值：\n\n    \n     \n    \n    \n    \n    \n    \n\n从而让页面达么缩放的效果，也变相的实现页面的适配功能。而其主要的思想有三点：\n\n*   根据`dpr`的值来修改`viewport`实现`1px`的线\n*   根据`dpr`的值来修改`html`的`font-size`，从而使用`rem`实现等比缩放\n*   使用Hack手段用`rem`模拟`vw`特性\n\n有关于Flexible方案实现适配，在2015年双十一之后做过这方面的技术文档分享，感兴趣的同学可以移步阅读《[使用Flexible实现手淘H5页面的终端适配](https://www.w3cplus.com/mobile/lib-flexible-for-html5-layout.html)》一文。虽然Flexible解决了适配终端很多问题，但它并不是万能的，也不是最优秀的，他还是存在一些问题的，比如`iframe`的引用，有时候就把我们自己给埋进去了。针对其中的一些不足之处，有些同学对其进行过相关的改造，在网上搜索能找到相关的方案。\n\n那么时代在变化，前端技术在不断的变化，试问：**Flexible还是最佳方案？Flexible还有存在的必要吗？** 最近一直在探讨这方面，这里先告诉大家**Flexible已经完成了他自身的历史使命，我们可以放下Flexible，拥抱新的变化**。接下来的内容，我将分享一下我最近自己探讨的新的适配方案，或许很多团队同学已经开始使用了，如果有不对之处，希望能得到大婶们的指正；如果您有更好的方案，希望能一起分享一起探讨。\n\n先上菜，再唠嗑\n-------\n\n先上个二维码：\n\n![](https://www.w3cplus.com/sites/default/files/blogs/2017/1707/vw-layout-1.png)\n\n你可以使用手淘App、优酷APP、各终端自带的浏览器、UC浏览器、QQ浏览器、Safari浏览器和Chrome浏览器扫描上面的二维码，您看到相应的效果：\n\n![](https://www.w3cplus.com/sites/default/files/blogs/2017/1707/vw-layout-2.png)\n\n_iPhone系列效果_\n\n![](https://www.w3cplus.com/sites/default/files/blogs/2017/1707/vw-layout-3.png)\n\n_部分Android效果_\n\n> **注：**如果扫上面的二维码没有任何效果，你[可以点击这里](https://huodong.m.taobao.com/act/layouttestvw.html)，打开在线页面，重新生成你的设备能识别的二维码号 。\n\n上面的Demo，测试了Top30的机型。目前未得到支持的：\n\n| 品牌 | 型号 | 系统版本 | 分辨率 | 屏幕尺寸 | 手淘APP | 优酷APP | 原生浏览器 | QQ浏览器 | UC浏览器 | Chrome浏览器 |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| 华为 | Mate9 | Android7.0 | 1080 x 1920 | 5英寸 | Yes | Yes | No | Yes | Yes | Yes |\n| 华为 | Mate7 | Android4.2 | 1080 x 1920 | 5.2英寸 | Yes | Yes | No | Yes | Yes | Yes |\n| 魅族 | Mx4 (M460 移动4G) | Android4.4.2 | 1152 x 1920 | 5.36英寸 | Yes | No | No | Yes | Yes | Yes |\n| Oppo | R7007 | Android4.3 | 1280 x 720 | 5英寸 | Yes | No | No | Yes | Yes | No |\n| 三星 | N9008 (Galaxy Note3) | Android4.4.2 | 1080 x 1920 | 5.7英寸 | Yes | No | Yes | Yes | Yes | Yes |\n| 华硕 | ZenFone5(x86) | Android4.3 | 720 x 280 | 5英寸 | No | No | No | Yes | No | No |\n\nTop30机型中不在列表中的，将看到的效果如上图所示。至于敢不敢用，这就得看亲了。必竟第一个吃螃蟹的人是需要一定的勇气！(^_^)\n\n适配方案\n----\n\n前面给大家介绍了这个方案目前得到的支持情况以及效果。也扯了不少废话，接下来进入正题吧。\n\n在移动端布局，我们需要面对两个最为重要的问题：\n\n*   各终端下的适配问题\n*   Retina屏的细节处理\n\n不同的终端，我们面对的屏幕分辨率、DPR、`1px`、`2x`图等一系列的问题。那么这个布局方案也是针对性的解决这些问题，只不过解决这些问题不再是使用Hack手段来处理，而是直接使用原生的CSS技术来处理的。\n\n### 适配终端\n\n首要解决的是适配终端。回想一下，以前的Flexible方案是通过JavaScript来模拟`vw`的特性，那么到今天为止，`vw`已经得到了众多浏览器的支持，也就是说，可以直接考虑将`vw`单位运用于我们的适配布局中。\n\n众所周知，`vw`是基于Viewport视窗的长度单位，这里的视窗（Viewport）指的就是浏览器可视化的区域，而这个可视区域是`window.innerWidth/window.innerHeight`的大小。用下图简单的来示意一下：\n\n![](https://www.w3cplus.com/sites/default/files/blogs/2017/1707/vw-layout-4.png)\n\n> 因为Viewport涉及到的知识点很多，要介绍清楚这方面的知识，都需要几篇文章来进行阐述。@PPK大神有[两篇](https://www.quirksmode.org/mobile/viewports.html)[文章](https://www.quirksmode.org/mobile/viewports2.html)详细介绍了这方面的知识。中文可以移步[这里](https://www.w3cplus.com/css/viewports.html)进行阅读。\n\n在[CSS Values and Units Module Level 3](https://www.w3.org/TR/css3-values/)中和Viewport相关的单位有四个，分别为`vw`、`vh`、`vmin`和`vmax`。\n\n*   `vw`：是Viewport\'s width的简写,`1vw`等于`window.innerWidth`的`1%`\n*   `vh`：和`vw`类似，是Viewport\'s height的简写，`1vh`等于`window.innerHeihgt`的`1%`\n*   `vmin`：`vmin`的值是当前`vw`和`vh`中较小的值\n*   `vmax`：`vmax`的值是当前`vw`和`vh`中较大的值\n\n> `vmin`和`vmax`是根据Viewport中长度偏大的那个维度值计算出来的，如果`window.innerHeight > window.innerWidth`则`vmin`取百分之一的`window.innerWidth`，`vmax`取百分之一的`window.innerHeight`计算。\n\n还是用一张图来示意吧，一图胜于千言万语：\n\n![](https://www.w3cplus.com/sites/default/files/blogs/2017/1707/vw-layout-5.png)\n\n所以在这个方案中大胆的使用`vw`来替代以前Flexible中的`rem`缩放方案。先来回归到我们的实际业务中来。目前出视觉设计稿，我们都是使用`750px`宽度的，从上面的原理来看，那么`100vw = 750px`，即`1vw = 7.5px`。那么我们可以根据设计图上的`px`值直接转换成对应的`vw`值。看到这里，很多同学开始感到崩溃，又要计算，能不能简便一点，能不能再简单一点，其实是可以的，我们可以使用PostCSS的插件[postcss-px-to-viewport](https://github.com/evrone/postcss-px-to-viewport)，让我们可以直接在代码中写`px`，比如：\n\n    [w-369]{\n        width: 369px;\n    }\n    \n    [w-369] h2 span {\n        background: #FF5000;\n        color: #fff;\n        display: inline-block;\n        border-radius: 4px;\n        font-size: 20px;\n        text-shadow: 0 2px 2px #FF5000;\n        padding: 2px 5px;\n        margin-right: 5px;\n    }\n    \n\nPostCSS编译之后就是我们所需要的带`vw`代码：\n\n    [w-369] {\n        width: 49.2vw;\n    }\n    [w-369] h2 span {\n        background: #ff5000;\n        color: #fff;\n        display: inline-block;\n        border-radius: .53333vw;\n        text-shadow: 0 0.26667vw 0.26667vw #ff5000;\n        padding: .26667vw .66667vw;\n    }\n    [w-369] h2 span,\n    [w-369] i {\n        font-size: 2.66667vw;\n        margin-right: .66667vw;\n    }\n    \n\n在实际使用的时候，你可以对该插件进行相关的参数配置：\n\n    \"postcss-px-to-viewport\": {\n        viewportWidth: 750,\n        viewportHeight: 1334,\n        unitPrecision: 5,\n        viewportUnit: \'vw\',\n        selectorBlackList: [],\n        minPixelValue: 1,\n        mediaQuery: false\n    }\n    \n\n假设你的设计稿不是`750px`而是`1125px`，那么你就可以修改`vewportWidth`的值。有关于该插件的详细介绍，[可以阅读其官方使用文档](https://github.com/evrone/postcss-px-to-viewport)。\n\n上面解决了`px`到`vw`的转换计算。那么在哪些地方可以使用`vw`来适配我们的页面。根据相关的测试：\n\n*   容器适配，可以使用`vw`\n*   文本的适配，可以使用`vw`\n*   大于`1px`的边框、圆角、阴影都可以使用`vw`\n*   内距和外距，可以使用`vw`\n\n另外有一个细节需要特别的提出，比如我们有一个这样的设计：\n\n![](https://www.w3cplus.com/sites/default/files/blogs/2017/1707/vw-layout-6.png)\n\n如果我们直接使用：\n\n    [w-188-246] {\n        width: 188px;\n    }\n    [w-187-246]{\n        width: 187px\n    }\n    \n\n最终的效果会造成`[w-187-246]`容器的高度小于`[w-188-246]`容器的高度。这个时候我们就需要考虑到[容器的长宽比缩放](https://www.w3cplus.com/css/aspect-ratio.html)。这方面的方案很多，但我还是推荐工具化来处理，这里推荐@一丝 姐姐写的一个PostCSS插件[postcss-aspect-ratio-mini](https://github.com/yisibl/postcss-aspect-ratio-mini)。这个插件使用很简单，不需要做任何的配置，你只需要本地安装一下就OK。使用的时候如下：\n\n    [aspectratio] {\n        position: relative;\n    }\n    [aspectratio]::before {\n        content: \'\';\n        display: block;\n        width: 1px;\n        margin-left: -1px;\n        height: 0;\n    }\n    \n    [aspectratio-content] {\n        position: absolute;\n        top: 0;\n        left: 0;\n        right: 0;\n        bottom: 0;\n        width: 100%;\n        height: 100%;\n    }\n    [aspectratio][aspect-ratio=\"188/246\"]{\n        aspect-ratio: \'188:246\';\n    }\n    \n\n编译出来：\n\n    [aspectratio][aspect-ratio=\"188/246\"]:before {\n        padding-top: 130.85106382978725%;\n    }\n    \n\n这样就可以完美的实现长宽比的效果。有关于这方面的原理在这里不做过多阐述，感兴趣的话可以阅读早前整理的文章:\n\n*   [CSS实现长宽比的几种方案](https://www.w3cplus.com/css/aspect-ratio.html)\n*   [容器长宽比](https://www.w3cplus.com/css/aspect-ratio-boxes.html)\n*   [Web中如何实现纵横比](https://www.w3cplus.com/css/experiments-in-fixed-aspect-ratios.html)\n*   [实现精准的流体排版原理](https://www.w3cplus.com/css/css-polyfluidsizing-using-calc-vw-breakpoints-and-linear-equations.html)\n\n> 目前采用PostCSS插件只是一个过渡阶段，在将来我们可以直接在CSS中使用`aspect-ratio`属性来实现长宽比。\n\n### 解决`1px`方案\n\n前面提到过，对于`1px`是不建议将其转换成对应的`vw`单位的，但在Retina下，我们始终是需要面对如何解决`1px`的问题。在《[再谈Retina下`1px`的解决方案](https://www.w3cplus.com/css/fix-1px-for-retina.html)》文章中提供了多种解决`1px`的方案。在这里的话，个人推荐另外一种解决`1px`的方案。依旧是使用PostCSS插件，解决`1px`可以使用[postcss-write-svg](https://github.com/jonathantneal/postcss-write-svg)。\n\n使用postcss-write-svg你可以通过`border-image`或者`background-image`两种方式来处理。比如：\n\n    @svg 1px-border {\n        height: 2px;\n        @rect {\n            fill: var(--color, black);\n            width: 100%;\n            height: 50%;\n        }\n    }\n    .example {\n        border: 1px solid transparent;\n        border-image: svg(1px-border param(--color #00b1ff)) 2 2 stretch;\n    }\n    \n\n这样PostCSS会自动帮你把CSS编译出来：\n\n    .example {\n        border: 1px solid transparent;\n        border-image: url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns=\'http://www.w3.org/2000/svg\' height=\'2px\'%3E%3Crect fill=\'%2300b1ff\' width=\'100%25\' height=\'50%25\'/%3E%3C/svg%3E\") 2 2 stretch;\n    }\n    \n\n使用PostCSS的插件是不是比我们修改图片要来得简单与方便。\n\n上面演示的是使用`border-image`方式，除此之外还可以使用`background-image`来实现。比如：\n\n    @svg square {\n        @rect {\n            fill: var(--color, black);\n            width: 100%;\n            height: 100%;\n        }\n    }\n    \n    #example {\n        background: white svg(square param(--color #00b1ff));\n    }\n    \n\n编译出来就是：\n\n    #example {\n        background: white url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns=\'http://www.w3.org/2000/svg\'%3E%3Crect fill=\'%2300b1ff\' width=\'100%25\' height=\'100%25\'/%3E%3C/svg%3E\");\n    }\n    \n\n这个方案简单易用，是我所需要的。目前测试下来，基本能达到我所需要的需求。但有一点千万别忘了，记得在中添加：\n\n    \n    \n\n上面阐述的是这个适配方案中所用到的技术点，简单的总结一下：\n\n*   使用`vw`来实现页面的适配，并且通过PostCSS的插件[postcss-px-to-viewport](https://github.com/evrone/postcss-px-to-viewport)把`px`转换成`vw`。这样的好处是，我们在撸码的时候，不需要进行任何的计算，你只需要根据设计图写`px`单位\n*   为了更好的实现长宽比，特别是针对于`img`、`vedio`和`iframe`元素，通过PostCSS插件[postcss-aspect-ratio-mini](https://github.com/yisibl/postcss-aspect-ratio-mini)来实现，在实际使用中，只需要把对应的宽和高写进去即可\n*   为了解决`1px`的问题，使用PostCSS插件[postcss-write-svg](https://github.com/jonathantneal/postcss-write-svg),自动生成`border-image`或者`background-image`的图片\n\n这里使用了多个PostCSS的插件，其实现在有很多优秀的PostCSS插件能帮助我们解决很多问题。哪果你从未接触过有关于PostCSS相关的知识，建议你可以花点时间去学习一下，在W3cplus提供了一些有[关于PostCSS相关的文章](https://www.w3cplus.com/blog/tags/516.html)。如果你想系统的学习PostCSS相关的知识，推荐你购买《[深入PostCSS Web设计](https://www.w3cplus.com/preprocessor/postcss-book.html)》一书：\n\n![](https://www.w3cplus.com/sites/default/files/blogs/2017/1707/postcss.jpg)\n\n降级处理\n----\n\n最开始提到过，到目前为止，T30的机型中还有几款机型是不支持`vw`的适配方案。那么如果业务需要，应该怎么处理呢？有两种方式可以进行降级处理：\n\n*   **CSS Houdini**：通过[CSS Houdini](https://github.com/w3c/css-houdini-drafts/wiki)针对`vw`做处理，调用[CSS Typed OM Level1](https://www.w3.org/TR/css-typed-om-1) 提供的[`CSSUnitValue` API](https://www.w3.org/TR/css-typed-om-1/#numericvalue-serialization)。\n*   **CSS Polyfill**：通过相应的Polyfill做相应的处理，目前针对于`vw`单位的Polyfill主要有：[vminpoly](https://github.com/saabi/vminpoly)、[Viewport Units Buggyfill](https://github.com/rodneyrehm/viewport-units-buggyfill)、[vunits.js](https://gist.github.com/LeaVerou/1347501)和[Modernizr](https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-Browser-Polyfills)。个人推荐采用[Viewport Units Buggyfill](https://github.com/rodneyrehm/viewport-units-buggyfill)\n\nViewport不足之处\n------------\n\n采用`vw`来做适配处理并不是只有好处没有任何缺点。有一些细节之处还是存在一定的缺陷的。比如当容器使用`vw`单位，`margin`采用`px`单位时，很容易造成整体宽度超过`100vw`，从而影响布局效果。对于类似这样的现象，我们可以采用相关的技术进行规避。比如将`margin`换成`padding`，并且配合`box-sizing`。只不过这不是最佳方案，随着将来浏览器或者应用自身的Webview对`calc()`函数的支持之后，碰到`vw`和`px`混合使用的时候，可以结合`calc()`函数一起使用，这样就可以完美的解决。\n\n另外一点，`px`转换成`vw`单位，多少还会存在一定的像素差，毕竟很多时候无法完全整除。\n\n到目前为止，我发现的两个不足之处。或许在后面的使用当中，还会碰到一些其他不为人之的坑。事实也是如此，不管任何方案，踩得坑越多，该方案也越来越强大。希望喜欢这个适配方案的同学和我一起踩坑，让其更为完善。\n\n如何判断自己的应用是否支持\n-------------\n\n虽然该文的示例，进行了多方面的测试。但很多同学还是会担忧自己的APP应用是否支持该方案，而不敢大胆尝试或者使用。其实不必要这么担心，你可以拿自己的设备，或者应用扫描下面的二维码：\n\n![](https://www.w3cplus.com/sites/default/files/blogs/2017/1707/vw-layout-7.png)\n\n当页面跑完测试之后，找到对应的**Values and Units**列表项：\n\n![](https://www.w3cplus.com/sites/default/files/blogs/2017/1707/vw-layout-8.png)\n\n如果`vw`栏是绿色代表你的设备或应用支持该方案；反之则不支持。另外你也可以经常关注[css3test](https://github.com/airen/css3test)相关的更新，后面将会根据相关的规范更新测试代码，让你能快速掌握哪些属性可以大胆使用。\n\n总结\n--\n\nH5页面的适配方案总是令人蛋疼的，事实上页面的布局总是令人蛋疼的。但技术是不断革新的，我们可以随着保持对新技术的关注，尝试这些新特性运用到实际项目中，只有这样，我们解决问题的方案才会越来越完善。\n\n到写这篇文章为止，虽然还有那么一两款机型不支持`vw`，但并不影响我们去使用。只有不断去尝试，才会有进步。在此，希望大家大胆尝试，一起让该方案变得更完美。如果你有更好的建议，或者你踩到任何坑，欢迎在下面的评论中与我分享，或者发邮件给我一起讨论。\n\n[![](https://www.w3cplus.com/sites/default/files/blogs/author/airen.jpg)](https://weibo.com/w3cplus)\n\n### [大漠](https://weibo.com/w3cplus)\n\n常用昵称“大漠”，W3CPlus创始人，目前就职于手淘。对HTML5、CSS3和Sass等前端脚本语言有非常深入的认识和丰富的实践经验，尤其专注对CSS3的研究，是国内最早研究和使用CSS3技术的一批人。CSS3、Sass和Drupal中国布道者。2014年出版《[图解CSS3：核心技术与案例实战](https://www.w3cplus.com/book-comment.html)》。\n\n如需转载，烦请注明出处：[https://www.w3cplus.com/css/vw-for-layout.html](https://www.w3cplus.com/css/vw-for-layout.html)', 0, 1, 0);
INSERT INTO `post` (`id`, `createAt`, `updateAt`, `title`, `description`, `thumb`, `url`, `html`, `markdown`, `views`, `status`, `push`) VALUES
(29, '2018-04-23 11:01:42.301785', '2018-04-23 11:01:42.301785', 'iOS + PWA 已来，你来吗？', '作者|MaximilianoFirtman译者|彭星随着iOS11.3的发布，iOS+PWA的时代终于来了！本文对iOS中PWA的能力进行了分析，并将其与iOS上的NativeApp、Android上的PWA进行了深度对比，是值得收藏的一篇好文。随着iOS11.3的发布，苹果悄悄的支持了PWA理念背后的几种新技术：ServiceWorker,WebAppManifest，那么让我们来看一下它们是如何工作的，它们能做到什么，它们的挑战是什么，以及如果你已经发布过PWA应用，那你还应该知道什么。这是一个在iP', 'https://mmbiz.qpic.cn/mmbiz_png/Te8D0eD8ugxTQZt5SXEqI3lEXaGsicP9DLiaDY6K1wDTSet3ibTTlQAMwrlaOZZqdMj0ZqxVQeBpllicTWd5gLqHhQ/640', 'https://mp.weixin.qq.com/s/BiAYM-Ia5lYf0qv3DHmPjg', '<p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\" data-mpa-powered-by=\"yiban.io\"><span style=\"font-size: 16px;\"></span></p><p><img class=\"\" data-copyright=\"0\" data-ratio=\"0.6714285714285714\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Te8D0eD8ugxTQZt5SXEqI3lEXaGsicP9DLiaDY6K1wDTSet3ibTTlQAMwrlaOZZqdMj0ZqxVQeBpllicTWd5gLqHhQ/640\" data-type=\"png\" data-w=\"1400\" style=\"\"></p><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\"><span style=\"font-size: 16px;\"></span><span style=\"color: rgb(136, 136, 136);font-size: 16px;\">作者 | <span style=\"color: rgb(136, 136, 136);background-color: rgb(255, 255, 255);\">Maximiliano Firtman</span></span></p><p style=\"margin: 15px 0px;text-align: left;letter-spacing: 0px;line-height: 1.75;\" mpa-paragraph-type=\"body\"><span style=\"background-color: rgb(255, 255, 255);color: rgb(136, 136, 136);font-size: 16px;\">译者 | 彭星</span></p><section class=\"mpa-template\" data-mpa-template-id=\"90\" data-mpa-color=\"#ffffff\" data-mpa-category=\"quote\"><section style=\"margin:30px auto;background-color:#f7f7f7;padding:25px 20px;\"><section data-preserve-color=\"t\" style=\"font-size:14px;color:#4f4f4f;\" mpa-is-content=\"t\">随着 iOS 11.3 的发布，iOS + PWA 的时代终于来了！本文对 iOS 中 PWA 的能力进行了分析，并将其与 iOS 上的 Native App、Android 上的 PWA 进行了深度对比，是值得收藏的一篇好文。</section></section></section><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\">随着 iOS 11.3 的发布，苹果悄悄的支持了 PWA 理念背后的几种新技术：Service Worker, Web App Manifest，那么让我们来看一下它们是如何工作的，它们能做到什么，它们的挑战是什么，以及如果你已经发布过 PWA 应用，那你还应该知道什么。</p><p><img class=\"\" data-ratio=\"0.7496050552922591\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Te8D0eD8ugxTQZt5SXEqI3lEXaGsicP9DR9PyRnL9PEmjic1qN3moc2EtBU1vdehTsjYibWVXTsM6EulfeIYXWmfQ/640\" data-type=\"png\" data-w=\"1266\" style=\"\"></p><p style=\"margin: 15px 0px;text-align: center;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\"><span style=\"color: rgb(136, 136, 136);font-size: 14px;\">这是一个在 iPad 上的 PWA，它能全屏，能离线使用，还可以像 App Store 中其他原生应用一样固定在 Dock 中</span></p><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\">如果你看到这篇文章之前还不知道什么是 PWA，我可以告诉你，它没有一个唯一且准确的定义，但我可以告诉你的是，它是一个用 Web 技术创建的 App，不用打包，不用签名，可以离线工作，如果你愿意，还可以添加到桌面上，看起来就和其他应用一样。</p><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\">在大多数平台上，都不要求 PWA 必须从 App Store 中安装，除了 Edge 浏览器和 Windows 10，它们要求 PWA 必须在它们的应用商店中。</p><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\">所以，你猜对了，<strong style=\"margin: 0px;text-align: left;color: rgb(68, 153, 231);letter-spacing: 0px;font-size: 16px;line-height: 1.6;\">你现在可以不用通过 App Store 在 iOS 上安装应用了。</strong>这可能就是为什么苹果没有直接提到这项新能力的原因之一，他们可能不想换休用户，甚至在 Safari 的发布说明中都没有提到这项技术。</p><p><img class=\"\" data-ratio=\"0.3275\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Te8D0eD8ugxTQZt5SXEqI3lEXaGsicP9D1jG1eoGXCB8pJJjctIjn2JVzGxsXaNDHpPZqAtlcg7RtCibd0GTiaxQQ/640\" data-type=\"png\" data-w=\"1600\" style=\"\"></p><p style=\"margin: 15px 0px;text-align: center;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\"><span style=\"font-size: 14px;color: rgb(136, 136, 136);\">你可以看出它们的区别吗？一个是原生 Google 地图，一个是 PWA 版本</span></p><section class=\"mpa-template\" data-mpa-template-id=\"721611\" data-mpa-color=\"#ffffff\" data-mpa-category=\"title\"><section><section class=\"Powered-by-XIUMI V5\" style=\"\" powered-by=\"xiumi.us\"><section class=\"\" style=\"margin: 0.5em 0px;\"><section class=\"\" style=\"border-width: 0px 0px 1px;border-style: solid;border-bottom-color: rgb(95, 156, 239);font-size: 18px;text-align: center;color: rgb(95, 156, 239);\"><p><strong mpa-from-tpl=\"t\" mpa-is-content=\"t\">难道苹果不是 PWA 的创造者吗？</strong></p></section></section></section></section></section><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\">说实话，Google Chrome 团队创造了 PWA 这个属于，但是这个项目最初是在原始 iPhone OS 的 Safari 上提出的，2007 年，史蒂夫乔布斯在 WWDC 上宣布 “one more thing”：如何在 原始 iPhone 上开发应用程序，令人惊讶的是居然是 Web App。App Store 那时候根本不在最初的计划中，并且在 iPhone 发布的第一年，原生 SDK 还不能用。从苹果的角度来看，即使在今天，PWA 也只是 “主屏幕上的 webapp”，图标也被成为 WebClip。</p><section data-mpa-template=\"t\" class=\"mpa-template\" mpa-paragraph-type=\"quote\"><section style=\"border-width:0px;border-style:none;border-color:initial;box-sizing:border-box;\"><section data-preserve-color=\"t\" style=\"font-size:14px;line-height:22.39px;margin-top:10px;margin-bottom:10px;padding:15px 20px 15px 45px;vertical-align:baseline;background-image:url(\"https://mmbiz.qpic.cn/mmbiz/yqVAqoZvDibHXI5ekoKR1icA9n2tIN2MafRz4ZMlbZ9VJIPyHVvA3622V9M4opp0KibWG6F78HdcHOABQbic1krfPw/640\");background-color:rgb(241, 241, 241);background-position:1% 5px;background-repeat:no-repeat;box-sizing:border-box;\"><p style=\"color: #3e3e3e;\" mpa-is-content=\"t\">如果你愿意，可以看一下我去年在 Fluent Conference 上的演讲视频，我在 10 分 50 秒的时候提到了这个事情。视频链接地址：</p><p>https://link.zhihu.com/?target=https%3A//www.youtube.com/watch%3Ftime_continue%3D651%26v%3DEFGltzFSK-c</p></section></section></section><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\"><br></p><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\">11年前，这个想法并没有得到太多的关注，苹果也忘记了更新这个能力，所以有 10+ 年的时间，这个功能一直有缺陷并且不稳定。随后，几年后，其他的平台实现了这个想法，包括诺基亚 N9 上的 MeeGo 浏览器和 Android Chrome。</p><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\">Chrome 帮助改善和实现这些技术来提供一个更好的体验给用户，主要体现在 Service Worker 和 Web App Manifest 规范上。从今天（2018 年 3 月 30 日） iOS 11.3 版本，苹果跟进 Chrome, Firefox, Samsung Internet, UC 浏览器 和 Opera 支持了这两个奇数规范，Mac 版 Safari 也已经支持了 Service Worker，并且 Web App Manifest 的支持今年也在进行中。</p><p><img class=\"\" data-ratio=\"0.5495608531994981\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Te8D0eD8ugxTQZt5SXEqI3lEXaGsicP9Dic7zcuUEVs5Y2sHuWVo5DgBh3uRBkXMkX8O6yGswKtyNoAgLGuY3DSQ/640\" data-type=\"png\" data-w=\"1594\" style=\"\"></p><p style=\"margin: 15px 0px;text-align: center;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\"><span style=\"color: rgb(136, 136, 136);font-size: 14px;\">史蒂夫乔布斯正在 WWDC 2007 年的第一款 iPhone 上演示 PWA（那个时候还不叫 PWA）</span></p><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\"><strong>等等，所以这些应用没有通过 App Store 的质量测试，对吧？</strong><span style=\"background-color: rgb(255, 255, 255);color: rgba(0, 0, 0, 0.84);\"> </span></p><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\">是的，你又猜对了。但是 PWA 目前只能在浏览器或其他 Web 平台安全策略下运行，这意味着你可以“发布”未在 App Store 中获得批准的应用，例如贵公司员工的内部应用（也包括承认内容），但无法使用一些 Native 的 API，如 iPhone X 上的 Face ID，或者 ARKit 增强现实，或者至少，你需要等待 Web 平台支持这些新的 API。</p><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\">PWA 可以在作为一个普通网站，或者 standalone 模式（没有地址栏和 Safari 的其他功能）在Safari 中运行，就像系统中的其他应用程序一样。</p><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\"><strong style=\"margin: 0px;text-align: left;color: rgb(68, 153, 231);letter-spacing: 0px;font-size: 16px;line-height: 1.6;\"></strong></p><section class=\"mpa-template\" data-mpa-template-id=\"721611\" data-mpa-color=\"#ffffff\" data-mpa-category=\"title\"><section><section class=\"Powered-by-XIUMI V5\" style=\"\" powered-by=\"xiumi.us\"><section class=\"\" style=\"margin: 0.5em 0px;\"><section class=\"\" style=\"border-width: 0px 0px 1px;border-style: solid;border-bottom-color: rgb(95, 156, 239);font-size: 18px;text-align: center;color: rgb(95, 156, 239);\"><p><strong mpa-from-tpl=\"t\" mpa-is-content=\"t\">iOS 中 PWA 的能力</strong></p></section></section></section></section></section><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\"><span style=\"letter-spacing: 0px;\">在 iOS 的 Web 平台上您可以调用以下 API：</span><strong style=\"margin: 0px;text-align: left;color: rgb(68, 153, 231);letter-spacing: 0px;font-size: 16px;line-height: 1.6;\"></strong></p><ul class=\" list-paddingleft-2\" style=\"list-style-type: disc;\"><li><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\">地理信息定位</p></li><li><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\">传感器（陀螺仪，加速度计，磁力仪）</p></li><li><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\">相机</p></li><li><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\">音频输出</p></li><li><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\">语音合成（仅连接耳机）</p></li><li><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\">Apple Pay</p></li><li><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\">WebAssembly, WebRTC, Web GL 以及许多实验性的特性</p></li></ul><p style=\"margin: 15px 0px;text-align: center;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\"><span style=\"font-size: 14px;color: rgb(136, 136, 136);\"></span></p><p><img class=\"\" data-ratio=\"0.5066666666666667\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Te8D0eD8ugxTQZt5SXEqI3lEXaGsicP9DcktaqE9moj4gOoWBBKsAJCOmoepxeZfcwrgvcvsCSHAMgHX1VQeBKg/640\" data-type=\"png\" data-w=\"1125\" style=\"\"></p><p style=\"margin: 15px 0px;text-align: center;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\"><span style=\"font-size: 14px;color: rgb(136, 136, 136);\">你能区分哪些是 PWA，哪些是原生应用吗？</span></p><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\"><strong style=\"margin: 0px;text-align: left;color: rgb(68, 153, 231);letter-spacing: 0px;font-size: 16px;line-height: 1.6;\"></strong></p><section class=\"mpa-template\" data-mpa-template-id=\"721611\" data-mpa-color=\"#ffffff\" data-mpa-category=\"title\"><section><section class=\"Powered-by-XIUMI V5\" style=\"\" powered-by=\"xiumi.us\"><section class=\"\" style=\"margin: 0.5em 0px;\"><section class=\"\" style=\"border-width: 0px 0px 1px;border-style: solid;border-bottom-color: rgb(95, 156, 239);font-size: 18px;text-align: center;color: rgb(95, 156, 239);\"><p><strong mpa-from-tpl=\"t\" mpa-is-content=\"t\">和 iOS 原生应用相比有哪些限制</strong></p></section></section></section></section></section><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\"><strong style=\"margin: 0px;text-align: left;color: rgb(68, 153, 231);letter-spacing: 0px;font-size: 16px;line-height: 1.6;\"></strong><br></p><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\">PWA 只能存储最多 50Mb 的离线数据和文件</p><ul class=\" list-paddingleft-2\" style=\"list-style-type: disc;\"><li><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\">如果用户几周不使用 PWA，iOS 将释放这些 PWA 缓存的文件，桌面图标当然还在，用户下次访问的时候，会重新缓存文件</p></li><li><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\">无法应用一些 Native API，如：蓝牙、Touch ID、Face ID、ARKit、电池信息等</p></li><li><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\">无法在后台执行代码</p></li><li><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\">无法访问一些私密数据，如：联系人等，也无法访问本地社交应用</p></li><li><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\">无法访问 In App Payments 和其他许多基于 Apple 的服务</p></li><li><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\">在 iPad 上，无法使用分屏和其他应用程序共享屏幕，PWA 始终占满整个屏幕</p></li><li><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\">没有消息推送，没有 Siri 集成</p></li></ul><p style=\"margin: 15px 0px;text-align: center;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\"><span style=\"color: rgb(136, 136, 136);\"></span></p><p><img class=\"\" data-ratio=\"0.378125\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Te8D0eD8ugxTQZt5SXEqI3lEXaGsicP9D2qiamaiarobCicpvNzTib2IRNw9QvYhJ7ZaY1HB4nwXEcVbnFxsLF86icqw/640\" data-type=\"png\" data-w=\"1600\" style=\"\"></p><p style=\"margin: 15px 0px;text-align: center;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\"><span style=\"color: rgb(136, 136, 136);\">如果你安装了一个叫 Tinder 的 PWA，Siri 并不能找到它</span><br></p><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\"><strong style=\"margin: 0px;text-align: left;color: rgb(68, 153, 231);letter-spacing: 0px;font-size: 16px;line-height: 1.6;\"></strong></p><section class=\"mpa-template\" data-mpa-template-id=\"721611\" data-mpa-color=\"#ffffff\" data-mpa-category=\"title\"><section><section class=\"Powered-by-XIUMI V5\" style=\"\" powered-by=\"xiumi.us\"><section class=\"\" style=\"margin: 0.5em 0px;\"><section class=\"\" style=\"border-width: 0px 0px 1px;border-style: solid;border-bottom-color: rgb(95, 156, 239);font-size: 18px;text-align: center;color: rgb(95, 156, 239);\"><p><strong mpa-from-tpl=\"t\" mpa-is-content=\"t\">哪些 在 Android 上可以，iOS 上不行的呢？</strong></p></section></section></section></section></section><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\"><span style=\"letter-spacing: 0px;\">在 Android 上可以存储找过 50Mb 的数据和文件</span><strong style=\"margin: 0px;text-align: left;color: rgb(68, 153, 231);letter-spacing: 0px;font-size: 16px;line-height: 1.6;\"></strong></p><ul class=\" list-paddingleft-2\" style=\"list-style-type: disc;\"><li><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\">Android 不会在你很久不用这个 PWA 的时候就把它的文件删掉，但是它会在存储空间不足的时删除文件。如果用户安装并且使用很多的时候，PWA 可以使用永久存储</p></li><li><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\">BLE 设备的蓝牙访问</p></li><li><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\">Android上可以在 Web 中使用 Native 分享对话框，通过 Web Share API</p></li><li><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\">语音识别</p></li><li><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\">后台同步和离线消息推送</p></li><li><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\">弹出安装对话框提示和邀请用户安装 PWA</p></li><li><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\">你可以自定义（有限）PWA 启动画面和决定 PWA 是竖屏还是横屏</p></li><li><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\">在 WebAPK 和 Chrome 中，一个 PWA 只能安装一次</p></li><li><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\">在 WebAPK 和 Chrome 中，PWA 会出现在“设置“中，并且您可以看到数据使用量，在 iOS 中，所有内容都包含在 Safari 中</p></li><li><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\">在 WebAPK 和 Chrome中，PWA 会捕获你的 URL，如果是一个 PWA 的链接，它将用独立模式打开 PWA，而不会打开浏览器</p></li></ul><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\"><strong style=\"margin: 0px;text-align: left;color: rgb(68, 153, 231);letter-spacing: 0px;font-size: 16px;line-height: 1.6;\"></strong></p><section class=\"mpa-template\" data-mpa-template-id=\"721611\" data-mpa-color=\"#ffffff\" data-mpa-category=\"title\"><section><section class=\"Powered-by-XIUMI V5\" style=\"\" powered-by=\"xiumi.us\"><section class=\"\" style=\"margin: 0.5em 0px;\"><section class=\"\" style=\"border-width: 0px 0px 1px;border-style: solid;border-bottom-color: rgb(95, 156, 239);font-size: 18px;text-align: center;color: rgb(95, 156, 239);\"><p><strong mpa-from-tpl=\"t\" mpa-is-content=\"t\">哪些在 iOS 上可以，Android 下不行的呢？</strong></p></section></section></section></section></section><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\"><strong style=\"margin: 0px;text-align: left;color: rgb(68, 153, 231);letter-spacing: 0px;font-size: 16px;line-height: 1.6;\"></strong><br></p><ul class=\" list-paddingleft-2\" style=\"list-style-type: disc;\"><li><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\">用户可以在安装前修改 PWA 的名字</p></li><li><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\">可以在配置文件中进行修改，因此企业用户可以从公司安装 PWA（这是一个很好的点），Safari 管这个叫 WebClip（估计是没有好好阅读 Web App Manifest 的标准）</p></li></ul><p style=\"margin: 15px 0px;text-align: center;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\"><span style=\"color: rgb(136, 136, 136);\"></span></p><p><img class=\"\" data-ratio=\"0.09625\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Te8D0eD8ugxTQZt5SXEqI3lEXaGsicP9DwicTFbrbdIxXFL8RqhrOmEXaS84S7pk6UPJ6xyCTAlsBpvo7Yiac4ZYQ/640\" data-type=\"png\" data-w=\"1600\" style=\"\"></p><p style=\"margin: 15px 0px;text-align: center;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\"><span style=\"color: rgb(136, 136, 136);\">配置文件包含 WebClips 和 PWA 图标</span><br></p><p style=\"margin: 15px 0px;text-align: center;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\"><strong style=\"margin: 0px;text-align: left;color: rgb(68, 153, 231);letter-spacing: 0px;font-size: 16px;line-height: 1.6;\"></strong></p><section class=\"mpa-template\" data-mpa-template-id=\"721611\" data-mpa-color=\"#ffffff\" data-mpa-category=\"title\"><section><section class=\"Powered-by-XIUMI V5\" style=\"\" powered-by=\"xiumi.us\"><section class=\"\" style=\"margin: 0.5em 0px;\"><section class=\"\" style=\"border-width: 0px 0px 1px;border-style: solid;border-bottom-color: rgb(95, 156, 239);font-size: 18px;text-align: center;color: rgb(95, 156, 239);\"><p><strong mpa-from-tpl=\"t\" mpa-is-content=\"t\">在 iOS 上怎么安装 PWA 呢？</strong></p></section></section></section></section></section><p style=\"margin: 15px 0px;text-align: center;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\"><strong style=\"margin: 0px;text-align: left;color: rgb(68, 153, 231);letter-spacing: 0px;font-size: 16px;line-height: 1.6;\"></strong><br></p><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\">这是在 iOS 上重要的挑战之一，因为 iOS Safari 没有任何提示或者引导让用户添加 PWA，Android 下有一个叫 Web App Install Banners 的引导用户，所以，用户需要在 Safari 中先访问你的站点，然后手动点击分享（Share）图标，然后点击“添加到主屏幕”。整个过程中，没有任何一点表现出来这是一个 PWA。</p><p style=\"margin: 15px 0px;text-align: center;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\"><span style=\"color: rgb(136, 136, 136);\"></span></p><p><img class=\"\" data-ratio=\"0.68\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Te8D0eD8ugxTQZt5SXEqI3lEXaGsicP9DERT1Eg0UGqJvhIjNUE5ibAq8jfT0RerobtDO523JXRFchA7oNdvTDjQ/640\" data-type=\"png\" data-w=\"1600\" style=\"\"></p><p style=\"margin: 15px 0px;text-align: center;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\"><span style=\"color: rgb(136, 136, 136);font-size: 14px;\">点击分享之后，点击添加到桌面按钮，需要 Web App 本身对用户进行引导，引导时请不要忘记当前系统语言</span><br></p><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\">从 App Store 安装的其他浏览器，如 Chrome，Firefox，Brave 或者 Edge 都不能安装 PWA，也不能使用 Service Worker。</p><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\">完成安装后，它看起来就像主屏幕上的其他图标，虽然它不会有 3D Touch 菜单，如果您再次安装相同的 PWA，择会有另外一个同样的图标，指向相同的 PWA（比较幸运的是，安装的文件将被共享）。</p><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\">此外，很多 Web App 都有一个比较显眼的位置引导用户从 App Store 下载安装原生应用，在 PWA 中也这样显示了，这其实对用户体验是一个伤害，比如 Tinder：</p><p style=\"margin: 15px 0px;text-align: center;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\"><span style=\"color: rgb(136, 136, 136);\"></span></p><p><img class=\"\" data-ratio=\"0.68\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Te8D0eD8ugxTQZt5SXEqI3lEXaGsicP9DrVTLDibhct7ib464ty3tKNkIB2LxHYHSnVgvicQ8uYbTOVFDRWIxATYicw/640\" data-type=\"png\" data-w=\"1600\" style=\"\"></p><p style=\"margin: 15px 0px;text-align: center;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\"><span style=\"color: rgb(136, 136, 136);\">我已经安装了 PWA 了，不要试图引导我下载 Native App</span><br></p><section class=\"mpa-template\" data-mpa-template-id=\"721611\" data-mpa-color=\"#ffffff\" data-mpa-category=\"title\"><section><section class=\"Powered-by-XIUMI V5\" style=\"\" powered-by=\"xiumi.us\"><section class=\"\" style=\"margin: 0.5em 0px;\"><section class=\"\" style=\"border-width: 0px 0px 1px;border-style: solid;border-bottom-color: rgb(95, 156, 239);font-size: 18px;text-align: center;color: rgb(95, 156, 239);\"><p><strong mpa-from-tpl=\"t\" mpa-is-content=\"t\">我已经有 PWA 站点 了，iOS 用户能马上使用吗？</strong></p></section></section></section></section></section><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\">在用户升级到 iOS 11.3 之后，用户就可以安装您的 PWA 了，不需要给 iOS 额外的配置，每个 PWA 都能安装，但是这并不意味着一切都能和你想的一样。</p><p style=\"margin: 15px 0px;text-align: center;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\"><span style=\"color: rgb(136, 136, 136);\"></span></p><p><img class=\"\" data-ratio=\"0.811875\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Te8D0eD8ugxTQZt5SXEqI3lEXaGsicP9DJ9n6non559Cboewx2L4gibw1lPJp2Sy6eLa7hrDfjuC1OA73UVxVLLg/640\" data-type=\"png\" data-w=\"1600\" style=\"\"></p><p style=\"margin: 15px 0px;text-align: center;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\"><span style=\"color: rgb(136, 136, 136);\">Uber PWA 看起来真的很不错，但是当你点击登录或者继续按钮时候，授权页面会打开 Safari，从而跳出了独立运行的 PWA</span><br></p><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\">如果你正在阅读这篇文章，你可能已经在 iOS PWA 还在 beta 版的时候我发布的一篇文章《Cupertino，我们遇到麻烦了》，不好的消息是，在 beta 版期间遇到的大多数问题在 iOS 11.3 发布之后依然存在。</p><p style=\"margin: 15px 0px;text-align: center;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\"><span style=\"color: rgb(136, 136, 136);\"></span></p><p><img class=\"\" data-ratio=\"0.6125\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Te8D0eD8ugxTQZt5SXEqI3lEXaGsicP9DBSTLkRMibaPuauV0RFYVnE691cG2ea94p37l8cm83A6QhAjvTKS3eBQ/640\" data-type=\"png\" data-w=\"1600\" style=\"\"></p><p style=\"margin: 15px 0px;text-align: center;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\"><span style=\"color: rgb(136, 136, 136);\">如果你什么都不做，你的 PWA 顶部将会有来能重叠的黑色 bar，看不见时间，电池，其他信，状态栏</span><br></p><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\"><strong style=\"margin: 0px;text-align: left;color: rgb(68, 153, 231);letter-spacing: 0px;font-size: 16px;line-height: 1.6;\"></strong></p><section class=\"mpa-template\" data-mpa-template-id=\"721606\" data-mpa-color=\"#ffffff\" data-mpa-category=\"title\"><section><section class=\"Powered-by-XIUMI V5\" style=\"\" powered-by=\"xiumi.us\"><section class=\"\" style=\"margin: 0.5em 0px;\"><section class=\"\" style=\"border-width: 0px 0px 1px;border-style: solid;border-bottom-color: rgb(95, 156, 239);font-size: 18px;text-align: center;color: rgb(95, 156, 239);\"><p><strong mpa-from-tpl=\"t\" mpa-is-content=\"t\">什么不能正常工作呢？</strong></p></section></section></section></section></section><ul class=\" list-paddingleft-2\" style=\"list-style-type: disc;\"><li><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\"><span style=\"letter-spacing: 0px;\">显示问题：fullscreen 和 minimal-ui  两种模式在 iOS 上不支持，fullscreen 和 standalone 模式一样，而 minimal-ui 模式只是一个 Safari 的快捷方式。但是你可以通过使用 cover-fit 或者已经弃用的私有 meta 标签来达到类似的 fullscreen 效果（状态栏会处在，但是会覆盖在你的 app 上）</span><strong style=\"margin: 0px;text-align: left;color: rgb(68, 153, 231);letter-spacing: 0px;font-size: 16px;line-height: 1.6;\"></strong></p></li><li><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\">后台同步（background sync）还不支持</p></li><li><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\">无法锁定 PWA 的方向，横屏还是竖屏</p></li><li><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\">theme-color 属性不起作用，无法修改状态栏的颜色，你可以通过使用已经弃用的私有 meta 标签来设置黑色或者白色的状态栏，也可以使用 CSS/HTML 来模拟 theme-color</p></li></ul><p style=\"margin: 15px 0px;text-align: center;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\"><span style=\"color: rgb(136, 136, 136);\"></span></p><p><img class=\"\" data-ratio=\"0.49625\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Te8D0eD8ugxTQZt5SXEqI3lEXaGsicP9DkfKWvwcNf7uck3w7H3WuOYKqsKEeibzReLEtQBwpSEp5TwOeJxDMtIg/640\" data-type=\"png\" data-w=\"1600\" style=\"\"></p><p style=\"margin: 15px 0px;text-align: center;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\"><span style=\"color: rgb(136, 136, 136);\">星巴克 PWA 在注册页面没有返回按钮，没办法取消当前注册流程，你需要重启 PWA</span><br></p><ul class=\" list-paddingleft-2\" style=\"list-style-type: disc;\"><li><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\">如果你的 PWA 没有后退手势或者返回按钮，用户将无法在页面间切换</p></li><li><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\">iOS 不支持透明图标，所以一定要注意</p></li></ul><p><img class=\"\" data-ratio=\"0.211875\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Te8D0eD8ugxTQZt5SXEqI3lEXaGsicP9DgpnbSkToJj1y3ianCaOZ3v7eX5Sy0qibwUjqpxfGb8C4x6iaGBerl3hyg/640\" data-type=\"png\" data-w=\"1600\" style=\"\"></p><p style=\"margin: 15px 0px;text-align: center;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\"><span style=\"font-size: 14px;color: rgb(136, 136, 136);\">Google Keep PWA 只在 Web App Manifest 设置了图标，所以添加到桌面上的图标是当前的截屏，你需要设置 Safari 的私有属性来定制图标</span></p><ul class=\" list-paddingleft-2\" style=\"list-style-type: disc;\"><li><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\">在 iOS 中，无法使用 manifest.json 文件中的图标，但是可以使用 app-touch-icon link 标签设置的图标，如果你没有提供这个 link 标签，Safari 将会使用屏幕截图作为 icon，可以看上面的 Google Keep PWA 的例子</p></li><li><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\">没有启动画面，所以 Web App Manifest 中的大多数颜色属性都会被忽略</p></li><li><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\">不会有任何和 manifest  相关的事件被触发，因此你无法通过事件来判断用户是否安装，但可以通过 navigator.standalone 来判断是否是在 standalone 模式下运行</p></li></ul><p style=\"margin: 15px 0px;text-align: center;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\"><strong style=\"margin: 0px;text-align: left;color: rgb(68, 153, 231);letter-spacing: 0px;font-size: 16px;line-height: 1.6;\">要记住什么？</strong></p><ul class=\" list-paddingleft-2\" style=\"list-style-type: disc;\"><li><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\">PWA 无法在会话之间保持状态，如果用户切出 PWA 到另外一个应用，它将在切回来的时候重新启动，因此如果你需要用户验证邮箱，短信或者需要调到另外一个 App 来验证的需求，请重新考虑另一种实现方式</p></li></ul><p><img class=\"\" data-ratio=\"0.68\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Te8D0eD8ugxTQZt5SXEqI3lEXaGsicP9DdicH02nIWOX4aUzticlAVQVVHS5IGat7PLpqBPrWS4yLIbJeWgg6V9Ww/640\" data-type=\"png\" data-w=\"1600\" style=\"\"></p><p style=\"margin: 15px 0px;text-align: center;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\"><span style=\"font-size: 14px;\"><img class=\"\" data-ratio=\"0.7496050552922591\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Te8D0eD8ugxTQZt5SXEqI3lEXaGsicP9D2gTkVOZpCribqsqFmHd4ZRdytbY4LNMxPlK2fVvnN41flBdoq5QDmtw/640\" data-type=\"png\" data-w=\"1266\" style=\"white-space: normal;\"></span></p><p style=\"text-align: center;\"><span style=\"color: rgb(136, 136, 136);font-size: 14px;text-align: center;\">所有没激活的 PWA 都是白屏，无论它们之前是不是，记住，它们没在运行，并且如果你切回 PWA，它将重新启动在 iPad 上有同样的白屏问题</span></p><ul class=\" list-paddingleft-2\" style=\"list-style-type: disc;\"><li><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\">在背后的 PWA 没有截屏缩略信息，它们看起来都白的，这点很遗憾<br></p></li><li><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\">当你的 app 在 standalone 模式下运行的时候，可能会有 bug，不要用只 Safari 来测试你的 PWA</p><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\"><br></p></li></ul><p><img class=\"\" data-ratio=\"0.6125\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Te8D0eD8ugxTQZt5SXEqI3lEXaGsicP9DsnnOcOEas0tY9mjFuLAabtQEWTjmS1b8lTrLUdozKVQFtmGpibFiaicRA/640\" data-type=\"png\" data-w=\"1600\" style=\"\"></p><p style=\"margin: 15px 0px;text-align: center;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\"><span style=\"font-size: 14px;color: rgb(136, 136, 136);\">NASA 的 PWA 有一些体验上的问题</span></p><ul class=\" list-paddingleft-2\" style=\"list-style-type: disc;\"><li><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\">如果你想让你的 PWA 利用 iPhone X 的缺口区域，需要用 HTML/CSS 进行特殊处理，如果做的不好，就会看起来很奇怪</p></li><li><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\">有时候，你添加到主屏的时候没有 manifest 文件，添加的就只是一个快捷方式<span style=\"color: rgba(0, 0, 0, 0.84);\">☹️</span></p></li></ul><p><img class=\"\" data-ratio=\"0.49625\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Te8D0eD8ugxTQZt5SXEqI3lEXaGsicP9DduvsktLjx9yrOh3ChSHnAWf2oqYjokTovicOy8YdcW1qxzIAL6HPR0g/640\" data-type=\"png\" data-w=\"1600\" style=\"\"></p><p style=\"margin: 15px 0px;text-align: center;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\"><span style=\"color: rgb(136, 136, 136);font-size: 14px;\">星巴克的商标在 Google 地图中？其实不是，只是连续使用多个 PWA 时，iOS 会有一些奇怪的 bug，PWA 加载了错误的 URL</span><br></p><ul class=\" list-paddingleft-2\" style=\"list-style-type: disc;\"><li><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\">Safari 和添加到主屏的 PWA 共享相同的 Service Worker Registration（不是 Service Worker 实例） 和缓存的文件，Safari View Controller（比如 Twitter 的应用内置浏览器）也支持 Service Worker 和 Cache API，但是似乎在会话关闭后会删除所有数据</p></li><li><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\">所有第三方浏览器（Chrome、Firefox 等）和所有使用 WebView 的应用（Facebook 的应用程序内浏览器等）都不支持 Service Worker，我的猜测是，WKWebView 可能u需要一个 API 来让应用程序开发人员来决定如何使用 Service Worker，但是…谁知道呢</p></li></ul><p><img class=\"\" data-ratio=\"0.5601092896174863\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Te8D0eD8ugxTQZt5SXEqI3lEXaGsicP9DhLQTFzX2PQyiayMwM7uEym4qHlnTV36Iy90dzDvePf89HFHialwiapWnQ/640\" data-type=\"png\" data-w=\"732\" style=\"\"></p><p style=\"margin: 15px 0px;text-align: center;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\"><span style=\"color: rgb(136, 136, 136);font-size: 14px;\">使用 Safari TP，你可以调试 Safari 和主屏上的 PWA，可以调试 Service Worker，也能捕获网络请求</span><br></p><ul class=\" list-paddingleft-2\" style=\"list-style-type: disc;\"><li><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\">要在 iOS 上调试 Service Worker，你需要安装 Safari 技术预览版或者 Safari 11.1</p></li></ul><p><img class=\"\" data-ratio=\"0.6986062717770035\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Te8D0eD8ugxTQZt5SXEqI3lEXaGsicP9DVddiaj0yJMiccWaaPGWeaUYiaEicuribs2MpqpRuc4E07oxr06hUoao4PAg/640\" data-type=\"png\" data-w=\"1148\" style=\"\"></p><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\"><span style=\"color: rgb(136, 136, 136);font-size: 14px;\">Service Worker 的调试工具还在实验阶段，例如，暂时还看不到 CacheStorage 中的内容</span></p><p><img class=\"\" data-ratio=\"0.578125\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Te8D0eD8ugxTQZt5SXEqI3lEXaGsicP9DJoH9iatuiaUNYsVyC2RZIwUIiajJ72oPpva1sQic5up6uaOUDI4gRcoUUw/640\" data-type=\"png\" data-w=\"1600\" style=\"\"></p><ul class=\" list-paddingleft-2\" style=\"list-style-type: disc;\"><li><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\">Service Worker 可以被禁用，可以通过 设置->实验特性（默认情况下是开启的）<br></p></li></ul><p><img class=\"\" data-ratio=\"0.68\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Te8D0eD8ugxTQZt5SXEqI3lEXaGsicP9DE9YPV5oarDticZ251v1nb9TyV6HkxlX8MFptyEMQQDibmO1SXxuAd1MQ/640\" data-type=\"png\" data-w=\"1600\" style=\"\"></p><p style=\"text-align: center;\"><span style=\"color: rgb(136, 136, 136);font-size: 14px;\">这个空白的应用是什么？</span></p><ul class=\" list-paddingleft-2\" style=\"list-style-type: disc;\"><li><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\">有的时候，你同时打开了很多的 PWA，iOS 任务栏就会很奇怪，显示了一个没有图标和标题的幽灵应用</p></li></ul><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\">如果你发现了任何 iOS 上 PWA 的其他 bug，请在下方评论，我会整理一份错误报告交给 WebKit 团度，如果你想获得关于这篇文章的最新消息，也请在 Twitter 关注我 @firt，如果您 6 月份在湾区，请看我将教授的手把手学会 PWA 培训，我们将创建一个 PWA，涵盖大多数人在其他平台上都缺少的内容，也包活如何在 iOS 平台上生存下来<span style=\"color: rgba(0, 0, 0, 0.84);\">😀</span>。</p><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\"><span style=\"color: rgb(26, 26, 26);\">如果你发现了任何 iOS 上 PWA 的其他 bug，请在下方评论，我会整理一份错误报告交给 WebKit 团队，如果你想获得关于这篇文章的最新消息，也请在 Twitter 关注我 </span>@firt<span style=\"color: rgb(26, 26, 26);\">，如果您 6 月份在湾区，请看我将教授的</span>手把手学会 PWA 培训<span style=\"color: rgb(26, 26, 26);\">，我们将创建一个 PWA，涵盖大多数人在其他平台上都缺少的内容，也包活如何在 iOS 平台上生存下来。</span></p><p style=\"margin: 15px 0px;text-align: left;color: rgb(0, 0, 0);letter-spacing: 0px;font-size: 16px;line-height: 1.75;\" mpa-paragraph-type=\"body\"><strong><span style=\"color: rgb(79, 79, 79);font-size: 14px;background-color: rgb(247, 247, 247);\">原文地址（Medium，你懂得）</span></strong><span style=\"color: rgb(79, 79, 79);font-size: 14px;background-color: rgb(247, 247, 247);\">：https://medium.com/@firt/progressive-web-apps-on-ios-are-here-d00430dee3a7</span></p><section class=\"mpa-template\" data-mpa-template-id=\"844330\" data-mpa-color=\"#ffffff\" data-mpa-category=\"bottom_guide\"><section class=\"mpa-template\" data-mpa-template-id=\"721609\" data-mpa-color=\"#ffffff\" data-mpa-category=\"second_title\" style=\"margin: 0px;padding: 0px;color: rgb(0, 0, 0);font-size: medium;\"><section style=\"margin: 0px;padding: 0px;\"><section class=\"Powered-by-XIUMI V5\" powered-by=\"xiumi.us\" style=\"margin: 0px;padding: 0px;\"><section class=\"\" style=\"margin: 0.5em 0px;padding: 0px;\"><section class=\"\" style=\"margin: 0px;padding: 0px;border-width: 0px 0px 1px;border-style: solid;border-bottom-color: rgb(95, 156, 239);font-size: 18px;text-align: center;color: rgb(95, 156, 239);\"><p style=\"clear: both;min-height: 1em;\"><strong mpa-from-tpl=\"t\" style=\"margin: 0px;padding: 0px;\">推荐阅读</strong></p></section></section></section></section></section><p style=\"clear: both;min-height: 1em;color: rgb(0, 0, 0);font-size: medium;text-align: center;\"><span style=\"margin: 0px;padding: 0px;color: rgb(136, 136, 136);font-size: 12px;\">（点击图片即可跳转）</span></p><p style=\"clear: both;min-height: 1em;color: rgb(0, 0, 0);font-size: medium;text-align: center;\"><a href=\"http://mp.weixin.qq.com/s?__biz=MzUyODMzMjY3OQ==&mid=2247483788&idx=1&sn=b96c346b7aa710910dd1fe3b68967fd0&chksm=fa70a364cd072a724ada68df64bcda3071c6361a85757dd14d03a867108010d38e76c6826526&scene=21#wechat_redirect\" target=\"_blank\" style=\"margin: 0px;padding: 0px;color: rgb(96, 127, 166);\"><img class=\"\" data-copyright=\"0\" data-ratio=\"0.654424040066778\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Te8D0eD8ugyUb2OYxDJsZB9boQzVwc9kRsJbPIDYWNhKjdCLXGa31PZZl14gic7ROUicArb0XckAgBNnPk740wXA/640?\" data-type=\"png\" data-w=\"2396\" style=\"margin: 0px;padding: 0px;width: 378.078px;border-radius: 6px;height: auto !important;\"></a></p><section class=\"mpa-template\" data-mpa-template-id=\"116\" data-mpa-color=\"#ffffff\" data-mpa-category=\"quote\" style=\"margin: 0px;padding: 0px;color: rgb(0, 0, 0);font-size: medium;\"><section style=\"margin: 0px;padding: 0px;border-width: 0px;border-style: none;border-color: initial;\"><section data-preserve-color=\"t\" style=\"margin: 10px 0px;padding: 15px 20px 15px 45px;font-size: 14px;line-height: 22.39px;vertical-align: baseline;background-image: url(\"https://mmbiz.qpic.cn/mmbiz/yqVAqoZvDibHXI5ekoKR1icA9n2tIN2MafRz4ZMlbZ9VJIPyHVvA3622V9M4opp0KibWG6F78HdcHOABQbic1krfPw/640\");background-color: rgb(241, 241, 241);background-position: 1% 5px;background-repeat: no-repeat;\"><p mpa-is-content=\"t\" style=\"clear: both;min-height: 1em;color: rgb(62, 62, 62);\"><a href=\"http://mp.weixin.qq.com/s?__biz=MzUyODMzMjY3OQ==&mid=2247483788&idx=1&sn=b96c346b7aa710910dd1fe3b68967fd0&chksm=fa70a364cd072a724ada68df64bcda3071c6361a85757dd14d03a867108010d38e76c6826526&scene=21#wechat_redirect\" target=\"_blank\" style=\"margin: 0px;padding: 0px;color: rgb(96, 127, 166);\">按照当前的发展趋势，PWA 将会带来 Web App 的大量需求，新一轮大前端技术洗牌很可能近在眼前了。</a></p><p mpa-is-content=\"t\" style=\"clear: both;min-height: 1em;color: rgb(62, 62, 62);text-align: right;\"><a href=\"http://mp.weixin.qq.com/s?__biz=MzUyODMzMjY3OQ==&mid=2247483788&idx=1&sn=b96c346b7aa710910dd1fe3b68967fd0&chksm=fa70a364cd072a724ada68df64bcda3071c6361a85757dd14d03a867108010d38e76c6826526&scene=21#wechat_redirect\" target=\"_blank\" style=\"margin: 0px;padding: 0px;color: rgb(96, 127, 166);\">——《PWA将带来新一轮大前端技术洗牌？》</a></p></section></section></section></section><section class=\"mpa-template\" data-mpa-template-id=\"745925\" data-mpa-color=\"#ffffff\" data-mpa-category=\"bottom_guide\"><section><section class=\"Powered-by-XIUMI V5\" style=\"\" powered-by=\"xiumi.us\"><section class=\"\" style=\"\"><section class=\"\"><section data-mpa-template=\"t\" class=\"\" mpa-paragraph-type=\"secondTitle\" style=\"margin: 0px;padding: 0px;color: rgb(62, 62, 62);font-size: 16px;\"><section style=\"margin: 0px;padding: 0px;\"><section class=\"\" powered-by=\"xiumi.us\" style=\"margin: 0px;padding: 0px;\"><section class=\"\" style=\"margin: 0.5em 0px;padding: 0px;\"><section class=\"\" style=\"margin: 0px;padding: 0px;border-width: 0px 0px 1px;border-style: solid;border-bottom-color: rgb(95, 156, 239);font-size: 18px;text-align: center;color: rgb(95, 156, 239);\"><p style=\"clear: both;min-height: 1em;\"><strong mpa-from-tpl=\"t\" mpa-is-content=\"t\" style=\"margin: 0px;padding: 0px;\">Brilliant Open Web </strong></p></section></section></section></section></section><p mpa-paragraph-type=\"body\" style=\"margin-top: 10px;margin-bottom: 10px;clear: both;min-height: 1em;color: rgb(62, 62, 62);font-size: 16px;letter-spacing: 0px;line-height: 1.75;\"><span style=\"margin: 0px;padding: 0px;letter-spacing: 0px;\">BOW（Brilliant Open Web）团队，是一个专门的Web技术建设小组，致力于推动 Open Web 技术的发展，让Web重新成为开发者的首选。</span></p><p mpa-paragraph-type=\"body\" style=\"margin-top: 10px;margin-bottom: 10px;clear: both;min-height: 1em;color: rgb(62, 62, 62);font-size: 16px;letter-spacing: 0px;line-height: 1.75;\"><span style=\"margin: 0px;padding: 0px;letter-spacing: 0px;\">BOW 关注前端，关注Web；剖析技术、分享实践；谈谈学习，也聊聊管理。</span></p><p>关注 OpenWeb开发者，回复“<span style=\"color: rgb(95, 156, 239);\">加群</span>”，让我们一起推动 OpenWeb技术的发展！</p></section></section></section><section class=\"Powered-by-XIUMI V5\" style=\"\" powered-by=\"xiumi.us\"><section class=\"\" style=\"margin: 0.5em 0px;overflow: hidden;\"><section class=\"\" style=\"display: inline-block;vertical-align: middle;width: 6px;height: 6px;\"><section style=\"transform: rotate(0.1deg);\"><section style=\"width: 6px;height: 6px;border-radius: 100%;background-color: rgb(160, 160, 160);\"></section></section></section><section class=\"\" style=\"display: inline-block;vertical-align: middle;width: 100%;margin: 0px -6px 0px -7px;border-bottom: 2px dotted rgb(160, 160, 160);\"></section><section class=\"\" style=\"display: inline-block;vertical-align: middle;width: 6px;height: 6px;border-radius: 100%;background-color: rgb(160, 160, 160);\"></section></section></section><section class=\"Powered-by-XIUMI V5\" style=\"\" powered-by=\"xiumi.us\"><section class=\"\" style=\"\"><section class=\"\" style=\"display: inline-block;vertical-align: middle;width: 30%;border-radius: 0px;\"><section class=\"Powered-by-XIUMI V5\" style=\"\" powered-by=\"xiumi.us\"><section class=\"\" style=\"text-align: center;\"><img class=\"\" data-ratio=\"1\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/Te8D0eD8ugzVmXnm16JWH1Xbyr0F7HibV0dDeGQ8icq1FtyMuY0JaQHkEQdzJuVFn515jBOe66nMYnLKUGNtjKbw/640\" data-w=\"258\" style=\"vertical-align: middle;\"></section></section></section><section class=\"\" style=\"display: inline-block;vertical-align: middle;width: 70%;padding: 0px 0px 0px 10px;\"><section class=\"Powered-by-XIUMI V5\" style=\"\" powered-by=\"xiumi.us\"><section class=\"\" style=\"margin-top: 10px;margin-bottom: 10px;padding: 0px 3px;\"><section class=\"\" style=\"width: 6px;height: 6px;margin-left: -3px;border-radius: 100%;\"></section><section class=\"\" style=\"border-left: 1px solid rgb(160, 160, 160);\"><section class=\"\" style=\"padding: 3px 10px;\"><section class=\"Powered-by-XIUMI V5\" style=\"\" powered-by=\"xiumi.us\"><section class=\"\" style=\"\"><section class=\"\" style=\"display: inline-block;vertical-align: top;width: 30%;\"><section class=\"Powered-by-XIUMI V5\" style=\"\" powered-by=\"xiumi.us\"><section class=\"\" style=\"transform: translate3d(0px, 0px, 0px);\"><section class=\"\" style=\"display: inline-block;vertical-align: bottom;margin: auto;width: 3em;height: 3em;border-radius: 100%;background-position: center center;background-repeat: no-repeat;background-size: cover;background-image: url(\"https://mmbiz.qpic.cn/mmbiz_png/Te8D0eD8ugxTQZt5SXEqI3lEXaGsicP9DAtDOJ1lmuYiccVaiaqwYfajsERTkf91ZXvibpCGVNI018F9OZwiaxo4aIg/640?wx_fmt=png\");\"><section class=\"\" style=\"width: 100%;height: 100%;overflow: hidden;\"><img class=\"\" data-ratio=\"1\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Te8D0eD8ugzVmXnm16JWH1Xbyr0F7HibVZebjClyoOhpT4Ek2lqC3OhwEZt7ou4BtnqWA8QvzKkomuTtPV5Cgicw/640\" data-w=\"360\" style=\"width: 100%;height: 100%;opacity: 0;\" width=\"100%\"></section></section></section></section></section><section class=\"\" style=\"display: inline-block;vertical-align: top;width: 70%;\"><section class=\"Powered-by-XIUMI V5\" powered-by=\"xiumi.us\"><section class=\"\" style=\"\"><section class=\"\" style=\"color: rgb(0, 0, 0);\"><p><strong mpa-from-tpl=\"t\">OpenWeb开发者</strong></p></section></section></section><section class=\"Powered-by-XIUMI V5\" powered-by=\"xiumi.us\"><section class=\"\" style=\"\"><section class=\"\" style=\"font-size: 12px;color: rgb(160, 160, 160);\"><p>ID：BrilliantOpenWeb</p></section></section></section></section></section></section></section></section><section class=\"\" style=\"width: 100%;\"><section style=\"border-top: 1px solid rgb(160, 160, 160);width: 100%;float: left;\"></section><section style=\"width: 6px;height: 6px;margin-top: -3px;border-radius: 100%;float: right;\"></section></section><section class=\"\" style=\"border-left: 1px solid rgb(160, 160, 160);\"><section class=\"\" style=\"padding: 3px 10px;\"><section class=\"Powered-by-XIUMI V5\" powered-by=\"xiumi.us\"><section class=\"\" style=\"\"><section class=\"\" style=\"color: rgb(0, 0, 0);\"><p>技术连接世界，开放赢得未来</p></section></section></section></section></section><section class=\"\" style=\"width: 6px;height: 6px;margin-left: -3px;border-radius: 100%;\"><br></section></section></section></section></section></section></section></section>', '作者 | Maximiliano Firtman\n\n译者 | 彭星\n\n随着 iOS 11.3 的发布，iOS + PWA 的时代终于来了！本文对 iOS 中 PWA 的能力进行了分析，并将其与 iOS 上的 Native App、Android 上的 PWA 进行了深度对比，是值得收藏的一篇好文。\n\n随着 iOS 11.3 的发布，苹果悄悄的支持了 PWA 理念背后的几种新技术：Service Worker, Web App Manifest，那么让我们来看一下它们是如何工作的，它们能做到什么，它们的挑战是什么，以及如果你已经发布过 PWA 应用，那你还应该知道什么。\n\n这是一个在 iPad 上的 PWA，它能全屏，能离线使用，还可以像 App Store 中其他原生应用一样固定在 Dock 中\n\n如果你看到这篇文章之前还不知道什么是 PWA，我可以告诉你，它没有一个唯一且准确的定义，但我可以告诉你的是，它是一个用 Web 技术创建的 App，不用打包，不用签名，可以离线工作，如果你愿意，还可以添加到桌面上，看起来就和其他应用一样。\n\n在大多数平台上，都不要求 PWA 必须从 App Store 中安装，除了 Edge 浏览器和 Windows 10，它们要求 PWA 必须在它们的应用商店中。\n\n所以，你猜对了，**你现在可以不用通过 App Store 在 iOS 上安装应用了。**这可能就是为什么苹果没有直接提到这项新能力的原因之一，他们可能不想换休用户，甚至在 Safari 的发布说明中都没有提到这项技术。\n\n你可以看出它们的区别吗？一个是原生 Google 地图，一个是 PWA 版本\n\n**难道苹果不是 PWA 的创造者吗？**\n\n说实话，Google Chrome 团队创造了 PWA 这个属于，但是这个项目最初是在原始 iPhone OS 的 Safari 上提出的，2007 年，史蒂夫乔布斯在 WWDC 上宣布 “one more thing”：如何在 原始 iPhone 上开发应用程序，令人惊讶的是居然是 Web App。App Store 那时候根本不在最初的计划中，并且在 iPhone 发布的第一年，原生 SDK 还不能用。从苹果的角度来看，即使在今天，PWA 也只是 “主屏幕上的 webapp”，图标也被成为 WebClip。\n\n如果你愿意，可以看一下我去年在 Fluent Conference 上的演讲视频，我在 10 分 50 秒的时候提到了这个事情。视频链接地址：\n\nhttps://link.zhihu.com/?target=https%3A//www.youtube.com/watch%3Ftime_continue%3D651%26v%3DEFGltzFSK-c\n\n  \n\n11年前，这个想法并没有得到太多的关注，苹果也忘记了更新这个能力，所以有 10+ 年的时间，这个功能一直有缺陷并且不稳定。随后，几年后，其他的平台实现了这个想法，包括诺基亚 N9 上的 MeeGo 浏览器和 Android Chrome。\n\nChrome 帮助改善和实现这些技术来提供一个更好的体验给用户，主要体现在 Service Worker 和 Web App Manifest 规范上。从今天（2018 年 3 月 30 日） iOS 11.3 版本，苹果跟进 Chrome, Firefox, Samsung Internet, UC 浏览器 和 Opera 支持了这两个奇数规范，Mac 版 Safari 也已经支持了 Service Worker，并且 Web App Manifest 的支持今年也在进行中。\n\n史蒂夫乔布斯正在 WWDC 2007 年的第一款 iPhone 上演示 PWA（那个时候还不叫 PWA）\n\n**等等，所以这些应用没有通过 App Store 的质量测试，对吧？**\n\n是的，你又猜对了。但是 PWA 目前只能在浏览器或其他 Web 平台安全策略下运行，这意味着你可以“发布”未在 App Store 中获得批准的应用，例如贵公司员工的内部应用（也包括承认内容），但无法使用一些 Native 的 API，如 iPhone X 上的 Face ID，或者 ARKit 增强现实，或者至少，你需要等待 Web 平台支持这些新的 API。\n\nPWA 可以在作为一个普通网站，或者 standalone 模式（没有地址栏和 Safari 的其他功能）在Safari 中运行，就像系统中的其他应用程序一样。\n\n**iOS 中 PWA 的能力**\n\n在 iOS 的 Web 平台上您可以调用以下 API：\n\n*   地理信息定位\n    \n*   传感器（陀螺仪，加速度计，磁力仪）\n    \n*   相机\n    \n*   音频输出\n    \n*   语音合成（仅连接耳机）\n    \n*   Apple Pay\n    \n*   WebAssembly, WebRTC, Web GL 以及许多实验性的特性\n    \n\n你能区分哪些是 PWA，哪些是原生应用吗？\n\n**和 iOS 原生应用相比有哪些限制**\n\n  \n\nPWA 只能存储最多 50Mb 的离线数据和文件\n\n*   如果用户几周不使用 PWA，iOS 将释放这些 PWA 缓存的文件，桌面图标当然还在，用户下次访问的时候，会重新缓存文件\n    \n*   无法应用一些 Native API，如：蓝牙、Touch ID、Face ID、ARKit、电池信息等\n    \n*   无法在后台执行代码\n    \n*   无法访问一些私密数据，如：联系人等，也无法访问本地社交应用\n    \n*   无法访问 In App Payments 和其他许多基于 Apple 的服务\n    \n*   在 iPad 上，无法使用分屏和其他应用程序共享屏幕，PWA 始终占满整个屏幕\n    \n*   没有消息推送，没有 Siri 集成\n    \n\n如果你安装了一个叫 Tinder 的 PWA，Siri 并不能找到它  \n\n**哪些 在 Android 上可以，iOS 上不行的呢？**\n\n在 Android 上可以存储找过 50Mb 的数据和文件\n\n*   Android 不会在你很久不用这个 PWA 的时候就把它的文件删掉，但是它会在存储空间不足的时删除文件。如果用户安装并且使用很多的时候，PWA 可以使用永久存储\n    \n*   BLE 设备的蓝牙访问\n    \n*   Android上可以在 Web 中使用 Native 分享对话框，通过 Web Share API\n    \n*   语音识别\n    \n*   后台同步和离线消息推送\n    \n*   弹出安装对话框提示和邀请用户安装 PWA\n    \n*   你可以自定义（有限）PWA 启动画面和决定 PWA 是竖屏还是横屏\n    \n*   在 WebAPK 和 Chrome 中，一个 PWA 只能安装一次\n    \n*   在 WebAPK 和 Chrome 中，PWA 会出现在“设置“中，并且您可以看到数据使用量，在 iOS 中，所有内容都包含在 Safari 中\n    \n*   在 WebAPK 和 Chrome中，PWA 会捕获你的 URL，如果是一个 PWA 的链接，它将用独立模式打开 PWA，而不会打开浏览器\n    \n\n**哪些在 iOS 上可以，Android 下不行的呢？**\n\n  \n\n*   用户可以在安装前修改 PWA 的名字\n    \n*   可以在配置文件中进行修改，因此企业用户可以从公司安装 PWA（这是一个很好的点），Safari 管这个叫 WebClip（估计是没有好好阅读 Web App Manifest 的标准）\n    \n\n配置文件包含 WebClips 和 PWA 图标  \n\n**在 iOS 上怎么安装 PWA 呢？**\n\n  \n\n这是在 iOS 上重要的挑战之一，因为 iOS Safari 没有任何提示或者引导让用户添加 PWA，Android 下有一个叫 Web App Install Banners 的引导用户，所以，用户需要在 Safari 中先访问你的站点，然后手动点击分享（Share）图标，然后点击“添加到主屏幕”。整个过程中，没有任何一点表现出来这是一个 PWA。\n\n点击分享之后，点击添加到桌面按钮，需要 Web App 本身对用户进行引导，引导时请不要忘记当前系统语言  \n\n从 App Store 安装的其他浏览器，如 Chrome，Firefox，Brave 或者 Edge 都不能安装 PWA，也不能使用 Service Worker。\n\n完成安装后，它看起来就像主屏幕上的其他图标，虽然它不会有 3D Touch 菜单，如果您再次安装相同的 PWA，择会有另外一个同样的图标，指向相同的 PWA（比较幸运的是，安装的文件将被共享）。\n\n此外，很多 Web App 都有一个比较显眼的位置引导用户从 App Store 下载安装原生应用，在 PWA 中也这样显示了，这其实对用户体验是一个伤害，比如 Tinder：\n\n我已经安装了 PWA 了，不要试图引导我下载 Native App  \n\n**我已经有 PWA 站点 了，iOS 用户能马上使用吗？**\n\n在用户升级到 iOS 11.3 之后，用户就可以安装您的 PWA 了，不需要给 iOS 额外的配置，每个 PWA 都能安装，但是这并不意味着一切都能和你想的一样。\n\nUber PWA 看起来真的很不错，但是当你点击登录或者继续按钮时候，授权页面会打开 Safari，从而跳出了独立运行的 PWA  \n\n如果你正在阅读这篇文章，你可能已经在 iOS PWA 还在 beta 版的时候我发布的一篇文章《Cupertino，我们遇到麻烦了》，不好的消息是，在 beta 版期间遇到的大多数问题在 iOS 11.3 发布之后依然存在。\n\n如果你什么都不做，你的 PWA 顶部将会有来能重叠的黑色 bar，看不见时间，电池，其他信，状态栏  \n\n**什么不能正常工作呢？**\n\n*   显示问题：fullscreen 和 minimal-ui  两种模式在 iOS 上不支持，fullscreen 和 standalone 模式一样，而 minimal-ui 模式只是一个 Safari 的快捷方式。但是你可以通过使用 cover-fit 或者已经弃用的私有 meta 标签来达到类似的 fullscreen 效果（状态栏会处在，但是会覆盖在你的 app 上）\n    \n*   后台同步（background sync）还不支持\n    \n*   无法锁定 PWA 的方向，横屏还是竖屏\n    \n*   theme-color 属性不起作用，无法修改状态栏的颜色，你可以通过使用已经弃用的私有 meta 标签来设置黑色或者白色的状态栏，也可以使用 CSS/HTML 来模拟 theme-color\n    \n\n星巴克 PWA 在注册页面没有返回按钮，没办法取消当前注册流程，你需要重启 PWA  \n\n*   如果你的 PWA 没有后退手势或者返回按钮，用户将无法在页面间切换\n    \n*   iOS 不支持透明图标，所以一定要注意\n    \n\nGoogle Keep PWA 只在 Web App Manifest 设置了图标，所以添加到桌面上的图标是当前的截屏，你需要设置 Safari 的私有属性来定制图标\n\n*   在 iOS 中，无法使用 manifest.json 文件中的图标，但是可以使用 app-touch-icon link 标签设置的图标，如果你没有提供这个 link 标签，Safari 将会使用屏幕截图作为 icon，可以看上面的 Google Keep PWA 的例子\n    \n*   没有启动画面，所以 Web App Manifest 中的大多数颜色属性都会被忽略\n    \n*   不会有任何和 manifest  相关的事件被触发，因此你无法通过事件来判断用户是否安装，但可以通过 navigator.standalone 来判断是否是在 standalone 模式下运行\n    \n\n**要记住什么？**\n\n*   PWA 无法在会话之间保持状态，如果用户切出 PWA 到另外一个应用，它将在切回来的时候重新启动，因此如果你需要用户验证邮箱，短信或者需要调到另外一个 App 来验证的需求，请重新考虑另一种实现方式\n    \n\n所有没激活的 PWA 都是白屏，无论它们之前是不是，记住，它们没在运行，并且如果你切回 PWA，它将重新启动在 iPad 上有同样的白屏问题\n\n*   在背后的 PWA 没有截屏缩略信息，它们看起来都白的，这点很遗憾  \n    \n*   当你的 app 在 standalone 模式下运行的时候，可能会有 bug，不要用只 Safari 来测试你的 PWA\n    \n      \n    \n\nNASA 的 PWA 有一些体验上的问题\n\n*   如果你想让你的 PWA 利用 iPhone X 的缺口区域，需要用 HTML/CSS 进行特殊处理，如果做的不好，就会看起来很奇怪\n    \n*   有时候，你添加到主屏的时候没有 manifest 文件，添加的就只是一个快捷方式☹️\n    \n\n星巴克的商标在 Google 地图中？其实不是，只是连续使用多个 PWA 时，iOS 会有一些奇怪的 bug，PWA 加载了错误的 URL  \n\n*   Safari 和添加到主屏的 PWA 共享相同的 Service Worker Registration（不是 Service Worker 实例） 和缓存的文件，Safari View Controller（比如 Twitter 的应用内置浏览器）也支持 Service Worker 和 Cache API，但是似乎在会话关闭后会删除所有数据\n    \n*   所有第三方浏览器（Chrome、Firefox 等）和所有使用 WebView 的应用（Facebook 的应用程序内浏览器等）都不支持 Service Worker，我的猜测是，WKWebView 可能u需要一个 API 来让应用程序开发人员来决定如何使用 Service Worker，但是…谁知道呢\n    \n\n使用 Safari TP，你可以调试 Safari 和主屏上的 PWA，可以调试 Service Worker，也能捕获网络请求  \n\n*   要在 iOS 上调试 Service Worker，你需要安装 Safari 技术预览版或者 Safari 11.1\n    \n\nService Worker 的调试工具还在实验阶段，例如，暂时还看不到 CacheStorage 中的内容\n\n*   Service Worker 可以被禁用，可以通过 设置->实验特性（默认情况下是开启的）  \n    \n\n这个空白的应用是什么？\n\n*   有的时候，你同时打开了很多的 PWA，iOS 任务栏就会很奇怪，显示了一个没有图标和标题的幽灵应用\n    \n\n如果你发现了任何 iOS 上 PWA 的其他 bug，请在下方评论，我会整理一份错误报告交给 WebKit 团度，如果你想获得关于这篇文章的最新消息，也请在 Twitter 关注我 @firt，如果您 6 月份在湾区，请看我将教授的手把手学会 PWA 培训，我们将创建一个 PWA，涵盖大多数人在其他平台上都缺少的内容，也包活如何在 iOS 平台上生存下来😀。\n\n如果你发现了任何 iOS 上 PWA 的其他 bug，请在下方评论，我会整理一份错误报告交给 WebKit 团队，如果你想获得关于这篇文章的最新消息，也请在 Twitter 关注我 @firt，如果您 6 月份在湾区，请看我将教授的手把手学会 PWA 培训，我们将创建一个 PWA，涵盖大多数人在其他平台上都缺少的内容，也包活如何在 iOS 平台上生存下来。\n\n**原文地址（Medium，你懂得）**：https://medium.com/@firt/progressive-web-apps-on-ios-are-here-d00430dee3a7\n\n**推荐阅读**\n\n（点击图片即可跳转）\n\n[](http://mp.weixin.qq.com/s?__biz=MzUyODMzMjY3OQ==&mid=2247483788&idx=1&sn=b96c346b7aa710910dd1fe3b68967fd0&chksm=fa70a364cd072a724ada68df64bcda3071c6361a85757dd14d03a867108010d38e76c6826526&scene=21#wechat_redirect)\n\n[按照当前的发展趋势，PWA 将会带来 Web App 的大量需求，新一轮大前端技术洗牌很可能近在眼前了。](http://mp.weixin.qq.com/s?__biz=MzUyODMzMjY3OQ==&mid=2247483788&idx=1&sn=b96c346b7aa710910dd1fe3b68967fd0&chksm=fa70a364cd072a724ada68df64bcda3071c6361a85757dd14d03a867108010d38e76c6826526&scene=21#wechat_redirect)\n\n[——《PWA将带来新一轮大前端技术洗牌？》](http://mp.weixin.qq.com/s?__biz=MzUyODMzMjY3OQ==&mid=2247483788&idx=1&sn=b96c346b7aa710910dd1fe3b68967fd0&chksm=fa70a364cd072a724ada68df64bcda3071c6361a85757dd14d03a867108010d38e76c6826526&scene=21#wechat_redirect)\n\n**Brilliant Open Web **\n\nBOW（Brilliant Open Web）团队，是一个专门的Web技术建设小组，致力于推动 Open Web 技术的发展，让Web重新成为开发者的首选。\n\nBOW 关注前端，关注Web；剖析技术、分享实践；谈谈学习，也聊聊管理。\n\n关注 OpenWeb开发者，回复“加群”，让我们一起推动 OpenWeb技术的发展！\n\n**OpenWeb开发者**\n\nID：BrilliantOpenWeb\n\n技术连接世界，开放赢得未来', 0, 1, 0);
INSERT INTO `post` (`id`, `createAt`, `updateAt`, `title`, `description`, `thumb`, `url`, `html`, `markdown`, `views`, `status`, `push`) VALUES
(30, '2018-04-23 11:01:42.392597', '2018-04-23 11:01:42.392597', '移动前端开发之viewport的深入理解', '在移动设备上进行网页的重构或开发，首先得搞明白的就是移动设备上的viewport了，只有明白了viewport的概念以及弄清楚了跟viewport有关的meta标签的使用，才能更好地让我们的网页适配或响应各种不同分辨率的移动设备。一、viewport的概念通俗的讲，移动设备上的viewport就是设备的屏幕上能用来显示我们的网页的那一块区域，在具体一点，就是浏览器上(也可能是一个app中的webview)用来显示网页的那部分区域，但viewport又不局限于浏览器可视区域的大小，它可能比浏览器的可视区域要', 'https://images0.cnblogs.com/blog/130623/201407/300958475557219.png', 'https://www.cnblogs.com/2050/p/3877280.html', '<p>在移动设备上进行网页的重构或开发，首先得搞明白的就是移动设备上的viewport了，只有明白了viewport的概念以及弄清楚了跟viewport有关的meta标签的使用，才能更好地让我们的网页适配或响应各种不同分辨率的移动设备。</p> <p><strong><font size=\"3\">一、viewport的概念</font></strong></p> <p>通俗的讲，移动设备上的viewport就是设备的屏幕上能用来显示我们的网页的那一块区域，在具体一点，就是浏览器上(也可能是一个app中的webview)用来显示网页的那部分区域，但viewport又不局限于浏览器可视区域的大小，它可能比浏览器的可视区域要大，也可能比浏览器的可视区域要小。在默认情况下，一般来讲，移动设备上的viewport都是要大于浏览器可视区域的，这是因为考虑到移动设备的分辨率相对于桌面电脑来说都比较小，所以为了能在移动设备上正常显示那些传统的为桌面浏览器设计的网站，移动设备上的浏览器都会把自己默认的viewport设为980px或1024px（也可能是其它值，这个是由设备自己决定的），但带来的后果就是浏览器会出现横向滚动条，因为浏览器可视区域的宽度是比这个默认的viewport的宽度要小的。下图列出了一些设备上浏览器的默认viewport的宽度。</p> <p><a href=\"https://images0.cnblogs.com/blog/130623/201407/300958470402077.png\"><img title=\"1\" style=\"border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px\" border=\"0\" alt=\"1\" src=\"https://images0.cnblogs.com/blog/130623/201407/300958475557219.png\" width=\"657\" height=\"93\"></a></p> <p> </p> <p><strong><font size=\"3\">二、css中的1px并不等于设备的1px</font></strong></p> <p>    在css中我们一般使用px作为单位，在桌面浏览器中css的1个像素往往都是对应着电脑屏幕的1个物理像素，这可能会造成我们的一个错觉，那就是css中的像素就是设备的物理像素。但实际情况却并非如此，css中的像素只是一个抽象的单位，在不同的设备或不同的环境中，css中的1px所代表的设备物理像素是不同的。在为桌面浏览器设计的网页中，我们无需对这个津津计较，但在移动设备上，必须弄明白这点。在早先的移动设备中，屏幕像素密度都比较低，如iphone3，它的分辨率为320x480，在iphone3上，一个css像素确实是等于一个屏幕物理像素的。后来随着技术的发展，移动设备的屏幕像素密度越来越高，从iphone4开始，苹果公司便推出了所谓的Retina屏，分辨率提高了一倍，变成640x960，但屏幕尺寸却没变化，这就意味着同样大小的屏幕上，像素却多了一倍，这时，一个css像素是等于两个物理像素的。其他品牌的移动设备也是这个道理。例如安卓设备根据屏幕像素密度可分为ldpi、mdpi、hdpi、xhdpi等不同的等级，分辨率也是五花八门，安卓设备上的一个css像素相当于多少个屏幕物理像素，也因设备的不同而不同，没有一个定论。</p> <p>    还有一个因素也会引起css中px的变化，那就是用户缩放。例如，当用户把页面放大一倍，那么css中1px所代表的物理像素也会增加一倍；反之把页面缩小一倍，css中1px所代表的物理像素也会减少一倍。关于这点，在文章后面的部分还会讲到。</p> <p>    在移动端浏览器中以及某些桌面浏览器中，window对象有一个devicePixelRatio属性，它的官方的定义为：设备物理像素和设备独立像素的比例，也就是 devicePixelRatio = 物理像素 / 独立像素。css中的px就可以看做是设备的独立像素，所以通过devicePixelRatio，我们可以知道该设备上一个css像素代表多少个物理像素。例如，在Retina屏的iphone上，devicePixelRatio的值为2，也就是说1个css像素相当于2个物理像素。但是要注意的是，devicePixelRatio在不同的浏览器中还存在些许的兼容性问题，所以我们现在还并不能完全信赖这个东西，具体的情况可以看下<a href=\"http://www.quirksmode.org/blog/archives/2012/06/devicepixelrati.html\" target=\"_blank\">这篇文章</a>。</p> <p>devicePixelRatio的测试结果：</p> <p><a href=\"https://images0.cnblogs.com/blog/130623/201407/300958489622990.png\"><img title=\"14\" style=\"border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px\" border=\"0\" alt=\"14\" src=\"https://images0.cnblogs.com/blog/130623/201407/300958496962833.png\" width=\"1070\" height=\"279\"></a></p> <p> </p> <p><strong><font size=\"3\">三、PPK的关于三个viewport的理论</font></strong></p> <p>    <a href=\"http://www.quirksmode.org/\" target=\"_blank\">ppk大神</a>对于移动设备上的viewport有着非常多的研究（<a href=\"http://www.quirksmode.org/mobile/viewports.html\" target=\"_blank\">第一篇</a>，<a href=\"http://www.quirksmode.org/mobile/viewports2.html\" target=\"_blank\">第二篇</a>，<a href=\"http://www.quirksmode.org/mobile/metaviewport/\" target=\"_blank\">第三篇</a>），有兴趣的同学可以去看一下，本文中有很多数据和观点也是出自那里。ppk认为，移动设备上有三个viewport。</p> <p>    首先，移动设备上的浏览器认为自己必须能让所有的网站都正常显示，即使是那些不是为移动设备设计的网站。但如果以浏览器的可视区域作为viewport的话，因为移动设备的屏幕都不是很宽，所以那些为桌面浏览器设计的网站放到移动设备上显示时，必然会因为移动设备的viewport太窄，而挤作一团，甚至布局什么的都会乱掉。也许有人会问，现在不是有很多手机分辨率都非常大吗，比如768x1024，或者1080x1920这样，那这样的手机用来显示为桌面浏览器设计的网站是没问题的吧？前面我们已经说了，css中的1px并不是代表屏幕上的1px，你分辨率越大，css中1px代表的物理像素就会越多，devicePixelRatio的值也越大，这很好理解，因为你分辨率增大了，但屏幕尺寸并没有变大多少，必须让css中的1px代表更多的物理像素，才能让1px的东西在屏幕上的大小与那些低分辨率的设备差不多，不然就会因为太小而看不清。所以在1080x1920这样的设备上，在默认情况下，也许你只要把一个div的宽度设为300多px（视devicePixelRatio的值而定），就是满屏的宽度了。回到正题上来，如果把移动设备上浏览器的可视区域设为viewport的话，某些网站就会因为viewport太窄而显示错乱，所以这些浏览器就决定默认情况下把viewport设为一个较宽的值，比如980px，这样的话即使是那些为桌面设计的网站也能在移动浏览器上正常显示了。ppk把这个浏览器默认的viewport叫做 <em><strong>layout viewport</strong>。</em>这个layout viewport的宽度可以通过 <font color=\"#0000ff\">document.documentElement.clientWidth</font> 来获取。</p> <p>    然而，<em><strong>layout viewport </strong></em>的宽度是大于浏览器可视区域的宽度的，所以我们还需要一个viewport来代表 浏览器可视区域的大小，ppk把这个viewport叫做 <strong><em>visual viewport</em></strong>。visual viewport的宽度可以通过<font color=\"#0000ff\">window.innerWidth </font>来获取，但在Android 2, Oprea mini 和 UC 8中无法正确获取。</p> <p><a href=\"https://images0.cnblogs.com/blog/130623/201407/300958506337445.png\"><img title=\"2\" style=\"border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px\" border=\"0\" alt=\"2\" src=\"https://images0.cnblogs.com/blog/130623/201407/300958521655944.png\" width=\"501\" height=\"382\"></a>      <a href=\"https://images0.cnblogs.com/blog/130623/201407/300958533834472.png\"><img title=\"3\" style=\"border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px\" border=\"0\" alt=\"3\" src=\"https://images0.cnblogs.com/blog/130623/201407/300958547434256.png\" width=\"504\" height=\"381\"></a></p> <p>    现在我们已经有两个viewport了：<em><strong>layout viewport</strong></em> 和 <em><strong>visual viewport</strong></em>。但浏览器觉得还不够，因为现在越来越多的网站都会为移动设备进行单独的设计，所以必须还要有一个能完美适配移动设备的viewport。所谓的完美适配指的是，首先不需要用户缩放和横向滚动条就能正常的查看网站的所有内容；第二，显示的文字的大小是合适，比如一段14px大小的文字，不会因为在一个高密度像素的屏幕里显示得太小而无法看清，理想的情况是这段14px的文字无论是在何种密度屏幕，何种分辨率下，显示出来的大小都是差不多的。当然，不只是文字，其他元素像图片什么的也是这个道理。ppk把这个viewport叫做 <em><strong>ideal viewport</strong></em>，也就是第三个viewport——移动设备的理想viewport。</p> <p>    ideal viewport并没有一个固定的尺寸，不同的设备拥有有不同的ideal viewport。所有的iphone的ideal viewport宽度都是320px，无论它的屏幕宽度是320还是640，也就是说，在iphone中，css中的320px就代表iphone屏幕的宽度。</p> <p><a href=\"https://images0.cnblogs.com/blog/130623/201407/300958560242000.png\"><img title=\"4\" style=\"border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; float: left; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px\" border=\"0\" alt=\"4\" align=\"left\" src=\"https://images0.cnblogs.com/blog/130623/201407/300958563683726.png\" width=\"244\" height=\"192\"></a>          <a href=\"https://images0.cnblogs.com/blog/130623/201407/300958567274384.png\"><img title=\"5\" style=\"border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px\" border=\"0\" alt=\"5\" src=\"https://images0.cnblogs.com/blog/130623/201407/300958570879340.png\" width=\"244\" height=\"188\"></a></p> <p>但是安卓设备就比较复杂了，有320px的，有360px的，有384px的等等，关于不同的设备ideal viewport的宽度都为多少，可以到<a href=\"http://viewportsizes.com/\">http://viewportsizes.com</a>去查看一下，里面收集了众多设备的理想宽度。</p> <p>    再总结一下：ppk把移动设备上的viewport分为<em><strong>layout viewport</strong></em>  、 <em><strong>visual viewport   </strong></em>和<em><strong> ideal viewport</strong></em>  三类，其中的ideal viewport是最适合移动设备的viewport，ideal viewport的宽度等于移动设备的屏幕宽度，只要在css中把某一元素的宽度设为ideal viewport的宽度(单位用px)，那么这个元素的宽度就是设备屏幕的宽度了，也就是宽度为100%的效果。ideal viewport 的意义在于，无论在何种分辨率的屏幕下，那些针对ideal viewport 而设计的网站，不需要用户手动缩放，也不需要出现横向滚动条，都可以完美的呈现给用户。</p> <p> </p> <p><strong><font size=\"3\">四、利用meta标签对viewport进行控制</font></strong></p> <p>    移动设备默认的viewport是layout viewport，也就是那个比屏幕要宽的viewport，但在进行移动设备网站的开发时，我们需要的是ideal viewport。那么怎么才能得到ideal viewport呢？这就该轮到meta标签出场了。</p> <p>我们在开发移动设备的网站时，最常见的的一个动作就是把下面这个东西复制到我们的head标签中：</p> <div class=\"cnblogs_code\" style=\"border-top: #cccccc 1px solid; border-right: #cccccc 1px solid; border-bottom: #cccccc 1px solid; padding-bottom: 5px; padding-top: 5px; padding-left: 5px; border-left: #cccccc 1px solid; padding-right: 5px; background-color: #f5f5f5\"><pre><span style=\"color: #0000ff\"><</span><span style=\"color: #800000\">meta </span><span style=\"color: #ff0000\">name</span><span style=\"color: #0000ff\">=\"viewport\"</span><span style=\"color: #ff0000\"> content</span><span style=\"color: #0000ff\">=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0\"</span><span style=\"color: #0000ff\">></span></pre></div>\n<p>该meta标签的作用是让当前viewport的宽度等于设备的宽度，同时不允许用户手动缩放。也许允不允许用户缩放不同的网站有不同的要求，但让viewport的宽度等于设备的宽度，这个应该是大家都想要的效果，如果你不这样的设定的话，那就会使用那个比屏幕宽的默认viewport，也就是说会出现横向滚动条。</p>\n<p>这个name为viewport的meta标签到底有哪些东西呢，又都有什么作用呢？</p>\n<p>meta viewport 标签首先是由苹果公司在其safari浏览器中引入的，目的就是解决移动设备的viewport问题。后来安卓以及各大浏览器厂商也都纷纷效仿，引入对meta viewport的支持，事实也证明这个东西还是非常有用的。</p>\n<p>在苹果的规范中，meta viewport 有6个属性(暂且把content中的那些东西称为一个个属性和值)，如下：</p>\n<table cellspacing=\"0\" cellpadding=\"1\" width=\"825\" border=\"1\">\n<tbody>\n<tr>\n<td valign=\"top\" width=\"150\">width</td>\n<td valign=\"top\" width=\"673\">设置<em><strong>layout viewport</strong></em>  的宽度，为一个正整数，或字符串\"width-device\"</td></tr>\n<tr>\n<td valign=\"top\" width=\"150\">initial-scale</td>\n<td valign=\"top\" width=\"673\">设置页面的初始缩放值，为一个数字，可以带小数</td></tr>\n<tr>\n<td valign=\"top\" width=\"150\">minimum-scale</td>\n<td valign=\"top\" width=\"673\">允许用户的最小缩放值，为一个数字，可以带小数</td></tr>\n<tr>\n<td valign=\"top\" width=\"150\">maximum-scale</td>\n<td valign=\"top\" width=\"673\">允许用户的最大缩放值，为一个数字，可以带小数</td></tr>\n<tr>\n<td valign=\"top\" width=\"150\">height</td>\n<td valign=\"top\" width=\"673\">设置<em><strong>layout viewport</strong></em>  的高度，这个属性对我们并不重要，很少使用</td></tr>\n<tr>\n<td valign=\"top\" width=\"150\">user-scalable</td>\n<td valign=\"top\" width=\"673\">是否允许用户进行缩放，值为\"no\"或\"yes\", no 代表不允许，yes代表允许</td></tr></tbody></table>\n<p>这些属性可以同时使用，也可以单独使用或混合使用，多个属性同时使用时用逗号隔开就行了。</p>\n<p>此外，在安卓中还支持  target-densitydpi  这个私有属性，它表示目标设备的密度等级，作用是决定css中的1px代表多少物理像素</p>\n<table cellspacing=\"0\" cellpadding=\"1\" width=\"827\" border=\"1\">\n<tbody>\n<tr>\n<td valign=\"top\" width=\"149\">target-densitydpi  </td>\n<td valign=\"top\" width=\"676\">值可以为一个数值或 high-dpi 、 medium-dpi、 low-dpi、 device-dpi 这几个字符串中的一个</td></tr></tbody></table>\n<p>特别说明的是，当 target-densitydpi=device-dpi 时， css中的1px会等于物理像素中的1px。</p>\n<p>因为这个属性只有安卓支持，并且安卓已经决定要废弃<strike>target-densitydpi</strike>  这个属性了，所以这个属性我们要避免进行使用  。</p>\n<p><strong><font size=\"3\"></font></strong> </p>\n<p><strong><font size=\"3\">五、把当前的viewport宽度设置为 ideal viewport 的宽度</font></strong></p>\n<p>要得到ideal viewport就必须把默认的layout viewport的宽度设为移动设备的屏幕宽度。因为meta viewport中的width能控制layout viewport的宽度，所以我们只需要把width设为width-device这个特殊的值就行了。</p>\n<div class=\"cnblogs_code\" style=\"border-top: #cccccc 1px solid; border-right: #cccccc 1px solid; border-bottom: #cccccc 1px solid; padding-bottom: 5px; padding-top: 5px; padding-left: 5px; border-left: #cccccc 1px solid; padding-right: 5px; background-color: #f5f5f5\"><pre><span style=\"color: #0000ff\"><</span><span style=\"color: #800000\">meta </span><span style=\"color: #ff0000\">name</span><span style=\"color: #0000ff\">=\"viewport\"</span><span style=\"color: #ff0000\"> content</span><span style=\"color: #0000ff\">=\"width=device-width\"</span><span style=\"color: #0000ff\">></span></pre></div>\n<p><font color=\"#000000\">下图是这句代码在各大移动端浏览器上的测试结果：</font></p>\n<p><a href=\"https://images0.cnblogs.com/blog/130623/201407/300958574153540.png\"><img title=\"6\" style=\"border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px\" border=\"0\" alt=\"6\" src=\"https://images0.cnblogs.com/blog/130623/201407/300958578055954.png\" width=\"889\" height=\"157\"></a></p>\n<p><font color=\"#000000\">可以看到通过width=device-width，所有浏览器都能把当前的viewport宽度变成ideal viewport的宽度，但要注意的是，在iphone和ipad上，无论是竖屏还是横屏，宽度都是竖屏时ideal viewport的宽度。</font></p>\n<p><font color=\"#000000\">这样的写法看起来谁都会做，没吃过猪肉，谁还没见过猪跑啊~，确实，我们在开发移动设备上的网页时，不管你明不明白什么是viewport，可能你只需要这么一句代码就够了。</font></p>\n<p>可是你肯定不知道</p>\n<div class=\"cnblogs_code\" style=\"border-top: #cccccc 1px solid; border-right: #cccccc 1px solid; border-bottom: #cccccc 1px solid; padding-bottom: 5px; padding-top: 5px; padding-left: 5px; border-left: #cccccc 1px solid; padding-right: 5px; background-color: #f5f5f5\"><pre><span style=\"color: #0000ff\"><</span><span style=\"color: #800000\">meta </span><span style=\"color: #ff0000\">name</span><span style=\"color: #0000ff\">=\"viewport\"</span><span style=\"color: #ff0000\"> content</span><span style=\"color: #0000ff\">=\"initial-scale=1\"</span><span style=\"color: #0000ff\">></span></pre></div>\n<p><font color=\"#000000\">这句代码也能达到和前一句代码一样的效果，也可以把当前的的viewport变为 ideal viewport。</font></p>\n<p>呵呵，傻眼了吧，因为从理论上来讲，这句代码的作用只是不对当前的页面进行缩放，也就是页面本该是多大就是多大。那为什么会有 width=device-width 的效果呢？</p>\n<p>要想清楚这件事情，首先你得弄明白这个缩放是相对于什么来缩放的，因为这里的缩放值是1，也就是没缩放，但却达到了 ideal viewport 的效果，所以，那答案就只有一个了，缩放是相对于 ideal viewport来进行缩放的，当对ideal viewport进行100%的缩放，也就是缩放值为1的时候，不就得到了 ideal viewport吗？事实证明，的确是这样的。下图是各大移动端的浏览器当设置了<font color=\"#000000\"><meta name=\"viewport\" content=\"initial-scale=1\"> 后是否能把当前的viewport宽度变成 ideal viewport 的宽度的测试结果。</font></p>\n<p><a href=\"https://images0.cnblogs.com/blog/130623/201407/300958592749939.png\"><img title=\"7\" style=\"border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px\" border=\"0\" alt=\"7\" src=\"https://images0.cnblogs.com/blog/130623/201407/300958597123639.png\" width=\"884\" height=\"158\"></a></p>\n<p>测试结果表明 initial-scale=1 也能把当前的viewport宽度变成 ideal viewport 的宽度，但这次轮到了windows phone 上的IE 无论是竖屏还是横屏都把宽度设为竖屏时ideal viewport的宽度。但这点小瑕疵已经无关紧要了。</p>\n<p>但如果width 和 initial-scale=1同时出现，并且还出现了冲突呢？比如：</p>\n<div class=\"cnblogs_code\" style=\"border-top: #cccccc 1px solid; border-right: #cccccc 1px solid; border-bottom: #cccccc 1px solid; padding-bottom: 5px; padding-top: 5px; padding-left: 5px; border-left: #cccccc 1px solid; padding-right: 5px; background-color: #f5f5f5\"><pre><span style=\"color: #0000ff\"><</span><span style=\"color: #800000\">meta </span><span style=\"color: #ff0000\">name</span><span style=\"color: #0000ff\">=\"viewport\"</span><span style=\"color: #ff0000\"> content</span><span style=\"color: #0000ff\">=\"width=400, initial-scale=1\"</span><span style=\"color: #0000ff\">></span></pre></div>\n<p><font color=\"#000000\">width=400表示把当前viewport的宽度设为400px，initial-scale=1则表示把当前viewport的宽度设为ideal viewport的宽度，那么浏览器到底该服从哪个命令呢？是书写顺序在后面的那个吗？不是。当遇到这种情况时，浏览器会取它们两个中较大的那个值。例如，当width=400，ideal viewport的宽度为320时，取的是400；当width=400， ideal viewport的宽度为480时，取的是ideal viewport的宽度。（ps:在uc9浏览器中，当initial-scale=1时，无论width属性的值为多少，此时viewport的宽度永远都是ideal viewport的宽度）</font></p>\n<p>最后，总结一下，要把当前的viewport宽度设为ideal viewport的宽度，既可以设置 width=device-width，也可以设置 initial-scale=1，但这两者各有一个小缺陷，就是iphone、ipad以及IE 会横竖屏不分，通通以竖屏的ideal viewport宽度为准。所以，最完美的写法应该是，两者都写上去，这样就 initial-scale=1 解决了 iphone、ipad的毛病，width=device-width则解决了IE的毛病：</p>\n<div class=\"cnblogs_code\" style=\"border-top: #cccccc 1px solid; border-right: #cccccc 1px solid; border-bottom: #cccccc 1px solid; padding-bottom: 5px; padding-top: 5px; padding-left: 5px; border-left: #cccccc 1px solid; padding-right: 5px; background-color: #f5f5f5\"><pre><span style=\"color: #0000ff\"><</span><span style=\"color: #800000\">meta </span><span style=\"color: #ff0000\">name</span><span style=\"color: #0000ff\">=\"viewport\"</span><span style=\"color: #ff0000\"> content</span><span style=\"color: #0000ff\">=\"width=device-width, initial-scale=1\"</span><span style=\"color: #0000ff\">></span></pre><font color=\"#0000ff\"><strong></strong></font></div>\n<p><strong><font color=\"#0000ff\"></font></strong> </p>\n<p><strong><font size=\"3\">六、关于meta viewport的更多知识</font></strong></p>\n<p><font color=\"#000000\"><strong>1、关于缩放以及initial-scale的默认值</strong></font></p>\n<p>    首先我们先来讨论一下缩放的问题，前面已经提到过，缩放是相对于ideal viewport来缩放的，缩放值越大，当前viewport的宽度就会越小，反之亦然。例如在iphone中，ideal viewport的宽度是320px，如果我们设置 initial-scale=2 ，此时viewport的宽度会变为只有160px了，这也好理解，放大了一倍嘛，就是原来1px的东西变成2px了，但是1px变为2px并不是把原来的320px变为640px了，而是在实际宽度不变的情况下，1px变得跟原来的2px的长度一样了，所以放大2倍后原来需要320px才能填满的宽度现在只需要160px就做到了。因此，我们可以得出一个公式：</p>\n<div class=\"cnblogs_code\" style=\"border-top: #cccccc 1px solid; border-right: #cccccc 1px solid; border-bottom: #cccccc 1px solid; padding-bottom: 5px; padding-top: 5px; padding-left: 5px; border-left: #cccccc 1px solid; padding-right: 5px; background-color: #f5f5f5\"><pre><span style=\"color: #000000\">visual viewport宽度 = ideal viewport宽度  / 当前缩放值\n\n当前缩放值 = ideal viewport宽度  / visual viewport宽度</span></pre></div>\n<p>    ps: visual viewport的宽度指的是浏览器可视区域的宽度。</p>\n<p>    大多数浏览器都符合这个理论，但是安卓上的原生浏览器以及IE有些问题。安卓自带的webkit浏览器只有在 initial-scale = 1 以及没有设置width属性时才是表现正常的，也就相当于这理论在它身上基本没用；而IE则根本不甩initial-scale这个属性，无论你给他设置什么，initial-scale表现出来的效果永远是1。</p>\n<p>    好了，现在再来说下initial-scale的默认值问题，就是不写这个属性的时候，它的默认值会是多少呢？很显然不会是1，因为当 initial-scale = 1 时，当前的layout viewport宽度会被设为 ideal viewport的宽度，但前面说了，各浏览器默认的 layout viewport宽度一般都是980啊，1024啊，800啊等等这些个值，没有一开始就是 ideal viewport的宽度的，所以 initial-scale的默认值肯定不是1。安卓设备上的initial-scale默认值好像没有方法能够得到，或者就是干脆它就没有默认值，一定要你显示的写出来这个东西才会起作用，我们不管它了，这里我们重点说一下iphone和ipad上的initial-scale默认值。</p>\n<p>   根据测试，我们可以在iphone和ipad上得到一个结论，就是无论你给layout viewpor设置的宽度是多少，而又没有指定初始的缩放值的话，那么iphone和ipad会自动计算initial-scale这个值，以保证当前layout viewport的宽度在缩放后就是浏览器可视区域的宽度，也就是说不会出现横向滚动条。比如说，在iphone上，我们不设置任何的viewport meta标签，此时layout viewport的宽度为980px，但我们可以看到浏览器并没有出现横向滚动条，浏览器默认的把页面缩小了。根据上面的公式，<font color=\"#ff0000\">当前缩放值 = ideal viewport宽度  / visual viewport宽度</font><font color=\"#000000\">，我们可以得出：</font></p>\n<p>      当前缩放值 = 320 / 980</p>\n<p>也就是当前的initial-scale默认值应该是 0.33这样子。当你指定了initial-scale的值后，这个默认值就不起作用了。</p>\n<p>总之记住这个结论就行了：<strong><font color=\"#0000ff\">在iphone和ipad上，无论你给viewport设的宽的是多少，如果没有指定默认的缩放值，则iphone和ipad会自动计算这个缩放值，以达到当前页面不会出现横向滚动条(或者说viewport的宽度就是屏幕的宽度)的目的。</font></strong></p>\n<p><a href=\"https://images0.cnblogs.com/blog/130623/201407/300959001492039.png\"><img title=\"11\" style=\"border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px\" border=\"0\" alt=\"11\" src=\"https://images0.cnblogs.com/blog/130623/201407/300959005874738.png\" width=\"296\" height=\"442\"></a>    <a href=\"https://images0.cnblogs.com/blog/130623/201407/300959019771981.png\"><img title=\"12\" style=\"border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px\" border=\"0\" alt=\"12\" src=\"https://images0.cnblogs.com/blog/130623/201407/300959024307908.png\" width=\"297\" height=\"443\"></a>     <a href=\"https://images0.cnblogs.com/blog/130623/201407/300959028057093.png\"><img title=\"13\" style=\"border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px\" border=\"0\" alt=\"13\" src=\"https://images0.cnblogs.com/blog/130623/201407/300959031187064.png\" width=\"297\" height=\"443\"></a></p>\n<p> </p>\n<p><strong>2、动态改变meta viewport标签</strong></p>\n<p>第一种方法</p>\n<p>可以使用document.write来动态输出meta viewport标签，例如：</p>\n<div class=\"cnblogs_code\" style=\"border-top: #cccccc 1px solid; border-right: #cccccc 1px solid; border-bottom: #cccccc 1px solid; padding-bottom: 5px; padding-top: 5px; padding-left: 5px; border-left: #cccccc 1px solid; padding-right: 5px; background-color: #f5f5f5\"><pre>document.write(\'<span style=\"color: #0000ff\"><</span><span style=\"color: #800000\">meta </span><span style=\"color: #ff0000\">name</span><span style=\"color: #0000ff\">=\"viewport\"</span><span style=\"color: #ff0000\"> content</span><span style=\"color: #0000ff\">=\"width=device-width,initial-scale=1\"</span><span style=\"color: #0000ff\">></span>\')</pre></div>\n<p>第二种方法</p>\n<p>通过setAttribute来改变  </p>\n<div class=\"cnblogs_code\" style=\"border-top: #cccccc 1px solid; border-right: #cccccc 1px solid; border-bottom: #cccccc 1px solid; padding-bottom: 5px; padding-top: 5px; padding-left: 5px; border-left: #cccccc 1px solid; padding-right: 5px; background-color: #f5f5f5\"><pre><span style=\"color: #0000ff\"><</span><span style=\"color: #800000\">meta </span><span style=\"color: #ff0000\">id</span><span style=\"color: #0000ff\">=\"testViewport\"</span><span style=\"color: #ff0000\"> name</span><span style=\"color: #0000ff\">=\"viewport\"</span><span style=\"color: #ff0000\"> content</span><span style=\"color: #0000ff\">=\"width = 380\"</span><span style=\"color: #0000ff\">></span>\n<span style=\"color: #0000ff\"><</span><span style=\"color: #800000\">script</span><span style=\"color: #0000ff\">></span>\n<span style=\"color: #0000ff; background-color: #f5f5f5\">var</span><span style=\"color: #000000; background-color: #f5f5f5\"> mvp </span><span style=\"color: #000000; background-color: #f5f5f5\">=</span><span style=\"color: #000000; background-color: #f5f5f5\"> document.getElementById(</span><span style=\"color: #000000; background-color: #f5f5f5\">\'</span><span style=\"color: #000000; background-color: #f5f5f5\">testViewport</span><span style=\"color: #000000; background-color: #f5f5f5\">\'</span><span style=\"color: #000000; background-color: #f5f5f5\">);\nmvp.setAttribute(</span><span style=\"color: #000000; background-color: #f5f5f5\">\'</span><span style=\"color: #000000; background-color: #f5f5f5\">content</span><span style=\"color: #000000; background-color: #f5f5f5\">\'</span><span style=\"color: #000000; background-color: #f5f5f5\">,</span><span style=\"color: #000000; background-color: #f5f5f5\">\'</span><span style=\"color: #000000; background-color: #f5f5f5\">width=480</span><span style=\"color: #000000; background-color: #f5f5f5\">\'</span><span style=\"color: #000000; background-color: #f5f5f5\">);\n</span><span style=\"color: #0000ff\"></</span><span style=\"color: #800000\">script</span><span style=\"color: #0000ff\">></span></pre></div>\n<p><em></em></p>\n<p> </p>\n<p>安卓2.3自带浏览器上的一个bug</p>\n<div class=\"cnblogs_code\" style=\"border-top: #cccccc 1px solid; border-right: #cccccc 1px solid; border-bottom: #cccccc 1px solid; padding-bottom: 5px; padding-top: 5px; padding-left: 5px; border-left: #cccccc 1px solid; padding-right: 5px; background-color: #f5f5f5\"><pre><span style=\"color: #0000ff\"><</span><span style=\"color: #800000\">meta </span><span style=\"color: #ff0000\">name</span><span style=\"color: #0000ff\">=\"viewport\"</span><span style=\"color: #ff0000\"> content</span><span style=\"color: #0000ff\">=\"width=device-width\"</span><span style=\"color: #0000ff\">></span>\n\n<span style=\"color: #0000ff\"><</span><span style=\"color: #800000\">script </span><span style=\"color: #ff0000\">type</span><span style=\"color: #0000ff\">=\"text/javascript\"</span><span style=\"color: #0000ff\">></span><span style=\"color: #000000; background-color: #f5f5f5\">\nalert(document.documentElement.clientWidth); </span><span style=\"color: #008000; background-color: #f5f5f5\">//</span><span style=\"color: #008000; background-color: #f5f5f5\">弹出600，正常情况应该弹出320</span>\n<span style=\"color: #0000ff\"></</span><span style=\"color: #800000\">script</span><span style=\"color: #0000ff\">></span>\n\n<span style=\"color: #0000ff\"><</span><span style=\"color: #800000\">meta </span><span style=\"color: #ff0000\">name</span><span style=\"color: #0000ff\">=\"viewport\"</span><span style=\"color: #ff0000\"> content</span><span style=\"color: #0000ff\">=\"width=600\"</span><span style=\"color: #0000ff\">></span>\n\n<span style=\"color: #0000ff\"><</span><span style=\"color: #800000\">script </span><span style=\"color: #ff0000\">type</span><span style=\"color: #0000ff\">=\"text/javascript\"</span><span style=\"color: #0000ff\">></span><span style=\"color: #000000; background-color: #f5f5f5\">\nalert(document.documentElement.clientWidth); </span><span style=\"color: #008000; background-color: #f5f5f5\">//</span><span style=\"color: #008000; background-color: #f5f5f5\">弹出320，正常情况应该弹出600</span>\n<span style=\"color: #0000ff\"></</span><span style=\"color: #800000\">script</span><span style=\"color: #0000ff\">></span></pre></div>\n<p>测试的手机ideal viewport 宽度为320px，第一次弹出的值是600,但这个值应该是第行meta标签的结果啊，然后第二次弹出的值是320，这才是第一行meta标签所达到的效果啊，所以在安卓2.3(或许是所有2.x版本中)的自带浏览器中，对meta viewport标签进行覆盖或更改，会出现让人非常迷糊的结果。</p>\n<p> </p>\n<p><strong><font size=\"3\">七、结语</font></strong></p>\n<p>说了那么多废话，最后还是有必要总结一点有用的出来。</p>\n<p>首先如果不设置meta viewport标签，那么移动设备上浏览器默认的宽度值为800px，980px，1024px等这些，总之是大于屏幕宽度的。这里的宽度所用的单位px都是指css中的px，它跟代表实际屏幕物理像素的px不是一回事。</p>\n<p>第二、每个移动设备浏览器中都有一个理想的宽度，这个理想的宽度是指css中的宽度，跟设备的物理宽度没有关系，在css中，这个宽度就相当于100%的所代表的那个宽度。我们可以用meta标签把viewport的宽度设为那个理想的宽度，如果不知道这个设备的理想宽度是多少，那么用device-width这个特殊值就行了，同时initial-scale=1也有把viewport的宽度设为理想宽度的作用。所以，我们可以使用</p>\n<div class=\"cnblogs_code\" style=\"border-top: #cccccc 1px solid; border-right: #cccccc 1px solid; border-bottom: #cccccc 1px solid; padding-bottom: 5px; padding-top: 5px; padding-left: 5px; border-left: #cccccc 1px solid; padding-right: 5px; background-color: #f5f5f5\"><pre><span style=\"color: #0000ff\"><</span><span style=\"color: #800000\">meta </span><span style=\"color: #ff0000\">name</span><span style=\"color: #0000ff\">=\"viewport\"</span><span style=\"color: #ff0000\"> content</span><span style=\"color: #0000ff\">=\"width=device-width, initial-scale=1\"</span><span style=\"color: #0000ff\">></span></pre></div>来得到一个理想的viewport（也就是前面说的ideal viewport）。 \n<p>为什么需要有理想的viewport呢？比如一个分辨率为320x480的手机理想viewport的宽度是320px，而另一个屏幕尺寸相同但分辨率为640x960的手机的理想viewport宽度也是为320px，那为什么分辨率大的这个手机的理想宽度要跟分辨率小的那个手机的理想宽度一样呢？这是因为，只有这样才能保证同样的网站在不同分辨率的设备上看起来都是一样或差不多的。实际上，现在市面上虽然有那么多不同种类不同品牌不同分辨率的手机，但它们的理想viewport宽度归纳起来无非也就 320、360、384、400等几种，都是非常接近的，理想宽度的相近也就意味着我们针对某个设备的理想viewport而做出的网站，在其他设备上的表现也不会相差非常多甚至是表现一样的。</p>', '在移动设备上进行网页的重构或开发，首先得搞明白的就是移动设备上的viewport了，只有明白了viewport的概念以及弄清楚了跟viewport有关的meta标签的使用，才能更好地让我们的网页适配或响应各种不同分辨率的移动设备。\n\n**一、viewport的概念**\n\n通俗的讲，移动设备上的viewport就是设备的屏幕上能用来显示我们的网页的那一块区域，在具体一点，就是浏览器上(也可能是一个app中的webview)用来显示网页的那部分区域，但viewport又不局限于浏览器可视区域的大小，它可能比浏览器的可视区域要大，也可能比浏览器的可视区域要小。在默认情况下，一般来讲，移动设备上的viewport都是要大于浏览器可视区域的，这是因为考虑到移动设备的分辨率相对于桌面电脑来说都比较小，所以为了能在移动设备上正常显示那些传统的为桌面浏览器设计的网站，移动设备上的浏览器都会把自己默认的viewport设为980px或1024px（也可能是其它值，这个是由设备自己决定的），但带来的后果就是浏览器会出现横向滚动条，因为浏览器可视区域的宽度是比这个默认的viewport的宽度要小的。下图列出了一些设备上浏览器的默认viewport的宽度。\n\n[![1](https://images0.cnblogs.com/blog/130623/201407/300958475557219.png \"1\")](https://images0.cnblogs.com/blog/130623/201407/300958470402077.png)\n\n**二、css中的1px并不等于设备的1px**\n\n    在css中我们一般使用px作为单位，在桌面浏览器中css的1个像素往往都是对应着电脑屏幕的1个物理像素，这可能会造成我们的一个错觉，那就是css中的像素就是设备的物理像素。但实际情况却并非如此，css中的像素只是一个抽象的单位，在不同的设备或不同的环境中，css中的1px所代表的设备物理像素是不同的。在为桌面浏览器设计的网页中，我们无需对这个津津计较，但在移动设备上，必须弄明白这点。在早先的移动设备中，屏幕像素密度都比较低，如iphone3，它的分辨率为320x480，在iphone3上，一个css像素确实是等于一个屏幕物理像素的。后来随着技术的发展，移动设备的屏幕像素密度越来越高，从iphone4开始，苹果公司便推出了所谓的Retina屏，分辨率提高了一倍，变成640x960，但屏幕尺寸却没变化，这就意味着同样大小的屏幕上，像素却多了一倍，这时，一个css像素是等于两个物理像素的。其他品牌的移动设备也是这个道理。例如安卓设备根据屏幕像素密度可分为ldpi、mdpi、hdpi、xhdpi等不同的等级，分辨率也是五花八门，安卓设备上的一个css像素相当于多少个屏幕物理像素，也因设备的不同而不同，没有一个定论。\n\n    还有一个因素也会引起css中px的变化，那就是用户缩放。例如，当用户把页面放大一倍，那么css中1px所代表的物理像素也会增加一倍；反之把页面缩小一倍，css中1px所代表的物理像素也会减少一倍。关于这点，在文章后面的部分还会讲到。\n\n    在移动端浏览器中以及某些桌面浏览器中，window对象有一个devicePixelRatio属性，它的官方的定义为：设备物理像素和设备独立像素的比例，也就是 devicePixelRatio = 物理像素 / 独立像素。css中的px就可以看做是设备的独立像素，所以通过devicePixelRatio，我们可以知道该设备上一个css像素代表多少个物理像素。例如，在Retina屏的iphone上，devicePixelRatio的值为2，也就是说1个css像素相当于2个物理像素。但是要注意的是，devicePixelRatio在不同的浏览器中还存在些许的兼容性问题，所以我们现在还并不能完全信赖这个东西，具体的情况可以看下[这篇文章](http://www.quirksmode.org/blog/archives/2012/06/devicepixelrati.html)。\n\ndevicePixelRatio的测试结果：\n\n[![14](https://images0.cnblogs.com/blog/130623/201407/300958496962833.png \"14\")](https://images0.cnblogs.com/blog/130623/201407/300958489622990.png)\n\n**三、PPK的关于三个viewport的理论**\n\n    [ppk大神](http://www.quirksmode.org/)对于移动设备上的viewport有着非常多的研究（[第一篇](http://www.quirksmode.org/mobile/viewports.html)，[第二篇](http://www.quirksmode.org/mobile/viewports2.html)，[第三篇](http://www.quirksmode.org/mobile/metaviewport/)），有兴趣的同学可以去看一下，本文中有很多数据和观点也是出自那里。ppk认为，移动设备上有三个viewport。\n\n    首先，移动设备上的浏览器认为自己必须能让所有的网站都正常显示，即使是那些不是为移动设备设计的网站。但如果以浏览器的可视区域作为viewport的话，因为移动设备的屏幕都不是很宽，所以那些为桌面浏览器设计的网站放到移动设备上显示时，必然会因为移动设备的viewport太窄，而挤作一团，甚至布局什么的都会乱掉。也许有人会问，现在不是有很多手机分辨率都非常大吗，比如768x1024，或者1080x1920这样，那这样的手机用来显示为桌面浏览器设计的网站是没问题的吧？前面我们已经说了，css中的1px并不是代表屏幕上的1px，你分辨率越大，css中1px代表的物理像素就会越多，devicePixelRatio的值也越大，这很好理解，因为你分辨率增大了，但屏幕尺寸并没有变大多少，必须让css中的1px代表更多的物理像素，才能让1px的东西在屏幕上的大小与那些低分辨率的设备差不多，不然就会因为太小而看不清。所以在1080x1920这样的设备上，在默认情况下，也许你只要把一个div的宽度设为300多px（视devicePixelRatio的值而定），就是满屏的宽度了。回到正题上来，如果把移动设备上浏览器的可视区域设为viewport的话，某些网站就会因为viewport太窄而显示错乱，所以这些浏览器就决定默认情况下把viewport设为一个较宽的值，比如980px，这样的话即使是那些为桌面设计的网站也能在移动浏览器上正常显示了。ppk把这个浏览器默认的viewport叫做 _**layout viewport**。_这个layout viewport的宽度可以通过 document.documentElement.clientWidth 来获取。\n\n    然而，_**layout viewport**_ 的宽度是大于浏览器可视区域的宽度的，所以我们还需要一个viewport来代表 浏览器可视区域的大小，ppk把这个viewport叫做 **_visual viewport_**。visual viewport的宽度可以通过window.innerWidth 来获取，但在Android 2, Oprea mini 和 UC 8中无法正确获取。\n\n[![2](https://images0.cnblogs.com/blog/130623/201407/300958521655944.png \"2\")](https://images0.cnblogs.com/blog/130623/201407/300958506337445.png)      [![3](https://images0.cnblogs.com/blog/130623/201407/300958547434256.png \"3\")](https://images0.cnblogs.com/blog/130623/201407/300958533834472.png)\n\n    现在我们已经有两个viewport了：_**layout viewport**_ 和 _**visual viewport**_。但浏览器觉得还不够，因为现在越来越多的网站都会为移动设备进行单独的设计，所以必须还要有一个能完美适配移动设备的viewport。所谓的完美适配指的是，首先不需要用户缩放和横向滚动条就能正常的查看网站的所有内容；第二，显示的文字的大小是合适，比如一段14px大小的文字，不会因为在一个高密度像素的屏幕里显示得太小而无法看清，理想的情况是这段14px的文字无论是在何种密度屏幕，何种分辨率下，显示出来的大小都是差不多的。当然，不只是文字，其他元素像图片什么的也是这个道理。ppk把这个viewport叫做 _**ideal viewport**_，也就是第三个viewport——移动设备的理想viewport。\n\n    ideal viewport并没有一个固定的尺寸，不同的设备拥有有不同的ideal viewport。所有的iphone的ideal viewport宽度都是320px，无论它的屏幕宽度是320还是640，也就是说，在iphone中，css中的320px就代表iphone屏幕的宽度。\n\n[![4](https://images0.cnblogs.com/blog/130623/201407/300958563683726.png \"4\")](https://images0.cnblogs.com/blog/130623/201407/300958560242000.png)          [![5](https://images0.cnblogs.com/blog/130623/201407/300958570879340.png \"5\")](https://images0.cnblogs.com/blog/130623/201407/300958567274384.png)\n\n但是安卓设备就比较复杂了，有320px的，有360px的，有384px的等等，关于不同的设备ideal viewport的宽度都为多少，可以到[http://viewportsizes.com](http://viewportsizes.com/)去查看一下，里面收集了众多设备的理想宽度。\n\n    再总结一下：ppk把移动设备上的viewport分为_**layout viewport**_  、 _**visual viewport**_ 和 _**ideal viewport**_  三类，其中的ideal viewport是最适合移动设备的viewport，ideal viewport的宽度等于移动设备的屏幕宽度，只要在css中把某一元素的宽度设为ideal viewport的宽度(单位用px)，那么这个元素的宽度就是设备屏幕的宽度了，也就是宽度为100%的效果。ideal viewport 的意义在于，无论在何种分辨率的屏幕下，那些针对ideal viewport 而设计的网站，不需要用户手动缩放，也不需要出现横向滚动条，都可以完美的呈现给用户。\n\n**四、利用meta标签对viewport进行控制**\n\n    移动设备默认的viewport是layout viewport，也就是那个比屏幕要宽的viewport，但在进行移动设备网站的开发时，我们需要的是ideal viewport。那么怎么才能得到ideal viewport呢？这就该轮到meta标签出场了。\n\n我们在开发移动设备的网站时，最常见的的一个动作就是把下面这个东西复制到我们的head标签中：\n\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0\">\n\n该meta标签的作用是让当前viewport的宽度等于设备的宽度，同时不允许用户手动缩放。也许允不允许用户缩放不同的网站有不同的要求，但让viewport的宽度等于设备的宽度，这个应该是大家都想要的效果，如果你不这样的设定的话，那就会使用那个比屏幕宽的默认viewport，也就是说会出现横向滚动条。\n\n这个name为viewport的meta标签到底有哪些东西呢，又都有什么作用呢？\n\nmeta viewport 标签首先是由苹果公司在其safari浏览器中引入的，目的就是解决移动设备的viewport问题。后来安卓以及各大浏览器厂商也都纷纷效仿，引入对meta viewport的支持，事实也证明这个东西还是非常有用的。\n\n在苹果的规范中，meta viewport 有6个属性(暂且把content中的那些东西称为一个个属性和值)，如下：\n\n| width | 设置_**layout viewport**_  的宽度，为一个正整数，或字符串\"width-device\" |\n| initial-scale | 设置页面的初始缩放值，为一个数字，可以带小数 |\n| minimum-scale | 允许用户的最小缩放值，为一个数字，可以带小数 |\n| maximum-scale | 允许用户的最大缩放值，为一个数字，可以带小数 |\n| height | 设置_**layout viewport**_  的高度，这个属性对我们并不重要，很少使用 |\n| user-scalable | 是否允许用户进行缩放，值为\"no\"或\"yes\", no 代表不允许，yes代表允许 |\n\n这些属性可以同时使用，也可以单独使用或混合使用，多个属性同时使用时用逗号隔开就行了。\n\n此外，在安卓中还支持  target-densitydpi  这个私有属性，它表示目标设备的密度等级，作用是决定css中的1px代表多少物理像素\n\n| target-densitydpi  | 值可以为一个数值或 high-dpi 、 medium-dpi、 low-dpi、 device-dpi 这几个字符串中的一个 |\n\n特别说明的是，当 target-densitydpi=device-dpi 时， css中的1px会等于物理像素中的1px。\n\n因为这个属性只有安卓支持，并且安卓已经决定要废弃~target-densitydpi~  这个属性了，所以这个属性我们要避免进行使用  。\n\n**五、把当前的viewport宽度设置为 ideal viewport 的宽度**\n\n要得到ideal viewport就必须把默认的layout viewport的宽度设为移动设备的屏幕宽度。因为meta viewport中的width能控制layout viewport的宽度，所以我们只需要把width设为width-device这个特殊的值就行了。\n\n<meta name=\"viewport\" content=\"width=device-width\">\n\n下图是这句代码在各大移动端浏览器上的测试结果：\n\n[![6](https://images0.cnblogs.com/blog/130623/201407/300958578055954.png \"6\")](https://images0.cnblogs.com/blog/130623/201407/300958574153540.png)\n\n可以看到通过width=device-width，所有浏览器都能把当前的viewport宽度变成ideal viewport的宽度，但要注意的是，在iphone和ipad上，无论是竖屏还是横屏，宽度都是竖屏时ideal viewport的宽度。\n\n这样的写法看起来谁都会做，没吃过猪肉，谁还没见过猪跑啊~，确实，我们在开发移动设备上的网页时，不管你明不明白什么是viewport，可能你只需要这么一句代码就够了。\n\n可是你肯定不知道\n\n<meta name=\"viewport\" content=\"initial-scale=1\">\n\n这句代码也能达到和前一句代码一样的效果，也可以把当前的的viewport变为 ideal viewport。\n\n呵呵，傻眼了吧，因为从理论上来讲，这句代码的作用只是不对当前的页面进行缩放，也就是页面本该是多大就是多大。那为什么会有 width=device-width 的效果呢？\n\n要想清楚这件事情，首先你得弄明白这个缩放是相对于什么来缩放的，因为这里的缩放值是1，也就是没缩放，但却达到了 ideal viewport 的效果，所以，那答案就只有一个了，缩放是相对于 ideal viewport来进行缩放的，当对ideal viewport进行100%的缩放，也就是缩放值为1的时候，不就得到了 ideal viewport吗？事实证明，的确是这样的。下图是各大移动端的浏览器当设置了 后是否能把当前的viewport宽度变成 ideal viewport 的宽度的测试结果。\n\n[![7](https://images0.cnblogs.com/blog/130623/201407/300958597123639.png \"7\")](https://images0.cnblogs.com/blog/130623/201407/300958592749939.png)\n\n测试结果表明 initial-scale=1 也能把当前的viewport宽度变成 ideal viewport 的宽度，但这次轮到了windows phone 上的IE 无论是竖屏还是横屏都把宽度设为竖屏时ideal viewport的宽度。但这点小瑕疵已经无关紧要了。\n\n但如果width 和 initial-scale=1同时出现，并且还出现了冲突呢？比如：\n\n<meta name=\"viewport\" content=\"width=400, initial-scale=1\">\n\nwidth=400表示把当前viewport的宽度设为400px，initial-scale=1则表示把当前viewport的宽度设为ideal viewport的宽度，那么浏览器到底该服从哪个命令呢？是书写顺序在后面的那个吗？不是。当遇到这种情况时，浏览器会取它们两个中较大的那个值。例如，当width=400，ideal viewport的宽度为320时，取的是400；当width=400， ideal viewport的宽度为480时，取的是ideal viewport的宽度。（ps:在uc9浏览器中，当initial-scale=1时，无论width属性的值为多少，此时viewport的宽度永远都是ideal viewport的宽度）\n\n最后，总结一下，要把当前的viewport宽度设为ideal viewport的宽度，既可以设置 width=device-width，也可以设置 initial-scale=1，但这两者各有一个小缺陷，就是iphone、ipad以及IE 会横竖屏不分，通通以竖屏的ideal viewport宽度为准。所以，最完美的写法应该是，两者都写上去，这样就 initial-scale=1 解决了 iphone、ipad的毛病，width=device-width则解决了IE的毛病：\n\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\n**六、关于meta viewport的更多知识**\n\n**1、关于缩放以及initial-scale的默认值**\n\n    首先我们先来讨论一下缩放的问题，前面已经提到过，缩放是相对于ideal viewport来缩放的，缩放值越大，当前viewport的宽度就会越小，反之亦然。例如在iphone中，ideal viewport的宽度是320px，如果我们设置 initial-scale=2 ，此时viewport的宽度会变为只有160px了，这也好理解，放大了一倍嘛，就是原来1px的东西变成2px了，但是1px变为2px并不是把原来的320px变为640px了，而是在实际宽度不变的情况下，1px变得跟原来的2px的长度一样了，所以放大2倍后原来需要320px才能填满的宽度现在只需要160px就做到了。因此，我们可以得出一个公式：\n\nvisual viewport宽度 = ideal viewport宽度  / 当前缩放值\n\n当前缩放值 = ideal viewport宽度  / visual viewport宽度\n\n    ps: visual viewport的宽度指的是浏览器可视区域的宽度。\n\n    大多数浏览器都符合这个理论，但是安卓上的原生浏览器以及IE有些问题。安卓自带的webkit浏览器只有在 initial-scale = 1 以及没有设置width属性时才是表现正常的，也就相当于这理论在它身上基本没用；而IE则根本不甩initial-scale这个属性，无论你给他设置什么，initial-scale表现出来的效果永远是1。\n\n    好了，现在再来说下initial-scale的默认值问题，就是不写这个属性的时候，它的默认值会是多少呢？很显然不会是1，因为当 initial-scale = 1 时，当前的layout viewport宽度会被设为 ideal viewport的宽度，但前面说了，各浏览器默认的 layout viewport宽度一般都是980啊，1024啊，800啊等等这些个值，没有一开始就是 ideal viewport的宽度的，所以 initial-scale的默认值肯定不是1。安卓设备上的initial-scale默认值好像没有方法能够得到，或者就是干脆它就没有默认值，一定要你显示的写出来这个东西才会起作用，我们不管它了，这里我们重点说一下iphone和ipad上的initial-scale默认值。\n\n   根据测试，我们可以在iphone和ipad上得到一个结论，就是无论你给layout viewpor设置的宽度是多少，而又没有指定初始的缩放值的话，那么iphone和ipad会自动计算initial-scale这个值，以保证当前layout viewport的宽度在缩放后就是浏览器可视区域的宽度，也就是说不会出现横向滚动条。比如说，在iphone上，我们不设置任何的viewport meta标签，此时layout viewport的宽度为980px，但我们可以看到浏览器并没有出现横向滚动条，浏览器默认的把页面缩小了。根据上面的公式，当前缩放值 = ideal viewport宽度  / visual viewport宽度，我们可以得出：\n\n      当前缩放值 = 320 / 980\n\n也就是当前的initial-scale默认值应该是 0.33这样子。当你指定了initial-scale的值后，这个默认值就不起作用了。\n\n总之记住这个结论就行了：**在iphone和ipad上，无论你给viewport设的宽的是多少，如果没有指定默认的缩放值，则iphone和ipad会自动计算这个缩放值，以达到当前页面不会出现横向滚动条(或者说viewport的宽度就是屏幕的宽度)的目的。**\n\n[![11](https://images0.cnblogs.com/blog/130623/201407/300959005874738.png \"11\")](https://images0.cnblogs.com/blog/130623/201407/300959001492039.png)    [![12](https://images0.cnblogs.com/blog/130623/201407/300959024307908.png \"12\")](https://images0.cnblogs.com/blog/130623/201407/300959019771981.png)     [![13](https://images0.cnblogs.com/blog/130623/201407/300959031187064.png \"13\")](https://images0.cnblogs.com/blog/130623/201407/300959028057093.png)\n\n**2、动态改变meta viewport标签**\n\n第一种方法\n\n可以使用document.write来动态输出meta viewport标签，例如：\n\ndocument.write(\'<meta name=\"viewport\" content=\"width=device-width,initial-scale=1\">\')\n\n第二种方法\n\n通过setAttribute来改变 \n\n<meta id=\"testViewport\" name=\"viewport\" content=\"width = 380\">\n<script>\nvar mvp = document.getElementById(\'testViewport\');\nmvp.setAttribute(\'content\',\'width=480\'); script>\n\n安卓2.3自带浏览器上的一个bug\n\n<meta name=\"viewport\" content=\"width=device-width\">\n\n<script type=\"text/javascript\"> alert(document.documentElement.clientWidth); //弹出600，正常情况应该弹出320\nscript>\n\n<meta name=\"viewport\" content=\"width=600\">\n\n<script type=\"text/javascript\"> alert(document.documentElement.clientWidth); //弹出320，正常情况应该弹出600\nscript>\n\n测试的手机ideal viewport 宽度为320px，第一次弹出的值是600,但这个值应该是第行meta标签的结果啊，然后第二次弹出的值是320，这才是第一行meta标签所达到的效果啊，所以在安卓2.3(或许是所有2.x版本中)的自带浏览器中，对meta viewport标签进行覆盖或更改，会出现让人非常迷糊的结果。\n\n**七、结语**\n\n说了那么多废话，最后还是有必要总结一点有用的出来。\n\n首先如果不设置meta viewport标签，那么移动设备上浏览器默认的宽度值为800px，980px，1024px等这些，总之是大于屏幕宽度的。这里的宽度所用的单位px都是指css中的px，它跟代表实际屏幕物理像素的px不是一回事。\n\n第二、每个移动设备浏览器中都有一个理想的宽度，这个理想的宽度是指css中的宽度，跟设备的物理宽度没有关系，在css中，这个宽度就相当于100%的所代表的那个宽度。我们可以用meta标签把viewport的宽度设为那个理想的宽度，如果不知道这个设备的理想宽度是多少，那么用device-width这个特殊值就行了，同时initial-scale=1也有把viewport的宽度设为理想宽度的作用。所以，我们可以使用\n\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\n来得到一个理想的viewport（也就是前面说的ideal viewport）。\n\n为什么需要有理想的viewport呢？比如一个分辨率为320x480的手机理想viewport的宽度是320px，而另一个屏幕尺寸相同但分辨率为640x960的手机的理想viewport宽度也是为320px，那为什么分辨率大的这个手机的理想宽度要跟分辨率小的那个手机的理想宽度一样呢？这是因为，只有这样才能保证同样的网站在不同分辨率的设备上看起来都是一样或差不多的。实际上，现在市面上虽然有那么多不同种类不同品牌不同分辨率的手机，但它们的理想viewport宽度归纳起来无非也就 320、360、384、400等几种，都是非常接近的，理想宽度的相近也就意味着我们针对某个设备的理想viewport而做出的网站，在其他设备上的表现也不会相差非常多甚至是表现一样的。', 0, 1, 0);
INSERT INTO `post` (`id`, `createAt`, `updateAt`, `title`, `description`, `thumb`, `url`, `html`, `markdown`, `views`, `status`, `push`) VALUES
(31, '2018-04-23 11:01:42.764298', '2018-04-23 11:01:42.764298', '【第1230期】从头实现一个koa框架', '前言周五了，明天第四届CSS大会就要开始了，你来厦门了吗？今日早读文章由百度@马龄阳投稿分享。正文从这开始～koajs是最流行的nodejs后端框架之一，有很多网站都使用koa进行开发，同时社区也涌现出了一大批基于koa封装的企业级框架。然而，在这些亮眼的成绩背后，作为核心引擎的koa代码库本身，却非常的精简，不得不让人惊叹于其巧妙的设计。在平时的工作开发中，笔者是koa的重度用户，因此对其背后的原理自然也是非常感兴趣，因此在闲暇之余进行了研究。不过本篇文章，并不是源码分析，而是从相反的角度，向大家展示如', 'https://mmbiz.qpic.cn/mmbiz_png/meG6Vo0MeviaHWUJ5nUd4ia4S9AgohWibckP8Tib68yQKIJylHGCsODKRcLys6Ficxj9UUyt8HYwqGrjz2gicnYmhmEg/640?wx_fmt=png', 'https://mp.weixin.qq.com/s/Xjpc2MtG0upuMk3Pje6Jmg', '<p style=\"box-sizing: border-box;margin: 0px 0px 1.125em;color: rgb(51, 51, 51);\">前言</p><p style=\"box-sizing: border-box;margin: 0px 0px 1.125em;color: rgb(51, 51, 51);\">周五了，明天第四届CSS大会就要开始了，你来厦门了吗？今日早读文章由百度@马龄阳投稿分享。</p><p style=\"box-sizing: border-box;margin: 0px 0px 1.125em;color: rgb(51, 51, 51);\">正文从这开始～</p><p style=\"box-sizing: border-box;margin: 0px 0px 1.125em;color: rgb(51, 51, 51);\">koajs是最流行的nodejs后端框架之一，有很多网站都使用koa进行开发，同时社区也涌现出了一大批基于koa封装的企业级框架。然而，在这些亮眼的成绩背后，作为核心引擎的koa代码库本身，却非常的精简，不得不让人惊叹于其巧妙的设计。</p><p style=\"box-sizing: border-box;margin: 0px 0px 1.125em;color: rgb(51, 51, 51);\">在平时的工作开发中，笔者是koa的重度用户，因此对其背后的原理自然也是非常感兴趣，因此在闲暇之余进行了研究。不过本篇文章，并不是源码分析，而是从相反的角度，向大家展示如何从头开发实现一个koa框架，在这个过程中，koa中最重要的几个概念和原理都会得到展现。相信大家在看完本文之后，会对koa有一个更深入的理解，同时在阅读本文之后再去阅读koa源码，思路也将非常的顺畅。</p><p style=\"box-sizing: border-box;margin: 0px 0px 1.125em;color: rgb(51, 51, 51);\">需要说明的是，本文实现的koa是koa 2版本，也就是基于async/await的，因此需要node版本在7.6以上。如果读者的node版本较低，建议升级，或者安装babel-cli，利用其中的babel-node来运行例子。</p><h4 style=\"box-sizing: border-box;margin-top: 1em;margin-bottom: 16px;line-height: 1.4;font-size: 1.15em;font-weight: bold;color: rgb(51, 51, 51);\">四条主线</h4><p style=\"box-sizing: border-box;margin: 0px 0px 1.125em;color: rgb(51, 51, 51);\">笔者认为，理解koa，主要需要搞懂四条主线，其实也是实现koa的四个步骤，分别是</p><ol style=\"margin-left: 0px;margin-right: 0px;\" class=\" list-paddingleft-2\"><li><p>封装node http Server</p></li><li><p>构造resquest, response, context对象</p></li><li><p>中间件机制</p></li><li><p style=\"box-sizing: border-box;margin: 0px 0px 1.125em;color: rgb(51, 51, 51);\">错误处理</p></li></ol><p style=\"box-sizing: border-box;margin: 0px 0px 1.125em;color: rgb(51, 51, 51);\">下面就一一进行分析。</p><h4 style=\"box-sizing: border-box;margin-top: 1em;margin-bottom: 16px;line-height: 1.4;font-size: 1.15em;font-weight: bold;color: rgb(51, 51, 51);\">主线一：封装node http Server: 从hello world说起</h4><p style=\"box-sizing: border-box;margin: 0px 0px 1.125em;color: rgb(51, 51, 51);\">首先，不考虑框架，如果使用原生http模块来实现一个返回hello world的后端app，代码如下：</p><pre class=\"prettyprint prettyprinted\" style=\"box-sizing: border-box;overflow: auto;font-size: 13.6px;margin-top: 0px;margin-bottom: 16px;padding: 10px;line-height: 1.6;background: rgb(246, 246, 246) none repeat scroll 0% 0%;border-radius: 3px;overflow-wrap: break-word;border-color: rgb(221, 221, 221);border-style: solid;border-width: 1px;white-space: pre-wrap;color: rgb(51, 51, 51);font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: normal;letter-spacing: normal;text-align: left;text-indent: 0px;text-transform: none;word-spacing: 0px;-webkit-text-stroke-width: 0px;text-decoration-style: initial;text-decoration-color: initial;\"><code style=\"box-sizing: border-box;font-size: 13.6px;\"><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">let</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> http </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">=</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">require</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">(</span><span class=\"str\" style=\"box-sizing: border-box;color: rgb(0, 136, 0);\">\'http\'</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">);</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\"></span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">let</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> server </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">=</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> http</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">createServer</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">((</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">req</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">,</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> res</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">)</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">=></span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">{</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">    res</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">writeHead</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">(</span><span class=\"lit\" style=\"box-sizing: border-box;color: rgb(0, 102, 102);\">200</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">);</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">    res</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">.</span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">end</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">(</span><span class=\"str\" style=\"box-sizing: border-box;color: rgb(0, 136, 0);\">\'hello world\'</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">);</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\"></span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">});</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">server</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">listen</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">(</span><span class=\"lit\" style=\"box-sizing: border-box;color: rgb(0, 102, 102);\">3000</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">,</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">()</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">=></span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">{</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">    console</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">log</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">(</span><span class=\"str\" style=\"box-sizing: border-box;color: rgb(0, 136, 0);\">\'listenning on 3000\'</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">);</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\"></span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">});</span></code></pre><p style=\"box-sizing: border-box;margin: 0px 0px 1.125em;color: rgb(51, 51, 51);\">实现koa的第一步，就是对这个原生的过程进行封装，为此，我们首先创建application.js实现一个Application对象：</p><pre class=\"prettyprint prettyprinted\" style=\"box-sizing: border-box;overflow: auto;font-size: 13.6px;margin-top: 0px;margin-bottom: 16px;padding: 10px;line-height: 1.6;background: rgb(246, 246, 246) none repeat scroll 0% 0%;border-radius: 3px;overflow-wrap: break-word;border-color: rgb(221, 221, 221);border-style: solid;border-width: 1px;white-space: pre-wrap;color: rgb(51, 51, 51);font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: normal;letter-spacing: normal;text-align: left;text-indent: 0px;text-transform: none;word-spacing: 0px;-webkit-text-stroke-width: 0px;text-decoration-style: initial;text-decoration-color: initial;\"><code style=\"box-sizing: border-box;font-size: 13.6px;\"><span class=\"com\" style=\"box-sizing: border-box;color: rgb(136, 0, 0);\">// application.js</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\"></span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">let</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> http </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">=</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">require</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">(</span><span class=\"str\" style=\"box-sizing: border-box;color: rgb(0, 136, 0);\">\'http\'</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">);</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\"></span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">class</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"typ\" style=\"box-sizing: border-box;color: rgb(102, 0, 102);\">Application</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">{</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">\n    </span><span class=\"com\" style=\"box-sizing: border-box;color: rgb(136, 0, 0);\">/**<br style=\"box-sizing: border-box;\">     * 构造函数\n     */</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">    constructor</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">()</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">{</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">        </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">this</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">callbackFunc</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">;</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">    </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">}</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">\n    </span><span class=\"com\" style=\"box-sizing: border-box;color: rgb(136, 0, 0);\">/**<br style=\"box-sizing: border-box;\">     * 开启http server并传入callback\n     */</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">    listen</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">(...</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">args</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">)</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">{</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">        </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">let</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> server </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">=</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> http</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">createServer</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">(</span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">this</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">callback</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">());</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">        server</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">listen</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">(...</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">args</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">);</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">    </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">}</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">\n    </span><span class=\"com\" style=\"box-sizing: border-box;color: rgb(136, 0, 0);\">/**<br style=\"box-sizing: border-box;\">     * 挂载回调函数\n     * @param {Function} fn 回调处理函数\n     */</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">    </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">use</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">(</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">fn</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">)</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">{</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">        </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">this</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">callbackFunc </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">=</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> fn</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">;</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">    </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">}</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">\n    </span><span class=\"com\" style=\"box-sizing: border-box;color: rgb(136, 0, 0);\">/**<br style=\"box-sizing: border-box;\">     * 获取http server所需的callback函数\n     * @return {Function} fn\n     */</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">    callback</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">()</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">{</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">        </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">return</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">(</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">req</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">,</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> res</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">)</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">=></span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">{</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">            </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">this</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">callbackFunc</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">(</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">req</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">,</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> res</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">);</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">        </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">};</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">    </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">}</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\"></span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">}</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\"></span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">module</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">exports </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">=</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"typ\" style=\"box-sizing: border-box;color: rgb(102, 0, 102);\">Application</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">;</span></code></pre><p style=\"box-sizing: border-box;margin: 0px 0px 1.125em;color: rgb(51, 51, 51);\">然后创建example.js:</p><pre class=\"prettyprint prettyprinted\" style=\"box-sizing: border-box;overflow: auto;font-size: 13.6px;margin-top: 0px;margin-bottom: 16px;padding: 10px;line-height: 1.6;background: rgb(246, 246, 246) none repeat scroll 0% 0%;border-radius: 3px;overflow-wrap: break-word;border-color: rgb(221, 221, 221);border-style: solid;border-width: 1px;white-space: pre-wrap;color: rgb(51, 51, 51);font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: normal;letter-spacing: normal;text-align: left;text-indent: 0px;text-transform: none;word-spacing: 0px;-webkit-text-stroke-width: 0px;text-decoration-style: initial;text-decoration-color: initial;\"><code style=\"box-sizing: border-box;font-size: 13.6px;\"><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">let</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> simpleKoa </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">=</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">require</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">(</span><span class=\"str\" style=\"box-sizing: border-box;color: rgb(0, 136, 0);\">\'./application\'</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">);</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\"></span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">let</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> app </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">=</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">new</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> simpleKoa</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">();</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">app</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">.</span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">use</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">((</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">req</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">,</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> res</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">)</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">=></span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">{</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">    res</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">writeHead</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">(</span><span class=\"lit\" style=\"box-sizing: border-box;color: rgb(0, 102, 102);\">200</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">);</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">    res</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">.</span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">end</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">(</span><span class=\"str\" style=\"box-sizing: border-box;color: rgb(0, 136, 0);\">\'hello world\'</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">);</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\"></span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">});</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">app</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">listen</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">(</span><span class=\"lit\" style=\"box-sizing: border-box;color: rgb(0, 102, 102);\">3000</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">,</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">()</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">=></span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">{</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">    console</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">log</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">(</span><span class=\"str\" style=\"box-sizing: border-box;color: rgb(0, 136, 0);\">\'listening on 3000\'</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">);</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\"></span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">});</span></code></pre><p style=\"box-sizing: border-box;margin: 0px 0px 1.125em;color: rgb(51, 51, 51);\">可以看到，我们已经初步完成了对于http server的封装，主要实现了<code style=\"box-sizing: border-box;font-size: 14px;\">app.use</code>注册回调函数，<code style=\"box-sizing: border-box;font-size: 14px;\">app.listen</code>语法糖开启server并传入回调函数了，典型的koa风格。</p><p style=\"box-sizing: border-box;margin: 0px 0px 1.125em;color: rgb(51, 51, 51);\">但是美中不足的是，我们传入的回调函数，参数依然使用的是<code style=\"box-sizing: border-box;font-size: 14px;\">req</code>和<code style=\"box-sizing: border-box;font-size: 14px;\">res</code>，也就是node原生的request和response对象，这些原生对象和api提供的方法不够便捷，不符合一个框架需要提供的易用性。因此，我们需要进入第二条主线了。</p><h4 style=\"box-sizing: border-box;margin-top: 1em;margin-bottom: 16px;line-height: 1.4;font-size: 1.15em;font-weight: bold;color: rgb(51, 51, 51);\">主线二：构造request, response, context对象</h4><p style=\"box-sizing: border-box;margin: 0px 0px 1.125em;color: rgb(51, 51, 51);\">如果阅读koa文档，会发现koa有三个重要的对象，分别是request, response, context。其中request是对node原生的<code style=\"box-sizing: border-box;font-size: 14px;\">request</code>的封装，response是对node原生<code style=\"box-sizing: border-box;font-size: 14px;\">response</code>对象的封装，<code style=\"box-sizing: border-box;font-size: 14px;\">context</code>对象则是回调函数上下文对象，挂载了koa request和response对象。下面我们一一来说明。</p><p style=\"box-sizing: border-box;margin: 0px 0px 1.125em;color: rgb(51, 51, 51);\">首先要明确的是，对于koa的request和response对象，只是提供了对node原生request和response对象的一些方法的封装，明确了这一点，我们的思路是，使用js的getter和setter属性，基于node的对象req/res对象封装koa的request/response对象。</p><p style=\"box-sizing: border-box;margin: 0px 0px 1.125em;color: rgb(51, 51, 51);\">规划一下我们要封装哪些易用的方法。这里在文章中为了易懂，姑且只实现以下方法：</p><p style=\"box-sizing: border-box;margin: 0px 0px 1.125em;color: rgb(51, 51, 51);\">对于simpleKoa request对象，实现<code style=\"box-sizing: border-box;font-size: 14px;\">query</code>读取方法，能够读取到url中的参数，返回一个对象。</p><p style=\"box-sizing: border-box;margin: 0px 0px 1.125em;color: rgb(51, 51, 51);\">对于simpleKoa response对象，实现<code style=\"box-sizing: border-box;font-size: 14px;\">status</code>读写方法，分别是读取和设置http response的状态码，以及<code style=\"box-sizing: border-box;font-size: 14px;\">body</code>方法，用于构造返回信息。</p><p style=\"box-sizing: border-box;margin: 0px 0px 1.125em;color: rgb(51, 51, 51);\">而simpleKoa context对象，则挂载了request和response对象，并对一些常用方法进行了代理。</p><p style=\"box-sizing: border-box;margin: 0px 0px 1.125em;color: rgb(51, 51, 51);\">首先创建request.js:</p><pre class=\"prettyprint prettyprinted\" style=\"box-sizing: border-box;overflow: auto;font-size: 13.6px;margin-top: 0px;margin-bottom: 16px;padding: 10px;line-height: 1.6;background: rgb(246, 246, 246) none repeat scroll 0% 0%;border-radius: 3px;overflow-wrap: break-word;border-color: rgb(221, 221, 221);border-style: solid;border-width: 1px;white-space: pre-wrap;color: rgb(51, 51, 51);font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: normal;letter-spacing: normal;text-align: left;text-indent: 0px;text-transform: none;word-spacing: 0px;-webkit-text-stroke-width: 0px;text-decoration-style: initial;text-decoration-color: initial;\"><code style=\"box-sizing: border-box;font-size: 13.6px;\"><span class=\"com\" style=\"box-sizing: border-box;color: rgb(136, 0, 0);\">// request.js</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\"></span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">let</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> url </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">=</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">require</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">(</span><span class=\"str\" style=\"box-sizing: border-box;color: rgb(0, 136, 0);\">\'url\'</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">);</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\"></span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">module</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">exports </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">=</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">{</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">\n    </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">get</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> query</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">()</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">{</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">        </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">return</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> url</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">parse</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">(</span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">this</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">req</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">url</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">,</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">true</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">).</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">query</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">;</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">    </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">}</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\"></span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">};</span></code></pre><p style=\"box-sizing: border-box;margin: 0px 0px 1.125em;color: rgb(51, 51, 51);\">很简单，就是导出了一个对象，其中包含了一个query的读取方法，通过<code style=\"box-sizing: border-box;font-size: 14px;\">url.parse</code>方法解析url中的参数，并以对象的形式返回。需要注意的是，代码中的<code style=\"box-sizing: border-box;font-size: 14px;\">this.req</code>代表的是node的原生request对象，<code style=\"box-sizing: border-box;font-size: 14px;\">this.req.url</code>就是node原生request中获取url的方法。稍后我们修改application.js的时候，会为koa的request对象挂载这个req。</p><p style=\"box-sizing: border-box;margin: 0px 0px 1.125em;color: rgb(51, 51, 51);\">然后创建response.js:</p><pre class=\"prettyprint prettyprinted\" style=\"box-sizing: border-box;overflow: auto;font-size: 13.6px;margin-top: 0px;margin-bottom: 16px;padding: 10px;line-height: 1.6;background: rgb(246, 246, 246) none repeat scroll 0% 0%;border-radius: 3px;overflow-wrap: break-word;border-color: rgb(221, 221, 221);border-style: solid;border-width: 1px;white-space: pre-wrap;color: rgb(51, 51, 51);font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: normal;letter-spacing: normal;text-align: left;text-indent: 0px;text-transform: none;word-spacing: 0px;-webkit-text-stroke-width: 0px;text-decoration-style: initial;text-decoration-color: initial;\"><code style=\"box-sizing: border-box;font-size: 13.6px;\"><span class=\"com\" style=\"box-sizing: border-box;color: rgb(136, 0, 0);\">// response.js</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\"></span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">module</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">exports </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">=</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">{</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">\n    </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">get</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> body</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">()</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">{</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">        </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">return</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">this</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">_body</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">;</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">    </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">},</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">\n    </span><span class=\"com\" style=\"box-sizing: border-box;color: rgb(136, 0, 0);\">/**<br style=\"box-sizing: border-box;\">     * 设置返回给客户端的body内容\n     *\n     * @param {mixed} data body内容\n     */</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">    </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">set</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> body</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">(</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">data</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">)</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">{</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">        </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">this</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">_body </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">=</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> data</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">;</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">    </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">},</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">\n    </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">get</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> status</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">()</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">{</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">        </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">return</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">this</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">res</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">statusCode</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">;</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">    </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">},</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">\n    </span><span class=\"com\" style=\"box-sizing: border-box;color: rgb(136, 0, 0);\">/**<br style=\"box-sizing: border-box;\">     * 设置返回给客户端的stausCode\n     *\n     * @param {number} statusCode 状态码\n     */</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">    </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">set</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> status</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">(</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">statusCode</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">)</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">{</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">        </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">if</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">(</span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">typeof</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> statusCode </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">!==</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"str\" style=\"box-sizing: border-box;color: rgb(0, 136, 0);\">\'number\'</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">)</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">{</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">            </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">throw</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">new</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"typ\" style=\"box-sizing: border-box;color: rgb(102, 0, 102);\">Error</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">(</span><span class=\"str\" style=\"box-sizing: border-box;color: rgb(0, 136, 0);\">\'statusCode must be a number!\'</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">);</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">        </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">}</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">        </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">this</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">res</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">statusCode </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">=</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> statusCode</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">;</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">    </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">}</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\"></span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">};</span></code></pre><p style=\"box-sizing: border-box;margin: 0px 0px 1.125em;color: rgb(51, 51, 51);\">也很简单。<code style=\"box-sizing: border-box;font-size: 14px;\">status</code>读写方法分别设置或读取<code style=\"box-sizing: border-box;font-size: 14px;\">this.res.statusCode</code>。同样的，这个<code style=\"box-sizing: border-box;font-size: 14px;\">this.res</code>是挂载的node原生response对象。而<code style=\"box-sizing: border-box;font-size: 14px;\">body</code>读写方法分别设置、读取一个名为<code style=\"box-sizing: border-box;font-size: 14px;\">this._body</code>的属性。这里设置body的时候并没有直接调用<code style=\"box-sizing: border-box;font-size: 14px;\">this.res.end</code>来返回信息，这是考虑到koa当中我们可能会多次调用response的body方法覆盖性设置数据。真正的返回消息操作会在application.js中存在。</p><p style=\"box-sizing: border-box;margin: 0px 0px 1.125em;color: rgb(51, 51, 51);\">然后我们创建context.js文件，构造context对象的原型：</p><pre class=\"prettyprint prettyprinted\" style=\"box-sizing: border-box;overflow: auto;font-size: 13.6px;margin-top: 0px;margin-bottom: 16px;padding: 10px;line-height: 1.6;background: rgb(246, 246, 246) none repeat scroll 0% 0%;border-radius: 3px;overflow-wrap: break-word;border-color: rgb(221, 221, 221);border-style: solid;border-width: 1px;white-space: pre-wrap;color: rgb(51, 51, 51);font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: normal;letter-spacing: normal;text-align: left;text-indent: 0px;text-transform: none;word-spacing: 0px;-webkit-text-stroke-width: 0px;text-decoration-style: initial;text-decoration-color: initial;\"><code style=\"box-sizing: border-box;font-size: 13.6px;\"><span class=\"com\" style=\"box-sizing: border-box;color: rgb(136, 0, 0);\">// context.js</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\"></span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">module</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">exports </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">=</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">{</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">\n    </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">get</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> query</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">()</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">{</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">        </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">return</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">this</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">request</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">query</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">;</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">    </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">},</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">\n    </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">get</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> body</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">()</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">{</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">        </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">return</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">this</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">response</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">body</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">;</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">    </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">},</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">\n    </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">set</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> body</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">(</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">data</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">)</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">{</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">        </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">this</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">response</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">body </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">=</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> data</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">;</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">    </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">},</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">\n    </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">get</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> status</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">()</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">{</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">        </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">return</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">this</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">response</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">status</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">;</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">    </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">},</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">\n    </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">set</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> status</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">(</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">statusCode</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">)</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">{</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">        </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">this</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">response</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">status </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">=</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> statusCode</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">;</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">    </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">}</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\"></span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">};</span></code></pre><p style=\"box-sizing: border-box;margin: 0px 0px 1.125em;color: rgb(51, 51, 51);\">可以看到主要是做一些常用方法的代理，通过<code style=\"box-sizing: border-box;font-size: 14px;\">context.query</code>直接代理了<code style=\"box-sizing: border-box;font-size: 14px;\">context.request.query</code>，<code style=\"box-sizing: border-box;font-size: 14px;\">context.body</code>和<code style=\"box-sizing: border-box;font-size: 14px;\">context.status</code>代理了<code style=\"box-sizing: border-box;font-size: 14px;\">context.response.body</code>与<code style=\"box-sizing: border-box;font-size: 14px;\">context.response.status</code>。而<code style=\"box-sizing: border-box;font-size: 14px;\">context.request</code>，<code style=\"box-sizing: border-box;font-size: 14px;\">context.response</code>则会在application.js中挂载。</p><p style=\"box-sizing: border-box;margin: 0px 0px 1.125em;color: rgb(51, 51, 51);\">由于context对象定义比较简单并且规范，当实现更多代理方法时候，这样一个一个通过声明的方式显然有点笨，js中，设置setter/getter，可以通过对象的<code style=\"box-sizing: border-box;font-size: 14px;\">__defineSetter__</code>和<code style=\"box-sizing: border-box;font-size: 14px;\">__defineSetter__</code>来实现。为此，我们精简了上面的context.js实现方法，精简版本如下：</p><pre class=\"prettyprint prettyprinted\" style=\"box-sizing: border-box;overflow: auto;font-size: 13.6px;margin-top: 0px;margin-bottom: 16px;padding: 10px;line-height: 1.6;background: rgb(246, 246, 246) none repeat scroll 0% 0%;border-radius: 3px;overflow-wrap: break-word;border-color: rgb(221, 221, 221);border-style: solid;border-width: 1px;white-space: pre-wrap;color: rgb(51, 51, 51);font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: normal;letter-spacing: normal;text-align: left;text-indent: 0px;text-transform: none;word-spacing: 0px;-webkit-text-stroke-width: 0px;text-decoration-style: initial;text-decoration-color: initial;\"><code style=\"box-sizing: border-box;font-size: 13.6px;\"><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">let</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> proto </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">=</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">{};</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\"></span><span class=\"com\" style=\"box-sizing: border-box;color: rgb(136, 0, 0);\">// 为proto名为property的属性设置setter</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\"></span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">function</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> delegateSet</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">(</span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">property</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">,</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> name</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">)</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">{</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">    proto</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">__defineSetter__</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">(</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">name</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">,</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">function</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">(</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">val</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">)</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">{</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">        </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">this</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">[</span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">property</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">][</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">name</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">]</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">=</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> val</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">;</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">    </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">});</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\"></span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">}</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\"></span><span class=\"com\" style=\"box-sizing: border-box;color: rgb(136, 0, 0);\">// 为proto名为property的属性设置getter</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\"></span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">function</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> delegateGet</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">(</span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">property</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">,</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> name</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">)</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">{</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">    proto</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">__defineGetter__</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">(</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">name</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">,</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">function</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">()</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">{</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"><br style=\"box-sizing: border-box;\">        </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">return</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\"> </span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">this</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">[</span><span class=\"kwd\" style=\"box-sizing: border-box;color: rgb(0, 0, 136);\">property</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">][</span><span class=\"pln\" style=\"box-sizing: border-box;color: rgb(0, 0, 0);\">name</span><span class=\"pun\" style=\"box-sizing: border-box;color: rgb(102, 102, 0);\">];</span><span class=\"pln\" style=\"box-sizing: border-b', '前言\n\n周五了，明天第四届CSS大会就要开始了，你来厦门了吗？今日早读文章由百度@马龄阳投稿分享。\n\n正文从这开始～\n\nkoajs是最流行的nodejs后端框架之一，有很多网站都使用koa进行开发，同时社区也涌现出了一大批基于koa封装的企业级框架。然而，在这些亮眼的成绩背后，作为核心引擎的koa代码库本身，却非常的精简，不得不让人惊叹于其巧妙的设计。\n\n在平时的工作开发中，笔者是koa的重度用户，因此对其背后的原理自然也是非常感兴趣，因此在闲暇之余进行了研究。不过本篇文章，并不是源码分析，而是从相反的角度，向大家展示如何从头开发实现一个koa框架，在这个过程中，koa中最重要的几个概念和原理都会得到展现。相信大家在看完本文之后，会对koa有一个更深入的理解，同时在阅读本文之后再去阅读koa源码，思路也将非常的顺畅。\n\n需要说明的是，本文实现的koa是koa 2版本，也就是基于async/await的，因此需要node版本在7.6以上。如果读者的node版本较低，建议升级，或者安装babel-cli，利用其中的babel-node来运行例子。\n\n#### 四条主线\n\n笔者认为，理解koa，主要需要搞懂四条主线，其实也是实现koa的四个步骤，分别是\n\n1.  封装node http Server\n    \n2.  构造resquest, response, context对象\n    \n3.  中间件机制\n    \n4.  错误处理\n    \n\n下面就一一进行分析。\n\n#### 主线一：封装node http Server: 从hello world说起\n\n首先，不考虑框架，如果使用原生http模块来实现一个返回hello world的后端app，代码如下：\n\n    let http = require(\'http\');let server = http.createServer((req, res) => {    res.writeHead(200);    res.end(\'hello world\');});server.listen(3000, () => {    console.log(\'listenning on 3000\');});\n\n实现koa的第一步，就是对这个原生的过程进行封装，为此，我们首先创建application.js实现一个Application对象：\n\n    // application.jslet http = require(\'http\');class Application {\n        /**     * 构造函数\n         */    constructor() {        this.callbackFunc;    }\n        /**     * 开启http server并传入callback\n         */    listen(...args) {        let server = http.createServer(this.callback());        server.listen(...args);    }\n        /**     * 挂载回调函数\n         * @param {Function} fn 回调处理函数\n         */    use(fn) {        this.callbackFunc = fn;    }\n        /**     * 获取http server所需的callback函数\n         * @return {Function} fn\n         */    callback() {        return (req, res) => {            this.callbackFunc(req, res);        };    }}module.exports = Application;\n\n然后创建example.js:\n\n    let simpleKoa = require(\'./application\');let app = new simpleKoa();app.use((req, res) => {    res.writeHead(200);    res.end(\'hello world\');});app.listen(3000, () => {    console.log(\'listening on 3000\');});\n\n可以看到，我们已经初步完成了对于http server的封装，主要实现了`app.use`注册回调函数，`app.listen`语法糖开启server并传入回调函数了，典型的koa风格。\n\n但是美中不足的是，我们传入的回调函数，参数依然使用的是`req`和`res`，也就是node原生的request和response对象，这些原生对象和api提供的方法不够便捷，不符合一个框架需要提供的易用性。因此，我们需要进入第二条主线了。\n\n#### 主线二：构造request, response, context对象\n\n如果阅读koa文档，会发现koa有三个重要的对象，分别是request, response, context。其中request是对node原生的`request`的封装，response是对node原生`response`对象的封装，`context`对象则是回调函数上下文对象，挂载了koa request和response对象。下面我们一一来说明。\n\n首先要明确的是，对于koa的request和response对象，只是提供了对node原生request和response对象的一些方法的封装，明确了这一点，我们的思路是，使用js的getter和setter属性，基于node的对象req/res对象封装koa的request/response对象。\n\n规划一下我们要封装哪些易用的方法。这里在文章中为了易懂，姑且只实现以下方法：\n\n对于simpleKoa request对象，实现`query`读取方法，能够读取到url中的参数，返回一个对象。\n\n对于simpleKoa response对象，实现`status`读写方法，分别是读取和设置http response的状态码，以及`body`方法，用于构造返回信息。\n\n而simpleKoa context对象，则挂载了request和response对象，并对一些常用方法进行了代理。\n\n首先创建request.js:\n\n    // request.jslet url = require(\'url\');module.exports = {\n        get query() {        return url.parse(this.req.url, true).query;    }};\n\n很简单，就是导出了一个对象，其中包含了一个query的读取方法，通过`url.parse`方法解析url中的参数，并以对象的形式返回。需要注意的是，代码中的`this.req`代表的是node的原生request对象，`this.req.url`就是node原生request中获取url的方法。稍后我们修改application.js的时候，会为koa的request对象挂载这个req。\n\n然后创建response.js:\n\n    // response.jsmodule.exports = {\n        get body() {        return this._body;    },\n        /**     * 设置返回给客户端的body内容\n         *\n         * @param {mixed} data body内容\n         */    set body(data) {        this._body = data;    },\n        get status() {        return this.res.statusCode;    },\n        /**     * 设置返回给客户端的stausCode\n         *\n         * @param {number} statusCode 状态码\n         */    set status(statusCode) {        if (typeof statusCode !== \'number\') {            throw new Error(\'statusCode must be a number!\');        }        this.res.statusCode = statusCode;    }};\n\n也很简单。`status`读写方法分别设置或读取`this.res.statusCode`。同样的，这个`this.res`是挂载的node原生response对象。而`body`读写方法分别设置、读取一个名为`this._body`的属性。这里设置body的时候并没有直接调用`this.res.end`来返回信息，这是考虑到koa当中我们可能会多次调用response的body方法覆盖性设置数据。真正的返回消息操作会在application.js中存在。\n\n然后我们创建context.js文件，构造context对象的原型：\n\n    // context.jsmodule.exports = {\n        get query() {        return this.request.query;    },\n        get body() {        return this.response.body;    },\n        set body(data) {        this.response.body = data;    },\n        get status() {        return this.response.status;    },\n        set status(statusCode) {        this.response.status = statusCode;    }};\n\n可以看到主要是做一些常用方法的代理，通过`context.query`直接代理了`context.request.query`，`context.body`和`context.status`代理了`context.response.body`与`context.response.status`。而`context.request`，`context.response`则会在application.js中挂载。\n\n由于context对象定义比较简单并且规范，当实现更多代理方法时候，这样一个一个通过声明的方式显然有点笨，js中，设置setter/getter，可以通过对象的`__defineSetter__`和`__defineSetter__`来实现。为此，我们精简了上面的context.js实现方法，精简版本如下：\n\n    let proto = {};// 为proto名为property的属性设置setterfunction delegateSet(property, name) {    proto.__defineSetter__(name, function (val) {        this[property][name] = val;    });}// 为proto名为property的属性设置getterfunction delegateGet(property, name) {    proto.__defineGetter__(name, function () {        return this[property][name];    });}// 定义request中要代理的setter和getterlet requestSet = [];let requestGet = [\'query\'];// 定义response中要代理的setter和getterlet responseSet = [\'body\', \'status\'];let responseGet = responseSet;requestSet.forEach(ele => {    delegateSet(\'request\', ele);});requestGet.forEach(ele => {    delegateGet(\'request\', ele);});responseSet.forEach(ele => {    delegateSet(\'response\', ele);});responseGet.forEach(ele => {    delegateGet(\'response\', ele);});module.exports = proto;\n\n这样，当我们希望代理更多request和response方法的时候，可以直接向requestGet/requestSet/responseGet/responseSet数组中添加method的名称即可（前提是在request和response中实现了）。\n\n最后让我们来修改application.js，基于刚才的3个对象原型来创建request, response, context对象：\n\n    // application.jslet http = require(\'http\');let context = require(\'./context\');let request = require(\'./request\');let response = require(\'./response\');class Application {/** * 构造函数\n     */constructor() {    this.callbackFunc;    this.context = context;    this.request = request;    this.response = response;}/** * 开启http server并传入callback\n     */listen(...args) {    let server = http.createServer(this.callback());    server.listen(...args);}/** * 挂载回调函数\n     * @param {Function} fn 回调处理函数\n     */use(fn) {    this.callbackFunc = fn;}/** * 获取http server所需的callback函数\n     * @return {Function} fn\n     */callback() {    return (req, res) => {        let ctx = this.createContext(req, res);        let respond = () => this.responseBody(ctx);        this.callbackFunc(ctx).then(respond);    };}/** * 构造ctx\n     * @param {Object} req node req实例\n     * @param {Object} res node res实例\n     * @return {Object} ctx实例\n     */createContext(req, res) {    // 针对每个请求，都要创建ctx对象    let ctx = Object.create(this.context);    ctx.request = Object.create(this.request);    ctx.response = Object.create(this.response);    ctx.req = ctx.request.req = req;    ctx.res = ctx.response.res = res;    return ctx;}/** * 对客户端消息进行回复\n     * @param {Object} ctx ctx实例\n     */responseBody(ctx) {    let content = ctx.body;    if (typeof content === \'string\') {        ctx.res.end(content);    }    else if (typeof content === \'object\') {        ctx.res.end(JSON.stringify(content));    }}}\n\n可以看到，最主要的是增加了createContext方法，基于我们之前创建的`context`为原型，使用`Object.create(this.context)`方法创建了`ctx`，并同样通过`Object.create(this.request)`和`Object.create(this.response)`创建了request/response对象并挂在到了`ctx`对象上面。此外，还将原生node的req/res对象挂载到了`ctx.request.req/ctx.req`和`ctx.response.res/ctx.res`对象上。\n\n回过头去看我们之前的`context/request/response.js`文件，就能知道当时使用的`this.res`或者`this.response`之类的是从哪里来的了，原来是在这个createContext方法中挂载到了对应的实例上。一张图来说明其中的关系：\n\n构建了运行时上下文`ctx`之后，我们的`app.use`回调函数参数就都基于`ctx`了。\n\n下面一张图描述了ctx对象的结构和继承关系：\n\n最后回忆我们的`ctx.body`方法，并没有直接返回消息体，而是将消息存储在了一个变量属性中。为了每次回调函数处理结束之后返回消息，我们创建了`responseBody`方法，主要作用就是通过`ctx.body`读取存储的消息，然后调用`ctx.res.end`返回消息并关闭连接。从方法中知道，我们的body消息体可以是字符串，也可以是对象（会序列化为字符串返回）。注意这个方法的调用是在回调函数结束之后调用的，而我们的回调函数是一个async函数，其执行结束后会返回一个Promise对象，因此我们只需要在其后通过`.then`方法调用我们的responseBody即可，这就是`this.callbackFunc(ctx).then(respond)`的意义。\n\n然后我们来测试一下目前为止的框架。修改example.js如下：\n\n    let simpleKoa = require(\'./application\');let app = new simpleKoa();app.use(async ctx => {    ctx.body = \'hello \' + ctx.query.name;});app.listen(3000, () => {    console.log(\'listening on 3000\');});\n\n可以看到这个时候我们通过`app.use`传入的已经不再是原生的`function (req, res)`回调函数，而是koa2中的async函数，接收ctx作为参数。为了测试，在浏览器访问`localhost:3000?name=tom`，可以看到返回了’hello tom’，符合预期。\n\n这里再插入分析一个知识概念。从刚才的实现中，我们知道了`this.context`是我们的中间件中上下文`ctx`对象的原型。因此在实际开发中，我们可以将一些常用的方法挂载到`this.context`上面，这样，在中间件`ctx`中，我们也可以方便的使用这些方法了，这个概念就叫做ctx的扩展，一个例子是阿里的egg.js框架已经把这个扩展机制作为一部分，融入到了框架开发中。\n\n下面就展示一个例子，我们写一个`echoData`的方法作为扩展，传入errno, data, errmsg，能够给客户端返回结构化的消息结果：\n\n    let SimpleKoa = require(\'./application\');let app = new SimpleKoa();// 对ctx进行扩展app.context.echoData = function (errno = 0, data = null, errmsg = \'\') {    this.res.setHeader(\'Content-Type\', \'application/json;charset=utf-8\');    this.body = {        errno: errno,        data: data,        errmsg: errmsg    };};app.use(async ctx => {    let data = {        name: \'tom\',        age: 16,        sex: \'male\'    }    // 这里使用扩展，方便的返回utf-8格式编码，带有errno和errmsg的消息体    ctx.echoData(0, data, \'success\');});app.listen(3000, () => {    console.log(\'listenning on 3000\');});\n\n#### 主线三：中间件机制\n\n到目前为止，我们成功封装了http server，并构造了context, request, response对象。但最重要的一条主线却还没有实现，那就是koa的中间件机制。\n\n关于koa的中间件洋葱执行模型，koa 1中使用的是generator + co.js执行的方式，koa 2中则使用了async/await。关于koa 1中的中间件原理，我曾写过一篇文章进行解释，请移步：深入探析koa之中间件流程控制篇\n\n这里我们实现的是基于koa 2的，因此再描述一下原理。为了便于理解，假设我们有3个async函数:\n\n    async function m1(next) {    console.log(\'m1\');    await next();}async function m2(next) {    console.log(\'m2\');    await next();}async function m3() {    console.log(\'m3\');}\n\n我们希望能够构造出一个函数，实现的效果是让三个函数依次执行。首先考虑想让m2执行完毕后，`await next()`去执行m3函数，那么显然，需要构造一个next函数，作用是调用m3，然后作为参数传给m2\n\n    let next1 = async function () {    await m3();}m2(next1);// 输出：m2,m3\n\n进一步，考虑从m1开始执行，那么，m1的next参数需要是一个执行m2的函数，并且给m2传入的参数是m3,下面来模拟：\n\n    let next1 = async function () {    await m3();}let next2 = async function () {    await m2(next1);}m1(next2);// 输出：m1,m2,m3\n\n那么对于n个async函数，希望他们按顺序依次执行呢？可以看到，产生nextn的过程能够抽象为一个函数：\n\n    function createNext(middleware, oldNext) {    return async function () {        await middleware(oldNext);    }}let next1 = createNext(m3, null);let next2 = createNext(m2, next1);let next3 = createNext(m1, next2);next3();// 输出m1, m2, m3\n\n进一步精简：\n\n    let middlewares = [m1, m2, m3];let len = middlewares.length;// 最后一个中间件的next设置为一个立即resolve的promise函数let next = async function () {    return Promise.resolve();}for (let i = len - 1; i >= 0; i--) {    next = createNext(middlewares[i], next);}next();// 输出m1, m2, m3\n\n至此，我们也有了koa中间件机制实现的思路，新的application.js如下：\n\n    /** * @file simpleKoa application对象\n     */let http = require(\'http\');let context = require(\'./context\');let request = require(\'./request\');let response = require(\'.//response\');class Application {\n        /**     * 构造函数\n         */    constructor() {        this.middlewares = [];        this.context = context;        this.request = request;        this.response = response;    }\n        // ...省略中间 \n        /**     * 中间件挂载\n         * @param {Function} middleware 中间件函数\n         */    use(middleware) {        this.middlewares.push(middleware);    }\n        /**     * 中间件合并方法，将中间件数组合并为一个中间件\n         * @return {Function}\n         */    compose() {        // 将middlewares合并为一个函数，该函数接收一个ctx对象        return async ctx => {\n                function createNext(middleware, oldNext) {                return async () => {                    await middleware(ctx, oldNext);                }            }\n                let len = this.middlewares.length;            let next = async () => {                return Promise.resolve();            };            for (let i = len - 1; i >= 0; i--) {                let currentMiddleware = this.middlewares[i];                next = createNext(currentMiddleware, next);            }\n                await next();        };    }\n        /**     * 获取http server所需的callback函数\n         * @return {Function} fn\n         */    callback() {        return (req, res) => {            let ctx = this.createContext(req, res);            let respond = () => this.responseBody(ctx);            let fn = this.compose();            return fn(ctx).then(respond);        };    }\n        // ...省略后面 }module.exports = Application;\n\n可以看到，首先对`app.use`进行改造了，每次调用`app.use`，就向`this.middlewares`中push一个回调函数。然后增加了一个compose()方法，利用我们前文分析的原理，对middlewares数组中的函数进行组装，返回一个最终的函数。最后，在callback()方法中，调用compose()得到最终回调函数，并执行。\n\n改写example.js验证一下中间件机制：\n\n    let simpleKoa = require(\'./application\');let app = new simpleKoa();let responseData = {};app.use(async (ctx, next) => {    responseData.name = \'tom\';    await next();    ctx.body = responseData;});app.use(async (ctx, next) => {    responseData.age = 16;    await next();});app.use(async ctx => {    responseData.sex = \'male\';});app.listen(3000, () => {    console.log(\'listening on 3000\');});// 返回{ name: \"tom\", age: 16, sex: \"male\"}\n\n例子中一共三个中间件，分别对responseData增加了name, age, sex属性，最后返回该数据。\n\n至此，一个koa框架基本已经浮出水面了，不过我们还需要进行最后一个主线的分析：错误处理。\n\n#### 主线四：错误处理\n\n一个健壮的框架，必须保证在发生错误的时候，能够捕获错误并有降级方案返回给客户端。但显然现在我们的框架还做不到这一点，假设我们修改一下例子，我们的中间件中，有一个发生错误抛出了异常：\n\n    let simpleKoa = require(\'./application\');let app = new simpleKoa();let responseData = {};app.use(async (ctx, next) => {    responseData.name = \'tom\';    await next();    ctx.body = responseData;});app.use(async (ctx, next) => {    responseData.age = 16;    await next();});app.use(async ctx => {    responseData.sex = \'male\';    // 这里发生了错误，抛出了异常    throw new Error(\'oooops\');});app.listen(3000, () => {    console.log(\'listening on 3000\');});\n\n这个时候访问浏览器，是得不到任何响应的，这是因为异常并没有被我们的框架捕获并进行降级处理。回顾我们application.js中的中间件执行代码：\n\n    // application.js// ...    callback() {        return (req, res) => {            let ctx = this.createContext(req, res);            let respond = () => this.responseBody(ctx);            let fn = this.compose();            return fn(ctx).then(respond);        };    }// ...\n\n其中我们知道，fn是一个async函数，执行后返回一个promise，回想promise的错误处理是怎样的？没错，我们只需要定义一个onerror函数，里面进行错误发生时候的降级处理，然后在promise的catch方法中引用这个函数即可。\n\n于此同时，回顾koa框架，我们知道在错误发生的时候，app对象可以通过`app.on(\'error\', callback)`订阅错误事件，这有助于我们几种处理错误，比如打印日志之类的操作。为此，我们也要对Application对象进行改造，让其继承nodejs中的events对象，然后在onerror方法中emit错误事件。改造后的application.js如下：\n\n    /** * @file simpleKoa application对象\n     */let EventEmitter = require(\'events\');let http = require(\'http\');let context = require(\'./context\');let request = require(\'./request\');let response = require(\'./response\');class Application extends EventEmitter {\n        /**     * 构造函数\n         */    constructor() {        super();        this.middlewares = [];        this.context = context;        this.request = request;        this.response = response;    }\n        // ...\n        /**     * 获取http server所需的callback函数\n         * @return {Function} fn\n         */    callback() {        return (req, res) => {            let ctx = this.createContext(req, res);            let respond = () => this.responseBody(ctx);            let onerror = (err) => this.onerror(err, ctx);            let fn = this.compose();            // 在这里catch异常，调用onerror方法处理异常            return fn(ctx).then(respond).catch(onerror);        };    }\n        // ... \n        /**     * 错误处理\n         * @param {Object} err Error对象\n         * @param {Object} ctx ctx实例\n         */    onerror(err, ctx) {        if (err.code === \'ENOENT\') {            ctx.status = 404;        }        else {            ctx.status = 500;        }        let msg = err.message || \'Internal error\';        ctx.res.end(msg);        // 触发error事件        this.emit(\'error\', err);    }}module.exports = Application;\n\n可以看到，onerror方法的对异常的处理主要是获取异常状态码，当err.code为’ENOENT’的时候，返回的消息头设置为404，否则默认设置为500，然后消息体设置为err.message，如果异常中message属性为空，则默认消息体设置为’Internal error’。此后调用`ctx.res.end`返回消息，这样就能保证即使异常情况下，客户端也能收到返回值。最后通过`this.emit`出发error事件。\n\n然后我们写一个example来验证错误处理：\n\n    let simpleKoa = require(\'./application\');let app = new simpleKoa();app.use(async ctx => {    throw new Error(\'ooops\');});app.on(\'error\', (err) => {    console.log(err.stack);});app.listen(3000, () => {    console.log(\'listening on 3000\');});\n\n浏览器访问’localhost:3000’的时候，得到返回’ooops’，同时http状态码为500 。同时app.on(‘error’)订阅到了异常事件，在回调函数中打印出了错误栈信息。\n\n关于错误处理，这里多说一点。虽然koa中内置了错误处理机制，但是实际业务开发中，我们往往希望能够自定义错误处理方式，这个时候，比较好的办法是在最开头增加一个错误捕获中间件，然后根据错误进行定制化的处理，比如：\n\n    // 错误处理中间件app.use(async (ctx, next) => {    try {        await next();    }    catch (err) {        // 在这里进行定制化的错误处理    }});// ...其他中间件\n\n至此，我们就完整实现了一个轻量版的koa框架。\n\n#### 结语\n\n完整的simpleKoa代码库地址为：https://github.com/mly-zju/simpleKoa，里面还附带了一些example。\n\n理解了这个轻量版koa的实现原理，读者还可以去看看koa的源码，会发现机制和我们实现的框架是非常类似的，无非是多了一些细节，比如说，完整koa的context/request/response方法上面挂载了更多好用的method，或者很多方法中容错处理更好等等。具体在本文中就不展开讲了，留给感兴趣的读者去探索吧~。\n\n最后，为你推荐\n\n[【第933期】JavaScript：少一点条件语句](http://mp.weixin.qq.com/s?__biz=MjM5MTA1MjAxMQ==&mid=2651226473&idx=1&sn=a76a079b76752d595c1e27c58f980d94&chksm=bd4958ed8a3ed1fbf19b617d1d8f72e2ea38e6eac254fa3e8513b88e6d639d42731586074097&scene=21#wechat_redirect)\n\n[【第897期】用Flow编写更好的JavaScript代码](http://mp.weixin.qq.com/s?__biz=MjM5MTA1MjAxMQ==&mid=2651226319&idx=1&sn=122a077dfc7ab2d0313718e00b7b77ab&chksm=bd49594b8a3ed05d35d804e4a516a1c2ed581dea1f218c2fd1f47457bcd965282be893117585&scene=21#wechat_redirect)  \n\n关于本文  \n作者：@马龄阳  \n原文：https://zhuanlan.zhihu.com/p/35040744', 0, 1, 0);
INSERT INTO `post` (`id`, `createAt`, `updateAt`, `title`, `description`, `thumb`, `url`, `html`, `markdown`, `views`, `status`, `push`) VALUES
(32, '2018-04-23 11:01:43.428491', '2018-04-23 11:01:43.428491', '浅显易懂之this指向', '前言对于前端开发er,往往在学习javascript的时候，会遇到一些疑惑点。这些疑惑点往往集中在以下一些方面。this指向原型闭包...不要害怕，每个人刚开始接触一样东西的时候，都会遇到一些困惑。成长的过程，无疑就是发现问题，进而解决问题，最后总结问题。今天想给大家分享下javascript中关于this指向的那些事。相信看完之后，你一定会受益匪浅。正文大多数人的认知：javascript中的this指向,在函数定义的时候，是无法确定的，只有函数执行时才能确定this到底指向谁，实际上this的最终指向', 'https://gold-cdn.xitu.io/images/logo-bold.svg', 'https://juejin.im/post/5ac43537f265da2374112f48', '<p></p><figure><img alt=\"helloworld\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2018/4/4/1628f78d67937e32?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"1240\" data-height=\"828\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\" data-id=\"heading-0\">前言</h2>\n<p>对于前端开发er,往往在学习<code>javascript</code>的时候，会遇到一些疑惑点。这些疑惑点往往集中在以下一些方面。</p>\n<ul>\n<li><code>this指向</code></li>\n<li><code>原型</code></li>\n<li><code>闭包</code></li>\n<li><code>...</code></li>\n</ul>\n<p>不要害怕，每个人刚开始接触一样东西的时候，都会遇到一些困惑。</p>\n<p>成长的过程，无疑就是发现问题，进而解决问题，最后总结问题。</p>\n<p>今天想给大家分享下<code>javascript</code>中关于<code>this</code>指向的那些事。</p>\n<p>相信看完之后，你一定会受益匪浅。</p>\n<h2 class=\"heading\" data-id=\"heading-1\">正文</h2>\n<h3 class=\"heading\" data-id=\"heading-2\">大多数人的认知：</h3>\n<blockquote>\n<p>javascript中的this指向,在函数定义的时候，是无法确定的，只有函数执行时才能确定this到底指向谁，实际上this的最终指向的是那个调用它的对象。</p>\n</blockquote>\n<p>以上这句话并没有错，但是表述的并不完整。我们接着往下看...</p>\n<pre><code class=\"hljs javascript\" lang=\"javascript\"> 例<span class=\"hljs-number\">1</span>:  \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">example</span>(<span class=\"hljs-params\"></span>)</span>{\n        <span class=\"hljs-keyword\">var</span> gun = <span class=\"hljs-string\">\"kar98k\"</span>;\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.gun); <span class=\"hljs-comment\">//undefined</span>\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>); <span class=\"hljs-comment\">//Window</span>\n     }\n     \n    example();\n    \n    我们上面说只有在函数执行的时候，才能去判断它(<span class=\"hljs-keyword\">this</span>)最终指向的调用它的对象。我们要明确一点，函数与变量的定义，都是被添加进<span class=\"hljs-built_in\">window</span>的属性的。这里我们的example函数，是等同于<span class=\"hljs-built_in\">window</span>.exapmle的。所以函数是由<span class=\"hljs-built_in\">window</span>对象调用的，所以自然指向<span class=\"hljs-built_in\">window</span>，然而在<span class=\"hljs-built_in\">window</span>的属性中，并没有gun这个变量，所以结果为<span class=\"hljs-literal\">undefined</span>。\n    \n    上面的代码等同于以下代码：\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">example</span>(<span class=\"hljs-params\"></span>)</span>{\n        <span class=\"hljs-keyword\">var</span> gun = <span class=\"hljs-string\">\"kar98k\"</span>;\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.gun); <span class=\"hljs-comment\">//undefined</span>\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>); <span class=\"hljs-comment\">//Window</span>\n     }\n    <span class=\"hljs-built_in\">window</span>.example();\n</code></pre><pre><code class=\"hljs bash\" lang=\"bash\">例2:\n    var person = {\n        name:<span class=\"hljs-string\">\"newArray\"</span>,\n        say:<span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span>(){\n            console.log(this.name);//newArray\n        }\n    }\n    person.say();\n    \n    这里的say方法是定义在对象person上面的，调用该方法的时候，也是通过person.say调用的，所以这里的this自然指向person,而person里面是有一个name属性值的，所以结果为newArray。\n</code></pre><p><strong>以上两个例子是符合上述的认知的，即this指向调用它的对象。然而上面的认知是不完整的。我们接着往下看...</strong></p>\n<pre><code class=\"hljs javascript\" lang=\"javascript\"> 例<span class=\"hljs-number\">3</span>:  \n        <span class=\"hljs-keyword\">var</span> name =<span class=\"hljs-string\">\"jack\"</span> ;\n        <span class=\"hljs-keyword\">var</span> person = {\n            <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">\"newArray\"</span>,\n            <span class=\"hljs-attr\">say</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.name);  \n        }\n    }\n    <span class=\"hljs-built_in\">window</span>.person.say();<span class=\"hljs-comment\">//newArray</span>\n    \n    从这个例子可以看出，如果按照上面认知的推论话，这里的<span class=\"hljs-keyword\">this</span>最终应该指向<span class=\"hljs-built_in\">window</span>，结果为jack才对。接着看下面这个例子\n    \n    <span class=\"hljs-keyword\">var</span> example= {\n        <span class=\"hljs-attr\">a</span>:<span class=\"hljs-number\">10</span>,\n        <span class=\"hljs-attr\">b</span>:{\n            <span class=\"hljs-attr\">a</span>:<span class=\"hljs-number\">12</span>,\n            <span class=\"hljs-attr\">fn</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.a);\n            }\n        }\n}\n    example.b.fn(); <span class=\"hljs-comment\">//12</span>\n    如果根据上面的推断的话，这里的<span class=\"hljs-keyword\">this</span>应该指向example才对，<span class=\"hljs-keyword\">this</span>.a结果应该为<span class=\"hljs-number\">10</span>才对。这样看来，可能你会觉得开头对于<span class=\"hljs-keyword\">this</span>指向的认知是错误的。其实并不是，只是不够准确而已。补充以下三条，基本就完善了。\n</code></pre><pre><code>1.如果一个函数中有this，但是它没有被上一级的对象所调用，那么this指向的就是window。\n2.如果一个函数中有this，这个函数有被上一级的对象所调用，那么this指向的就是上一级的对象。\n3.如果一个函数中有this，这个函数中被多个对象包含，尽管这个函数是被最外层的对象所调用，this指向的也只是它上一级的对象，例3可以证明。\n</code></pre>\n<p><strong>接着往下看...</strong></p>\n<pre><code class=\"hljs javascript\" lang=\"javascript\">例<span class=\"hljs-number\">4</span>:    \n    <span class=\"hljs-keyword\">var</span> example= {\n        <span class=\"hljs-attr\">a</span>:<span class=\"hljs-number\">10</span>,\n        <span class=\"hljs-attr\">b</span>:{\n            <span class=\"hljs-comment\">//a:12,</span>\n            fn:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.a);\n            }\n        }\n    }\n    example.b.fn(); <span class=\"hljs-comment\">//undefined</span>\n    这里fn函数被多个对象包含(<span class=\"hljs-built_in\">window</span>、example、b),但是最终调用它的是它的上一级对象，也就是b对象，然而b对象中对于a属性的定义是没有的，所以自然是<span class=\"hljs-literal\">undefined</span>，即使example对象中拥有该属性a=<span class=\"hljs-number\">10</span>,它也是访问不到的。\n</code></pre><p><strong>还有下面这个更加迷惑人的...</strong></p>\n<pre><code class=\"hljs javascript\" lang=\"javascript\">    例<span class=\"hljs-number\">5</span>:\n    <span class=\"hljs-keyword\">var</span> example= {\n        <span class=\"hljs-attr\">a</span>:<span class=\"hljs-number\">10</span>,\n        <span class=\"hljs-attr\">b</span>:{\n            <span class=\"hljs-attr\">a</span>:<span class=\"hljs-number\">12</span>,\n            <span class=\"hljs-attr\">fn</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.a);\n            }\n        }\n    }\n    <span class=\"hljs-keyword\">var</span> other = example.b.fn;\n    other()<span class=\"hljs-comment\">//undefined</span>\n    \n    这里我们将函数的定义赋给oher这个变量，最终函数执行时，是被<span class=\"hljs-built_in\">window</span>对象调用的，即等于<span class=\"hljs-built_in\">window</span>.other(),在<span class=\"hljs-built_in\">window</span>对象中并没有对于a的定义，所以为<span class=\"hljs-literal\">undefined</span>。\n</code></pre><p><strong>当函数内部有返回值时，即this碰到return时，又会有些许的区别,接着看...</strong></p>\n<pre><code class=\"hljs javascript\" lang=\"javascript\">    例<span class=\"hljs-number\">6</span>:\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Factory</span>(<span class=\"hljs-params\"></span>)</span>{\n       <span class=\"hljs-keyword\">this</span>.name = <span class=\"hljs-string\">\"newArray\"</span>;\n       <span class=\"hljs-keyword\">return</span> {};\n     }\n   <span class=\"hljs-keyword\">var</span> example = <span class=\"hljs-keyword\">new</span> Factory();\n   <span class=\"hljs-built_in\">console</span>.log(example.name)<span class=\"hljs-comment\">//undefined</span>\n   \n   例<span class=\"hljs-number\">7</span>:\n   \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Factory</span>(<span class=\"hljs-params\"></span>)</span>{\n       <span class=\"hljs-keyword\">this</span>.name = <span class=\"hljs-string\">\"newArray\"</span>;\n       <span class=\"hljs-keyword\">return</span> funciton(){};\n     }\n   <span class=\"hljs-keyword\">var</span> example = <span class=\"hljs-keyword\">new</span> Factory();\n   <span class=\"hljs-built_in\">console</span>.log(example.name)<span class=\"hljs-comment\">//undefined</span>\n   \n   例<span class=\"hljs-number\">8</span>:\n   \n     <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Factory</span>(<span class=\"hljs-params\"></span>)</span>{\n       <span class=\"hljs-keyword\">this</span>.name = <span class=\"hljs-string\">\"newArray\"</span>;\n       <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n     }\n   <span class=\"hljs-keyword\">var</span> example = <span class=\"hljs-keyword\">new</span> Factory();\n   <span class=\"hljs-built_in\">console</span>.log(example.name)<span class=\"hljs-comment\">//newArray</span>\n   \n   例<span class=\"hljs-number\">9</span>:\n   \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Factory</span>(<span class=\"hljs-params\"></span>)</span>{\n       <span class=\"hljs-keyword\">this</span>.name = <span class=\"hljs-string\">\"newArray\"</span>;\n       <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">undefined</span>;\n     }\n   <span class=\"hljs-keyword\">var</span> example = <span class=\"hljs-keyword\">new</span> Factory();\n   <span class=\"hljs-built_in\">console</span>.log(example.name)<span class=\"hljs-comment\">//newArray</span>\n   \n由以上四个例子我们可以看出，如果返回值是一个对象，那么<span class=\"hljs-keyword\">this</span>指向的就是那个返回的对象，如果返回值不是一个对象那么<span class=\"hljs-keyword\">this</span>还是指向函数的实例。但是又有一个特殊的，即返回<span class=\"hljs-literal\">null</span>。\n   例<span class=\"hljs-number\">10</span>:\n   \n   <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Factory</span>(<span class=\"hljs-params\"></span>)</span>{\n       <span class=\"hljs-keyword\">this</span>.name = <span class=\"hljs-string\">\"newArray\"</span>;\n       <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n     }\n   <span class=\"hljs-keyword\">var</span> example = <span class=\"hljs-keyword\">new</span> Factory();\n   <span class=\"hljs-built_in\">console</span>.log(example.name)<span class=\"hljs-comment\">//newArray</span>\n   \n虽然<span class=\"hljs-literal\">null</span>也是对象，但是在这里<span class=\"hljs-keyword\">this</span>还是指向那个函数的实例，因为<span class=\"hljs-literal\">null</span>比较特殊。\n\n</code></pre><h2 class=\"heading\" data-id=\"heading-3\">总结</h2>\n<p><code>this</code>指向，应该是在面试的时候，经常被问的一个问题。而很多小伙伴在被问到时，往往头变大了。如果你不想成为大头娃娃，那么就认真的去理解它，搞定它吧。</p>\n<hr>\n<p><em>欢迎小伙伴们提出自己的见解，并且指出文中的错误😊</em></p>\n<p><em>If this article has give you some help . why don\'t give me a star✨！</em></p>\n<p><strong>传送门:</strong><a target=\"_blank\" href=\"https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fweirui88888%2Fblog\" rel=\"nofollow noopener noreferrer\">个人博客</a></p>', '前言\n--\n\n对于前端开发er,往往在学习`javascript`的时候，会遇到一些疑惑点。这些疑惑点往往集中在以下一些方面。\n\n*   `this指向`\n*   `原型`\n*   `闭包`\n*   `...`\n\n不要害怕，每个人刚开始接触一样东西的时候，都会遇到一些困惑。\n\n成长的过程，无疑就是发现问题，进而解决问题，最后总结问题。\n\n今天想给大家分享下`javascript`中关于`this`指向的那些事。\n\n相信看完之后，你一定会受益匪浅。\n\n正文\n--\n\n### 大多数人的认知：\n\n> javascript中的this指向,在函数定义的时候，是无法确定的，只有函数执行时才能确定this到底指向谁，实际上this的最终指向的是那个调用它的对象。\n\n以上这句话并没有错，但是表述的并不完整。我们接着往下看...\n\n     例1:  \n        function example(){\n            var gun = \"kar98k\";\n            console.log(this.gun); //undefined\n            console.log(this); //Window\n         }\n         \n        example();\n        \n        我们上面说只有在函数执行的时候，才能去判断它(this)最终指向的调用它的对象。我们要明确一点，函数与变量的定义，都是被添加进window的属性的。这里我们的example函数，是等同于window.exapmle的。所以函数是由window对象调用的，所以自然指向window，然而在window的属性中，并没有gun这个变量，所以结果为undefined。\n        \n        上面的代码等同于以下代码：\n        function example(){\n            var gun = \"kar98k\";\n            console.log(this.gun); //undefined\n            console.log(this); //Window\n         }\n        window.example();\n    \n\n    例2:\n        var person = {\n            name:\"newArray\",\n            say:function(){\n                console.log(this.name);//newArray\n            }\n        }\n        person.say();\n        \n        这里的say方法是定义在对象person上面的，调用该方法的时候，也是通过person.say调用的，所以这里的this自然指向person,而person里面是有一个name属性值的，所以结果为newArray。\n    \n\n**以上两个例子是符合上述的认知的，即this指向调用它的对象。然而上面的认知是不完整的。我们接着往下看...**\n\n     例3:  \n            var name =\"jack\" ;\n            var person = {\n                name:\"newArray\",\n                say:function(){\n                    console.log(this.name);  \n            }\n        }\n        window.person.say();//newArray\n        \n        从这个例子可以看出，如果按照上面认知的推论话，这里的this最终应该指向window，结果为jack才对。接着看下面这个例子\n        \n        var example= {\n            a:10,\n            b:{\n                a:12,\n                fn:function(){\n                    console.log(this.a);\n                }\n            }\n    }\n        example.b.fn(); //12\n        如果根据上面的推断的话，这里的this应该指向example才对，this.a结果应该为10才对。这样看来，可能你会觉得开头对于this指向的认知是错误的。其实并不是，只是不够准确而已。补充以下三条，基本就完善了。\n    \n\n    1.如果一个函数中有this，但是它没有被上一级的对象所调用，那么this指向的就是window。\n    2.如果一个函数中有this，这个函数有被上一级的对象所调用，那么this指向的就是上一级的对象。\n    3.如果一个函数中有this，这个函数中被多个对象包含，尽管这个函数是被最外层的对象所调用，this指向的也只是它上一级的对象，例3可以证明。\n    \n\n**接着往下看...**\n\n    例4:    \n        var example= {\n            a:10,\n            b:{\n                //a:12,\n                fn:function(){\n                    console.log(this.a);\n                }\n            }\n        }\n        example.b.fn(); //undefined\n        这里fn函数被多个对象包含(window、example、b),但是最终调用它的是它的上一级对象，也就是b对象，然而b对象中对于a属性的定义是没有的，所以自然是undefined，即使example对象中拥有该属性a=10,它也是访问不到的。\n    \n\n**还有下面这个更加迷惑人的...**\n\n        例5:\n        var example= {\n            a:10,\n            b:{\n                a:12,\n                fn:function(){\n                    console.log(this.a);\n                }\n            }\n        }\n        var other = example.b.fn;\n        other()//undefined\n        \n        这里我们将函数的定义赋给oher这个变量，最终函数执行时，是被window对象调用的，即等于window.other(),在window对象中并没有对于a的定义，所以为undefined。\n    \n\n**当函数内部有返回值时，即this碰到return时，又会有些许的区别,接着看...**\n\n        例6:\n        \n        function Factory(){\n           this.name = \"newArray\";\n           return {};\n         }\n       var example = new Factory();\n       console.log(example.name)//undefined\n       \n       例7:\n       \n        function Factory(){\n           this.name = \"newArray\";\n           return funciton(){};\n         }\n       var example = new Factory();\n       console.log(example.name)//undefined\n       \n       例8:\n       \n         function Factory(){\n           this.name = \"newArray\";\n           return 1;\n         }\n       var example = new Factory();\n       console.log(example.name)//newArray\n       \n       例9:\n       \n        function Factory(){\n           this.name = \"newArray\";\n           return undefined;\n         }\n       var example = new Factory();\n       console.log(example.name)//newArray\n       \n    由以上四个例子我们可以看出，如果返回值是一个对象，那么this指向的就是那个返回的对象，如果返回值不是一个对象那么this还是指向函数的实例。但是又有一个特殊的，即返回null。\n       例10:\n       \n       function Factory(){\n           this.name = \"newArray\";\n           return null;\n         }\n       var example = new Factory();\n       console.log(example.name)//newArray\n       \n    虽然null也是对象，但是在这里this还是指向那个函数的实例，因为null比较特殊。\n    \n    \n\n总结\n--\n\n`this`指向，应该是在面试的时候，经常被问的一个问题。而很多小伙伴在被问到时，往往头变大了。如果你不想成为大头娃娃，那么就认真的去理解它，搞定它吧。\n\n* * *\n\n_欢迎小伙伴们提出自己的见解，并且指出文中的错误😊_\n\n_If this article has give you some help . why don\'t give me a star✨！_\n\n**传送门:**[个人博客](https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fweirui88888%2Fblog)', 0, 1, 0);
INSERT INTO `post` (`id`, `createAt`, `updateAt`, `title`, `description`, `thumb`, `url`, `html`, `markdown`, `views`, `status`, `push`) VALUES
(33, '2018-04-23 11:01:43.402765', '2018-04-23 11:01:43.402765', 'CSS布局解决方案（终结版）', '（点击上方公众号，可快速关注）作者：无悔铭https://segmentfault.com/a/1190000013565024前端布局非常重要的一环就是页面框架的搭建，也是最基础的一环。在页面框架的搭建之中，又有居中布局、多列布局以及全局布局，今天我们就来总结总结前端干货中的CSS布局。居中布局水平居中1）使用inline-block+text-align（1）原理、用法原理：先将子框由块级元素改变为行内块元素，再通过设置行内块元素居中以达到水平居中。用法：对子框设置display:inline-blo', 'https://mmbiz.qpic.cn/mmbiz_png/aVp1YC8UV0f1dD0n0wRIgrbsczKDFLEgl0AD5kIHSnGgaAKse4MWicwnFia6BWTQSpJjlFL3buZdicDoHn7DAfRicg/640?wx_fmt=png', 'https://mp.weixin.qq.com/s?__biz=MzAxODE2MjM1MA==&mid=2651553836&idx=1&sn=1f9e378e61908fd8c6c0fd81810b77fd&chksm=802557edb752defba9f1c2e462f7f09be0d1a', '<p style=\"max-width: 100%;min-height: 1em;color: rgb(62, 62, 62);font-size: 16px;white-space: normal;line-height: 25.6px;text-align: center;background-color: rgb(255, 255, 255);box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;color: rgb(255, 41, 65);font-size: 14px;line-height: 22.4px;box-sizing: border-box !important;word-wrap: break-word !important;\">（点击</span><span style=\"max-width: 100%;font-size: 14px;line-height: 22.4px;color: rgb(0, 128, 255);box-sizing: border-box !important;word-wrap: break-word !important;\">上方公众号</span><span style=\"max-width: 100%;color: rgb(255, 41, 65);font-size: 14px;line-height: 22.4px;box-sizing: border-box !important;word-wrap: break-word !important;\">，可快速关注）</span></p><p style=\"max-width: 100%;min-height: 1em;color: rgb(62, 62, 62);font-size: 16px;white-space: normal;line-height: 25.6px;text-align: center;background-color: rgb(255, 255, 255);box-sizing: border-box !important;word-wrap: break-word !important;\"><strong style=\"max-width: 100%;line-height: 1.6;box-sizing: border-box !important;word-wrap: break-word !important;\"></strong></p><blockquote style=\"max-width: 100%;color: rgb(62, 62, 62);font-size: 16px;white-space: normal;line-height: 25.6px;background-color: rgb(255, 255, 255);box-sizing: border-box !important;word-wrap: break-word !important;\"><p style=\"max-width: 100%;min-height: 1em;line-height: 25.6px;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 14px;box-sizing: border-box !important;word-wrap: break-word !important;\">作者：无悔铭<span class=\"rich_media_meta rich_media_meta_text\" style=\"margin-right: 8px;margin-bottom: 10px;display: inline-block;vertical-align: middle;font-size: 16px;color: rgb(140, 140, 140);max-width: none;background-color: rgb(255, 255, 255);\"></span></span></p><p style=\"max-width: 100%;min-height: 1em;line-height: 25.6px;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 14px;line-height: 25.6px;box-sizing: border-box !important;word-wrap: break-word !important;\">https://segmentfault.com/a/1190000013565024</span></p></blockquote><p><br></p><p style=\"margin-bottom: 15px;max-width: 100%;box-sizing: border-box;min-height: 1em;font-size: 16px;background-color: rgb(255, 255, 255);white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;word-wrap: break-word !important;\">前端布局非常重要的一环就是页面框架的搭建，也是最基础的一环。在页面框架的搭建之中，又有居中布局、多列布局以及全局布局，今天我们就来总结总结前端干货中的CSS布局。</p><h4 style=\"margin-top: 1.5rem;margin-bottom: 1rem;font-size: 18px;max-width: 100%;box-sizing: border-box;white-space: normal;background-color: rgb(255, 255, 255);color: rgb(21, 153, 87);line-height: 1.35;word-wrap: break-word !important;\">居中布局</h4><h5 style=\"margin-top: 1.5rem;margin-bottom: 1rem;max-width: 100%;box-sizing: border-box;white-space: normal;background-color: rgb(255, 255, 255);color: rgb(21, 153, 87);line-height: 1.35;word-wrap: break-word !important;\">水平居中</h5><p style=\"margin-top: 15px;margin-bottom: 15px;max-width: 100%;box-sizing: border-box;min-height: 1em;font-size: 16px;background-color: rgb(255, 255, 255);white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;word-wrap: break-word !important;\"><strong style=\"max-width: 100%;box-sizing: border-box;color: rgb(0, 0, 0);word-wrap: break-word !important;\">1）使用inline-block+text-align</strong></p><p style=\"margin-top: 15px;margin-bottom: 15px;max-width: 100%;box-sizing: border-box;min-height: 1em;font-size: 16px;background-color: rgb(255, 255, 255);white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;word-wrap: break-word !important;\">（1）原理、用法</p><ul class=\" list-paddingleft-2\" style=\"list-style-type: square;\"><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;box-sizing: border-box;color: rgb(74, 74, 74);line-height: 22px;word-wrap: break-word !important;font-size: 14px !important;\"><span style=\"max-width: 100%;box-sizing: border-box;line-height: 22px;word-wrap: break-word !important;\">原理：先将子框由块级元素改变为行内块元素，再通过设置行内块元素居中以达到水平居中。</span></span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;box-sizing: border-box;color: rgb(74, 74, 74);line-height: 22px;word-wrap: break-word !important;font-size: 14px !important;\"><span style=\"max-width: 100%;box-sizing: border-box;line-height: 22px;word-wrap: break-word !important;\">用法：对子框设置display:inline-block，对父框设置text-align:center。</span></span></p></li></ul><p style=\"margin-top: 15px;margin-bottom: 15px;max-width: 100%;box-sizing: border-box;min-height: 1em;font-size: 16px;background-color: rgb(255, 255, 255);white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;word-wrap: break-word !important;\">（2）代码实例</p><pre class=\"\" style=\"margin-top: 0px;margin-bottom: 0px;padding: 8px 0px 6px;max-width: 100%;box-sizing: border-box;background-color: rgb(47, 54, 64);border-radius: 0px;overflow-y: auto;color: rgb(80, 97, 109);font-size: 10px;line-height: 12px;word-wrap: break-word !important;\"><ol class=\" list-paddingleft-2\" style=\"list-style-type: none;\"><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;box-sizing: border-box;color: rgb(74, 74, 74);display: block;line-height: 22px;word-wrap: break-word !important;font-size: 14px !important;word-break: inherit !important;\"><span style=\"max-width: 100%;box-sizing: border-box;line-height: 22px;display: block;word-wrap: break-word !important;word-break: inherit !important;\"><code style=\"margin-left: -20px;max-width: 100%;box-sizing: border-box;word-wrap: normal;display: flex;overflow: initial;line-height: 12px;border-width: 0px;border-style: initial;border-color: initial;font-size: 10px;font-family: inherit !important;\"><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(237, 85, 101);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\"><div</span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\"> </span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(160, 212, 104);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">class</span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">=</span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(255, 206, 84);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">\"parent\"</span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(237, 85, 101);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">></span></code></span></span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;box-sizing: border-box;color: rgb(74, 74, 74);display: block;line-height: 22px;word-wrap: break-word !important;font-size: 14px !important;word-break: inherit !important;\"><span style=\"max-width: 100%;box-sizing: border-box;line-height: 22px;display: block;word-wrap: break-word !important;word-break: inherit !important;\"><code style=\"margin-left: -20px;max-width: 100%;box-sizing: border-box;word-wrap: normal;display: flex;overflow: initial;line-height: 12px;border-width: 0px;border-style: initial;border-color: initial;font-size: 10px;font-family: inherit !important;\"><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">    </span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(237, 85, 101);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\"><div</span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\"> </span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(160, 212, 104);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">class</span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">=</span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(255, 206, 84);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">\"child></span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">DEMO</span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(237, 85, 101);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\"></div></span></code></span></span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;box-sizing: border-box;color: rgb(74, 74, 74);display: block;line-height: 22px;word-wrap: break-word !important;font-size: 14px !important;word-break: inherit !important;\"><span style=\"max-width: 100%;box-sizing: border-box;line-height: 22px;display: block;word-wrap: break-word !important;word-break: inherit !important;\"><code style=\"margin-left: -20px;max-width: 100%;box-sizing: border-box;word-wrap: normal;display: flex;overflow: initial;line-height: 12px;border-width: 0px;border-style: initial;border-color: initial;font-size: 10px;font-family: inherit !important;\"><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(237, 85, 101);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\"></div></span></code></span></span></p></li></ol></pre><pre class=\"\" style=\"margin-top: 0px;margin-bottom: 0px;padding: 8px 0px 6px;max-width: 100%;box-sizing: border-box;background-color: rgb(47, 54, 64);border-radius: 0px;overflow-y: auto;color: rgb(80, 97, 109);font-size: 10px;line-height: 12px;word-wrap: break-word !important;\"><ol class=\" list-paddingleft-2\" style=\"list-style-type: none;\"><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;box-sizing: border-box;color: rgb(74, 74, 74);display: block;line-height: 22px;word-wrap: break-word !important;font-size: 14px !important;word-break: inherit !important;\"><span style=\"max-width: 100%;box-sizing: border-box;line-height: 22px;display: block;word-wrap: break-word !important;word-break: inherit !important;\"><code style=\"margin-left: -20px;max-width: 100%;box-sizing: border-box;word-wrap: normal;display: flex;overflow: initial;line-height: 12px;border-width: 0px;border-style: initial;border-color: initial;font-size: 10px;font-family: inherit !important;\"><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">.</span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">child</span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">{</span></code></span></span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;box-sizing: border-box;color: rgb(74, 74, 74);display: block;line-height: 22px;word-wrap: break-word !important;font-size: 14px !important;word-break: inherit !important;\"><span style=\"max-width: 100%;box-sizing: border-box;line-height: 22px;display: block;word-wrap: break-word !important;word-break: inherit !important;\"><code style=\"margin-left: -20px;max-width: 100%;box-sizing: border-box;word-wrap: normal;display: flex;overflow: initial;line-height: 12px;border-width: 0px;border-style: initial;border-color: initial;font-size: 10px;font-family: inherit !important;\"><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">    display</span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">:</span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(79, 193, 233);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">inline</span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">-</span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">block</span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">;</span></code></span></span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;box-sizing: border-box;color: rgb(74, 74, 74);display: block;line-height: 22px;word-wrap: break-word !important;font-size: 14px !important;word-break: inherit !important;\"><span style=\"max-width: 100%;box-sizing: border-box;line-height: 22px;display: block;word-wrap: break-word !important;word-break: inherit !important;\"><code style=\"margin-left: -20px;max-width: 100%;box-sizing: border-box;word-wrap: normal;display: flex;overflow: initial;line-height: 12px;border-width: 0px;border-style: initial;border-color: initial;font-size: 10px;font-family: inherit !important;\"><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">}</span></code></span></span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;box-sizing: border-box;color: rgb(74, 74, 74);display: block;line-height: 22px;word-wrap: break-word !important;font-size: 14px !important;word-break: inherit !important;\"><span style=\"max-width: 100%;box-sizing: border-box;line-height: 22px;display: block;word-wrap: break-word !important;word-break: inherit !important;\"><code style=\"margin-left: -20px;max-width: 100%;box-sizing: border-box;word-wrap: normal;display: flex;overflow: initial;line-height: 12px;border-width: 0px;border-style: initial;border-color: initial;font-size: 10px;font-family: inherit !important;\"><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">.</span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">parent</span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">{</span></code></span></span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;box-sizing: border-box;color: rgb(74, 74, 74);display: block;line-height: 22px;word-wrap: break-word !important;font-size: 14px !important;word-break: inherit !important;\"><span style=\"max-width: 100%;box-sizing: border-box;line-height: 22px;display: block;word-wrap: break-word !important;word-break: inherit !important;\"><code style=\"margin-left: -20px;max-width: 100%;box-sizing: border-box;word-wrap: normal;display: flex;overflow: initial;line-height: 12px;border-width: 0px;border-style: initial;border-color: initial;font-size: 10px;font-family: inherit !important;\"><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">    text</span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">-</span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">align</span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">:</span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">center</span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">;</span></code></span></span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;box-sizing: border-box;color: rgb(74, 74, 74);display: block;line-height: 22px;word-wrap: break-word !important;font-size: 14px !important;word-break: inherit !important;\"><span style=\"max-width: 100%;box-sizing: border-box;line-height: 22px;display: block;word-wrap: break-word !important;word-break: inherit !important;\"><code style=\"margin-left: -20px;max-width: 100%;box-sizing: border-box;word-wrap: normal;display: flex;overflow: initial;line-height: 12px;border-width: 0px;border-style: initial;border-color: initial;font-size: 10px;font-family: inherit !important;\"><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">}</span></code></span></span></p></li></ol></pre><p style=\"margin-top: 15px;margin-bottom: 15px;max-width: 100%;box-sizing: border-box;min-height: 1em;font-size: 16px;background-color: rgb(255, 255, 255);white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;word-wrap: break-word !important;\">（3）优缺点</p><ul class=\" list-paddingleft-2\" style=\"list-style-type: square;\"><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;box-sizing: border-box;color: rgb(74, 74, 74);line-height: 22px;word-wrap: break-word !important;font-size: 14px !important;\"><span style=\"max-width: 100%;box-sizing: border-box;line-height: 22px;word-wrap: break-word !important;\">优点：兼容性好，甚至可以兼容ie6、ie7</span></span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;box-sizing: border-box;color: rgb(74, 74, 74);line-height: 22px;word-wrap: break-word !important;font-size: 14px !important;\"><span style=\"max-width: 100%;box-sizing: border-box;line-height: 22px;word-wrap: break-word !important;\">缺点：child里的文字也会水平居中，可以在.child添加text-align:left;还原</span></span></p></li></ul><p style=\"margin-top: 15px;margin-bottom: 15px;max-width: 100%;box-sizing: border-box;min-height: 1em;font-size: 16px;background-color: rgb(255, 255, 255);white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;word-wrap: break-word !important;\"><strong style=\"max-width: 100%;box-sizing: border-box;color: rgb(0, 0, 0);word-wrap: break-word !important;\">2）使用table+margin</strong></p><p style=\"margin-top: 15px;margin-bottom: 15px;max-width: 100%;box-sizing: border-box;min-height: 1em;font-size: 16px;background-color: rgb(255, 255, 255);white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;word-wrap: break-word !important;\">（1）原理、用法</p><ul class=\" list-paddingleft-2\" style=\"list-style-type: square;\"><br style=\"max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;\"><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;box-sizing: border-box;color: rgb(74, 74, 74);line-height: 22px;word-wrap: break-word !important;font-size: 14px !important;\">原理：先将子框设置为块级表格来显示（类似 ），再设置子框居中以达到水平居中。</span></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\">用法：对子框设置display:table，再设置margin:0 auto。</p></li><p style=\"margin-top: 15px;margin-bottom: 15px;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);word-wrap: break-word !important;\">（2）代码实例</p><pre class=\"\" style=\"margin-top: 0px;margin-bottom: 0px;padding: 8px 0px 6px;max-width: 100%;box-sizing: border-box;background-color: rgb(47, 54, 64);border-radius: 0px;overflow-y: auto;font-size: 10px;line-height: 12px;word-wrap: break-word !important;\"><ol class=\" list-paddingleft-2\" style=\"list-style-type: none;\"><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><code style=\"margin-left: -20px;max-width: 100%;box-sizing: border-box;word-wrap: normal;display: flex;overflow: initial;line-height: 12px;border-width: 0px;border-style: initial;border-color: initial;font-family: inherit !important;\"><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(237, 85, 101);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\"><div</span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\"> </span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(160, 212, 104);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">class</span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">=</span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(255, 206, 84);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">\"parent\"</span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(237, 85, 101);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">></span></code></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><code style=\"margin-left: -20px;max-width: 100%;box-sizing: border-box;word-wrap: normal;display: flex;overflow: initial;line-height: 12px;border-width: 0px;border-style: initial;border-color: initial;font-family: inherit !important;\"><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">    </span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(237, 85, 101);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\"><div</span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\"> </span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(160, 212, 104);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">class</span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">=</span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(255, 206, 84);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">\"child></span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">DEMO</span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(237, 85, 101);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\"></div></span></code></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><code style=\"margin-left: -20px;max-width: 100%;box-sizing: border-box;word-wrap: normal;display: flex;overflow: initial;line-height: 12px;border-width: 0px;border-style: initial;border-color: initial;font-family: inherit !important;\"><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(237, 85, 101);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\"></div></span></code></p></li></ol></pre><pre class=\"\" style=\"margin-top: 0px;margin-bottom: 0px;padding: 8px 0px 6px;max-width: 100%;box-sizing: border-box;background-color: rgb(47, 54, 64);border-radius: 0px;overflow-y: auto;font-size: 10px;line-height: 12px;word-wrap: break-word !important;\"><ol class=\" list-paddingleft-2\" style=\"list-style-type: none;\"><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><code style=\"margin-left: -20px;max-width: 100%;box-sizing: border-box;word-wrap: normal;display: flex;overflow: initial;line-height: 12px;border-width: 0px;border-style: initial;border-color: initial;font-family: inherit !important;\"><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">.child {</span></code></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><code style=\"margin-left: -20px;max-width: 100%;box-sizing: border-box;word-wrap: normal;display: flex;overflow: initial;line-height: 12px;border-width: 0px;border-style: initial;border-color: initial;font-family: inherit !important;\"><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">    display:table;</span></code></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><code style=\"margin-left: -20px;max-width: 100%;box-sizing: border-box;word-wrap: normal;display: flex;overflow: initial;line-height: 12px;border-width: 0px;border-style: initial;border-color: initial;font-family: inherit !important;\"><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">    margin:</span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(172, 146, 236);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">0</span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\"> </span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(79, 193, 233);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">auto</span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">;</span></code></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><code style=\"margin-left: -20px;max-width: 100%;box-sizing: border-box;word-wrap: normal;display: flex;overflow: initial;line-height: 12px;border-width: 0px;border-style: initial;border-color: initial;font-family: inherit !important;\"><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">}</span></code></p></li></ol></pre><p style=\"margin-top: 15px;margin-bottom: 15px;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);word-wrap: break-word !important;\">（3）优缺点：</p><ul class=\" list-paddingleft-2\" style=\"\"><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\">优点：只设置了child，ie8以上都支持</p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\">缺点：不支持ie6、ie7,将div换成table</p></li></ul><p style=\"margin-top: 15px;margin-bottom: 15px;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);word-wrap: break-word !important;\"><strong style=\"max-width: 100%;box-sizing: border-box;color: rgb(0, 0, 0);word-wrap: break-word !important;\">3）使用absolute+transform</strong></p><p style=\"margin-top: 15px;margin-bottom: 15px;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);word-wrap: break-word !important;\">（1）原理、用法</p><ul class=\" list-paddingleft-2\" style=\"\"><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\">原理：将子框设置为绝对定位，移动子框，使子框左侧距离相对框左侧边框的距离为相对框宽度的一半，再通过向左移动子框的一半宽度以达到水平居中。当然，在此之前，我们需要设置父框为相对定位，使父框成为子框的相对框。</p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\">用法：对父框设置position:relative，对子框设置position:absolute，left:50%，transform:translateX(-50%)。</p></li></ul><p style=\"margin-top: 15px;margin-bottom: 15px;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);word-wrap: break-word !important;\">（2）代码实例</p><pre class=\"\" style=\"margin-top: 0px;margin-bottom: 0px;padding: 8px 0px 6px;max-width: 100%;box-sizing: border-box;background-color: rgb(47, 54, 64);border-radius: 0px;overflow-y: auto;font-size: 10px;line-height: 12px;word-wrap: break-word !important;\"><ol class=\" list-paddingleft-2\" style=\"list-style-type: none;\"><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><code style=\"margin-left: -20px;max-width: 100%;box-sizing: border-box;word-wrap: normal;display: flex;overflow: initial;line-height: 12px;border-width: 0px;border-style: initial;border-color: initial;font-family: inherit !important;\"><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(237, 85, 101);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\"><div</span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\"> </span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(160, 212, 104);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">class</span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">=</span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(255, 206, 84);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">\"parent\"</span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(237, 85, 101);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">></span></code></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><code style=\"margin-left: -20px;max-width: 100%;box-sizing: border-box;word-wrap: normal;display: flex;overflow: initial;line-height: 12px;border-width: 0px;border-style: initial;border-color: initial;font-family: inherit !important;\"><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">    </span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(237, 85, 101);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\"><div</span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\"> </span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(160, 212, 104);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">class</span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">=</span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(255, 206, 84);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">\"child></span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">DEMO</span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(237, 85, 101);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\"></div></span></code></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><code style=\"margin-left: -20px;max-width: 100%;box-sizing: border-box;word-wrap: normal;display: flex;overflow: initial;line-height: 12px;border-width: 0px;border-style: initial;border-color: initial;font-family: inherit !important;\"><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(237, 85, 101);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\"></div></span></code></p></li></ol></pre><pre class=\"\" style=\"margin-top: 0px;margin-bottom: 0px;padding: 8px 0px 6px;max-width: 100%;box-sizing: border-box;background-color: rgb(47, 54, 64);border-radius: 0px;overflow-y: auto;font-size: 10px;line-height: 12px;word-wrap: break-word !important;\"><ol class=\" list-paddingleft-2\" style=\"list-style-type: none;\"><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><code style=\"margin-left: -20px;max-width: 100%;box-sizing: border-box;word-wrap: normal;display: flex;overflow: initial;line-height: 12px;border-width: 0px;border-style: initial;border-color: initial;font-family: inherit !important;\"><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">.parent {</span></code></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><code style=\"margin-left: -20px;max-width: 100%;box-sizing: border-box;word-wrap: normal;display: flex;overflow: initial;line-height: 12px;border-width: 0px;border-style: initial;border-color: initial;font-family: inherit !important;\"><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">    position:relative;</span></code></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><code style=\"margin-left: -20px;max-width: 100%;box-sizing: border-box;word-wrap: normal;display: flex;overflow: initial;line-height: 12px;border-width: 0px;border-style: initial;border-color: initial;font-family: inherit !important;\"><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">}</span></code></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><code style=\"margin-left: -20px;max-width: 100%;box-sizing: border-box;word-wrap: normal;display: flex;overflow: initial;line-height: 12px;border-width: 0px;border-style: initial;border-color: initial;font-family: inherit !important;\"><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">.child {</span></code></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><code style=\"margin-left: -20px;max-width: 100%;box-sizing: border-box;word-wrap: normal;display: flex;overflow: initial;line-height: 12px;border-width: 0px;border-style: initial;border-color: initial;font-family: inherit !important;\"><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">    position:absolute;</span></code></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><code style=\"margin-left: -20px;max-width: 100%;box-sizing: border-box;word-wrap: normal;display: flex;overflow: initial;line-height: 12px;border-width: 0px;border-style: initial;border-color: initial;font-family: inherit !important;\"><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">    left:</span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(172, 146, 236);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">50</span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">%;</span></code></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><code style=\"margin-left: -20px;max-width: 100%;box-sizing: border-box;word-wrap: normal;display: flex;overflow: initial;line-height: 12px;border-width: 0px;border-style: initial;border-color: initial;font-family: inherit !important;\"><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">    transform:translateX(-</span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(172, 146, 236);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">50</span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">%);</span></code></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><code style=\"margin-left: -20px;max-width: 100%;box-sizing: border-box;word-wrap: normal;display: flex;overflow: initial;line-height: 12px;border-width: 0px;border-style: initial;border-color: initial;font-family: inherit !important;\"><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">}</span></code></p></li></ol></pre><p style=\"margin-top: 15px;margin-bottom: 15px;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);word-wrap: break-word !important;\">（3）优缺点</p><ul class=\" list-paddingleft-2\" style=\"\"><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\">优点：居中元素不会对其他的产生影响</p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\">缺点：transform属于css3内容，兼容性存在一定问题，高版本浏览器需要添加一些前缀</p></li></ul><p style=\"margin-top: 15px;margin-bottom: 15px;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);word-wrap: break-word !important;\"><strong style=\"max-width: 100%;box-sizing: border-box;color: rgb(0, 0, 0);word-wrap: break-word !important;\">4）使用flex+margin</strong></p><p style=\"margin-top: 15px;margin-bottom: 15px;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);word-wrap: break-word !important;\">（1）原理、用法</p><ul class=\" list-paddingleft-2\" style=\"\"><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\">原理：通过CSS3中的布局利器flex将子框转换为flex item，再设置子框居中以达到居中。</p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\">用法：先将父框设置为display:flex，再设置子框margin:0 auto。</p></li></ul><p style=\"margin-top: 15px;margin-bottom: 15px;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);word-wrap: break-word !important;\">（2）代码实例</p><pre class=\"\" style=\"margin-top: 0px;margin-bottom: 0px;padding: 8px 0px 6px;max-width: 100%;box-sizing: border-box;background-color: rgb(47, 54, 64);border-radius: 0px;overflow-y: auto;font-size: 10px;line-height: 12px;word-wrap: break-word !important;\"><ol class=\" list-paddingleft-2\" style=\"list-style-type: none;\"><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><code style=\"margin-left: -20px;max-width: 100%;box-sizing: border-box;word-wrap: normal;display: flex;overflow: initial;line-height: 12px;border-width: 0px;border-style: initial;border-color: initial;font-family: inherit !important;\"><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(237, 85, 101);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\"><div</span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\"> </span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(160, 212, 104);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">class</span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">=</span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(255, 206, 84);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">\"parent\"</span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(237, 85, 101);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">></span></code></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><code style=\"margin-left: -20px;max-width: 100%;box-sizing: border-box;word-wrap: normal;display: flex;overflow: initial;line-height: 12px;border-width: 0px;border-style: initial;border-color: initial;font-family: inherit !important;\"><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">    </span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(237, 85, 101);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\"><div</span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\"> </span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(160, 212, 104);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">class</span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">=</span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(255, 206, 84);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">\"child></span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">DEMO</span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(237, 85, 101);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\"></div></span></code></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><code style=\"margin-left: -20px;max-width: 100%;box-sizing: border-box;word-wrap: normal;display: flex;overflow: initial;line-height: 12px;border-width: 0px;border-style: initial;border-color: initial;font-family: inherit !important;\"><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(237, 85, 101);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\"></div></span></code></p></li></ol></pre><pre class=\"\" style=\"margin-top: 0px;margin-bottom: 0px;padding: 8px 0px 6px;max-width: 100%;box-sizing: border-box;background-color: rgb(47, 54, 64);border-radius: 0px;overflow-y: auto;font-size: 10px;line-height: 12px;word-wrap: break-word !important;\"><ol class=\" list-paddingleft-2\" style=\"list-style-type: none;\"><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><code style=\"margin-left: -20px;max-width: 100%;box-sizing: border-box;word-wrap: normal;display: flex;overflow: initial;line-height: 12px;border-width: 0px;border-style: initial;border-color: initial;font-family: inherit !important;\"><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">.parent {</span></code></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><code style=\"margin-left: -20px;max-width: 100%;box-sizing: border-box;word-wrap: normal;display: flex;overflow: initial;line-height: 12px;border-width: 0px;border-style: initial;border-color: initial;font-family: inherit !important;\"><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">    display:flex;</span></code></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><code style=\"margin-left: -20px;max-width: 100%;box-sizing: border-box;word-wrap: normal;display: flex;overflow: initial;line-height: 12px;border-width: 0px;border-style: initial;border-color: initial;font-family: inherit !important;\"><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">}</span></code></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><code style=\"margin-left: -20px;max-width: 100%;box-sizing: border-box;word-wrap: normal;display: flex;overflow: initial;line-height: 12px;border-width: 0px;border-style: initial;border-color: initial;font-family: inherit !important;\"><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">.child {</span></code></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><code style=\"margin-left: -20px;max-width: 100%;box-sizing: border-box;word-wrap: normal;display: flex;overflow: initial;line-height: 12px;border-width: 0px;border-style: initial;border-color: initial;font-family: inherit !important;\"><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">    margin:</span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(172, 146, 236);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">0</span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\"> </span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(79, 193, 233);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">auto</span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">;</span></code></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><code style=\"margin-left: -20px;max-width: 100%;box-sizing: border-box;word-wrap: normal;display: flex;overflow: initial;line-height: 12px;border-width: 0px;border-style: initial;border-color: initial;font-family: inherit !important;\"><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">}</span></code></p></li></ol></pre><p style=\"margin-top: 15px;margin-bottom: 15px;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);word-wrap: break-word !important;\">（3）优缺点</p><ul class=\" list-paddingleft-2\" style=\"\"><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\">缺点：低版本浏览器(ie6 ie7 ie8)不支持</p></li></ul><p style=\"margin-top: 15px;margin-bottom: 15px;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);word-wrap: break-word !important;\"><strong style=\"max-width: 100%;box-sizing: border-box;color: rgb(0, 0, 0);word-wrap: break-word !important;\">5）使用flex+justify-content</strong></p><p style=\"margin-top: 15px;margin-bottom: 15px;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);word-wrap: break-word !important;\">（1）原理、用法</p><ul class=\" list-paddingleft-2\" style=\"\"><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\">原理：通过CSS3中的布局利器flex中的justify-content属性来达到水平居中。</p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\">用法：先将父框设置为display:flex，再设置justify-content:center。</p></li></ul><p style=\"margin-top: 15px;margin-bottom: 15px;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);word-wrap: break-word !important;\">（2）代码实例</p><pre class=\"\" style=\"margin-top: 0px;margin-bottom: 0px;padding: 8px 0px 6px;max-width: 100%;box-sizing: border-box;background-color: rgb(47, 54, 64);border-radius: 0px;overflow-y: auto;font-size: 10px;line-height: 12px;word-wrap: break-word !important;\"><ol class=\" list-paddingleft-2\" style=\"list-style-type: none;\"><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><code style=\"margin-left: -20px;max-width: 100%;box-sizing: border-box;word-wrap: normal;display: flex;overflow: initial;line-height: 12px;border-width: 0px;border-style: initial;border-color: initial;font-family: inherit !important;\"><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(237, 85, 101);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\"><div</span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\"> </span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(160, 212, 104);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">class</span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">=</span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(255, 206, 84);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">\"parent\"</span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(237, 85, 101);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">></span></code></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><code style=\"margin-left: -20px;max-width: 100%;box-sizing: border-box;word-wrap: normal;display: flex;overflow: initial;line-height: 12px;border-width: 0px;border-style: initial;border-color: initial;font-family: inherit !important;\"><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">    </span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(237, 85, 101);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\"><div</span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\"> </span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(160, 212, 104);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">class</span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">=</span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(255, 206, 84);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">\"child></span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">DEMO</span><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(237, 85, 101);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\"></div></span></code></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><code style=\"margin-left: -20px;max-width: 100%;box-sizing: border-box;word-wrap: normal;display: flex;overflow: initial;line-height: 12px;border-width: 0px;border-style: initial;border-color: initial;font-family: inherit !important;\"><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(237, 85, 101);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\"></div></span></code></p></li></ol></pre><pre class=\"\" style=\"margin-top: 0px;margin-bottom: 0px;padding: 8px 0px 6px;max-width: 100%;box-sizing: border-box;background-color: rgb(47, 54, 64);border-radius: 0px;overflow-y: auto;font-size: 10px;line-height: 12px;word-wrap: break-word !important;\"><ol class=\" list-paddingleft-2\" style=\"list-style-type: none;\"><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><code style=\"margin-left: -20px;max-width: 100%;box-sizing: border-box;word-wrap: normal;display: flex;overflow: initial;line-height: 12px;border-width: 0px;border-style: initial;border-color: initial;font-family: inherit !important;\"><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">.parent {</span></code></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><code style=\"margin-left: -20px;max-width: 100%;box-sizing: border-box;word-wrap: normal;display: flex;overflow: initial;line-height: 12px;border-width: 0px;border-style: initial;border-color: initial;font-family: inherit !important;\"><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">    display:flex;</span></code></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><code style=\"margin-left: -20px;max-width: 100%;box-sizing: border-box;word-wrap: normal;display: flex;overflow: initial;line-height: 12px;border-width: 0px;border-style: initial;border-color: initial;font-family: inherit !important;\"><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">    justify-content:center;</span></code></p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\"><code style=\"margin-left: -20px;max-width: 100%;box-sizing: border-box;word-wrap: normal;display: flex;overflow: initial;line-height: 12px;border-width: 0px;border-style: initial;border-color: initial;font-family: inherit !important;\"><span class=\"\" style=\"max-width: 100%;box-sizing: border-box;color: rgb(230, 233, 237);line-height: 20px;word-wrap: break-word !important;font-size: 13px !important;white-space: inherit !important;\">}</span></code></p></li></ol></pre><p style=\"margin-top: 15px;margin-bottom: 15px;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);word-wrap: break-word !important;\">（3）优缺点</p><ul class=\" list-paddingleft-2\" style=\"\"><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\">优点：设置parent即可</p></li><li><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;\">缺点：低版本浏览器(ie6 ie7 ie8)不支持</p></li></ul><h5 style=\"margin-top: 1.5rem;margin-bottom: 1rem;max-width: 100%;box-sizing: border-box;color: rgb(21, 153, 87);line-height: 1.35;word-wrap: break-word !important;\">垂直居中</h5><p style=\"margin-top: 15px;margin-bottom: 15px;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);word-wrap: break-word !important;\"><strong style=\"max-width: 100%;box-sizing: border-box;color: rgb(0, 0, 0);word-wrap: break-word !important;\">1）使用table-cell+vertical-align</strong></p><p style=\"margin-top: 15px;margin-bottom: 15px;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);word-wrap: break-word !important;\">（1）原理、用法</p><ul class=\" list-paddingleft-2\" style=\"\"><li><p style=\"max-', '（点击上方公众号，可快速关注）\n\n> 作者：无悔铭\n> \n> https://segmentfault.com/a/1190000013565024\n\n  \n\n前端布局非常重要的一环就是页面框架的搭建，也是最基础的一环。在页面框架的搭建之中，又有居中布局、多列布局以及全局布局，今天我们就来总结总结前端干货中的CSS布局。\n\n#### 居中布局\n\n##### 水平居中\n\n**1）使用inline-block+text-align**\n\n（1）原理、用法\n\n*   原理：先将子框由块级元素改变为行内块元素，再通过设置行内块元素居中以达到水平居中。\n    \n*   用法：对子框设置display:inline-block，对父框设置text-align:center。\n    \n\n（2）代码实例\n\n1.   `class=\"parent\">`\n    \n2.   `class=\"child>DEMO`\n    \n\n1.  `.child{`\n    \n2.   `display:inline-block;`\n    \n3.  `}`\n    \n4.  `.parent{`\n    \n5.   `text-align:center;`\n    \n6.  `}`\n    \n\n（3）优缺点\n\n*   优点：兼容性好，甚至可以兼容ie6、ie7\n    \n*   缺点：child里的文字也会水平居中，可以在.child添加text-align:left;还原\n    \n\n**2）使用table+margin**\n\n（1）原理、用法\n\n  \n*   原理：先将子框设置为块级表格来显示（类似 ），再设置子框居中以达到水平居中。\n    \n*   用法：对子框设置display:table，再设置margin:0 auto。\n    \n\n（2）代码实例\n\n1.   `class=\"parent\">`\n    \n2.   `class=\"child>DEMO`\n    \n\n1.  `.child {`\n    \n2.   `display:table;`\n    \n3.   `margin:0  auto;`\n    \n4.  `}`\n    \n\n（3）优缺点：\n\n*   优点：只设置了child，ie8以上都支持\n    \n*   缺点：不支持ie6、ie7,将div换成table\n    \n\n**3）使用absolute+transform**\n\n（1）原理、用法\n\n*   原理：将子框设置为绝对定位，移动子框，使子框左侧距离相对框左侧边框的距离为相对框宽度的一半，再通过向左移动子框的一半宽度以达到水平居中。当然，在此之前，我们需要设置父框为相对定位，使父框成为子框的相对框。\n    \n*   用法：对父框设置position:relative，对子框设置position:absolute，left:50%，transform:translateX(-50%)。\n    \n\n（2）代码实例\n\n1.   `class=\"parent\">`\n    \n2.   `class=\"child>DEMO`\n    \n\n1.  `.parent {`\n    \n2.   `position:relative;`\n    \n3.  `}`\n    \n4.  `.child {`\n    \n5.   `position:absolute;`\n    \n6.   `left:50%;`\n    \n7.   `transform:translateX(-50%);`\n    \n8.  `}`\n    \n\n（3）优缺点\n\n*   优点：居中元素不会对其他的产生影响\n    \n*   缺点：transform属于css3内容，兼容性存在一定问题，高版本浏览器需要添加一些前缀\n    \n\n**4）使用flex+margin**\n\n（1）原理、用法\n\n*   原理：通过CSS3中的布局利器flex将子框转换为flex item，再设置子框居中以达到居中。\n    \n*   用法：先将父框设置为display:flex，再设置子框margin:0 auto。\n    \n\n（2）代码实例\n\n1.   `class=\"parent\">`\n    \n2.   `class=\"child>DEMO`\n    \n\n1.  `.parent {`\n    \n2.   `display:flex;`\n    \n3.  `}`\n    \n4.  `.child {`\n    \n5.   `margin:0  auto;`\n    \n6.  `}`\n    \n\n（3）优缺点\n\n*   缺点：低版本浏览器(ie6 ie7 ie8)不支持\n    \n\n**5）使用flex+justify-content**\n\n（1）原理、用法\n\n*   原理：通过CSS3中的布局利器flex中的justify-content属性来达到水平居中。\n    \n*   用法：先将父框设置为display:flex，再设置justify-content:center。\n    \n\n（2）代码实例\n\n1.   `class=\"parent\">`\n    \n2.   `class=\"child>DEMO`\n    \n\n1.  `.parent {`\n    \n2.   `display:flex;`\n    \n3.   `justify-content:center;`\n    \n4.  `}`\n    \n\n（3）优缺点\n\n*   优点：设置parent即可\n    \n*   缺点：低版本浏览器(ie6 ie7 ie8)不支持\n    \n\n##### 垂直居中\n\n**1）使用table-cell+vertical-align**\n\n（1）原理、用法\n\n*   原理：通过将父框转化为一个表格单元格显示（类似  和 ），再通过设置属性，使表格单元格内容垂直居中以达到垂直居中。\n    \n*   用法：先将父框设置为display:table-cell，再设置vertical-align:middle。\n    \n\n（2）代码实例\n\n1.   `class=\"parent\">`\n    \n2.   `class=\"child>DEMO`\n    \n\n1.  `.parent {`\n    \n2.   `display:table-cell;`\n    \n3.   `vertical-align:middle;`\n    \n4.  `}`\n    \n\n（3）优缺点\n\n*   优点：兼容性较好，ie8以上均支持\n    \n\n**2）使用absolute+transform**\n\n（1）原理、用法\n\n*   原理：类似于水平居中时的absolute+transform原理。将子框设置为绝对定位，移动子框，使子框上边距离相对框上边边框的距离为相对框高度的一半，再通过向上移动子框的一半高度以达到垂直居中。当然，在此之前，我们需要设置父框为相对定位，使父框成为子框的相对框。\n    \n*   用法：先将父框设置为position:relative，再设置子框position:absolute，top:50%，transform:translateY(-50%)。\n    \n\n（2）代码实例\n\n1.   `class=\"parent\">`\n    \n2.   `class=\"child>DEMO`\n    \n\n1.  `.parent {`\n    \n2.   `position:relative;`\n    \n3.  `}`\n    \n4.  `.child {`\n    \n5.   `position:absolute;`\n    \n6.   `top:50%;`\n    \n7.   `transform:translateY(-50%);`\n    \n8.  `}`\n    \n\n（3）优缺点\n\n*   优点：居中元素不会对其他的产生影响\n    \n*   缺点：transform属于css3内容，兼容性存在一定问题，高版本浏览器需要添加一些前缀\n    \n\n**3）使用flex+align-items**\n\n（1）原理、用法\n\n*   原理：通过设置CSS3中的布局利器flex中的属性align-times，使子框垂直居中。\n    \n*   用法：先将父框设置为position:flex，再设置align-items:center。\n    \n\n（2）代码实例\n\n1.   `class=\"parent\">`\n    \n2.   `class=\"child>DEMO`\n    \n\n1.  `.parent {`\n    \n2.   `position:flex;`\n    \n3.   `align-items:center;`\n    \n4.  `}`\n    \n\n（3）优缺点\n\n*   优点：只设置parent\n    \n*   缺点：兼容性存在一定问题\n    \n\n##### 水平垂直居中\n\n**1）使用absolute+transform**\n\n（1）原理、用法\n\n*   原理：将水平居中时的absolute+transform和垂直居中时的absolute+transform相结合。详见：水平居中的3）和垂直居中的2）。\n    \n*   见水平居中的3）和垂直居中的2）。\n    \n\n（2）代码实例\n\n1.   `class=\"parent\">`\n    \n2.   `class=\"child>DEMO`\n    \n\n1.  `.parent {`\n    \n2.   `position:relative;`\n    \n3.  `}`\n    \n4.  `.child {`\n    \n5.   `position:absolute;`\n    \n6.   `left:50%;`\n    \n7.   `top:50%;`\n    \n8.   `transform:tranplate(-50%,-50%);`\n    \n9.  `}`\n    \n\n（3）优缺点\n\n*   优点：child元素不会对其他元素产生影响\n    \n*   缺点：兼容性存在一定问题\n    \n\n**2）使用inline-block+text-align+table-cell+vertical-align**\n\n（1）原理、用法\n\n*   原理：使用inline-block+text-align水平居中，再用table-cell+vertical-align垂直居中，将二者结合起来。详见：水平居中的1）和垂直居中的1）。\n    \n*   见水平居中的1）和垂直居中的1）。\n    \n\n（2）代码实例\n\n1.   `class=\"parent\">`\n    \n2.   `class=\"child>DEMO`\n    \n\n1.  `.parent {`\n    \n2.   `text-align:center;`\n    \n3.   `display:table-cell;`\n    \n4.   `vertical-align:middle;`\n    \n5.  `}`\n    \n6.  `.child {`\n    \n7.   `display:inline-block;`\n    \n8.  `}`\n    \n\n（3）优缺点\n\n*   优点：兼容性较好\n    \n\n**3）使用flex+justify-content+align-items**\n\n（1）原理、用法\n\n*   原理：通过设置CSS3布局利器flex中的justify-content和align-items，从而达到水平垂直居中。详见：水平居中的4）和垂直居中的3）。\n    \n*   见水平居中的4）和垂直居中的3）。\n    \n\n（2）代码实例\n\n1.   `class=\"parent\">`\n    \n2.   `class=\"child>DEMO`\n    \n\n1.  `.parent {`\n    \n2.   `display:flex;`\n    \n3.   `justify-content:center;`\n    \n4.   `align-items:center;`\n    \n5.  `}`\n    \n\n（3）优缺点\n\n*   优点：只设置了parent\n    \n*   缺点：兼容性存在一定问题\n    \n\n#### 多列布局\n\n##### 定宽+自适应\n\n**1）使用float+overflow**\n\n（1）原理、用法\n\n*   原理：通过将左边框脱离文本流，设置右边规定当内容溢出元素框时发生的事情以达到多列布局。\n    \n*   用法：先将左框设置为float:left、width、margin-left，再设置实际的右框overflow:hidden。\n    \n\n（2）代码实例\n\n1.   `class=\"parent\">`\n    \n2.   `class=\"left\">`\n    \n3.  `left`\n    \n\n5.   `class=\"right\">`\n    \n6.  `right`\n    \n7.  `right`\n    \n\n1.  `.left {`\n    \n2.   `float:left;`\n    \n3.   `width:100px;`\n    \n4.   `margin-right:20px;`\n    \n5.  `}`\n    \n6.  `.right {`\n    \n7.   `overflow:hidden;`\n    \n8.  `}`\n    \n\n（3）优缺点\n\n*   优点：简单\n    \n*   缺点：不支持ie6\n    \n\n**2）使用float+margin**\n\n（1）原理、用法\n\n*   原理：通过将左框脱离文本流，加上右框向右移动一定的距离，以达到视觉上的多列布局。\n    \n*   用法：先将左框设置为float:left、margin-left，再设置右框margin-left。\n    \n\n（2）代码实例\n\n1.   `class=\"parent\">`\n    \n2.   `class=\"left\">`\n    \n3.  `left`\n    \n\n5.   `class=\"right\">`\n    \n6.  `right`\n    \n7.  `right`\n    \n\n1.  `.left {`\n    \n2.   `float:left;`\n    \n3.   `width:100px;`\n    \n4.  `}`\n    \n5.  `.right {`\n    \n6.   `margin-left:120px;`\n    \n7.  `}`\n    \n\n（3）优缺点\n\n*   优点：简单，易理解\n    \n*   缺点：兼容性存在一定问题，ie6下有3px的bug。right下的p清除浮动将产生bug\n    \n\n**3）使用float+margin（改良版）**\n\n（1）原理、用法\n\n*   原理：在1）的基础之上，通过向右框添加一个父框，再加上设置左、右父框属性使之产生BFC以去除bug。\n    \n*   用法：先将左框设置为float:left、margin-left、position:relative，再设置右父框float:right、width:100%、margin-left，最后设置实际的右框margin-left。\n    \n\n（2）代码实例\n\n1.   `class=\"parent\">`\n    \n2.   `class=\"left\">`\n    \n3.  `left`\n    \n\n5.   `class=\"rigth-fix\">`\n    \n6.   `class=\"right\">`\n    \n7.  `right`\n    \n8.  `right`\n    \n\n1.  `.left {`\n    \n2.   `float:left;`\n    \n3.   `width:100px;`\n    \n4.   `position:relative;`\n    \n5.  `}`\n    \n6.  `.right-fix {`\n    \n7.   `float:right;`\n    \n8.   `width:100%;`\n    \n9.   `margin-left:-100px;`\n    \n10.  `}`\n    \n11.  `.right {`\n    \n12.   `margin-left:120px;`\n    \n13.  `}`\n    \n\n（3）优缺点\n\n*   优点：简单，易理解\n    \n\n**4）使用table**\n\n（1）原理、用法\n\n*   原理：通过将父框设置为表格，将左右边框转化为类似于同一行的td，从而达到多列布局。\n    \n*   用法：先将父框设置为display:table、width:100%、table-layout:fixed，再设置左右框display:table-cell，最后设置左框width、padding-right。\n    \n\n（2）代码实例\n\n1.   `class=\"parent\">`\n    \n2.   `class=\"left\">`\n    \n3.  `left`\n    \n\n5.   `class=\"right\">`\n    \n6.  `right`\n    \n7.  `right`\n    \n\n1.  `.parent {`\n    \n2.   `display:table;`\n    \n3.   `width:100%;`\n    \n4.   `table-layout:fixed;`\n    \n5.  `}`\n    \n6.  `.left {`\n    \n7.   `width:100px;`\n    \n8.   `padding-right:20px;`\n    \n9.  `}`\n    \n10.  `.right,.left {`\n    \n11.   `display:table-cell;` \n    \n12.  `}`\n    \n\n**5）使用flex**\n\n（1）原理、用法\n\n*   原理：通过设置CSS3布局利器flex中的flex属性以达到多列布局。\n    \n*   用法：先将父框设置为display:flex，再设置左框flex:1，最后设置左框width、margin-right。\n    \n\n（2）代码实例\n\n1.   `class=\"parent\">`\n    \n2.   `class=\"left\">`\n    \n3.  `left`\n    \n\n5.   `class=\"right\">`\n    \n6.  `right`\n    \n7.  `right`\n    \n\n1.  `.parent {`\n    \n2.   `display:flex;`\n    \n3.  `}`\n    \n4.  `.left {`\n    \n5.   `width:100px;`\n    \n6.   `margin-right:20px;`\n    \n7.  `}`\n    \n8.  `.right {`\n    \n9.   `flex:1;`\n    \n10.  `}`\n    \n\n（3）优缺点\n\n*   优点：flex很强大\n    \n*   缺点：兼容性存在一定问题，性能存在一定问题\n    \n\n##### 两列定宽+一列自适应\n\n（1）原理、用法\n\n*   原理：这种情况与两列定宽查不多。\n    \n*   用法：先将左、中框设置为float:left、width、margin-right，再设置右框overflow:hidden。\n    \n\n（2）代码实例\n\n1.   `class=\"parent\">`\n    \n2.   `class=\"left\">`\n    \n3.  `left`\n    \n\n5.   `class=\"center\">`\n    \n6.  `center`\n    \n\n8.   `class=\"right\">`\n    \n9.  `right`\n    \n10.  `right`\n    \n\n1.  `.left,.center {`\n    \n2.   `float:left;`\n    \n3.   `width:100px;`\n    \n4.   `margin-right:20px;`\n    \n5.  `}`\n    \n6.  `.right {`\n    \n7.   `overflow:hidden;`\n    \n8.  `}`\n    \n\n##### 不定宽+自适应\n\n**1）使用float+overflow**\n\n（1）原理、用法\n\n*   原理：这种情况与两列定宽查不多。\n    \n*   用法：先将左框设置为float:left、margin-right，再设置右框overflow: hidden，最后设置左框中的内容width。\n    \n\n（2）代码实例\n\n1.   `class=\"parent\">`\n    \n2.   `class=\"left\">`\n    \n3.  `left`\n    \n\n5.   `class=\"right\">`\n    \n6.  `right`\n    \n7.  `right`\n    \n\n1.  `.left{`\n    \n2.   `float: left;`\n    \n3.   `margin-right: 20px;`\n    \n4.   `}`\n    \n5.  `.right{`\n    \n6.   `overflow: hidden;`\n    \n7.  `}`\n    \n8.  `.left p{`\n    \n9.   `width: 200px;`\n    \n10.  `}`\n    \n\n（3）优缺点\n\n*   优点：简单\n    \n*   缺点：ie6下兼容性存在一定问题\n    \n\n**2）使用table**\n\n（1）原理、用法\n\n*   原理：通过将父框改变为表格，将左右框转换为类似于同一行的td以达到多列布局，设置父框宽度100%，给左框子元素一个固定宽度从而达到自适应。\n    \n*   用法：先将父框设置为display: table、width: 100%，再设置左、右框display: table-cell，最后设置左框width: 0.1%、padding-right以及左框中的内容width。\n    \n\n（2）代码实例\n\n1.   `class=\"parent\">`\n    \n2.   `class=\"left\">`\n    \n3.  `left`\n    \n\n5.   `class=\"right\">`\n    \n6.  `right`\n    \n7.  `right`\n    \n\n1.  `.parent{`\n    \n2.   `display: table; width: 100%;`\n    \n3.   `}`\n    \n4.  `.left,.right{`\n    \n5.   `display: table-cell;`\n    \n6.  `}`\n    \n7.  `.left{`\n    \n8.   `width: 0.1%;`\n    \n9.   `padding-right: 20px;`\n    \n10.  `}`\n    \n11.  `.left p{`\n    \n12.   `width:200px;`\n    \n13.  `}`\n    \n\n（3）优缺点\n\n*   缺点：ie6 ie7不支持\n    \n\n**3）使用flex**\n\n（1）原理、用法\n\n*   原理：通过设置CSS3布局利器flex中的flex属性以达到多列布局，加上给左框中的内容定宽、给右框设置flex达到不定款+自适应。\n    \n*   用法：先将父框设置为display:flex，再设置右框flex:1，最后设置左框margin-right:20px、左框中的内容width。\n    \n\n（2）代码实例\n\n1.   `class=\"parent\">`\n    \n2.   `class=\"left\">`\n    \n3.  `left`\n    \n\n5.   `class=\"right\">`\n    \n6.  `right`\n    \n7.  `right`\n    \n\n1.  `.parent {`\n    \n2.   `display:flex;`\n    \n3.  `}`\n    \n4.  `.left {`\n    \n5.   `margin-right:20px;`\n    \n6.  `}`\n    \n7.  `.right {`\n    \n8.   `flex:1;`\n    \n9.  `}`\n    \n10.  `.left p{`\n    \n11.   `width: 200px;`\n    \n12.  `}`\n    \n\n（3）优缺点\n\n*   优点：flex很强大\n    \n*   缺点：兼容性存在一定问题，性能存在一定问题\n    \n\n##### 两列不定宽+一列自适应\n\n（1）原理、用法\n\n*   原理：这个情况与一列不定宽+一列自适应查不多。\n    \n*   用法：先将左、中框设置为float:left、margin-right，再设置右框overflow:hidden，最后给左中框中的内容设置width。\n    \n\n（2）代码实例\n\n1.   `class=\"parent\">`\n    \n2.   `class=\"left\">`\n    \n3.  `left`\n    \n\n5.   `class=\"center\">`\n    \n6.  `center`\n    \n\n8.   `class=\"right\">`\n    \n9.  `right`\n    \n10.  `right`\n    \n\n1.  `.left,.center{`\n    \n2.   `float: left;`\n    \n3.   `margin-right: 20px;`\n    \n4.  `}`\n    \n5.  `.right{`\n    \n6.   `overflow: hidden;`\n    \n7.  `}`\n    \n8.  `.left p,.center p{`\n    \n9.   `width: 100px;`\n    \n10.  `}`\n    \n\n##### 等分布局\n\n公式转化：\n\n`l=w*n+g*(n-1)->l=w*n+g*n-g->l+g=（w+g）*n`\n\n因此，我们需要解决两个问题：\n\n*   如何让总宽度增加g(即：L+g)\n    \n*   如何让每个宽包含g（即：w+g）\n    \n\n**1）使用float**\n\n（1）原理、用法\n\n*   原理：增大父框的实际宽度后，使用CSS3属性box-sizing进行布局的辅助。\n    \n*   用法：先将父框设置为margin-left: -*px，再设置子框float: left、width: 25%、padding-left、box-sizing: border-box。\n    \n\n（2）代码实例\n\n1.   `class=\"parent\">`\n    \n2.   `class=\"column\">`\n    \n    `1`\n    \n3.   `class=\"column\">`\n    \n    `2`\n    \n4.   `class=\"column\">`\n    \n    `3`\n    \n5.   `class=\"column\">`\n    \n    `4`\n    \n\n1.  `.parent{`\n    \n2.   `margin-left: -20px;//l增加g`\n    \n3.  `}`\n    \n4.  `.column{`\n    \n5.   `float: left;`\n    \n6.   `width: 25%;`\n    \n7.   `padding-left: 20px;`\n    \n8.   `box-sizing: border-box;//包含padding区域 w+g`\n    \n9.  `}`\n    \n\n（3）优缺点\n\n*   优点：兼容性较好\n    \n*   缺点：ie6 ie7百分比兼容存在一定问题\n    \n\n**2）使用table**\n\n（1）原理、用法\n\n*   原理：通过增加一个父框的修正框，增大其宽度，并将父框转换为table，将子框转换为tabel-cell进行布局。\n    \n*   用法：先将父框的修正框设置为margin-left: -*px，再设置父框display: table、width:100%、table-layout: fixed，设置子框display: table-cell、padding-left。\n    \n\n（2）代码实例\n\n1.   `class=\"parent-fix\">`\n    \n2.   `class=\"parent\">`\n    \n3.   `class=\"column\">`\n    \n    `1`\n    \n4.   `class=\"column\">`\n    \n    `2`\n    \n5.   `class=\"column\">`\n    \n    `3`\n    \n6.   `class=\"column\">`\n    \n    `4`\n    \n\n1.  `.parent-fix{`\n    \n2.   `margin-left: -20px;//l+g`\n    \n3.  `}`\n    \n4.  `.parent{`\n    \n5.   `display: table;`\n    \n6.   `width:100%;`\n    \n7.   `table-layout: fixed;`\n    \n8.  `}`\n    \n9.  `.column{`\n    \n10.   `display: table-cell;`\n    \n11.   `padding-left: 20px;//w+g`\n    \n12.  `}`\n    \n\n（3）优缺点\n\n*   优点：结构和块数无关联\n    \n*   缺点：增加了一层\n    \n\n**3）使用flex**\n\n（1）原理、用法\n\n*   原理：通过设置CSS3布局利器flex中的flex属性以达到等分布局。\n    \n*   用法：将父框设置为display: flex，再设置子框flex: 1，最后设置子框与子框的间距margin-left。\n    \n\n（2）代码实例\n\n1.   `class=\"parent\">`\n    \n2.   `class=\"column\">`\n    \n    `1`\n    \n3.   `class=\"column\">`\n    \n    `2`\n    \n4.   `class=\"column\">`\n    \n    `3`\n    \n5.   `class=\"column\">`\n    \n    `4`\n    \n\n1.  `.parent{`\n    \n2.   `display: flex;`\n    \n3.  `}`\n    \n4.  `.column{`\n    \n5.   `flex: 1;`\n    \n6.  `}`\n    \n7.  `.column+.column{`\n    \n8.   `margin-left:20px;`\n    \n9.  `}`\n    \n\n（3）优缺点\n\n*   优点：代码量少，与块数无关\n    \n*   缺点：兼容性存在一定问题\n    \n\n##### 定宽+自适应+两块高度一样高\n\n**1）使用float**\n\n（1）原理、用法\n\n*   原理：通过过分加大左右子框的高度，辅助超出隐藏，以达到视觉上的等高。\n    \n*   用法：将父框设置overflow: hidden，再设置左右子框padding-bottom: 9999px、margin-bottom: -9999px，最后设置左框float: left、width、margin-right，右框overflow: hidden。\n    \n\n（2）代码实例\n\n1.   `class=\"parent\">`\n    \n2.   `class=\"left\">`\n    \n3.  `left`\n    \n\n5.   `class=\"right\">`\n    \n6.  `right`\n    \n7.  `right`\n    \n\n1.  `p{`\n    \n2.   `background: none!important;`\n    \n3.  `}`\n    \n4.  `.left,.right{`\n    \n5.   `background: #444;`\n    \n6.  `}`\n    \n7.  `.parent{`\n    \n8.   `overflow: hidden;`\n    \n9.  `}`\n    \n10.  `.left,.right{`\n    \n11.   `padding-bottom: 9999px;`\n    \n12.   `margin-bottom: -9999px;`\n    \n13.  `}`\n    \n14.  `.left{`\n    \n15.   `float: left;` \n    \n16.   `width: 100px;`\n    \n17.   `margin-right: 20px;`\n    \n18.  `}`\n    \n19.  `.right{`\n    \n20.   `overflow: hidden;`\n    \n21.  `}`\n    \n\n(3)优缺点\n\n*   优点：兼容性好\n    \n*   缺点：伪等高，不是真正意义上的等高\n    \n\n**2）使用table**\n\n（1）原理、用法\n\n*   原理：将父框转化为tabel，将子框转化为tabel-cell布局，以达到定宽+自适应+两块高度一样高。\n    \n*   用法：先将父框设置为display:table、width:100%、table-layout:fixed，再设置左右框为display:table-cell，最后设置左框width、padding-right。\n    \n\n（2）代码实例\n\n1.   `class=\"parent\">`\n    \n2.   `class=\"left\">`\n    \n3.  `left`\n    \n\n5.   `class=\"right\">`\n    \n6.  `right`\n    \n7.  `right`\n    \n\n1.  `.parent {`\n    \n2.   `display:table;`\n    \n3.   `width:100%;`\n    \n4.   `table-layout:fixed;`\n    \n5.  `}`\n    \n6.  `.left {`\n    \n7.   `width:100px;`\n    \n8.   `padding-right:20px;`\n    \n9.  `}`\n    \n10.  `.right,.left {`\n    \n11.   `display:table-cell;`\n    \n12.  `}`\n    \n\n**3）使用flex**（1）原理、用法\n\n*   原理：通过设置CSS3布局利器flex中的flex属性以达到定宽+自适应+两块高度一样高。\n    \n*   用法：将父框设置为display: flex，再设置左框width、margin-right，最后设置右框flex:1。\n    \n\n（2）代码实例\n\n1.   `class=\"parent\">`\n    \n2.   `class=\"left\">`\n    \n3.  `left`\n    \n\n5.   `class=\"right\">`\n    \n6.  `right`\n    \n7.  `right`\n    \n\n1.  `.parent {`\n    \n2.   `display:flex;`\n    \n3.  `}`\n    \n4.  `.left {`\n    \n5.   `width:100px;`\n    \n6.   `margin-right:20px;`\n    \n7.  `}`\n    \n8.  `.right {`\n    \n9.   `flex:1;`\n    \n10.  `}`\n    \n\n（3）优缺点\n\n*   优点：代码少，flex很强大\n    \n*   缺点：兼容性存在一定问题\n    \n\n**4)使用display**\n\n（1）原理、用法\n\n*   原理：通过设置display中的CSS3的-webkit-box属性以达到定宽+自适应+两块高度一样高。\n    \n*   用法：将父框设置为display: -webkit-box、width: 100%，再设置左框width、margin-right，最后设置右框-webkit-box-flex: 1。\n    \n\n（2）代码实例\n\n1.   `class=\"parent\">`\n    \n2.   `class=\"left\">left`\n    \n3.   `class=\"right\">right` \n    \n\n1.  `.parent {`\n    \n2.   `width: 100%;`\n    \n3.   `display: -webkit-box;`\n    \n4.  `}`\n    \n5.  `.left {`\n    \n6.   `width:100px;`\n    \n7.   `margin-right: 20px;`\n    \n8.  `}`\n    \n9.  `.right {`\n    \n10.   `-webkit-box-flex: 1;`\n    \n11.  `}`\n    \n\n(3)优缺点\n\n*   缺点：兼容性存在较大的问题\n    \n\n#### 全屏布局\n\n##### 全屏布局的特点\n\n*   滚动条不是全局滚动条，而是出现在内容区域里，往往是主内容区域\n    \n*   浏览器变大时，撑满窗口\n    \n\n##### 全屏布局的方法\n\n**1）使用position**\n\n（1）原理、用法\n\n*   原理：将上下部分固定，中间部分使用定宽+自适应+两块高度一样高。\n    \n*   用法：见实例。\n    \n\n（2）代码实例\n\n1.   `class=\"parent\">`\n    \n2.   `class=\"top\">top`\n    \n3.   `class=\"left\">left`\n    \n4.   `class=\"right\">`\n    \n5.   `class=\"inner\">right`\n    \n\n7.   `class=\"bottom\">bottom`\n    \n\n1.  `html,body,.parent{`\n    \n2.   `margin:0;`\n    \n3.   `height:100%;`\n    \n4.   `overflow:hidden;`\n    \n5.  `}`\n    \n6.  `body{`\n    \n7.   `color:white;`\n    \n8.  `}`\n    \n9.  `.top{`\n    \n10.   `position:absolute;`\n    \n11.   `top:0;`\n    \n12.   `left:0;`\n    \n13.   `right:0;`\n    \n14.   `height:100px;`\n    \n15.   `background:blue;`\n    \n16.  `}`\n    \n17.  `.left{`\n    \n18.   `position:absolute;`\n    \n19.   `left:0;`\n    \n20.   `top:100px;`\n    \n21.   `bottom:50px;`\n    \n22.   `width:200px;`\n    \n23.   `background:red;`\n    \n24.  `}`\n    \n25.  `.right{`\n    \n26.   `position:absolute;`\n    \n27.   `left:200px;`\n    \n28.   `top:100px;`\n    \n29.   `bottom:50px;`\n    \n30.   `right:0;`\n    \n31.   `background:pink;`\n    \n32.   `overflow: auto;`\n    \n33.  `}`\n    \n34.  `.right .inner{`\n    \n35.   `min-height: 1000px;`\n    \n36.  `}`\n    \n37.  `.bottom{`\n    \n38.   `position:absolute;`\n    \n39.   `left:0;`\n    \n40.   `right:0;`\n    \n41.   `bottom:0;`\n    \n42.   `height:50px;`\n    \n43.   `background: black;`\n    \n44.  `}`\n    \n\n（3）优缺点\n\n*   优点：兼容性好，ie6下不支持\n    \n\n**2）使用flex**\n\n（1）原理、用法\n\n*   原理：通过灵活使用CSS3布局利器flex中的flex属性和flex-direction属性以达到全屏布局。\n    \n*   用法：见实例。\n    \n\n（2）代码实例\n\n1.   `class=\"parent\">`\n    \n2.   `class=\"top\">top`\n    \n3.   `class=\"middle\">`\n    \n4.   `class=\"left\">left`\n    \n5.   `class=\"right\">`\n    \n6.   `class=\"inner\">right`\n    \n\n9.   `class=\"bottom\">bottom`\n    \n\n1.  `html,body,.parent{`\n    \n2.   `margin:0;`\n    \n3.   `height:100%;`\n    \n4.   `overflow:hidden;`\n    \n5.  `}`\n    \n6.  `body{`\n    \n7.   `color: white;`\n    \n8.  `}` \n    \n9.  `.parent{`\n    \n10.   `display: flex;`\n    \n11.   `flex-direction: column;`\n    \n12.  `}`\n    \n13.  `.top{`\n    \n14.   `height:100px;`\n    \n15.   `background: blue;`\n    \n16.  `}`\n    \n17.  `.bottom{`\n    \n18.   `height:50px;`\n    \n19.   `background: black;`\n    \n20.  `}`\n    \n21.  `.middle{`\n    \n22.   `flex:1;`\n    \n23.   `display:flex;`\n    \n24.  `}`\n    \n25.  `.left{`\n    \n26.   `width:200px;`\n    \n27.   `background: red;`\n    \n28.  `}`\n    \n29.  `.right{`\n    \n30.   `flex: 1;`\n    \n31.   `overflow: auto;`\n    \n32.   `background:pink;`\n    \n33.  `}`\n    \n34.  `.right .inner{`\n    \n35.   `min-height: 1000px;`\n    \n36.  `}`\n    \n\n(3)优缺点\n\n*   缺点：兼容性差，ie9及ie9以下不兼容\n    \n\n##### 全屏布局相关方案的兼容性、性能和自适应一览表\n\n| 方案 | 兼容性 | 性能 | 是否自适应 |\n| --- | --- | --- | --- |\n| Position | 好 | 好 | 部分自适应 |\n| Flex | 较差 | 差 | 可自适应 |\n| Grid | 差 | 较好 | 可自适应 |\n\n当然，最最最最最后，如果您喜欢这片文章，可以疯狂点赞和收藏喔！！\n\n  \n\n觉得本文对你有帮助？请分享给更多人\n\n**关注「前端大全」，提升前端技能**\n\n**淘口令**：复制以下红色内容，再打开手淘即可购买\n\n范品社，使用￥极客T恤￥抢先预览（长按复制整段文案，打开手机淘宝即可进入活动内容）', 0, 1, 0);
INSERT INTO `post` (`id`, `createAt`, `updateAt`, `title`, `description`, `thumb`, `url`, `html`, `markdown`, `views`, `status`, `push`) VALUES
(34, '2018-04-23 11:01:43.480514', '2018-04-23 11:01:43.480514', '推荐一些好用的JavaScript库', '作者｜TravisFischer译者｜张健欣npm模块的规模和范围是空前的，这也是JavaScript相对于其它编程语言的最大优势之一。你对于npm模块利用得越好，你就会成为一名更快更高产的开发人员。本文将介绍一些对于NodeJS和前端JavaScript开发价值非凡的通用模块和工具，期望能够对广大读者有所裨益。本文所述仅代表作者个人观点，主要聚焦于NodeJS和前端JavaScript开发价值非凡的通用库和工具。本文不会面面俱到，也不会包含任何特定用途的模块，因为那种类型的列表虽然确实不错但有点儿片面。', 'https://mmbiz.qpic.cn/mmbiz_jpg/XIibZ0YbvibkVAiaRmNZXbFC3WfcguXjqDkA6iatOHsKPvSYhbAe4CpgePGialQaQ1TL1JIk5Nlu1He42XffO8124nQ/640?wx_fmt=jpeg', 'http://mp.weixin.qq.com/s/fBG9g5m87fTVTNDUvsWB0w', '<section class=\"firstImage\" style=\"box-sizing: border-box;color: rgb(63, 63, 63);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 14px;white-space: normal;background-color: rgb(255, 255, 255);\"><img class=\"\" data-ratio=\"0.4150390625\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/XIibZ0YbvibkVAiaRmNZXbFC3WfcguXjqDkA6iatOHsKPvSYhbAe4CpgePGialQaQ1TL1JIk5Nlu1He42XffO8124nQ/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"1024\" style=\"box-sizing: border-box;border-width: 0px;border-style: initial;border-color: initial;vertical-align: middle;width: 709px;border-radius: 4px;margin-bottom: 25px;\"></section><section class=\"h1\" style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;line-height: 1em;color: rgb(145, 145, 145);margin-top: 13px;font-size: 14px;white-space: normal;background-color: rgb(255, 255, 255);padding-left: 14px;\">作者｜Travis Fischer</section><section class=\"h1\" style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;line-height: 1em;color: rgb(145, 145, 145);margin-top: 13px;font-size: 14px;white-space: normal;background-color: rgb(255, 255, 255);padding-left: 14px;\">译者｜张健欣</section><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">npm 模块的规模和范围是空前的，这也是 JavaScript 相对于其它编程语言的最大优势之一。你对于 npm 模块利用得越好，你就会成为一名更快更高产的开发人员。本文将介绍一些对于 NodeJS 和前端 JavaScript 开发价值非凡的通用模块和工具，期望能够对广大读者有所裨益。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">本文所述仅代表作者个人观点，主要聚焦于NodeJS 和前端 JavaScript 开发价值非凡的通用库和工具。本文不会面面俱到，也不会包含任何特定用途的模块，因为那种类型的列表虽然确实不错但有点儿片面。</p><section class=\"h2\" style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;line-height: 1.1;color: rgb(63, 63, 63);font-size: 20px;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box;height: 65px;line-height: 95px;color: rgb(60, 112, 198);border-bottom: 2px solid rgb(27, 95, 160);background: url(\"https://mmbiz.qpic.cn/mmbiz_jpg/XIibZ0YbvibkVAiaRmNZXbFC3WfcguXjqDkB8PfqI2SgzuicfGeiaM9pZC9aFzYIaX5zqPemmNOUdicXTXfxawcnbsWg/640?wx_fmt=jpeg\") 50% 50% / 92px no-repeat;margin-top: 38px;margin-bottom: 10px;padding-bottom: 7px;display: inline-block;\">命令行工具</span></section><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">让我们先来看看一些非常有用的命令行工具。</p><blockquote style=\"box-sizing: border-box;padding-left: 0px;font-size: 15px;border-left: none;color: rgb(63, 63, 63);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);\"><p style=\"box-sizing: border-box;margin-top: 27px;font-size: 16px;text-align: justify;white-space: pre-line;line-height: 1.75em;padding-right: 20px;padding-left: 20px;color: rgb(91, 172, 235);\"><strong style=\"box-sizing: border-box;text-align: left;\">np</strong> - 一个更好的<code style=\"box-sizing: border-box;\">npm publish</code></p><span style=\"box-sizing: border-box;display: block;clear: both;\"></span></blockquote><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">如果你是一位 npm 模块开发者，我强烈建议你检出 np。因为它将版本冲突处理、添加 git 发布标记以及发布到 npm 的流程变得轻而易举，特别是当你需要维护十来个以上模块的时候。另外值得一提的是，Zeit 开发的 release 也是一个不错的选择。</p><blockquote style=\"box-sizing: border-box;padding-left: 0px;font-size: 15px;border-left: none;color: rgb(63, 63, 63);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);\"><p style=\"box-sizing: border-box;margin-top: 27px;font-size: 16px;text-align: justify;white-space: pre-line;line-height: 1.75em;padding-right: 20px;padding-left: 20px;color: rgb(91, 172, 235);\"><strong style=\"box-sizing: border-box;text-align: left;\">yarn</strong> - 一个兼容 npm 的更好的包管理器。</p><span style=\"box-sizing: border-box;display: block;clear: both;\"></span></blockquote><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">尽管 npm v5 比之前版本快了很多，但我仍然认为 yarn 比 npm 更适合本地开发，因为 yarn 的速度和一致性更出色。无论使用哪种方式，你都是基于底层的同一个 npm 模块库，而且我个人认为，这两者之间其实差不多，并没有哪一个比另一个出色得多。你应该选择最适合你的项目需求的包管理器。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">我认为，在 2018 年，作为一名 JS 开发者，你最好同时熟悉<code style=\"box-sizing: border-box;\">npm</code>和<code style=\"box-sizing: border-box;\">yarn</code>，并且能够在这两者之间切换自如。</p><blockquote style=\"box-sizing: border-box;padding-left: 0px;font-size: 15px;border-left: none;color: rgb(63, 63, 63);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);\"><p style=\"box-sizing: border-box;margin-top: 27px;font-size: 16px;text-align: justify;white-space: pre-line;line-height: 1.75em;padding-right: 20px;padding-left: 20px;color: rgb(91, 172, 235);\"><strong style=\"box-sizing: border-box;text-align: left;\">prettier</strong> - 一款偏执的代码格式化工具。</p><span style=\"box-sizing: border-box;display: block;clear: both;\"></span></blockquote><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">Prettier 会解析你的代码，然后按照它自己的规则重新打印你的代码。它会根据最大行长度，在需要的时候进行换行。通过这样，Prettier 可以强制使你的代码风格保持一致。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">我热爱 eslint，也一直是 JavaScript Standard Style 的长期用户。但是，像 prettier 和 gofmt 这样的自动代码格式化工具背后的理念具有无法抗拒的吸引力。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">作为开发者，我们花费了太多时间和精力去操心代码的风格样式，而 prettier 则让你减少在这方面的注意力，使你能够专注于编写什么而不是如何编写。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><img class=\"\" data-ratio=\"0.4166666666666667\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkVAiaRmNZXbFC3WfcguXjqDk5ibEfice1BkmVYibKvgRkVXAa5wK8QkqwCQW6PsAKLztROsTwbF7KFicGQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"1200\" style=\"box-sizing: border-box;border-width: 0px;border-style: initial;border-color: initial;vertical-align: middle;width: 693px;\"></p><blockquote style=\"box-sizing: border-box;padding-left: 0px;font-size: 15px;border-left: none;color: rgb(63, 63, 63);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);\"><p style=\"box-sizing: border-box;margin-top: 27px;font-size: 16px;text-align: justify;white-space: pre-line;line-height: 1.75em;padding-right: 20px;padding-left: 20px;color: rgb(91, 172, 235);\"><strong style=\"box-sizing: border-box;text-align: left;\">now</strong> - 非常简单的部署工具。</p><span style=\"box-sizing: border-box;display: block;clear: both;\"></span></blockquote><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">考虑到简单性、可靠性和功能集，Now 绝对是如今最好的免费部署系统。它对于测试静态和动态发布非常有用，而且当你需要更多服务器的时候，可以很好地扩展。你可以一直<strong style=\"box-sizing: border-box;text-align: left;\">免费</strong>使用它，直到你需要扩展的时候才需要付费。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">Node.js 和 JS 驱动的 Web 应用在它上面运行得非常好。另外，我还强烈推荐检出 Zeit 提供的其它模块，因为他们团队是由一些社区最好的 JS 开发者组成的。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><img class=\"\" data-ratio=\"0.43416666666666665\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkVAiaRmNZXbFC3WfcguXjqDkWs9w1iajbgUYXT44oEiblotF8SS9l8UbuZd3Q7hutNqIGEjeZvgqTF4Q/640?wx_fmt=png\" data-type=\"png\" data-w=\"1200\" style=\"box-sizing: border-box;border-width: 0px;border-style: initial;border-color: initial;vertical-align: middle;width: 693px;\"></p><blockquote style=\"box-sizing: border-box;padding-left: 0px;font-size: 15px;border-left: none;color: rgb(63, 63, 63);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);\"><p style=\"box-sizing: border-box;margin-top: 27px;font-size: 16px;text-align: justify;white-space: pre-line;line-height: 1.75em;padding-right: 20px;padding-left: 20px;color: rgb(91, 172, 235);\"><strong style=\"box-sizing: border-box;text-align: left;\">asciinema</strong> - 高质量终端会话的免费记录工具。</p><span style=\"box-sizing: border-box;display: block;clear: both;\"></span></blockquote><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">可以查看我的上一篇博客《Making your Code Beautiful》（让你的代码更漂亮），详细了解如何利用 asciinema 来生成高质量的代码样式和截屏。</p><section class=\"h2\" style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;line-height: 1.1;color: rgb(63, 63, 63);font-size: 20px;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box;height: 65px;line-height: 95px;color: rgb(60, 112, 198);border-bottom: 2px solid rgb(27, 95, 160);background: url(\"https://mmbiz.qpic.cn/mmbiz_jpg/XIibZ0YbvibkVAiaRmNZXbFC3WfcguXjqDkB8PfqI2SgzuicfGeiaM9pZC9aFzYIaX5zqPemmNOUdicXTXfxawcnbsWg/640?wx_fmt=jpeg\") 50% 50% / 92px no-repeat;margin-top: 38px;margin-bottom: 10px;padding-bottom: 7px;display: inline-block;\">Promises</span></section><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">这一节值得专门写一篇完整的文章来进行介绍，尤其是现在，async & await 已经开始成为 JavaScript 并行编程的事实标准。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">也就是说，如果你还没有检出 Sindre Sorhus 的 promise-fun 模块，那么我强烈推荐你检出这个优秀的模块。我对这些模块唯一的抱怨是，它们好像不能在 create-react-app 和 rollup 之类的大部分前端工具链中开箱即用。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">下面是一些最有用的模块，它们支持 promise 和 async 风格的 Node 代码：</p><blockquote style=\"box-sizing: border-box;padding-left: 0px;font-size: 15px;border-left: none;color: rgb(63, 63, 63);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);\"><p style=\"box-sizing: border-box;margin-top: 27px;font-size: 16px;text-align: justify;white-space: pre-line;line-height: 1.75em;padding-right: 20px;padding-left: 20px;color: rgb(91, 172, 235);\"><strong style=\"box-sizing: border-box;text-align: left;\">pify</strong> - 将回调风格的函数 Promise 化。</p><span style=\"box-sizing: border-box;display: block;clear: both;\"></span></blockquote><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">有许多方法可以将函数从旧的回调方式转变为 Promise 风格，但是我发现 pify 是其中最好用的。它很小，提供了一些不错的细节，例如自动方法绑定，这在内置的 util.promisify 中是没有的。</p><blockquote style=\"box-sizing: border-box;padding-left: 0px;font-size: 15px;border-left: none;color: rgb(63, 63, 63);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);\"><p style=\"box-sizing: border-box;margin-top: 27px;font-size: 16px;text-align: justify;white-space: pre-line;line-height: 1.75em;padding-right: 20px;padding-left: 20px;color: rgb(91, 172, 235);\"><strong style=\"box-sizing: border-box;text-align: left;\">p-map</strong> - promise 并发管理。</p><span style=\"box-sizing: border-box;display: block;clear: both;\"></span></blockquote><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">并发很棒，但是大部分时候，无论是为了限制网络带宽或者计算资源，你都会想要设置一个实际的并行限制。p-map 在这方面非常突出。99% 的时候，我会用它来替代 Promise.all(...)，因为 Promise.all(...) 不支持限制并行。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">我在接触 p-map 之前，自己创建了一个并行限制模块 async-awiat-parallel，但我还是推荐你使用 p-map，因为它更好。😛</p><blockquote style=\"box-sizing: border-box;padding-left: 0px;font-size: 15px;border-left: none;color: rgb(63, 63, 63);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);\"><p style=\"box-sizing: border-box;margin-top: 27px;font-size: 16px;text-align: justify;white-space: pre-line;line-height: 1.75em;padding-right: 20px;padding-left: 20px;color: rgb(91, 172, 235);\"><strong style=\"box-sizing: border-box;text-align: left;\">p-retry</strong> - 重试 promise 返回值函数或异步函数。</p><span style=\"box-sizing: border-box;display: block;clear: both;\"></span></blockquote><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">我一般用 p-retry 包装所有 HTTP 请求和外部服务调用，给它们增加一层基本的健壮性。结合 p-map，你可以用可控的并行方式处理大批量的外部请求，而不需要太担心偶然的传输错误、套接字挂断或者服务器超时。</p><blockquote style=\"box-sizing: border-box;padding-left: 0px;font-size: 15px;border-left: none;color: rgb(63, 63, 63);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);\"><p style=\"box-sizing: border-box;margin-top: 27px;font-size: 16px;text-align: justify;white-space: pre-line;line-height: 1.75em;padding-right: 20px;padding-left: 20px;color: rgb(91, 172, 235);\"><strong style=\"box-sizing: border-box;text-align: left;\">p-timeout</strong> - 超过特定时间后使 promise 超时。</p><span style=\"box-sizing: border-box;display: block;clear: both;\"></span></blockquote><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">和 p-retry 一样，p-timeout 通常是与第三方 API 和服务对接时，提高稳健性的必需模块。你可以指定一个备选反馈，因为通常情况下，直接给出反馈比没有明确时间提示的挂起等待或者等待超长时间之后才给出反馈要好得多。</p><blockquote style=\"box-sizing: border-box;padding-left: 0px;font-size: 15px;border-left: none;color: rgb(63, 63, 63);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);\"><p style=\"box-sizing: border-box;margin-top: 27px;font-size: 16px;text-align: left;white-space: pre-line;line-height: 1.75em;padding-right: 20px;padding-left: 20px;color: rgb(91, 172, 235);\"><strong style=\"box-sizing: border-box;text-align: left;\">p-cache</strong> 或者 <strong style=\"box-sizing: border-box;text-align: left;\">p-memoize</strong> - 通过一个 LRU（Least Recently Used，最近最少使用）缓存来缓存异步函数结果。</p><span style=\"box-sizing: border-box;display: block;clear: both;\"></span></blockquote><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">许多这些 Promise 工具的目的，都给了我很多架构稳健微服务的启发。在我的微服务架构中，每个外部依赖都可以被当作一个普通的接口，支持重试、超时、缓存、熔断、回退等。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">功能性的优雅降级通常比系统崩溃或者根本不响应更可取，因此，如果还不太熟悉微服务，可以检出 p-cache 或 p-memoize，看看它们的设计决策是否也能够帮助提升你的 Promise 处理能力。</p><section class=\"h2\" style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;line-height: 1.1;color: rgb(63, 63, 63);font-size: 20px;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box;height: 65px;line-height: 95px;color: rgb(60, 112, 198);border-bottom: 2px solid rgb(27, 95, 160);background: url(\"https://mmbiz.qpic.cn/mmbiz_jpg/XIibZ0YbvibkVAiaRmNZXbFC3WfcguXjqDkB8PfqI2SgzuicfGeiaM9pZC9aFzYIaX5zqPemmNOUdicXTXfxawcnbsWg/640?wx_fmt=jpeg\") 50% 50% / 92px no-repeat;margin-top: 38px;margin-bottom: 10px;padding-bottom: 7px;display: inline-block;\">网页抓取</span></section><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">有许多非常棒的网页抓取工具，其中一些操作原始的 HTML，例如 cheerio；其中一些模拟了一个完整的浏览器环境，例如 puppeteer。你使用什么工具取决于你的真实使用场景，因为用原始 HTML 更快也更轻量，而自动化一个无头浏览器 (headless browser）虽然更稳健但也更笨重一些，不容易上手。</p><blockquote style=\"box-sizing: border-box;padding-left: 0px;font-size: 15px;border-left: none;color: rgb(63, 63, 63);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);\"><p style=\"box-sizing: border-box;margin-top: 27px;font-size: 16px;text-align: justify;white-space: pre-line;line-height: 1.75em;padding-right: 20px;padding-left: 20px;color: rgb(91, 172, 235);\">cheerio - 专门为服务器端设计的快速、灵活、简洁 的核心<code style=\"box-sizing: border-box;\">jQuery</code>实现。</p><span style=\"box-sizing: border-box;display: block;clear: both;\"></span></blockquote><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">Cheerio 真的非常适合只想操作原始 HTML 的快速混杂的网页抓取。它提供了一个稳健的类 jQuery 语法用来遍历并操作 HTML 文档。Cheerio 配合 request-promise-native 抓取远程 HTML 文档特别好用。</p><blockquote style=\"box-sizing: border-box;padding-left: 0px;font-size: 15px;border-left: none;color: rgb(63, 63, 63);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);\"><p style=\"box-sizing: border-box;margin-top: 27px;font-size: 16px;text-align: justify;white-space: pre-line;line-height: 1.75em;padding-right: 20px;padding-left: 20px;color: rgb(91, 172, 235);\"><strong style=\"box-sizing: border-box;text-align: left;\">puppeteer</strong> - Chrome 无头浏览器的 Node API。</p><span style=\"box-sizing: border-box;display: block;clear: both;\"></span></blockquote><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">和 cheerio 不一样，puppeteer 是一个用来自动化 chrome 无头浏览器实例的包装器，非常适合现代的 JS 单页应用。因为你就是在用 Chrome 本身，它对于解析、渲染和脚本执行的一致性支持非常棒。Chrome 无头浏览器相对来说还比较新，但是它很可能会在接下来的几年里逐步淘汰较老的方案，例如 PhantomJS。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">如果你需要持续抓取网站，自动化基于 Web 的工作流，或者捕捉截图，puppeteer 是一个明显的赢家，它会逐渐变得更受欢迎。</p><section class=\"h2\" style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;line-height: 1.1;color: rgb(63, 63, 63);font-size: 20px;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box;height: 65px;line-height: 95px;color: rgb(60, 112, 198);border-bottom: 2px solid rgb(27, 95, 160);background: url(\"https://mmbiz.qpic.cn/mmbiz_jpg/XIibZ0YbvibkVAiaRmNZXbFC3WfcguXjqDkB8PfqI2SgzuicfGeiaM9pZC9aFzYIaX5zqPemmNOUdicXTXfxawcnbsWg/640?wx_fmt=jpeg\") 50% 50% / 92px no-repeat;margin-top: 38px;margin-bottom: 10px;padding-bottom: 7px;display: inline-block;\">Node.js</span></section><blockquote style=\"box-sizing: border-box;padding-left: 0px;font-size: 15px;border-left: none;color: rgb(63, 63, 63);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);\"><p style=\"box-sizing: border-box;margin-top: 27px;font-size: 16px;text-align: justify;white-space: pre-line;line-height: 1.75em;padding-right: 20px;padding-left: 20px;color: rgb(91, 172, 235);\"><strong style=\"box-sizing: border-box;text-align: left;\">dotenv-safe</strong> - 从<code style=\"box-sizing: border-box;\">.env</code>文件加载环境变量并确保它们都生效。</p><span style=\"box-sizing: border-box;display: block;clear: both;\"></span></blockquote><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">这个库继承了非常受欢迎的 dotenv 库，通过一个<code style=\"box-sizing: border-box;\">.evn.example</code>文件来强制所需的环境变量文件。像原来的 dotenv 模块一样，它提供了针对 Node 的快速、安全和稳健的环境变量支持。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">它还可以通过在 now.json 中配置<code style=\"box-sizing: border-box;\">\"dotenv\": true</code>来很好地与 Zeit 的 now.sh 部署脚本配合使用。</p><blockquote style=\"box-sizing: border-box;padding-left: 0px;font-size: 15px;border-left: none;color: rgb(63, 63, 63);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);\"><p style=\"box-sizing: border-box;margin-top: 27px;font-size: 16px;text-align: justify;white-space: pre-line;line-height: 1.75em;padding-right: 20px;padding-left: 20px;color: rgb(91, 172, 235);\"><strong style=\"box-sizing: border-box;text-align: left;\">request 和 request-promise-native</strong> - 简化的 HTTP 请求客户端。</p><span style=\"box-sizing: border-box;display: block;clear: both;\"></span></blockquote><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">发起 HTTP 请求是一个非常普遍的操作，我的库使用的是 request-promise-native，它用原生的 ES6 promise 包装了原来的 request 模块。95% 的时候，我都会 await promise 化的 HTTP 请求结果。其余 5% 的时候，我会直接使用响应流，在这种情况下，我使用底层的 request 模块，而不需要 Promise 支持。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">通常情况下，为了稳健性，我会用 p-retry、p-timeout 和 p-cache 来一起包装 request-promise-native 调用。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">另外值得一提的是，支持 promise 的 got 也可以作为 request 的一个比较新的备选模块，尽管我个人还没怎么用过这个模块。</p><pre style=\"box-sizing: border-box;overflow: auto;font-size: 13px;padding: 9.5px;margin: 30px 8px 0px;line-height: 1.42857;word-break: break-all;word-wrap: break-word;color: rgb(91, 172, 235);background-color: rgb(50, 50, 50);border-width: 1px;border-style: solid;border-color: rgb(204, 204, 204);border-radius: 4px;\"><code class=\"lang-javascript\" style=\"box-sizing: border-box;\">const request = require(\'request-promise-native\')\n\nconst html = await request(\'https://github.com\')\nconsole.log(html)</code></pre><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">这是用 request-promise-native 下载 HTML 文档的一个例子</p><blockquote style=\"box-sizing: border-box;padding-left: 0px;font-size: 15px;border-left: none;color: rgb(63, 63, 63);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);\"><p style=\"box-sizing: border-box;margin-top: 27px;font-size: 16px;text-align: justify;white-space: pre-line;line-height: 1.75em;padding-right: 20px;padding-left: 20px;color: rgb(91, 172, 235);\"><strong style=\"box-sizing: border-box;text-align: left;\">consolidate</strong> - 针对 Node 的模板引擎统一库。</p><span style=\"box-sizing: border-box;display: block;clear: both;\"></span></blockquote><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">Consolidate 用来处理任何类型的后端模版（邮件、推特、原始 HTML 等）非常棒。我通常选择 handlebars 作为我的模版引擎，但是无论怎样，我总会用 consolidate 包装我的模版用例，因为它提供了一种简单一致的模版构建接口，而无论你在底层决定使用的是哪种模板引擎。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">例如，我在 create-react-library 中使用 consolidate，来用这个库相关的变量渲染 boilerplate 模板。</p><blockquote style=\"box-sizing: border-box;padding-left: 0px;font-size: 15px;border-left: none;color: rgb(63, 63, 63);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);\"><p style=\"box-sizing: border-box;margin-top: 27px;font-size: 16px;text-align: justify;white-space: pre-line;line-height: 1.75em;padding-right: 20px;padding-left: 20px;color: rgb(91, 172, 235);\"><strong style=\"box-sizing: border-box;text-align: left;\">execa</strong> - 一个更好用的<code style=\"box-sizing: border-box;\">child_process</code>。</p><span style=\"box-sizing: border-box;display: block;clear: both;\"></span></blockquote><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">如果你想要运行一个 shell 命令或者生成一个子进程，execa 会非常好用。</p><blockquote style=\"box-sizing: border-box;padding-left: 0px;font-size: 15px;border-left: none;color: rgb(63, 63, 63);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);\"><p style=\"box-sizing: border-box;margin-top: 27px;font-size: 16px;text-align: justify;white-space: pre-line;line-height: 1.75em;padding-right: 20px;padding-left: 20px;color: rgb(91, 172, 235);\"><strong style=\"box-sizing: border-box;text-align: left;\">fs-extra</strong> - 一个更好的<code style=\"box-sizing: border-box;\">fs</code>（文件流模块），拥有额外的方法和 Promise 支持。</p><span style=\"box-sizing: border-box;display: block;clear: both;\"></span></blockquote><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">我发觉自己很少直接使用<code style=\"box-sizing: border-box;\">fs</code>了。试过<code style=\"box-sizing: border-box;\">fs-extra</code>后，你就再也不会回过头用 fs 了。</p><section class=\"h2\" style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;line-height: 1.1;color: rgb(63, 63, 63);font-size: 20px;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box;height: 65px;line-height: 95px;color: rgb(60, 112, 198);border-bottom: 2px solid rgb(27, 95, 160);background: url(\"https://mmbiz.qpic.cn/mmbiz_jpg/XIibZ0YbvibkVAiaRmNZXbFC3WfcguXjqDkB8PfqI2SgzuicfGeiaM9pZC9aFzYIaX5zqPemmNOUdicXTXfxawcnbsWg/640?wx_fmt=jpeg\") 50% 50% / 92px no-repeat;margin-top: 38px;margin-bottom: 10px;padding-bottom: 7px;display: inline-block;\">  数 学  </span></section><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">D3（Data-Driven Documents，数据驱动文档）是一个流行的用于数据可视化和动画渲染的前端库。它还包含一些非常棒的用于常见数学运算的单独包，我一直都选择用它们而不是其它可选模块。</p><blockquote style=\"box-sizing: border-box;padding-left: 0px;font-size: 15px;border-left: none;color: rgb(63, 63, 63);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);\"><p style=\"box-sizing: border-box;margin-top: 27px;font-size: 16px;text-align: justify;white-space: pre-line;line-height: 1.75em;padding-right: 20px;padding-left: 20px;color: rgb(91, 172, 235);\"><strong style=\"box-sizing: border-box;text-align: left;\">d3-random</strong> - 从各种分布中生成随机数字。</p><span style=\"box-sizing: border-box;display: block;clear: both;\"></span></blockquote><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">当<code style=\"box-sizing: border-box;\">Math.random</code>不好使的时候，试一试 d3-random 吧。它为各种常见分布提供了样例，包括均匀分布、正态分布和指数分布。</p><blockquote style=\"box-sizing: border-box;padding-left: 0px;font-size: 15px;border-left: none;color: rgb(63, 63, 63);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);\"><p style=\"box-sizing: border-box;margin-top: 27px;font-size: 16px;text-align: justify;white-space: pre-line;line-height: 1.75em;padding-right: 20px;padding-left: 20px;color: rgb(91, 172, 235);\"><strong style=\"box-sizing: border-box;text-align: left;\">d3-ease</strong> - 流畅的动画功能。</p><span style=\"box-sizing: border-box;display: block;clear: both;\"></span></blockquote><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><img class=\"\" data-ratio=\"0.40540540540540543\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkVAiaRmNZXbFC3WfcguXjqDkUWCqvribek0CcrWFxFH7cd56Mtl6d3LUAf6U4NapaSypibygnW0ic58AA/640?wx_fmt=png\" data-type=\"png\" data-w=\"888\" style=\"box-sizing: border-box;border-width: 0px;border-style: initial;border-color: initial;vertical-align: middle;width: 693px;\"></p><blockquote style=\"box-sizing: border-box;padding-left: 0px;font-size: 15px;border-left: none;color: rgb(63, 63, 63);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);\"><p style=\"box-sizing: border-box;margin-top: 27px;font-size: 16px;text-align: justify;white-space: pre-line;line-height: 1.75em;padding-right: 20px;padding-left: 20px;color: rgb(91, 172, 235);\"><strong style=\"box-sizing: border-box;text-align: left;\">d3-interpolate</strong> - 插入数字、颜色、字符串、数组、对象等任何东西！</p><span style=\"box-sizing: border-box;display: block;clear: both;\"></span></blockquote><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">这个库提供了各种插入方法，用于在任意两个值之间混入其它值。这些值可能是数字、颜色、字符串、数组或者深层嵌套的对象。</p><section class=\"h2\" style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;line-height: 1.1;color: rgb(63, 63, 63);font-size: 20px;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box;height: 65px;line-height: 95px;color: rgb(60, 112, 198);border-bottom: 2px solid rgb(27, 95, 160);background: url(\"https://mmbiz.qpic.cn/mmbiz_jpg/XIibZ0YbvibkVAiaRmNZXbFC3WfcguXjqDkB8PfqI2SgzuicfGeiaM9pZC9aFzYIaX5zqPemmNOUdicXTXfxawcnbsWg/640?wx_fmt=jpeg\") 50% 50% / 92px no-repeat;margin-top: 38px;margin-bottom: 10px;padding-bottom: 7px;display: inline-block;\">  测 试  </span></section><blockquote style=\"box-sizing: border-box;padding-left: 0px;font-size: 15px;border-left: none;color: rgb(63, 63, 63);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);\"><p style=\"box-sizing: border-box;margin-top: 27px;font-size: 16px;text-align: justify;white-space: pre-line;line-height: 1.75em;padding-right: 20px;padding-left: 20px;color: rgb(91, 172, 235);\"><strong style=\"box-sizing: border-box;text-align: left;\">ava</strong> - 杰出的 JS 测试运行框架。</p><span style=\"box-sizing: border-box;display: block;clear: both;\"></span></blockquote><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">我使用的 Node.js 单元测试运行框架，是由 Sindre Sorhus 创建的另外一个工具。Ava 是一款比较新的测试运行框架，吸收了 mocha、tape、chai 和其它 JS 测试运行框架的优点，然后将所有这些优点拼在一起，形成一个非常棒的项目，并且配置了必要的默认值，可以让它“刚刚好能够工作”。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">值得一提的是，Ava 的测试任务默认是并行运行的。针对一些使用场景，例如数据测试，单元测试的顺序可能非常重要，你可以在文件级别关闭这个功能。<img class=\"\" data-ratio=\"0.1525\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/XIibZ0YbvibkVAiaRmNZXbFC3WfcguXjqDkZ2uh308Nt6HXw2ibFnujxReqRAEgrMDgt9Sqt3rEHxwsAmkc0d4xt5g/640?wx_fmt=gif\" data-type=\"gif\" data-w=\"1600\" style=\"box-sizing: border-box;border-width: 0px;border-style: initial;border-color: initial;vertical-align: middle;width: 693px;\"></p><blockquote style=\"box-sizing: border-box;padding-left: 0px;font-size: 15px;border-left: none;color: rgb(63, 63, 63);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);\"><p style=\"box-sizing: border-box;margin-top: 27px;font-size: 16px;text-align: justify;white-space: pre-line;line-height: 1.75em;padding-right: 20px;padding-left: 20px;color: rgb(91, 172, 235);\"><strong style=\"box-sizing: border-box;text-align: left;\">nock</strong> - 一个 HTTP 模拟库</p><span style=\"box-sizing: border-box;display: block;clear: both;\"></span></blockquote><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">Nock 非常适合那些孤立地执行 HTTP 请求的测试模块。如果你的 Node 模块会发起 HTTP 请求，而你想要提供适当的单元测试，那么 nock 是个不错的选择。</p><blockquote style=\"box-sizing: border-box;padding-left: 0px;font-size: 15px;border-left: none;color: rgb(63, 63, 63);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);\"><p style=\"box-sizing: border-box;margin-top: 27px;font-size: 16px;text-align: justify;white-space: pre-line;line-height: 1.75em;padding-right: 20px;padding-left: 20px;color: rgb(91, 172, 235);\"><strong style=\"box-sizing: border-box;text-align: left;\">sinon</strong> - 一个 JS 测试库</p><span style=\"box-sizing: border-box;display: block;clear: both;\"></span></blockquote><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">Sinon 是一个非常有用的工具库，利用依赖注入来编写孤立的测试。每个 Node 开发者都应该掌握这个工具。</p><section class=\"h2\" style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;line-height: 1.1;color: rgb(63, 63, 63);font-size: 20px;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box;height: 65px;line-height: 95px;color: rgb(60, 112, 198);border-bottom: 2px solid rgb(27, 95, 160);background: url(\"https://mmbiz.qpic.cn/mmbiz_jpg/XIibZ0YbvibkVAiaRmNZXbFC3WfcguXjqDkB8PfqI2SgzuicfGeiaM9pZC9aFzYIaX5zqPemmNOUdicXTXfxawcnbsWg/640?wx_fmt=jpeg\") 50% 50% / 92px no-repeat;margin-top: 38px;margin-bottom: 10px;padding-bottom: 7px;display: inline-block;\">  总 结  </span></section><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">我期望这篇分析文章能够对你有所帮助，即使它只是让你了解到一个你之前没有听说过的好用的模块。我知道许多经验丰富的有志向的开发者，会针对常见问题提出他们自己的解决方案。但是有些时候，如果已经有一些优秀的方案，使用这些方案而不是不断重造轮子，也是不错的。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">NPM 库的规模和范围是空前的，而且我个人认为，这是 JavaScript 相比于其它编程语言的最大优势之一。你对 npm 库利用得越好，你就会成为一名更快更高产的开发人员。类似这样的高阶“软”技能，是传说中的 10x 程序员的特征之一。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">有哪些你喜爱的 npm 库，我漏掉了吗？在评论中分享你喜爱的库，让我知道吧！</p><section class=\"h4\" style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;line-height: 1.1;color: rgb(60, 112, 198);margin-top: 30px;margin-left: 8px;font-size: 16px;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box;display: inline-block;width: 15px;height: 15px;margin-right: 10px;background: url(\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkVAiaRmNZXbFC3WfcguXjqDk5CkQl0hetbqY9icDKib5BGHhA3ictrbCrbZF9ueILJn7XZzwpgTg2JpGw/640?wx_fmt=png\") center center / 100% 100% no-repeat;\"></span> <span style=\"box-sizing: border-box;\">英文原文</span></section><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><span style=\"color: rgb(120, 172, 254);\">https://hackernoon.com/javascipt-modules-worth-using-9aa7301e41ac</span></p><section class=\"h2\" style=\"white-space: normal;color: rgb(63, 63, 63);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: center;box-sizing: border-box;font-size: 20px;\"><span style=\"margin-top: 38px;margin-bottom: 10px;padding-bottom: 7px;height: 65px;line-height: 95px;color: rgb(60, 112, 198);border-bottom: 2px solid rgb(27, 95, 160);background-image: url(\"https://mmbiz.qpic.cn/mmbiz_jpg/XIibZ0YbvibkWmyjgnJib2TQhXtRKibMOKXxjVnynRqtfPT4DwNHalNjQgRavLMo1HojsiaiaLHcsUd46Y3TLHf1XMeg/640?wx_fmt=jpeg\");background-position: 50% 50%;background-repeat: no-repeat;background-attachment: initial;background-origin: initial;background-clip: initial;background-size: 92px;display: inline-block;\">前端之巅</span></section><p style=\"padding-top: 23px;padding-right: 8px;padding-left: 8px;font-size: 16px;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;box-sizing: border-box;text-align: justify;white-space: pre-line;color: rgb(74, 74, 74);line-height: 1.75em;\">「前端之巅」是 InfoQ 旗下关注大前端技术的垂直社群。紧跟时代潮流，共享一线技术，欢迎关注。</p><p style=\"white-space: normal;color: rgb(63, 63, 63);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 14px;text-align: center;\"><img class=\"\" data-copyright=\"0\" data-ratio=\"1\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/XIibZ0YbvibkWUtr7g89PiaZ21wKDpQ92BQFHqXibkqibrRcEUH053vhWiaaQaOhVUFXrPG0AcjYIHqURUAIIiar33B6g/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"258\"></p><section class=\"h4\" style=\"margin-top: 30px;margin-left: 8px;font-size: 16px;white-space: normal;box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;line-height: 1.1;color: rgb(60, 112, 198);background-color: rgb(255, 255, 255);\"><span style=\"margin-right: 10px;box-sizing: border-box;display: inline-block;width: 15px;height: 15px;background: url(\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkVicJ90RfHB4jcsQwPda3hoRCOfwa9vp2hMZYWTR7DpE4gL3BmTpF2Dsz2xEhz9DaybsDvZicJBEwCg/640?wx_fmt=png\") center center / 100% 100% no-repeat;\"></span> <span style=\"box-sizing: border-box;\">活动推荐</span></section><p style=\"padding-top: 23px;padding-right: 8px;padding-left: 8px;font-size: 16px;box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);text-align: justify;white-space: pre-line;color: rgb(74, 74, 74);line-height: 1.75em;\">PWA、Web 框架、UI 与动画、Node... 大前端的下一站在哪里？前端工程师的价值和成长路径是什么？GMTC2018 上，来自 Google、Facebook、BAT 等 60+ 国内外一线前端大牛，将与你面对面探讨大前端领域最新技术趋势和实践，想要升职加薪就快来吧！扫描下方二维码或点击“阅读原文”了解更多大会详情！</p><p style=\"padding-top: 23px;padding-right: 8px;padding-left: 8px;font-size: 16px;box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);text-align: justify;white-space: pre-line;color: rgb(74, 74, 74);line-height: 1.75em;\">目前大会 8 折热销中，团购更优惠，购票咨询：18514549229（同微信）</p><p style=\"padding-top: 23px;padding-right: 8px;padding-left: 8px;font-size: 16px;box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);text-align: justify;white-space: pre-line;color: rgb(74, 74, 74);line-height: 1.75em;\"><img class=\"\" data-ratio=\"0.5866666666666667\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/XIibZ0YbvibkVicJ90RfHB4jcsQwPda3hoRoMehwFUVOWIzERpaw63KjQ140WiasiarPIZYkVzd7ANs1w7hU5G7bIlA/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"900\" style=\"box-sizing: border-box;border-width: 0px;border-style: initial;border-color: initial;vertical-align: middle;width: 693px;\"></p>', '作者｜Travis Fischer\n\n译者｜张健欣\n\nnpm 模块的规模和范围是空前的，这也是 JavaScript 相对于其它编程语言的最大优势之一。你对于 npm 模块利用得越好，你就会成为一名更快更高产的开发人员。本文将介绍一些对于 NodeJS 和前端 JavaScript 开发价值非凡的通用模块和工具，期望能够对广大读者有所裨益。\n\n本文所述仅代表作者个人观点，主要聚焦于NodeJS 和前端 JavaScript 开发价值非凡的通用库和工具。本文不会面面俱到，也不会包含任何特定用途的模块，因为那种类型的列表虽然确实不错但有点儿片面。\n\n命令行工具\n\n让我们先来看看一些非常有用的命令行工具。\n\n> **np** \\- 一个更好的`npm publish`\n\n如果你是一位 npm 模块开发者，我强烈建议你检出 np。因为它将版本冲突处理、添加 git 发布标记以及发布到 npm 的流程变得轻而易举，特别是当你需要维护十来个以上模块的时候。另外值得一提的是，Zeit 开发的 release 也是一个不错的选择。\n\n> **yarn** \\- 一个兼容 npm 的更好的包管理器。\n\n尽管 npm v5 比之前版本快了很多，但我仍然认为 yarn 比 npm 更适合本地开发，因为 yarn 的速度和一致性更出色。无论使用哪种方式，你都是基于底层的同一个 npm 模块库，而且我个人认为，这两者之间其实差不多，并没有哪一个比另一个出色得多。你应该选择最适合你的项目需求的包管理器。\n\n我认为，在 2018 年，作为一名 JS 开发者，你最好同时熟悉`npm`和`yarn`，并且能够在这两者之间切换自如。\n\n> **prettier** \\- 一款偏执的代码格式化工具。\n\nPrettier 会解析你的代码，然后按照它自己的规则重新打印你的代码。它会根据最大行长度，在需要的时候进行换行。通过这样，Prettier 可以强制使你的代码风格保持一致。\n\n我热爱 eslint，也一直是 JavaScript Standard Style 的长期用户。但是，像 prettier 和 gofmt 这样的自动代码格式化工具背后的理念具有无法抗拒的吸引力。\n\n作为开发者，我们花费了太多时间和精力去操心代码的风格样式，而 prettier 则让你减少在这方面的注意力，使你能够专注于编写什么而不是如何编写。\n\n> **now** \\- 非常简单的部署工具。\n\n考虑到简单性、可靠性和功能集，Now 绝对是如今最好的免费部署系统。它对于测试静态和动态发布非常有用，而且当你需要更多服务器的时候，可以很好地扩展。你可以一直**免费**使用它，直到你需要扩展的时候才需要付费。\n\nNode.js 和 JS 驱动的 Web 应用在它上面运行得非常好。另外，我还强烈推荐检出 Zeit 提供的其它模块，因为他们团队是由一些社区最好的 JS 开发者组成的。\n\n> **asciinema** \\- 高质量终端会话的免费记录工具。\n\n可以查看我的上一篇博客《Making your Code Beautiful》（让你的代码更漂亮），详细了解如何利用 asciinema 来生成高质量的代码样式和截屏。\n\nPromises\n\n这一节值得专门写一篇完整的文章来进行介绍，尤其是现在，async & await 已经开始成为 JavaScript 并行编程的事实标准。\n\n也就是说，如果你还没有检出 Sindre Sorhus 的 promise-fun 模块，那么我强烈推荐你检出这个优秀的模块。我对这些模块唯一的抱怨是，它们好像不能在 create-react-app 和 rollup 之类的大部分前端工具链中开箱即用。\n\n下面是一些最有用的模块，它们支持 promise 和 async 风格的 Node 代码：\n\n> **pify** \\- 将回调风格的函数 Promise 化。\n\n有许多方法可以将函数从旧的回调方式转变为 Promise 风格，但是我发现 pify 是其中最好用的。它很小，提供了一些不错的细节，例如自动方法绑定，这在内置的 util.promisify 中是没有的。\n\n> **p-map** \\- promise 并发管理。\n\n并发很棒，但是大部分时候，无论是为了限制网络带宽或者计算资源，你都会想要设置一个实际的并行限制。p-map 在这方面非常突出。99% 的时候，我会用它来替代 Promise.all(...)，因为 Promise.all(...) 不支持限制并行。\n\n我在接触 p-map 之前，自己创建了一个并行限制模块 async-awiat-parallel，但我还是推荐你使用 p-map，因为它更好。😛\n\n> **p-retry** \\- 重试 promise 返回值函数或异步函数。\n\n我一般用 p-retry 包装所有 HTTP 请求和外部服务调用，给它们增加一层基本的健壮性。结合 p-map，你可以用可控的并行方式处理大批量的外部请求，而不需要太担心偶然的传输错误、套接字挂断或者服务器超时。\n\n> **p-timeout** \\- 超过特定时间后使 promise 超时。\n\n和 p-retry 一样，p-timeout 通常是与第三方 API 和服务对接时，提高稳健性的必需模块。你可以指定一个备选反馈，因为通常情况下，直接给出反馈比没有明确时间提示的挂起等待或者等待超长时间之后才给出反馈要好得多。\n\n> **p-cache** 或者 **p-memoize** \\- 通过一个 LRU（Least Recently Used，最近最少使用）缓存来缓存异步函数结果。\n\n许多这些 Promise 工具的目的，都给了我很多架构稳健微服务的启发。在我的微服务架构中，每个外部依赖都可以被当作一个普通的接口，支持重试、超时、缓存、熔断、回退等。\n\n功能性的优雅降级通常比系统崩溃或者根本不响应更可取，因此，如果还不太熟悉微服务，可以检出 p-cache 或 p-memoize，看看它们的设计决策是否也能够帮助提升你的 Promise 处理能力。\n\n网页抓取\n\n有许多非常棒的网页抓取工具，其中一些操作原始的 HTML，例如 cheerio；其中一些模拟了一个完整的浏览器环境，例如 puppeteer。你使用什么工具取决于你的真实使用场景，因为用原始 HTML 更快也更轻量，而自动化一个无头浏览器 (headless browser）虽然更稳健但也更笨重一些，不容易上手。\n\n> cheerio - 专门为服务器端设计的快速、灵活、简洁 的核心`jQuery`实现。\n\nCheerio 真的非常适合只想操作原始 HTML 的快速混杂的网页抓取。它提供了一个稳健的类 jQuery 语法用来遍历并操作 HTML 文档。Cheerio 配合 request-promise-native 抓取远程 HTML 文档特别好用。\n\n> **puppeteer** \\- Chrome 无头浏览器的 Node API。\n\n和 cheerio 不一样，puppeteer 是一个用来自动化 chrome 无头浏览器实例的包装器，非常适合现代的 JS 单页应用。因为你就是在用 Chrome 本身，它对于解析、渲染和脚本执行的一致性支持非常棒。Chrome 无头浏览器相对来说还比较新，但是它很可能会在接下来的几年里逐步淘汰较老的方案，例如 PhantomJS。\n\n如果你需要持续抓取网站，自动化基于 Web 的工作流，或者捕捉截图，puppeteer 是一个明显的赢家，它会逐渐变得更受欢迎。\n\nNode.js\n\n> **dotenv-safe** \\- 从`.env`文件加载环境变量并确保它们都生效。\n\n这个库继承了非常受欢迎的 dotenv 库，通过一个`.evn.example`文件来强制所需的环境变量文件。像原来的 dotenv 模块一样，它提供了针对 Node 的快速、安全和稳健的环境变量支持。\n\n它还可以通过在 now.json 中配置`\"dotenv\": true`来很好地与 Zeit 的 now.sh 部署脚本配合使用。\n\n> **request 和 request-promise-native** \\- 简化的 HTTP 请求客户端。\n\n发起 HTTP 请求是一个非常普遍的操作，我的库使用的是 request-promise-native，它用原生的 ES6 promise 包装了原来的 request 模块。95% 的时候，我都会 await promise 化的 HTTP 请求结果。其余 5% 的时候，我会直接使用响应流，在这种情况下，我使用底层的 request 模块，而不需要 Promise 支持。\n\n通常情况下，为了稳健性，我会用 p-retry、p-timeout 和 p-cache 来一起包装 request-promise-native 调用。\n\n另外值得一提的是，支持 promise 的 got 也可以作为 request 的一个比较新的备选模块，尽管我个人还没怎么用过这个模块。\n\n    const request = require(\'request-promise-native\')\n    \n    const html = await request(\'https://github.com\')\n    console.log(html)\n\n这是用 request-promise-native 下载 HTML 文档的一个例子\n\n> **consolidate** \\- 针对 Node 的模板引擎统一库。\n\nConsolidate 用来处理任何类型的后端模版（邮件、推特、原始 HTML 等）非常棒。我通常选择 handlebars 作为我的模版引擎，但是无论怎样，我总会用 consolidate 包装我的模版用例，因为它提供了一种简单一致的模版构建接口，而无论你在底层决定使用的是哪种模板引擎。\n\n例如，我在 create-react-library 中使用 consolidate，来用这个库相关的变量渲染 boilerplate 模板。\n\n> **execa** \\- 一个更好用的`child_process`。\n\n如果你想要运行一个 shell 命令或者生成一个子进程，execa 会非常好用。\n\n> **fs-extra** \\- 一个更好的`fs`（文件流模块），拥有额外的方法和 Promise 支持。\n\n我发觉自己很少直接使用`fs`了。试过`fs-extra`后，你就再也不会回过头用 fs 了。\n\n  数 学  \n\nD3（Data-Driven Documents，数据驱动文档）是一个流行的用于数据可视化和动画渲染的前端库。它还包含一些非常棒的用于常见数学运算的单独包，我一直都选择用它们而不是其它可选模块。\n\n> **d3-random** \\- 从各种分布中生成随机数字。\n\n当`Math.random`不好使的时候，试一试 d3-random 吧。它为各种常见分布提供了样例，包括均匀分布、正态分布和指数分布。\n\n> **d3-ease** \\- 流畅的动画功能。\n\n> **d3-interpolate** \\- 插入数字、颜色、字符串、数组、对象等任何东西！\n\n这个库提供了各种插入方法，用于在任意两个值之间混入其它值。这些值可能是数字、颜色、字符串、数组或者深层嵌套的对象。\n\n  测 试  \n\n> **ava** \\- 杰出的 JS 测试运行框架。\n\n我使用的 Node.js 单元测试运行框架，是由 Sindre Sorhus 创建的另外一个工具。Ava 是一款比较新的测试运行框架，吸收了 mocha、tape、chai 和其它 JS 测试运行框架的优点，然后将所有这些优点拼在一起，形成一个非常棒的项目，并且配置了必要的默认值，可以让它“刚刚好能够工作”。\n\n值得一提的是，Ava 的测试任务默认是并行运行的。针对一些使用场景，例如数据测试，单元测试的顺序可能非常重要，你可以在文件级别关闭这个功能。\n\n> **nock** \\- 一个 HTTP 模拟库\n\nNock 非常适合那些孤立地执行 HTTP 请求的测试模块。如果你的 Node 模块会发起 HTTP 请求，而你想要提供适当的单元测试，那么 nock 是个不错的选择。\n\n> **sinon** \\- 一个 JS 测试库\n\nSinon 是一个非常有用的工具库，利用依赖注入来编写孤立的测试。每个 Node 开发者都应该掌握这个工具。\n\n  总 结  \n\n我期望这篇分析文章能够对你有所帮助，即使它只是让你了解到一个你之前没有听说过的好用的模块。我知道许多经验丰富的有志向的开发者，会针对常见问题提出他们自己的解决方案。但是有些时候，如果已经有一些优秀的方案，使用这些方案而不是不断重造轮子，也是不错的。\n\nNPM 库的规模和范围是空前的，而且我个人认为，这是 JavaScript 相比于其它编程语言的最大优势之一。你对 npm 库利用得越好，你就会成为一名更快更高产的开发人员。类似这样的高阶“软”技能，是传说中的 10x 程序员的特征之一。\n\n有哪些你喜爱的 npm 库，我漏掉了吗？在评论中分享你喜爱的库，让我知道吧！\n\n 英文原文\n\nhttps://hackernoon.com/javascipt-modules-worth-using-9aa7301e41ac\n\n前端之巅\n\n「前端之巅」是 InfoQ 旗下关注大前端技术的垂直社群。紧跟时代潮流，共享一线技术，欢迎关注。\n\n 活动推荐\n\nPWA、Web 框架、UI 与动画、Node... 大前端的下一站在哪里？前端工程师的价值和成长路径是什么？GMTC2018 上，来自 Google、Facebook、BAT 等 60+ 国内外一线前端大牛，将与你面对面探讨大前端领域最新技术趋势和实践，想要升职加薪就快来吧！扫描下方二维码或点击“阅读原文”了解更多大会详情！\n\n目前大会 8 折热销中，团购更优惠，购票咨询：18514549229（同微信）', 0, 1, 0);
INSERT INTO `post` (`id`, `createAt`, `updateAt`, `title`, `description`, `thumb`, `url`, `html`, `markdown`, `views`, `status`, `push`) VALUES
(35, '2018-04-23 11:01:43.496834', '2018-04-23 11:01:43.496834', '从初级到资深：程序员的职业生涯思考与可迁移技能培养', '在去年的一年里，我经历了一次“升职”：从一个咨（cheng）询（xu）师（yuan）变成了一个高级咨询师。Title变了，就意味着工作的内容也会发生一些变化。从拒绝升职，到被说服升职，我的一些想法发生了一些改变，开始考虑一些职业生涯的技能。作为一个程序员，你不可能在一个岗位/Title上干一辈子，就算你愿意，你老板也不愿意；你老婆也不愿意——你一辈子拿着一样的工资。发展其它的通用技能，对这就是本文的主题。开始之前，让我们带着一个问题：假使你是以CTO作为程序员生涯的最终目标，突然间，公司的CTO变成了你，', 'https://pic2.zhimg.com/v2-dc15b47bbea9403723f69a56b23a5c22_1200x500.jpg', 'https://zhuanlan.zhihu.com/p/35520065?utm_source=wechat_session&utm_medium=social', '<p>在去年的一年里，我经历了一次 “升职”：从一个咨（cheng）询（xu）师（yuan）变成了一个高级咨询师。Title 变了，就意味着工作的内容也会发生一些变化。从拒绝升职，到被说服升职，我的一些想法发生了一些改变，开始考虑一些职业生涯的技能。<br></p><blockquote>作为一个程序员，你不可能在一个岗位/ Title上干一辈子，就算你愿意，你老板也不愿意；你老婆也不愿意——你一辈子拿着一样的工资。</blockquote><p>发展其它的通用技能，对这就是本文的主题。</p><p>开始之前，让我们带着一个问题：假使你是以 CTO 作为程序员生涯的最终目标，突然间，公司的 CTO 变成了你，你觉得你能做什么吗？</p><h2>职业生涯</h2><p>在今年一月份里，我看了一本名为《<b>远见:如何规划职业生涯3大阶段</b>》，尽管有人会说：书中的道理我们都懂，但是我还是想先扯一下相关的内容。</p><p><br></p><figure><noscript><img src=\"https://pic4.zhimg.com/v2-93d0955c73d2fd486921a220944085c2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"759\" data-rawheight=\"422\" class=\"origin_image zh-lightbox-thumb\" width=\"759\" data-original=\"https://pic4.zhimg.com/v2-93d0955c73d2fd486921a220944085c2_r.jpg\"></noscript><img src=\"data:image/svg+xml;utf8,%3Csvg%20xmlns=%27http://www.w3.org/2000/svg%27%20width=%27759%27%20height=%27422%27%3E%3C/svg%3E\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"759\" data-rawheight=\"422\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"759\" data-original=\"https://pic4.zhimg.com/v2-93d0955c73d2fd486921a220944085c2_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-93d0955c73d2fd486921a220944085c2_b.jpg\"></figure><p><br></p><p>作者将职业生涯分成了三个阶段，每个阶段差不多要用 15 年的时间：</p><ul><li>第1阶段：加添燃料，强势开局。耐心打磨经验、技能和关系，为未来的职业生涯做基础。</li><li>第2阶段：锚定甜蜜区，聚焦长板。专注于自己的长处，寻找更高的目标和追求。</li><li>第3阶段：优化长尾，发挥持续影响力。成为导师，做一些想做的事情。</li></ul><p>从本科毕业的年龄 + 45，你可能已经退休了。而到未来，退休年龄可能变成了 65 ，但是这并不重要。</p><p>在第一个 15 年里，我们应该<b>着重于发现和探索自己喜欢做的事情</b>。如对于多数程序员而言，编程只是一个谋生及存活的工具，在那之上，我们才有足够的财力去做想做的人和事。你现在觉得你喜欢前端开发，可能是因为你没有深入过后端，又或者只是你比别人擅长前端，你就喜欢上前端开发了</p><p>除此，在第一个 15 年里，作者也介绍了职场的三大燃料，用于为未来打下基础：</p><p><b>可迁移技能</b>。职业生涯中获取并拥有的各种基本能力，这些技能可以在我们从一家公司跳到另一家公司，甚至是一个行业换到另外一个行业是仍然能依靠的能力。如解决问题、沟通等等。 有意义的经验。即拥有多样性的经验，它可以帮助我们成为复合型的人才，以免得我们的职业生涯脆弱不堪。如从传统的电信行业出来的程序员，可能在面对互联网企业，会有些不适应。 持久的人际关系。即职业生态系统，这些人可以是上司、客户、合作伙伴、人才及同类，互相之间可以相互帮助。</p><p><br></p><figure><noscript><img src=\"https://pic4.zhimg.com/v2-85858544afa858d2df735883f8019867_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"512\" class=\"origin_image zh-lightbox-thumb\" width=\"1024\" data-original=\"https://pic4.zhimg.com/v2-85858544afa858d2df735883f8019867_r.jpg\"></noscript><img src=\"data:image/svg+xml;utf8,%3Csvg%20xmlns=%27http://www.w3.org/2000/svg%27%20width=%271024%27%20height=%27512%27%3E%3C/svg%3E\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"512\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1024\" data-original=\"https://pic4.zhimg.com/v2-85858544afa858d2df735883f8019867_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-85858544afa858d2df735883f8019867_b.jpg\"></figure><p><br></p><p>因此在这种情况下，我们会发现：<b>编程只是普通的一项技能</b>。代码，每个程序员都会写，每天都在写。每年年终的时候，你写的代码又快又好，并不代表你能涨的工资越多。对于 KPI 公司而言，在哪里、哪个部门写代码，往往更重要。即使在同一个部门，做相似的编码，如果你不能证明你的价值，那么你的 KPI 就不会体现代码的价值。</p><p>于是乎，我开始在计划一个更长的学习计划。依现在看来，未来的技能更新变得相当的快，它就像一个《灰犀牛》一样，看我们冲了过来。前提是，我们到那个年龄的时候，没有被人工智能淘汰。</p><h2>强化可迁移技能</h2><p>技能，向来是<b>到用时方恨少</b>。如果能在遇到问题的时候，知道自己缺少什么技能，还算是不错的；如果在自己遇到一个问题，不知道自己缺少什么时，情况就没有那么乐观了。</p><p><br></p><figure><noscript><img src=\"https://pic1.zhimg.com/v2-ececf4262f961522ae00ea0c865cebbc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"710\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-ececf4262f961522ae00ea0c865cebbc_r.jpg\"></noscript><img src=\"data:image/svg+xml;utf8,%3Csvg%20xmlns=%27http://www.w3.org/2000/svg%27%20width=%271080%27%20height=%27710%27%3E%3C/svg%3E\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"710\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-ececf4262f961522ae00ea0c865cebbc_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-ececf4262f961522ae00ea0c865cebbc_b.jpg\"></figure><p><br></p><p>但是，问题来了，首先什么是技能？</p><blockquote>泛指有别于天赋，必须耗费时间经由学习、训练或工作经验，才能获得的能力。</blockquote><p>如，编程是一项需要不断打磨地基础技能，它不是我们一生下来就掌握的能力。</p><p>然后，我们再回来说说什么是可迁移的技能。</p><blockquote>也被称为<b>通用技能</b>，是职业生涯中除岗位专业能力之外的基本能力，适用于各种职业，能适用岗位不断变化，是伴随人终身的可持续发展能力。 专业技能的运用都是在可迁移技能基础之上。 一般用行为动词来描述，是通用的，可迁移的；通常描述人际交往能力、沟通能力、解决问题的能力、团队合作能力、领导力、适应能力。</blockquote><p>而对于程序员来说，这些可迁移的技能有：</p><ul><li>快速学习的能力</li><li>解决问题的能力</li><li>沟通技巧</li><li>演讲</li><li>运动</li><li>等等</li></ul><p>这些技能适用于不同的行业，不同的领域。</p><p>快速学习的能力。快速学习的能力，指的是能快速掌握一项技能、技术的能力。在今天看来，下周你就要上手一个新的技术栈，你要能在这周的时间里：</p><ul><li>快速入门、阅读文档</li><li>搭建环境，编写、理解 hello, world</li><li>遵循基本的规范及用法</li><li>能理解其设计思想，以编写复杂的用法</li><li><b>能找到丰富的资源集</b></li></ul><p>它依赖于，我们拥有丰富的底层相关知识，如编程语言的不同范式、前端框架的基本原理、后端服务的基本架构等等。在技术不断更新换代的今天，这项技能显得特别重要。它意味着，我们。有了这项技能，那么剩下的能力就变成了一个时间问题。如在那篇《<b>学习的艺术——如何学好一门技术、语言</b>》中提出，<b>输出就是最好的输入</b>。</p><p><br></p><figure><noscript><img src=\"https://pic2.zhimg.com/v2-54f85ee5d27d5d33b24aa2ca641e446b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"400\" class=\"origin_image zh-lightbox-thumb\" width=\"1000\" data-original=\"https://pic2.zhimg.com/v2-54f85ee5d27d5d33b24aa2ca641e446b_r.jpg\"></noscript><img src=\"data:image/svg+xml;utf8,%3Csvg%20xmlns=%27http://www.w3.org/2000/svg%27%20width=%271000%27%20height=%27400%27%3E%3C/svg%3E\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"400\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1000\" data-original=\"https://pic2.zhimg.com/v2-54f85ee5d27d5d33b24aa2ca641e446b_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-54f85ee5d27d5d33b24aa2ca641e446b_b.jpg\"></figure><p><br></p><p><b>解决问题的能力</b>。解决问题是创建价值的根本。在那篇《程序员，你真的会解决问题吗？》中，提到解决问题的四个步骤：</p><ul><li><b>正确识别问题</b></li><li><b>描述清楚问题</b></li><li><b>寻找解决方案</b></li><li><b>解决问题并总结</b></li></ul><p><b>沟通技巧</b>。作为一个工科生，我的语言表达能力一直是有待提高。它与写作稍有不同的是：写作都是思考完的结果，而沟通则是一种实时的反馈机制。这是我在 ThoughtWorks 工作时，发现需要不断打磨地能力，即使在现在我仍然觉得有待改进。但是在今天看来，这种投入是长足有效的，至少沟通能力在不断提高地。我的第一语言是闽南语，而不是普通话，除了口音带来的问题，还需要拥有更好地表达能力。</p><p>作为一个长期加班、只有两点一线的<b>单身程序员</b>，你觉得你一天沟通时间有多少呢？</p><h2>制定一个长期的技能成长计划</h2><p>过去我制定计划的时候，时间上都比较短暂： 1～3 年。</p><blockquote>在工作中，寻找造轮子的乐趣。写多了前端代码之后，我发现前端有些 “无聊”，因为就只是那几个框架换过来换过去。过去，我习惯于在业余时间里，造一些日常用的轮子。直到有一天，我在想每天工作的时候，总会遇到一个个的大坑，这些躺过的坑可以整理成框架一样的东西。所以，想着应该可以尽可能的去创造能用到的轮子。</blockquote><p>如果以 15 年作为职业，那么可以做的事情就多了。</p><p><br></p><figure><noscript><img src=\"https://pic1.zhimg.com/v2-442fdbf7140b558c1c91aebab231fb95_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"400\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic1.zhimg.com/v2-442fdbf7140b558c1c91aebab231fb95_r.jpg\"></noscript><img src=\"data:image/svg+xml;utf8,%3Csvg%20xmlns=%27http://www.w3.org/2000/svg%27%20width=%27800%27%20height=%27400%27%3E%3C/svg%3E\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"400\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"800\" data-original=\"https://pic1.zhimg.com/v2-442fdbf7140b558c1c91aebab231fb95_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-442fdbf7140b558c1c91aebab231fb95_b.jpg\"></figure><p><br></p><p>如，我一直将咨询师（技术咨询）作为未来的职业方向，这是一项面向未来的工作，因此这种学习过程也变成了一种面向未来的学习。而咨询是大部分资深的程序员，几乎<b>每天都会遇到</b>的场景。</p><blockquote>咨询（consultation）意思是通过某些人头脑中所储备的知识经验和通过对各种信息资料的综合加工而进行的综合性研究开发。</blockquote><p>举个简单的例子：</p><p>你的新同事小陈遇到一个问题，但是他不会提问，问了你的一个问题：为什么我的程序跑不起来？</p><p>我们就会去诊断同事遇到的情形，于是就会问他：<b>遇到什么错误？</b></p><p>这时，小陈把错误的日志发了过来给你。</p><p>然后，你开始着手分析问题，问他/她所使用语言的版本？相应的依赖有没有安装？</p><p>Blabla…</p><p>最后，你告诉小陈：重启电脑试试。</p><p>在这里，我们就是 “出售” 了我们的知识与经验，而整个过程，是以我们主动提问为主。如果我们将其作为职业，那么就是咨询师。</p><p><br></p><p><br></p><figure><noscript><img src=\"https://pic2.zhimg.com/v2-d6941461b459048f5fd59e22f9274c2b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"657\" class=\"origin_image zh-lightbox-thumb\" width=\"1000\" data-original=\"https://pic2.zhimg.com/v2-d6941461b459048f5fd59e22f9274c2b_r.jpg\"></noscript><img src=\"data:image/svg+xml;utf8,%3Csvg%20xmlns=%27http://www.w3.org/2000/svg%27%20width=%271000%27%20height=%27657%27%3E%3C/svg%3E\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"657\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1000\" data-original=\"https://pic2.zhimg.com/v2-d6941461b459048f5fd59e22f9274c2b_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-d6941461b459048f5fd59e22f9274c2b_b.jpg\"></figure><p><br></p><p><br></p><p>而问题的关键在于要成为咨询师，不仅仅要拥有、深入相关行业的知识，还要掌握好一些咨询技巧。即，只拥有计算机行业的知识，并不能成为一个技术咨询；同样的，只拥有咨询相关的技能，也很难解决技术问题。作为一个技术人员，技术是一种假以时日就会 “精通” 的能力，而其它的技能则要主动学习掌握。</p><p>在上面这个故事的过程中，我们需要的非技术能力有：</p><ul><li>提问的能力。首先，我们需要学习的就是如何提出<b>有针对性的高质量的问题</b>。这种场景类似于医生诊断病人，我们需要不断地寻问病人的相关症状，而不是问他今天天气怎么样？——这个问题可能是来自于心理医生。而在这个过程中，如果病人先入为主的说，他可能是感冒了。那么，它有可能会影响到我们的判断结果。</li><li>分析和诊断问题。如果我们遇到的是一个 QA （测试人员），那么我们就会要求 QA，重现这个过程。我们才能一步步地向下分析原因，如：QA 输入的是一个 <code>{</code> <code>”city”</code> <code>：”北京”}</code> 的字符，然后后台就挂了，于是你自己尝试并不能发现问题。最后，你才发现原来 “：” 是中文字符。在这个过程里，需要不断地分析和诊断。</li></ul><p>假设，你以 CTO 作为目标，那么你就会发现你要学习的技能。</p><p><br></p><figure><noscript><img src=\"https://pic1.zhimg.com/v2-410ec10d1a52e3353f0f944acc901117_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"644\" data-rawheight=\"300\" class=\"origin_image zh-lightbox-thumb\" width=\"644\" data-original=\"https://pic1.zhimg.com/v2-410ec10d1a52e3353f0f944acc901117_r.jpg\"></noscript><img src=\"data:image/svg+xml;utf8,%3Csvg%20xmlns=%27http://www.w3.org/2000/svg%27%20width=%27644%27%20height=%27300%27%3E%3C/svg%3E\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"644\" data-rawheight=\"300\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"644\" data-original=\"https://pic1.zhimg.com/v2-410ec10d1a52e3353f0f944acc901117_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-410ec10d1a52e3353f0f944acc901117_b.jpg\"></figure><p><br></p><h2>结论</h2><p>如果你无法在一个领域做到做好的，又或者和我一样兴趣广泛，那么你就可以尝试去打造自己的组合技能。</p><p><br></p><figure><noscript><img src=\"https://pic2.zhimg.com/v2-e8fd916ae361b9191fd876619db65f5e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"768\" class=\"origin_image zh-lightbox-thumb\" width=\"1024\" data-original=\"https://pic2.zhimg.com/v2-e8fd916ae361b9191fd876619db65f5e_r.jpg\"></noscript><img src=\"data:image/svg+xml;utf8,%3Csvg%20xmlns=%27http://www.w3.org/2000/svg%27%20width=%271024%27%20height=%27768%27%3E%3C/svg%3E\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"768\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1024\" data-original=\"https://pic2.zhimg.com/v2-e8fd916ae361b9191fd876619db65f5e_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-e8fd916ae361b9191fd876619db65f5e_b.jpg\"></figure><p><br></p><p>如前端开发 + 物联网经验，或者 VR、区块链；又或者是，作为一个开发人员，你拥有相当丰富的金融银行经验；它可以表明出你的稀缺性——前提是你的稀缺是市场所需要的。一手写着前端代码，一手拿着 PASCAL 的编程经验，可能是一无用处的。</p><p><br></p><p>更多精彩内容请关注我的微信公众号：</p><figure><noscript><img src=\"https://pic3.zhimg.com/v2-0f3475c50014444b8b5ce1be93d3c7bb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"419\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic3.zhimg.com/v2-0f3475c50014444b8b5ce1be93d3c7bb_r.jpg\"></noscript><img src=\"data:image/svg+xml;utf8,%3Csvg%20xmlns=%27http://www.w3.org/2000/svg%27%20width=%27640%27%20height=%27419%27%3E%3C/svg%3E\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"419\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic3.zhimg.com/v2-0f3475c50014444b8b5ce1be93d3c7bb_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-0f3475c50014444b8b5ce1be93d3c7bb_b.jpg\"></figure><p></p>', '在去年的一年里，我经历了一次 “升职”：从一个咨（cheng）询（xu）师（yuan）变成了一个高级咨询师。Title 变了，就意味着工作的内容也会发生一些变化。从拒绝升职，到被说服升职，我的一些想法发生了一些改变，开始考虑一些职业生涯的技能。  \n\n> 作为一个程序员，你不可能在一个岗位/ Title上干一辈子，就算你愿意，你老板也不愿意；你老婆也不愿意——你一辈子拿着一样的工资。\n\n发展其它的通用技能，对这就是本文的主题。\n\n开始之前，让我们带着一个问题：假使你是以 CTO 作为程序员生涯的最终目标，突然间，公司的 CTO 变成了你，你觉得你能做什么吗？\n\n职业生涯\n----\n\n在今年一月份里，我看了一本名为《**远见:如何规划职业生涯3大阶段**》，尽管有人会说：书中的道理我们都懂，但是我还是想先扯一下相关的内容。\n\n  \n\n<img src=\"https://pic4.zhimg.com/v2-93d0955c73d2fd486921a220944085c2\\_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"759\" data-rawheight=\"422\" class=\"origin\\_image zh-lightbox-thumb\" width=\"759\" data-original=\"https://pic4.zhimg.com/v2-93d0955c73d2fd486921a220944085c2_r.jpg\">\n\n![](data:image/svg+xml;utf8,%3Csvg%20xmlns=%27http://www.w3.org/2000/svg%27%20width=%27759%27%20height=%27422%27%3E%3C/svg%3E)\n\n  \n\n作者将职业生涯分成了三个阶段，每个阶段差不多要用 15 年的时间：\n\n*   第1阶段：加添燃料，强势开局。耐心打磨经验、技能和关系，为未来的职业生涯做基础。\n*   第2阶段：锚定甜蜜区，聚焦长板。专注于自己的长处，寻找更高的目标和追求。\n*   第3阶段：优化长尾，发挥持续影响力。成为导师，做一些想做的事情。\n\n从本科毕业的年龄 \\+ 45，你可能已经退休了。而到未来，退休年龄可能变成了 65 ，但是这并不重要。\n\n在第一个 15 年里，我们应该**着重于发现和探索自己喜欢做的事情**。如对于多数程序员而言，编程只是一个谋生及存活的工具，在那之上，我们才有足够的财力去做想做的人和事。你现在觉得你喜欢前端开发，可能是因为你没有深入过后端，又或者只是你比别人擅长前端，你就喜欢上前端开发了\n\n除此，在第一个 15 年里，作者也介绍了职场的三大燃料，用于为未来打下基础：\n\n**可迁移技能**。职业生涯中获取并拥有的各种基本能力，这些技能可以在我们从一家公司跳到另一家公司，甚至是一个行业换到另外一个行业是仍然能依靠的能力。如解决问题、沟通等等。 有意义的经验。即拥有多样性的经验，它可以帮助我们成为复合型的人才，以免得我们的职业生涯脆弱不堪。如从传统的电信行业出来的程序员，可能在面对互联网企业，会有些不适应。 持久的人际关系。即职业生态系统，这些人可以是上司、客户、合作伙伴、人才及同类，互相之间可以相互帮助。\n\n  \n\n<img src=\"https://pic4.zhimg.com/v2-85858544afa858d2df735883f8019867\\_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"512\" class=\"origin\\_image zh-lightbox-thumb\" width=\"1024\" data-original=\"https://pic4.zhimg.com/v2-85858544afa858d2df735883f8019867_r.jpg\">\n\n![](data:image/svg+xml;utf8,%3Csvg%20xmlns=%27http://www.w3.org/2000/svg%27%20width=%271024%27%20height=%27512%27%3E%3C/svg%3E)\n\n  \n\n因此在这种情况下，我们会发现：**编程只是普通的一项技能**。代码，每个程序员都会写，每天都在写。每年年终的时候，你写的代码又快又好，并不代表你能涨的工资越多。对于 KPI 公司而言，在哪里、哪个部门写代码，往往更重要。即使在同一个部门，做相似的编码，如果你不能证明你的价值，那么你的 KPI 就不会体现代码的价值。\n\n于是乎，我开始在计划一个更长的学习计划。依现在看来，未来的技能更新变得相当的快，它就像一个《灰犀牛》一样，看我们冲了过来。前提是，我们到那个年龄的时候，没有被人工智能淘汰。\n\n强化可迁移技能\n-------\n\n技能，向来是**到用时方恨少**。如果能在遇到问题的时候，知道自己缺少什么技能，还算是不错的；如果在自己遇到一个问题，不知道自己缺少什么时，情况就没有那么乐观了。\n\n  \n\n<img src=\"https://pic1.zhimg.com/v2-ececf4262f961522ae00ea0c865cebbc\\_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"710\" class=\"origin\\_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-ececf4262f961522ae00ea0c865cebbc_r.jpg\">\n\n![](data:image/svg+xml;utf8,%3Csvg%20xmlns=%27http://www.w3.org/2000/svg%27%20width=%271080%27%20height=%27710%27%3E%3C/svg%3E)\n\n  \n\n但是，问题来了，首先什么是技能？\n\n> 泛指有别于天赋，必须耗费时间经由学习、训练或工作经验，才能获得的能力。\n\n如，编程是一项需要不断打磨地基础技能，它不是我们一生下来就掌握的能力。\n\n然后，我们再回来说说什么是可迁移的技能。\n\n> 也被称为**通用技能**，是职业生涯中除岗位专业能力之外的基本能力，适用于各种职业，能适用岗位不断变化，是伴随人终身的可持续发展能力。 专业技能的运用都是在可迁移技能基础之上。 一般用行为动词来描述，是通用的，可迁移的；通常描述人际交往能力、沟通能力、解决问题的能力、团队合作能力、领导力、适应能力。\n\n而对于程序员来说，这些可迁移的技能有：\n\n*   快速学习的能力\n*   解决问题的能力\n*   沟通技巧\n*   演讲\n*   运动\n*   等等\n\n这些技能适用于不同的行业，不同的领域。\n\n快速学习的能力。快速学习的能力，指的是能快速掌握一项技能、技术的能力。在今天看来，下周你就要上手一个新的技术栈，你要能在这周的时间里：\n\n*   快速入门、阅读文档\n*   搭建环境，编写、理解 hello, world\n*   遵循基本的规范及用法\n*   能理解其设计思想，以编写复杂的用法\n*   **能找到丰富的资源集**\n\n它依赖于，我们拥有丰富的底层相关知识，如编程语言的不同范式、前端框架的基本原理、后端服务的基本架构等等。在技术不断更新换代的今天，这项技能显得特别重要。它意味着，我们。有了这项技能，那么剩下的能力就变成了一个时间问题。如在那篇《**学习的艺术——如何学好一门技术、语言**》中提出，**输出就是最好的输入**。\n\n  \n\n<img src=\"https://pic2.zhimg.com/v2-54f85ee5d27d5d33b24aa2ca641e446b\\_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"400\" class=\"origin\\_image zh-lightbox-thumb\" width=\"1000\" data-original=\"https://pic2.zhimg.com/v2-54f85ee5d27d5d33b24aa2ca641e446b_r.jpg\">\n\n![](data:image/svg+xml;utf8,%3Csvg%20xmlns=%27http://www.w3.org/2000/svg%27%20width=%271000%27%20height=%27400%27%3E%3C/svg%3E)\n\n  \n\n**解决问题的能力**。解决问题是创建价值的根本。在那篇《程序员，你真的会解决问题吗？》中，提到解决问题的四个步骤：\n\n*   **正确识别问题**\n*   **描述清楚问题**\n*   **寻找解决方案**\n*   **解决问题并总结**\n\n**沟通技巧**。作为一个工科生，我的语言表达能力一直是有待提高。它与写作稍有不同的是：写作都是思考完的结果，而沟通则是一种实时的反馈机制。这是我在 ThoughtWorks 工作时，发现需要不断打磨地能力，即使在现在我仍然觉得有待改进。但是在今天看来，这种投入是长足有效的，至少沟通能力在不断提高地。我的第一语言是闽南语，而不是普通话，除了口音带来的问题，还需要拥有更好地表达能力。\n\n作为一个长期加班、只有两点一线的**单身程序员**，你觉得你一天沟通时间有多少呢？\n\n制定一个长期的技能成长计划\n-------------\n\n过去我制定计划的时候，时间上都比较短暂： 1～3 年。\n\n> 在工作中，寻找造轮子的乐趣。写多了前端代码之后，我发现前端有些 “无聊”，因为就只是那几个框架换过来换过去。过去，我习惯于在业余时间里，造一些日常用的轮子。直到有一天，我在想每天工作的时候，总会遇到一个个的大坑，这些躺过的坑可以整理成框架一样的东西。所以，想着应该可以尽可能的去创造能用到的轮子。\n\n如果以 15 年作为职业，那么可以做的事情就多了。\n\n  \n\n<img src=\"https://pic1.zhimg.com/v2-442fdbf7140b558c1c91aebab231fb95\\_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"400\" class=\"origin\\_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic1.zhimg.com/v2-442fdbf7140b558c1c91aebab231fb95_r.jpg\">\n\n![](data:image/svg+xml;utf8,%3Csvg%20xmlns=%27http://www.w3.org/2000/svg%27%20width=%27800%27%20height=%27400%27%3E%3C/svg%3E)\n\n  \n\n如，我一直将咨询师（技术咨询）作为未来的职业方向，这是一项面向未来的工作，因此这种学习过程也变成了一种面向未来的学习。而咨询是大部分资深的程序员，几乎**每天都会遇到**的场景。\n\n> 咨询（consultation）意思是通过某些人头脑中所储备的知识经验和通过对各种信息资料的综合加工而进行的综合性研究开发。\n\n举个简单的例子：\n\n你的新同事小陈遇到一个问题，但是他不会提问，问了你的一个问题：为什么我的程序跑不起来？\n\n我们就会去诊断同事遇到的情形，于是就会问他：**遇到什么错误？**\n\n这时，小陈把错误的日志发了过来给你。\n\n然后，你开始着手分析问题，问他/她所使用语言的版本？相应的依赖有没有安装？\n\nBlabla…\n\n最后，你告诉小陈：重启电脑试试。\n\n在这里，我们就是 “出售” 了我们的知识与经验，而整个过程，是以我们主动提问为主。如果我们将其作为职业，那么就是咨询师。\n\n  \n\n  \n\n<img src=\"https://pic2.zhimg.com/v2-d6941461b459048f5fd59e22f9274c2b\\_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"657\" class=\"origin\\_image zh-lightbox-thumb\" width=\"1000\" data-original=\"https://pic2.zhimg.com/v2-d6941461b459048f5fd59e22f9274c2b_r.jpg\">\n\n![](data:image/svg+xml;utf8,%3Csvg%20xmlns=%27http://www.w3.org/2000/svg%27%20width=%271000%27%20height=%27657%27%3E%3C/svg%3E)\n\n  \n\n  \n\n而问题的关键在于要成为咨询师，不仅仅要拥有、深入相关行业的知识，还要掌握好一些咨询技巧。即，只拥有计算机行业的知识，并不能成为一个技术咨询；同样的，只拥有咨询相关的技能，也很难解决技术问题。作为一个技术人员，技术是一种假以时日就会 “精通” 的能力，而其它的技能则要主动学习掌握。\n\n在上面这个故事的过程中，我们需要的非技术能力有：\n\n*   提问的能力。首先，我们需要学习的就是如何提出**有针对性的高质量的问题**。这种场景类似于医生诊断病人，我们需要不断地寻问病人的相关症状，而不是问他今天天气怎么样？——这个问题可能是来自于心理医生。而在这个过程中，如果病人先入为主的说，他可能是感冒了。那么，它有可能会影响到我们的判断结果。\n*   分析和诊断问题。如果我们遇到的是一个 QA （测试人员），那么我们就会要求 QA，重现这个过程。我们才能一步步地向下分析原因，如：QA 输入的是一个 `{` `”city”` `：”北京”}` 的字符，然后后台就挂了，于是你自己尝试并不能发现问题。最后，你才发现原来 “：” 是中文字符。在这个过程里，需要不断地分析和诊断。\n\n假设，你以 CTO 作为目标，那么你就会发现你要学习的技能。\n\n  \n\n<img src=\"https://pic1.zhimg.com/v2-410ec10d1a52e3353f0f944acc901117\\_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"644\" data-rawheight=\"300\" class=\"origin\\_image zh-lightbox-thumb\" width=\"644\" data-original=\"https://pic1.zhimg.com/v2-410ec10d1a52e3353f0f944acc901117_r.jpg\">\n\n![](data:image/svg+xml;utf8,%3Csvg%20xmlns=%27http://www.w3.org/2000/svg%27%20width=%27644%27%20height=%27300%27%3E%3C/svg%3E)\n\n  \n\n结论\n--\n\n如果你无法在一个领域做到做好的，又或者和我一样兴趣广泛，那么你就可以尝试去打造自己的组合技能。\n\n  \n\n<img src=\"https://pic2.zhimg.com/v2-e8fd916ae361b9191fd876619db65f5e\\_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"768\" class=\"origin\\_image zh-lightbox-thumb\" width=\"1024\" data-original=\"https://pic2.zhimg.com/v2-e8fd916ae361b9191fd876619db65f5e_r.jpg\">\n\n![](data:image/svg+xml;utf8,%3Csvg%20xmlns=%27http://www.w3.org/2000/svg%27%20width=%271024%27%20height=%27768%27%3E%3C/svg%3E)\n\n  \n\n如前端开发 \\+ 物联网经验，或者 VR、区块链；又或者是，作为一个开发人员，你拥有相当丰富的金融银行经验；它可以表明出你的稀缺性——前提是你的稀缺是市场所需要的。一手写着前端代码，一手拿着 PASCAL 的编程经验，可能是一无用处的。\n\n  \n\n更多精彩内容请关注我的微信公众号：\n\n<img src=\"https://pic3.zhimg.com/v2-0f3475c50014444b8b5ce1be93d3c7bb\\_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"419\" class=\"origin\\_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic3.zhimg.com/v2-0f3475c50014444b8b5ce1be93d3c7bb_r.jpg\">\n\n![](data:image/svg+xml;utf8,%3Csvg%20xmlns=%27http://www.w3.org/2000/svg%27%20width=%27640%27%20height=%27419%27%3E%3C/svg%3E)', 0, 1, 0);
INSERT INTO `post` (`id`, `createAt`, `updateAt`, `title`, `description`, `thumb`, `url`, `html`, `markdown`, `views`, `status`, `push`) VALUES
(36, '2018-04-23 11:01:43.904248', '2018-04-23 11:01:43.904248', '2018 年了，你还是只会 npm install 吗？', '编者按：本文转载自掘金，本文已获得作者授权。nodejs社区乃至Web前端工程化领域发展到今天，作为node自带的包管理工具的npm已经成为每个前端开发者必备的工具。但是现实状况是，我们很多人对这个nodejs基础设施的使用和了解还停留在:会用npminstall这里（一言不合就删除整个node_modules目录然后重新install这种事你没做过吗？）当然npm能成为现在世界上最大规模的包管理系统，很大程度上确实归功于它足够用户友好，你看即使我只会执行install也不必太担心出什么大岔子。但是npm', 'https://mmbiz.qpic.cn/mmbiz_png/MpGQUHiaib4ib6j9X9s2kibfaicBLmIm6dUBqymVmiaKqGFEPn0G3VyVnqQjvognHq4cMibayW2400j4OyEtdz5fkMbmA/640?wx_fmt=png', 'https://mp.weixin.qq.com/s/Ox_PX2jdjEBrvoF4LTBg4w', '<p class=\"weekly-start-desc\" style=\"margin-bottom: 20px;border-width: 0px 0px 0px 2px;border-top-style: initial;border-right-style: initial;border-bottom-style: initial;border-left-style: solid;border-top-color: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: rgb(221, 221, 221);padding-left: 10px;line-height: 2;font-size: 14px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;hyphens: auto;color: rgb(153, 153, 153);\">编者按：本文转载自掘金， 本文已获得作者授权。</p><p style=\"margin-top: 8px;margin-bottom: 1.8em;border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;font-size: 15px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;hyphens: auto;color: rgb(51, 51, 51);\">nodejs 社区乃至 Web 前端工程化领域发展到今天，作为 node 自带的包管理工具的 npm 已经成为每个前端开发者必备的工具。但是现实状况是，我们很多人对这个nodejs基础设施的使用和了解还停留在: 会用 <span class=\"code\" style=\"margin-right: 2px;margin-left: 2px;border-width: 1px;border-style: solid;border-color: rgb(225, 225, 232);padding: 2px 4px;font-size: 12px;font-family: monospace;color: rgb(221, 17, 68);background-color: rgb(247, 247, 249);border-radius: 2px;word-break: break-all;word-wrap: break-word;hyphens: auto;\">npm install</span> 这里（一言不合就删除整个 node_modules 目录然后重新 install 这种事你没做过吗？）</p><p style=\"margin-top: 1.8em;margin-bottom: 1.8em;border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;font-size: 15px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;hyphens: auto;color: rgb(51, 51, 51);\">当然 npm 能成为现在世界上最大规模的<strong style=\"border-width: 0px;border-style: initial;border-color: initial;\">包管理系统</strong>，很大程度上确实归功于它足够<strong style=\"border-width: 0px;border-style: initial;border-color: initial;\">用户友好</strong>，你看即使我只会执行 install 也不必太担心出什么大岔子。但是 npm 的功能远不止于 install 一下那么简单，这篇文章帮你扒一扒那些你可能不知道的 npm 原理、特性、技巧，以及（我认为的）最佳实践。</p><p style=\"margin-top: 1.8em;margin-bottom: 1.8em;border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;font-size: 15px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;hyphens: auto;color: rgb(51, 51, 51);\"><span style=\"border-width: 0px;border-style: initial;border-color: initial;text-decoration: line-through;\">你懒得读的 npm 文档，我帮你翻译然后试验整理过来了 🐶🐶🐶</span></p><h2 style=\"border-width: 0px;border-style: initial;border-color: initial;word-break: break-all;word-wrap: break-word;line-height: 110px;height: 110px;font-size: 18px;color: rgb(100, 159, 12);text-align: center;background-image: url(\"https://mmbiz.qpic.cn/mmbiz_png/MpGQUHiaib4ib6j9X9s2kibfaicBLmIm6dUBq1YM6xzAOuiaQW3qCATvwcQCI9Hh21gicUUnZ0FFtbjdVoCQMIZjDBUaA/640?wx_fmt=png\");background-position: center center;background-size: 150px 110px;background-repeat: no-repeat;background-attachment: initial;background-origin: initial;background-clip: initial;\">1. npm init</h2><p style=\"margin-top: 8px;margin-bottom: 1.8em;border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;font-size: 15px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;hyphens: auto;color: rgb(51, 51, 51);\">我们都知道 package.json 文件是用来定义一个 package 的描述文件, 也知道<span class=\"code\" style=\"margin-right: 2px;margin-left: 2px;border-width: 1px;border-style: solid;border-color: rgb(225, 225, 232);padding: 2px 4px;font-size: 12px;font-family: monospace;color: rgb(221, 17, 68);background-color: rgb(247, 247, 249);border-radius: 2px;word-break: break-all;word-wrap: break-word;hyphens: auto;\">npm init</span> 命令用来初始化一个简单的 package.json 文件，执行该命令后终端会依次询问 name, version, description 等字段。</p><h3 style=\"margin-top: 20px;margin-bottom: 20px;border-width: 0px;border-style: initial;border-color: initial;padding-left: 25px;font-weight: bold;word-break: break-all;word-wrap: break-word;background-image: url(\"https://mmbiz.qpic.cn/mmbiz_png/MpGQUHiaib4ib6j9X9s2kibfaicBLmIm6dUBqor8qjBj66mDs0V98xzicMIaHT0lv8c30WsIR3MNHeCGz091kCp7CqVg/640?wx_fmt=png\");background-position: 0px 8px;background-size: 20px 16px;background-repeat: no-repeat;background-attachment: initial;background-origin: initial;background-clip: initial;color: rgb(100, 159, 12);line-height: 2;\">1.1 npm init 执行默认行为</h3><p style=\"margin-top: 8px;margin-bottom: 1.8em;border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;font-size: 15px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;hyphens: auto;color: rgb(51, 51, 51);\">而如果想要偷懒不想一直按 enter，在命令后追加 --yes 参数即可，其作用与一路下一步相同。</p><blockquote class=\"code-wrap\" style=\"border-width: 0px;border-style: initial;border-color: initial;padding-left: 0px;color: rgb(51, 51, 51);\"><pre class=\"language-bash\" style=\"border-width: 0px;border-style: initial;border-color: initial;padding: 1em;overflow: auto;background-color: rgb(45, 45, 45);color: rgb(204, 204, 204);\"><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;hyphens: auto;white-space: nowrap !important;\"><span class=\"token function\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(240, 141, 73);\">npm</span> init --yes</p></pre></blockquote><h3 style=\"margin-top: 20px;margin-bottom: 20px;border-width: 0px;border-style: initial;border-color: initial;padding-left: 25px;font-weight: bold;word-break: break-all;word-wrap: break-word;background-image: url(\"https://mmbiz.qpic.cn/mmbiz_png/MpGQUHiaib4ib6j9X9s2kibfaicBLmIm6dUBqor8qjBj66mDs0V98xzicMIaHT0lv8c30WsIR3MNHeCGz091kCp7CqVg/640?wx_fmt=png\");background-position: 0px 8px;background-size: 20px 16px;background-repeat: no-repeat;background-attachment: initial;background-origin: initial;background-clip: initial;color: rgb(100, 159, 12);line-height: 2;\">1.2 自定义 npm init 行为</h3><p style=\"margin-top: 8px;margin-bottom: 1.8em;border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;font-size: 15px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;hyphens: auto;color: rgb(51, 51, 51);\">npm init 命令的原理并不复杂，调用脚本，输出一个初始化的 package.json 文件就是了。所以相应地，定制 npm init 命令的实现方式也很简单，在 Home 目录创建一个 <span class=\"code\" style=\"margin-right: 2px;margin-left: 2px;border-width: 1px;border-style: solid;border-color: rgb(225, 225, 232);padding: 2px 4px;font-size: 12px;font-family: monospace;color: rgb(221, 17, 68);background-color: rgb(247, 247, 249);border-radius: 2px;word-break: break-all;word-wrap: break-word;hyphens: auto;\">.npm-init.js</span> 即可，该文件的 module.exports 即为 package.json 配置内容，需要获取用户输入时候，使用 <span class=\"code\" style=\"margin-right: 2px;margin-left: 2px;border-width: 1px;border-style: solid;border-color: rgb(225, 225, 232);padding: 2px 4px;font-size: 12px;font-family: monospace;color: rgb(221, 17, 68);background-color: rgb(247, 247, 249);border-radius: 2px;word-break: break-all;word-wrap: break-word;hyphens: auto;\">prompt()</span> 方法即可。</p><p style=\"margin-top: 1.8em;margin-bottom: 1.8em;border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;font-size: 15px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;hyphens: auto;color: rgb(51, 51, 51);\">例如编写这样的 ~/.npm-init.js</p><blockquote class=\"code-wrap\" style=\"border-width: 0px;border-style: initial;border-color: initial;padding-left: 0px;color: rgb(51, 51, 51);\"><pre class=\"language-js\" style=\"border-width: 0px;border-style: initial;border-color: initial;padding: 1em;overflow: auto;background-color: rgb(45, 45, 45);color: rgb(204, 204, 204);\"><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;hyphens: auto;white-space: nowrap !important;\"><span class=\"token keyword\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(204, 153, 205);\">const</span> desc <span class=\"token operator\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(103, 205, 204);\">=</span> <span class=\"token function\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(240, 141, 73);\">prompt</span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">(</span><span class=\"token string\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(126, 198, 153);\">\'description?\'</span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">,</span> <span class=\"token string\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(126, 198, 153);\">\'A new package...\'</span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">)</span></p><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;hyphens: auto;white-space: nowrap !important;\"><span class=\"token keyword\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(204, 153, 205);\">const</span> bar <span class=\"token operator\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(103, 205, 204);\">=</span> <span class=\"token function\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(240, 141, 73);\">prompt</span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">(</span><span class=\"token string\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(126, 198, 153);\">\'bar?\'</span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">,</span> <span class=\"token string\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(126, 198, 153);\">\'\'</span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">)</span></p><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;hyphens: auto;white-space: nowrap !important;\"><span class=\"token keyword\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(204, 153, 205);\">const</span> count <span class=\"token operator\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(103, 205, 204);\">=</span> <span class=\"token function\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(240, 141, 73);\">prompt</span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">(</span><span class=\"token string\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(126, 198, 153);\">\'count?\'</span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">,</span> <span class=\"token string\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(126, 198, 153);\">\'42\'</span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">)</span></p><p class=\"lbr\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 0;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;hyphens: auto;height: 6px;white-space: nowrap !important;\"><br style=\"border-width: 0px;border-style: initial;border-color: initial;\"></p><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;hyphens: auto;white-space: nowrap !important;\">module<span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">.</span>exports <span class=\"token operator\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(103, 205, 204);\">=</span> <span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">{</span></p><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;hyphens: auto;white-space: nowrap !important;\">  key<span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">:</span> <span class=\"token string\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(126, 198, 153);\">\'value\'</span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">,</span></p><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;hyphens: auto;white-space: nowrap !important;\">  foo<span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">:</span> <span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">{</span></p><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;hyphens: auto;white-space: nowrap !important;\">    bar<span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">:</span> bar<span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">,</span></p><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;hyphens: auto;white-space: nowrap !important;\">    count<span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">:</span> count</p><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;hyphens: auto;white-space: nowrap !important;\">  <span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">}</span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">,</span></p><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;hyphens: auto;white-space: nowrap !important;\">  name<span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">:</span> <span class=\"token function\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(240, 141, 73);\">prompt</span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">(</span><span class=\"token string\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(126, 198, 153);\">\'name?\'</span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">,</span> process<span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">.</span><span class=\"token function\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(240, 141, 73);\">cwd</span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">(</span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">)</span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">.</span><span class=\"token function\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(240, 141, 73);\">split</span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">(</span><span class=\"token string\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(126, 198, 153);\">\'/\'</span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">)</span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">.</span><span class=\"token function\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(240, 141, 73);\">pop</span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">(</span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">)</span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">)</span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">,</span></p><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;hyphens: auto;white-space: nowrap !important;\">  version<span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">:</span> <span class=\"token function\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(240, 141, 73);\">prompt</span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">(</span><span class=\"token string\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(126, 198, 153);\">\'version?\'</span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">,</span> <span class=\"token string\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(126, 198, 153);\">\'0.1.0\'</span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">)</span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">,</span></p><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;hyphens: auto;white-space: nowrap !important;\">  description<span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">:</span> desc<span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">,</span></p><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;hyphens: auto;white-space: nowrap !important;\">  main<span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">:</span> <span class=\"token string\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(126, 198, 153);\">\'index.js\'</span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">,</span></p><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;hyphens: auto;white-space: nowrap !important;\"><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">}</span></p></pre></blockquote><p style=\"margin-top: 1.8em;margin-bottom: 1.8em;border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;font-size: 15px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;hyphens: auto;color: rgb(51, 51, 51);\">此时在 ~/hello 目录下执行 <span class=\"code\" style=\"margin-right: 2px;margin-left: 2px;border-width: 1px;border-style: solid;border-color: rgb(225, 225, 232);padding: 2px 4px;font-size: 12px;font-family: monospace;color: rgb(221, 17, 68);background-color: rgb(247, 247, 249);border-radius: 2px;word-break: break-all;word-wrap: break-word;hyphens: auto;\">npm init</span> 将会得到这样的 package.json:</p><blockquote class=\"code-wrap\" style=\"border-width: 0px;border-style: initial;border-color: initial;padding-left: 0px;color: rgb(51, 51, 51);\"><pre class=\"language-json\" style=\"border-width: 0px;border-style: initial;border-color: initial;padding: 1em;overflow: auto;background-color: rgb(45, 45, 45);color: rgb(204, 204, 204);\"><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;hyphens: auto;white-space: nowrap !important;\"><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">{</span></p><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;hyphens: auto;white-space: nowrap !important;\">  <span class=\"token property\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(248, 197, 85);\">\"key\"</span><span class=\"token operator\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(103, 205, 204);\">:</span> <span class=\"token string\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(126, 198, 153);\">\"value\"</span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">,</span></p><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;hyphens: auto;white-space: nowrap !important;\">  <span class=\"token property\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(248, 197, 85);\">\"foo\"</span><span class=\"token operator\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(103, 205, 204);\">:</span> <span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">{</span></p><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;hyphens: auto;white-space: nowrap !important;\">    <span class=\"token property\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(248, 197, 85);\">\"bar\"</span><span class=\"token operator\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(103, 205, 204);\">:</span> <span class=\"token string\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(126, 198, 153);\">\"\"</span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">,</span></p><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;hyphens: auto;white-space: nowrap !important;\">    <span class=\"token property\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(248, 197, 85);\">\"count\"</span><span class=\"token operator\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(103, 205, 204);\">:</span> <span class=\"token string\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(126, 198, 153);\">\"42\"</span></p><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;hyphens: auto;white-space: nowrap !important;\">  <span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">}</span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">,</span></p><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;hyphens: auto;white-space: nowrap !important;\">  <span class=\"token property\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(248, 197, 85);\">\"name\"</span><span class=\"token operator\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(103, 205, 204);\">:</span> <span class=\"token string\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(126, 198, 153);\">\"hello\"</span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">,</span></p><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;hyphens: auto;white-space: nowrap !important;\">  <span class=\"token property\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(248, 197, 85);\">\"version\"</span><span class=\"token operator\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(103, 205, 204);\">:</span> <span class=\"token string\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(126, 198, 153);\">\"0.1.0\"</span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">,</span></p><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;hyphens: auto;white-space: nowrap !important;\">  <span class=\"token property\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(248, 197, 85);\">\"description\"</span><span class=\"token operator\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(103, 205, 204);\">:</span> <span class=\"token string\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(126, 198, 153);\">\"A new package...\"</span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">,</span></p><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;hyphens: auto;white-space: nowrap !important;\">  <span class=\"token property\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(248, 197, 85);\">\"main\"</span><span class=\"token operator\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(103, 205, 204);\">:</span> <span class=\"token string\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(126, 198, 153);\">\"index.js\"</span></p><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;hyphens: auto;white-space: nowrap !important;\"><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">}</span></p></pre></blockquote><p style=\"margin-top: 1.8em;margin-bottom: 1.8em;border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;font-size: 15px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;hyphens: auto;color: rgb(51, 51, 51);\">除了生成 package.json, 因为 .npm-init.js 是一个常规的模块，意味着我们可以执行随便什么 node 脚本可以执行的任务。例如通过 fs 创建 README, .eslintrc 等项目必需文件，实现项目脚手架的作用。</p><h2 style=\"border-width: 0px;border-style: initial;border-color: initial;word-break: break-all;word-wrap: break-word;line-height: 110px;height: 110px;font-size: 18px;color: rgb(100, 159, 12);text-align: center;background-image: url(\"https://mmbiz.qpic.cn/mmbiz_png/MpGQUHiaib4ib6j9X9s2kibfaicBLmIm6dUBq1YM6xzAOuiaQW3qCATvwcQCI9Hh21gicUUnZ0FFtbjdVoCQMIZjDBUaA/640?wx_fmt=png\");background-position: center center;background-size: 150px 110px;background-repeat: no-repeat;background-attachment: initial;background-origin: initial;background-clip: initial;\">2. 依赖包安装</h2><p style=\"margin-top: 8px;margin-bottom: 1.8em;border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;font-size: 15px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;hyphens: auto;color: rgb(51, 51, 51);\">依赖管理是 npm 的核心功能，原理就是执行 <span class=\"code\" style=\"margin-right: 2px;margin-left: 2px;border-width: 1px;border-style: solid;border-color: rgb(225, 225, 232);padding: 2px 4px;font-size: 12px;font-family: monospace;color: rgb(221, 17, 68);background-color: rgb(247, 247, 249);border-radius: 2px;word-break: break-all;word-wrap: break-word;hyphens: auto;\">npm install</span> 从 package.json 中的 dependencies, devDependencies 将依赖包安装到当前目录的 ./node_modules 文件夹中。</p><h3 style=\"margin-top: 20px;margin-bottom: 20px;border-width: 0px;border-style: initial;border-color: initial;padding-left: 25px;font-weight: bold;word-break: break-all;word-wrap: break-word;background-image: url(\"https://mmbiz.qpic.cn/mmbiz_png/MpGQUHiaib4ib6j9X9s2kibfaicBLmIm6dUBqor8qjBj66mDs0V98xzicMIaHT0lv8c30WsIR3MNHeCGz091kCp7CqVg/640?wx_fmt=png\");background-position: 0px 8px;background-size: 20px 16px;background-repeat: no-repeat;background-attachment: initial;background-origin: initial;background-clip: initial;color: rgb(100, 159, 12);line-height: 2;\">2.1 package定义</h3><p style=\"margin-top: 8px;margin-bottom: 1.8em;border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;font-size: 15px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;hyphens: auto;color: rgb(51, 51, 51);\">我们都知道要手动安装一个包时，执行 <span class=\"code\" style=\"margin-right: 2px;margin-left: 2px;border-width: 1px;border-style: solid;border-color: rgb(225, 225, 232);padding: 2px 4px;font-size: 12px;font-family: monospace;color: rgb(221, 17, 68);background-color: rgb(247, 247, 249);border-radius: 2px;word-break: break-all;word-wrap: break-word;hyphens: auto;\">npm install <package></span> 命令即可。这里的第三个参数 package 通常就是我们所要安装的包名，默认配置下 npm 会从默认的源 (Registry) 中查找该包名对应的包地址，并下载安装。但在 npm 的世界里，除了简单的指定包名, package 还可以是一个指向有效包名的 http url/git url/文件夹路径。</p><p style=\"margin-top: 1.8em;margin-bottom: 1.8em;border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;font-size: 15px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;hyphens: auto;color: rgb(51, 51, 51);\">阅读 npm的文档， 我们会发现package 准确的定义，只要符合以下 a) 到 g) 其中之一条件，就是一个 package:</p><table width=\"408\"><thead style=\"border-width: 0px 0px 2px;border-top-style: initial;border-right-style: initial;border-bottom-style: solid;border-left-style: initial;border-top-color: initial;border-right-color: initial;border-bottom-color: rgb(20, 145, 232);border-left-color: initial;background-color: rgb(247, 247, 247);\"><tr style=\"border-width: 0px 0px 1px;border-top-style: initial;border-right-style: initial;border-bottom-style: solid;border-left-style: initial;border-top-color: initial;border-right-color: initial;border-bottom-color: rgb(20, 145, 232);border-left-color: initial;\"><th style=\"border-width: 0px;border-style: initial;border-color: initial;padding-right: 5px;padding-left: 5px;line-height: 2;font-size: 12px;overflow: hidden;min-width: 50px;\">#</th><th style=\"border-width: 0px;border-style: initial;border-color: initial;padding-right: 5px;padding-left: 15px;line-height: 2;font-size: 12px;overflow: hidden;min-width: 50px;\">说明</th><th style=\"border-width: 0px;border-style: initial;border-color: initial;padding-right: 5px;padding-left: 15px;line-height: 2;font-size: 12px;overflow: hidden;min-width: 50px;\">例子</th></tr></thead><tbody style=\"border-width: 0px;border-style: initial;border-color: initial;\"><tr style=\"border-width: 0px 0px 1px;border-top-style: initial;border-right-style: initial;border-bottom-style: solid;border-left-style: initial;border-top-color: initial;border-right-color: initial;border-bottom-color: rgb(20, 145, 232);border-left-color: initial;\"><td style=\"border-width: 0px;border-style: initial;border-color: initial;padding-right: 5px;padding-left: 5px;line-height: 2;font-size: 12px;overflow: hidden;min-width: 50px;\">a)</td><td style=\"border-width: 0px;border-style: initial;border-color: initial;padding-right: 5px;padding-left: 15px;line-height: 2;font-size: 12px;overflow: hidden;min-width: 50px;\">一个包含了程序和描述该程序的 package.json 文件 的 <strong style=\"border-width: 0px;border-style: initial;border-color: initial;\">文件夹</strong></td><td style=\"border-width: 0px;border-style: initial;border-color: initial;padding-right: 5px;padding-left: 15px;line-height: 2;font-size: 12px;overflow: hidden;min-width: 50px;\">./local-module/</td></tr><tr style=\"border-width: 0px 0px 1px;border-top-style: initial;border-right-style: initial;border-bottom-style: solid;border-left-style: initial;border-top-color: initial;border-right-color: initial;border-bottom-color: rgb(20, 145, 232);border-left-color: initial;\"><td style=\"border-width: 0px;border-style: initial;border-color: initial;padding-right: 5px;padding-left: 5px;line-height: 2;font-size: 12px;overflow: hidden;min-width: 50px;\">b)</td><td style=\"border-width: 0px;border-style: initial;border-color: initial;padding-right: 5px;padding-left: 15px;line-height: 2;font-size: 12px;overflow: hidden;min-width: 50px;\">一个包含了 (a) 的 <strong style=\"border-width: 0px;border-style: initial;border-color: initial;\">gzip 压缩文件</strong></td><td style=\"border-width: 0px;border-style: initial;border-color: initial;padding-right: 5px;padding-left: 15px;line-height: 2;font-size: 12px;overflow: hidden;min-width: 50px;\">./module.tar.gz</td></tr><tr style=\"border-width: 0px 0px 1px;border-top-style: initial;border-right-style: initial;border-bottom-style: solid;border-left-style: initial;border-top-color: initial;border-right-color: initial;border-bottom-color: rgb(20, 145, 232);border-left-color: initial;\"><td style=\"border-width: 0px;border-style: initial;border-color: initial;padding-right: 5px;padding-left: 5px;line-height: 2;font-size: 12px;overflow: hidden;min-width: 50px;\">c)</td><td style=\"border-width: 0px;border-style: initial;border-color: initial;padding-right: 5px;padding-left: 15px;line-height: 2;font-size: 12px;overflow: hidden;min-width: 50px;\">一个可以下载得到 (b) 资源的 <strong style=\"border-width: 0px;border-style: initial;border-color: initial;\">url</strong> (通常是 http(s) url)</td><td style=\"border-width: 0px;border-style: initial;border-color: initial;padding-right: 5px;padding-left: 15px;line-height: 2;font-size: 12px;overflow: hidden;min-width: 50px;\">https://registry.npmjs.org/webpack/-/webpack-4.1.0.tgz</td></tr><tr style=\"border-width: 0px 0px 1px;border-top-style: initial;border-right-style: initial;border-bottom-style: solid;border-left-style: initial;border-top-color: initial;border-right-color: initial;border-bottom-color: rgb(20, 145, 232);border-left-color: initial;\"><td style=\"border-width: 0px;border-style: initial;border-color: initial;padding-right: 5px;padding-left: 5px;line-height: 2;font-size: 12px;overflow: hidden;min-width: 50px;\">d)</td><td style=\"border-width: 0px;border-style: initial;border-color: initial;padding-right: 5px;padding-left: 15px;line-height: 2;font-size: 12px;overflow: hidden;min-width: 50px;\">一个格式为 <span class=\"code\" style=\"margin-right: 2px;margin-left: 2px;border-width: 1px;border-style: solid;border-color: rgb(225, 225, 232);padding: 2px 4px;font-family: monospace;color: rgb(221, 17, 68);background-color: rgb(247, 247, 249);border-radius: 2px;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;hyphens: auto;\"><name>@<version></span> 的字符串，可指向 npm 源(通常是官方源 npmjs.org)上已发布的可访问 url，且该 url 满足条件 (c)</td><td style=\"border-width: 0px;border-style: initial;border-color: initial;padding-right: 5px;padding-left: 15px;line-height: 2;font-size: 12px;overflow: hidden;min-width: 50px;\">webpack@4.1.0</td></tr><tr style=\"border-width: 0px 0px 1px;border-top-style: initial;border-right-style: initial;border-bottom-style: solid;border-left-style: initial;border-top-color: initial;border-right-color: initial;border-bottom-color: rgb(20, 145, 232);border-left-color: initial;\"><td style=\"border-width: 0px;border-style: initial;border-color: initial;padding-right: 5px;padding-left: 5px;line-height: 2;font-size: 12px;overflow: hidden;min-width: 50px;\">e)</td><td style=\"border-width: 0px;border-style: initial;border-color: initial;padding-right: 5px;padding-left: 15px;line-height: 2;font-size: 12px;overflow: hidden;min-width: 50px;\">一个格式为 <span class=\"code\" style=\"margin-right: 2px;margin-left: 2px;border-width: 1px;border-style: solid;border-color: rgb(225, 225, 232);padding: 2px 4px;font-family: monospace;color: rgb(221, 17, 68);background-color: rgb(247, 247, 249);border-radius: 2px;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;hyphens: auto;\"><name>@<tag></span> 的字符串，在 npm 源上该<span class=\"code\" style=\"margin-right: 2px;margin-left: 2px;border-width: 1px;border-style: solid;border-color: rgb(225, 225, 232);padding: 2px 4px;font-family: monospace;color: rgb(221, 17, 68);background-color: rgb(247, 247, 249);border-radius: 2px;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;hyphens: auto;\"><tag></span>指向某 <span class=\"code\" style=\"margin-right: 2px;margin-left: 2px;border-width: 1px;border-style: solid;border-color: rgb(225, 225, 232);padding: 2px 4px;font-family: monospace;color: rgb(221, 17, 68);background-color: rgb(247, 247, 249);border-radius: 2px;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;hyphens: auto;\"><version></span> 得到 <span class=\"code\" style=\"margin-right: 2px;margin-left: 2px;border-width: 1px;border-style: solid;border-color: rgb(225, 225, 232);padding: 2px 4px;font-family: monospace;color: rgb(221, 17, 68);background-color: rgb(247, 247, 249);border-radius: 2px;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;hyphens: auto;\"><name>@<version></span>，后者满足条件 (d)</td><td style=\"border-width: 0px;border-style: initial;border-color: initial;padding-right: 5px;padding-left: 15px;line-height: 2;font-size: 12px;overflow: hidden;min-width: 50px;\">webpack@latest</td></tr><tr style=\"border-width: 0px 0px 1px;border-top-style: initial;border-right-style: initial;border-bottom-style: solid;border-left-style: initial;border-top-color: initial;border-right-color: initial;border-bottom-color: rgb(20, 145, 232);border-left-color: initial;\"><td style=\"border-width: 0px;border-style: initial;border-color: initial;padding-right: 5px;padding-left: 5px;line-height: 2;font-size: 12px;overflow: hidden;min-width: 50px;\">f)</td><td style=\"border-width: 0px;border-style: initial;border-color: initial;padding-right: 5px;padding-left: 15px;line-height: 2;font-size: 12px;overflow: hidden;min-width: 50px;\">一个格式为 <span class=\"code\" style=\"margin-right: 2px;margin-left: 2px;border-width: 1px;border-style: solid;border-color: rgb(225, 225, 232);padding: 2px 4px;font-family: monospace;color: rgb(221, 17, 68);background-color: rgb(247, 247, 249);border-radius: 2px;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;hyphens: auto;\"><name></span> 的字符串，默认添加 <span class=\"code\" style=\"margin-right: 2px;margin-left: 2px;border-width: 1px;border-style: solid;border-color: rgb(225, 225, 232);padding: 2px 4px;font-family: monospace;color: rgb(221, 17, 68);background-color: rgb(247, 247, 249);border-radius: 2px;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;hyphens: auto;\">latest</span> 标签所得到的 <span class=\"code\" style=\"margin-right: 2px;margin-left: 2px;border-width: 1px;border-style: solid;border-color: rgb(225, 225, 232);padding: 2px 4px;font-family: monospace;color: rgb(221, 17, 68);background-color: rgb(247, 247, 249);border-radius: 2px;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;hyphens: auto;\"><name>@latest</span> 满足条件 (e)</td><td style=\"border-width: 0px;border-style: initial;border-color: initial;padding-right: 5px;padding-left: 15px;line-height: 2;font-size: 12px;overflow: hidden;min-width: 50px;\">webpack</td></tr><tr style=\"border-width: 0px 0px 1px;border-top-style: initial;border-right-style: initial;border-bottom-style: solid;border-left-style: initial;border-top-color: initial;border-right-color: initial;border-bottom-color: rgb(20, 145, 232);border-left-color: initial;\"><td style=\"border-width: 0px;border-style: initial;border-color: initial;padding-right: 5px;padding-left: 5px;line-height: 2;font-size: 12px;overflow: hidden;min-width: 50px;\">g)</td><td style=\"border-width: 0px;border-style: initial;border-color: initial;padding-right: 5px;padding-left: 15px;line-height: 2;font-size: 12px;overflow: hidden;min-width: 50px;\">一个 <strong style=\"border-width: 0px;border-style: initial;border-color: initial;\">git url</strong>, 该 url 所指向的代码库满足条件 (a)</td><td style=\"border-width: 0px;border-style: initial;border-color: initial;padding-right: 5px;padding-left: 15px;line-height: 2;font-size: 12px;overflow: hidden;min-width: 50px;\">git@github.com:webpack/webpack.git</td></tr></tbody></table><h3 style=\"margin-top: 20px;margin-bottom: 20px;border-width: 0px;border-style: initial;border-color: initial;padding-left: 25px;font-weight: bold;word-break: break-all;word-wrap: break-word;background-image: url(\"https://mmbiz.qpic.cn/mmbiz_png/MpGQUHiaib4ib6j9X9s2kibfaicBLmIm6dUBqor8qjBj66mDs0V98xzicMIaHT0lv8c30WsIR3MNHeCGz091kCp7CqVg/640?wx_fmt=png\");background-position: 0px 8px;background-size: 20px 16px;background-repeat: no-repeat;background-attachment: initial;background-origin: initial;background-clip: initial;color: rgb(100, 159, 12);line-height: 2;\">2.2 安装本地包/远程git仓库包</h3><p style=\"margin-top: 8px;margin-bottom: 1.8em;border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;font-size: 15px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;hyphens: auto;color: rgb(51, 51, 51);\">上面表格的定义意味着，我们在共享依赖包时，并不是非要将包发表到 npm 源上才可以提供给使用者来安装。这对于私有的不方便 publish 到远程源（即使是私有源），或者需要对某官方源进行改造，但依然需要把包共享出去的场景来说非常实用。</p><p style=\"margin-top: 1.8em;margin-bottom: 1.8em;border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;font-size: 15px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;hyphens: auto;color: rgb(51, 51, 51);\"><strong style=\"border-width: 0px;border-style: initial;border-color: initial;\">场景1: 本地模块引用</strong></p><p style=\"margin-top: 1.8em;margin-bottom: 1.8em;border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;font-size: 15px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;hyphens: auto;color: rgb(51, 51, 51);\">nodejs 应用开发中不可避免有模块间调用，例如在实践中经常会把需要被频繁引用的配置模块放到应用根目录；于是在创建了很多层级的目录、文件后，很可能会遇到这样的代码:</p><blockquote class=\"code-wrap\" style=\"border-width: 0px;border-style: initial;border-color: initial;padding-left: 0px;color: rgb(51, 51, 51);\"><pre class=\"language-js\" style=\"border-width: 0px;border-style: initial;border-color: initial;padding: 1em;overflow: auto;background-color: rgb(45, 45, 45);color: rgb(204, 204, 204);\"><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;hyphens: auto;white-space: nowrap !important;\"><span class=\"token keyword\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(204, 153, 205);\">const</span> config <span class=\"token operator\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(103, 205, 204);\">=</span> <span class=\"token function\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(240, 141, 73);\">require</span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">(</span><span class=\"token string\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(126, 198, 153);\">\'../../../../config.js\'</span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">)</span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">;</span></p></pre></blockquote><p style=\"margin-top: 1.8em;margin-bottom: 1.8em;border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;font-size: 15px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;hyphens: auto;color: rgb(51, 51, 51);\">除了看上去很丑以外，这样的路径引用也不利于代码的重构。并且身为程序员的自我修养告诉我们，这样重复的代码多了也就意味着是时候把这个模块分离出来供应用内其他模块共享了。例如这个例子里的 config.js 非常适合封装为 package 放到 node_modules 目录下，共享给同应用内其他模块。</p><p style=\"margin-top: 1.8em;margin-bottom: 1.8em;border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;font-size: 15px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;hyphens: auto;color: rgb(51, 51, 51);\">无需手动拷贝文件或者创建软链接到 node_modules 目录，npm 有更优雅的解决方案。</p><p style=\"margin-top: 1.8em;margin-bottom: 1.8em;border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;font-size: 15px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;hyphens: auto;color: rgb(51, 51, 51);\"><strong style=\"border-width: 0px;border-style: initial;border-color: initial;\">方案：</strong>1. 创建 config 包:<br style=\"border-width: 0px;border-style: initial;border-color: initial;\">    新增 config 文件夹; 重命名 config.js 为 config/index.js 文件; 创建 package.json 定义 config 包</p><blockquote class=\"code-wrap\" style=\"border-width: 0px;border-style: initial;border-color: initial;padding-left: 0px;color: rgb(51, 51, 51);\"><pre class=\"language-\" style=\"border-width: 0px;border-style: initial;border-color: initial;padding: 1em;overflow: auto;background-color: rgb(45, 45, 45);color: rgb(204, 204, 204);\"><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;hyphens: auto;white-space: nowrap !important;\"><span class=\"token template-string\" style=\"border-width: 0px;border-style: initial;border-color: initial;\"><span class=\"token string\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(126, 198, 153);\">``</span></span><span class=\"token template-string\" style=\"border-width: 0px;border-style: initial;border-color: initial;\"><span class=\"token string\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(126, 198, 153);\">`json</span></span></p><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;hyphens: auto;white-space: nowrap !important;\">{</p><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;hyphens: auto;white-space: nowrap !important;\">    \"name\": \"config\",</p><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;hyphens: auto;white-space: nowrap !important;\">    \"main\": \"index.js\",</p><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;hyphens: auto;white-space: nowrap !important;\">    \"version\": \"0.1.0\"</p><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;hyphens: auto;white-space: nowrap !important;\">}</p><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;hyphens: auto;white-space: nowrap !important;\">`<span class=\"token template-string\" style=\"border-width: 0px;border-style: initial;border-color: initial;\"><span class=\"token string\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(126, 198, 153);\">``</span></span></p></pre></blockquote><p style=\"margin-top: 1.8em;margin-bottom: 1.8em;border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;font-size: 15px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;hyphens: auto;color: rgb(51, 51, 51);\">2. 在应用层 package.json 文件中新增依赖项，然后执行 <span class=\"code\" style=\"margin-right: 2px;margin-left: 2px;border-width: 1px;border-style: solid;border-color: rgb(225, 225, 232);padding: 2px 4px;font-size: 12px;font-family: monospace;color: rgb(221, 17, 68);background-color: rgb(247, 247, 249);border-radius: 2px;word-break: break-all;word-wrap: break-word;hyphens: auto;\">npm install</span>; 或直接执行第 3 步</p><blockquote class=\"code-wrap\" style=\"border-width: 0px;border-style: initial;border-color: initial;padding-left: 0px;color: rgb(51, 51, 51);\"><pre class=\"language-\" style=\"border-width: 0px;border-style: initial;border-color: initial;padding: 1em;overflow: auto;background-color: rgb(45, 45, 45);color: rgb(204, 204, 204);\"><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;hyphens: auto;white-space: nowrap !important;\"><span class=\"token template-string\" style=\"border-width: 0px;border-style: initial;border-color: initial;\"><span class=\"token string\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(126, 198, 153);\">``</span></span><span class=\"token template-string\" style=\"border-width: 0px;border-style: initial;border-color: initial;\"><span class=\"token string\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(126, 198, 153);\">`json</span></span></p><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;hyphens: auto;white-space: nowrap !important;\">{</p><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;hyphens: auto;white-space: nowrap !important;\">    \"dependencies\": {</p><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;hyphens: auto;white-space: nowrap !important;\">        \"config\": \"file:./config\"</p><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;hyphens: auto;white-space: nowrap !important;\">    }</p><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;hyphens: auto;white-space: nowrap !important;\">}</p><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;hyphens: auto;white-space: nowrap !important;\">`<span class=\"token template-string\" style=\"border-width: 0px;border-style: initial;border-color: initial;\"><span class=\"token string\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(126, 198, 153);\">``</span></span></p></pre></blockquote><p style=\"margin-top: 1.8em;margin-bottom: 1.8em;border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;font-size: 15px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;hyphens: auto;color: rgb(51, 51, 51);\">3. （等价于第 2 步）直接在应用目录执行 <span class=\"code\" style=\"margin-right: 2px;margin-left: 2px;border-width: 1px;border-style: solid;border-color: rgb(225, 225, 232);padding: 2px 4px;font-size: 12px;font-family: monospace;color: rgb(221, 17, 68);background-color: rgb(247, 247, 249);border-radius: 2px;word-break: break-all;word-wrap: break-word;hyphens: auto;\">npm install file:./config</span></p><blockquote class=\"code-wrap\" style=\"border-width: 0px;border-style: initial;border-color: initial;padding-left: 0px;color: rgb(51, 51, 51);\"><pre class=\"language-\" style=\"border-width: 0px;border-style: initial;border-color: initial;padding: 1em;overflow: auto;background-color: rgb(45, 45, 45);color: rgb(204, 204, 204);\"><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;hyphens: auto;white-space: nowrap !important;\">此时，查看 <span class=\"token template-string\" style=\"border-width: 0px;border-style: initial;border-color: initial;\"><span class=\"token string\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(126, 198, 153);\">`node_modules`</span></span> 目录我们会发现多出来一个名为 <span class=\"token template-string\" style=\"border-width: 0px;border-style: initial;border-color: initial;\"><span class=\"token string\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(126, 198, 153);\">`config`</span></span>，指向上层 <span class=\"token template-string\" style=\"border-width: 0px;border-style: initial;border-color: initial;\"><span class=\"token string\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(126, 198, 153);\">`config/`</span></span> 文件夹的软链接。这是因为 npm 识别 <span class=\"token template-string\" style=\"border-width: 0px;border-style: initial;border-color: initial;\"><span class=\"token string\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(126, 198, 153);\">`file:`</span></span> 协议的url，得知这个包需要直接从文件系统中获取，会自动创建软链接到 node_modules 中，完成“安装”过程。</p><p class=\"lbr\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 0;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;hyphens: auto;height: 6px;white-space: nowrap !important;\"><br style=\"border-width: 0px;border-style: initial;border-color: initial;\"></p><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;hyphens: auto;white-space: nowrap !important;\">相比手动软链，我们既不需要关心 windows 和 linux 命令差异，又可以显式地将依赖信息固化到 dependencies 字段中，开发团队其他成员可以执行 <span class=\"token template-string\" style=\"border-width: 0px;border-style: initial;border-color: initial;\"><span class=\"token string\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(126, 198, 153);\">`npm install`</span></span> 后直接使用。</p></pre></blockquote><p style=\"margin-top: 1.8em;margin-bottom: 1.8em;border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;font-size: 15px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;hyphens: auto;color: rgb(51, 51, 51);\"><strong style=\"border-width: 0px;border-style: initial;border-color: initial;\">场景2: 私有 git 共享 package</strong></p><p style=\"margin-top: 1.8em;margin-bottom: 1.8em;border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;font-size: 15px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;hyphens: auto;color: rgb(51, 51, 51);\">有些时候，我们一个团队内会有一些代码/公用库需要在团队内<strong style=\"border-width: 0px;border-style: initial;border-color: initial;\">不同项目间</strong>共享，但可能由于包含了敏感内容，或者代码太烂拿不出手等原因，不方便发布到源。</p><p style=\"margin-top: 1.8em;margin-bottom: 1.8em;border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;font-size: 15px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;hyphens: auto;color: rgb(51, 51, 51);\">这种情况下，我们可以简单地将被依赖的包托管在私有的 git 仓库中，然后将该  git url 保存到 dependencies 中. npm 会直接调用系统的 git 命令从 git 仓库拉取包的内容到 node_modules 中。</p><p style=\"margin-top: 1.8em;margin-bottom: 1.8em;border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;font-size: 15px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;hyphens: auto;color: rgb(51, 51, 51);\">npm 支持的 git url 格式:</p><blockquote class=\"code-wrap\" style=\"border-width: 0px;border-style: initial;border-color: initial;padding-left: 0px;color: rgb(51, 51, 51);\"><pre class=\"language-\" style=\"border-width: 0px;border-style: initial;border-color: initial;padding: 1em;overflow: auto;background-color: rgb(45, 45, 45);color: rgb(204, 204, 204);\"><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;hyphens: auto;white-space: nowrap !important;\"><span class=\"token operator\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(103, 205, 204);\"><</span>protocol<span class=\"token operator\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(103, 205, 204);\">></span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">:</span><span class=\"token operator\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(103, 205, 204);\">/</span><span class=\"token operator\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(103, 205, 204);\">/</span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">[</span><span class=\"token operator\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(103, 205, 204);\"><</span>user<span class=\"token operator\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(103, 205, 204);\">></span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">[</span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">:</span><span class=\"token operator\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(103, 205, 204);\"><</span>password<span class=\"token operator\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(103, 205, 204);\">></span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">]</span>@<span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">]</span><span class=\"token operator\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(103, 205, 204);\"><</span>hostname<span class=\"token operator\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(103, 205, 204);\">></span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">[</span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">:</span><span class=\"token operator\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(103, 205, 204);\"><</span>port<span class=\"token operator\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(103, 205, 204);\">></span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">]</span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">[</span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">:</span><span class=', '编者按：本文转载自掘金， 本文已获得作者授权。\n\nnodejs 社区乃至 Web 前端工程化领域发展到今天，作为 node 自带的包管理工具的 npm 已经成为每个前端开发者必备的工具。但是现实状况是，我们很多人对这个nodejs基础设施的使用和了解还停留在: 会用 npm install 这里（一言不合就删除整个 node_modules 目录然后重新 install 这种事你没做过吗？）\n\n当然 npm 能成为现在世界上最大规模的**包管理系统**，很大程度上确实归功于它足够**用户友好**，你看即使我只会执行 install 也不必太担心出什么大岔子。但是 npm 的功能远不止于 install 一下那么简单，这篇文章帮你扒一扒那些你可能不知道的 npm 原理、特性、技巧，以及（我认为的）最佳实践。\n\n你懒得读的 npm 文档，我帮你翻译然后试验整理过来了 🐶🐶🐶\n\n1\\. npm init\n------------\n\n我们都知道 package.json 文件是用来定义一个 package 的描述文件, 也知道npm init 命令用来初始化一个简单的 package.json 文件，执行该命令后终端会依次询问 name, version, description 等字段。\n\n### 1.1 npm init 执行默认行为\n\n而如果想要偷懒不想一直按 enter，在命令后追加 --yes 参数即可，其作用与一路下一步相同。\n\n> npm init --yes\n\n### 1.2 自定义 npm init 行为\n\nnpm init 命令的原理并不复杂，调用脚本，输出一个初始化的 package.json 文件就是了。所以相应地，定制 npm init 命令的实现方式也很简单，在 Home 目录创建一个 .npm-init.js 即可，该文件的 module.exports 即为 package.json 配置内容，需要获取用户输入时候，使用 prompt() 方法即可。\n\n例如编写这样的 ~/.npm-init.js\n\n> const desc = prompt(\'description?\', \'A new package...\')\n> \n> const bar = prompt(\'bar?\', \'\')\n> \n> const count = prompt(\'count?\', \'42\')\n> \n>   \n> \n> module.exports = {\n> \n>   key: \'value\',\n> \n>   foo: {\n> \n>     bar: bar,\n> \n>     count: count\n> \n>   },\n> \n>   name: prompt(\'name?\', process.cwd().split(\'/\').pop()),\n> \n>   version: prompt(\'version?\', \'0.1.0\'),\n> \n>   description: desc,\n> \n>   main: \'index.js\',\n> \n> }\n\n此时在 ~/hello 目录下执行 npm init 将会得到这样的 package.json:\n\n> {\n> \n>   \"key\": \"value\",\n> \n>   \"foo\": {\n> \n>     \"bar\": \"\",\n> \n>     \"count\": \"42\"\n> \n>   },\n> \n>   \"name\": \"hello\",\n> \n>   \"version\": \"0.1.0\",\n> \n>   \"description\": \"A new package...\",\n> \n>   \"main\": \"index.js\"\n> \n> }\n\n除了生成 package.json, 因为 .npm-init.js 是一个常规的模块，意味着我们可以执行随便什么 node 脚本可以执行的任务。例如通过 fs 创建 README, .eslintrc 等项目必需文件，实现项目脚手架的作用。\n\n2\\. 依赖包安装\n---------\n\n依赖管理是 npm 的核心功能，原理就是执行 npm install 从 package.json 中的 dependencies, devDependencies 将依赖包安装到当前目录的 ./node_modules 文件夹中。\n\n### 2.1 package定义\n\n我们都知道要手动安装一个包时，执行 npm install 命令即可。这里的第三个参数 package 通常就是我们所要安装的包名，默认配置下 npm 会从默认的源 (Registry) 中查找该包名对应的包地址，并下载安装。但在 npm 的世界里，除了简单的指定包名, package 还可以是一个指向有效包名的 http url/git url/文件夹路径。\n\n阅读 npm的文档， 我们会发现package 准确的定义，只要符合以下 a) 到 g) 其中之一条件，就是一个 package:\n\n| # | 说明 | 例子 |\n| --- | --- | --- |\n| a) | 一个包含了程序和描述该程序的 package.json 文件 的 **文件夹** | ./local-module/ |\n| b) | 一个包含了 (a) 的 **gzip 压缩文件** | ./module.tar.gz |\n| c) | 一个可以下载得到 (b) 资源的 **url** (通常是 http(s) url) | https://registry.npmjs.org/webpack/-/webpack-4.1.0.tgz |\n| d) | 一个格式为 @ 的字符串，可指向 npm 源(通常是官方源 npmjs.org)上已发布的可访问 url，且该 url 满足条件 (c) | webpack@4.1.0 |\n| e) | 一个格式为 @ 的字符串，在 npm 源上该指向某  得到 @，后者满足条件 (d) | webpack@latest |\n| f) | 一个格式为  的字符串，默认添加 latest 标签所得到的 @latest 满足条件 (e) | webpack |\n| g) | 一个 **git url**, 该 url 所指向的代码库满足条件 (a) | git@github.com:webpack/webpack.git |\n\n### 2.2 安装本地包/远程git仓库包\n\n上面表格的定义意味着，我们在共享依赖包时，并不是非要将包发表到 npm 源上才可以提供给使用者来安装。这对于私有的不方便 publish 到远程源（即使是私有源），或者需要对某官方源进行改造，但依然需要把包共享出去的场景来说非常实用。\n\n**场景1: 本地模块引用**\n\nnodejs 应用开发中不可避免有模块间调用，例如在实践中经常会把需要被频繁引用的配置模块放到应用根目录；于是在创建了很多层级的目录、文件后，很可能会遇到这样的代码:\n\n> const config = require(\'../../../../config.js\');\n\n除了看上去很丑以外，这样的路径引用也不利于代码的重构。并且身为程序员的自我修养告诉我们，这样重复的代码多了也就意味着是时候把这个模块分离出来供应用内其他模块共享了。例如这个例子里的 config.js 非常适合封装为 package 放到 node_modules 目录下，共享给同应用内其他模块。\n\n无需手动拷贝文件或者创建软链接到 node_modules 目录，npm 有更优雅的解决方案。\n\n**方案：**1\\. 创建 config 包:  \n   新增 config 文件夹; 重命名 config.js 为 config/index.js 文件; 创建 package.json 定义 config 包\n\n> ```json\n> \n> {\n> \n>     \"name\": \"config\",\n> \n>     \"main\": \"index.js\",\n> \n>     \"version\": \"0.1.0\"\n> \n> }\n> \n> ```\n\n2\\. 在应用层 package.json 文件中新增依赖项，然后执行 npm install; 或直接执行第 3 步\n\n> ```json\n> \n> {\n> \n>     \"dependencies\": {\n> \n>         \"config\": \"file:./config\"\n> \n>     }\n> \n> }\n> \n> ```\n\n3\\. （等价于第 2 步）直接在应用目录执行 npm install file:./config\n\n> 此时，查看 \\`node_modules\\` 目录我们会发现多出来一个名为 \\`config\\`，指向上层 \\`config/\\` 文件夹的软链接。这是因为 npm 识别 \\`file:\\` 协议的url，得知这个包需要直接从文件系统中获取，会自动创建软链接到 node_modules 中，完成“安装”过程。\n> \n>   \n> \n> 相比手动软链，我们既不需要关心 windows 和 linux 命令差异，又可以显式地将依赖信息固化到 dependencies 字段中，开发团队其他成员可以执行 \\`npm install\\` 后直接使用。\n\n**场景2: 私有 git 共享 package**\n\n有些时候，我们一个团队内会有一些代码/公用库需要在团队内**不同项目间**共享，但可能由于包含了敏感内容，或者代码太烂拿不出手等原因，不方便发布到源。\n\n这种情况下，我们可以简单地将被依赖的包托管在私有的 git 仓库中，然后将该  git url 保存到 dependencies 中. npm 会直接调用系统的 git 命令从 git 仓库拉取包的内容到 node_modules 中。\n\nnpm 支持的 git url 格式:\n\n> <protocol>://\\[<user>\\[:<password>\\]@\\]<hostname>\\[:<port>\\]\\[:\\]\\[/\\]<path>\\[#<commit-ish> | #semver:<semver>\\]\n\ngit 路径后可以使用 # 指定特定的 git branch/commit/tag, 也可以 #semver: 指定特定的 semver range.\n\n例如：\n\n> git+ssh://git@github.com:npm/npm.git#v1.0.27\n> \n> git+ssh://git@github.com:npm/npm#semver:^5.0\n> \n> git+https://isaacs@github.com/npm/npm.git\n> \n> git://github.com/npm/npm.git#v1.0.27\n\n**场景3: 开源 package 问题修复**\n\n使用某个 npm 包时发现它有某个严重bug，但也许最初作者已不再维护代码了，也许我们工作紧急，没有足够的时间提 issue 给作者再慢慢等作者发布新的修复版本到 npm 源。\n\n此时我们可以手动进入 node_modules 目录下修改相应的包内容，也许修改了一行代码就修复了问题。但是这种做法非常不明智！\n\n首先 node\\_modules 本身不应该放进版本控制系统，对 node\\_modules  文件夹中内容的修改不会被记录进 git 提交记录；其次，就算我们非要反模式，把 node_modules 放进版本控制中，你的修改内容也很容易在下次 team 中某位成员执行 npm install 或 npm update 时被覆盖，而这样的一次提交很可能包含了几十几百个包的更新，你自己所做的修改很容易就被淹没在庞大的 diff 文件列表中了。\n\n**方案**:\n\n最好的办法应当是 fork 原作者的 git 库，在自己所属的 repo 下修复问题后，将 dependencies 中相应的依赖项更改为自己修复后版本的 git url 即可解决问题。（Fork 代码库后，也便于向原作者提交 PR 修复问题。上游代码库修复问题后，再次更新我们的依赖配置也不迟。）\n\n3\\. npm install 如何工作 —— node_modules 目录结构\n-----------------------------------------\n\nnpm install 执行完毕后，我们可以在 node\\_modules 中看到所有依赖的包。虽然使用者无需关注这个目录里的文件夹结构细节，只管在业务代码中引用依赖包即可，但了解 node\\_modules 的内容可以帮我们更好理解 npm 如何工作，了解从 npm 2 到 npm 5 有哪些变化和改进。\n\n为简单起见，我们假设应用目录为 app, 用两个流行的包 webpack, nconf 作为依赖包做示例说明。并且为了正常安装，使用了“上古” npm 2 时期的版本 webpack@1.15.0, nconf@0.8.5.\n\n### 3.1 npm 2\n\nnpm 2 在安装依赖包时，采用简单的递归安装方法。执行 npm install 后，npm 2 依次递归安装 webpack 和 nconf 两个包到 node\\_modules 中。执行完毕后，我们会看到 ./node\\_modules 这层目录只含有这两个子目录。\n\n> node_modules/\n> \n> ├── nconf/\n> \n> └── webpack/\n\n进入更深一层 nconf 或 webpack 目录，将看到这两个包各自的 node_modules 中，已经由 npm 递归地安装好自身的依赖包。包括 ./node\\_modules/webpack/node\\_modules/webpack-core , ./node\\_modules/conf/node\\_modules/async 等等。而每一个包都有自己的依赖包，每个包自己的依赖都安装在了自己的 node_modules 中。依赖关系层层递进，构成了一整个依赖树，这个依赖树与文件系统中的文件结构树刚好层层对应。\n\n最方便的查看依赖树的方式是直接在 app 目录下执行 npm ls 命令。\n\n> app@0.1.0\n> \n> ├─┬ nconf@0.8.5\n> \n> │ ├── async@1.5.2\n> \n> │ ├── ini@1.3.5\n> \n> │ ├── secure-keys@1.0.0\n> \n> │ └── yargs@3.32.0\n> \n> └─┬ webpack@1.15.0\n> \n>   ├── acorn@3.3.0\n> \n>   ├── async@1.5.2\n> \n>   ├── clone@1.0.3\n> \n>   ├── ...\n> \n>   ├── optimist@0.6.1\n> \n>   ├── supports-color@3.2.3\n> \n>   ├── tapable@0.1.10\n> \n>   ├── uglify-js@2.7.5\n> \n>   ├── watchpack@0.2.9\n> \n>   └─┬ webpack-core@0.6.9\n> \n>     ├── source-list-map@0.1.8\n> \n>     └── source-map@0.4.4\n\n这样的目录结构优点在于层级结构明显，便于进行傻瓜式的管理:\n\n1\\. 例如新装一个依赖包，可以立即在第一层 node\\_modules 中看到子目录 2. 在已知所需包名和版本号时，甚至可以从别的文件夹手动拷贝需要的包到 node\\_modules 文件夹中，再手动修改 package.json 中的依赖配置 3. 要删除这个包，也可以简单地手动删除这个包的子目录，并删除 package.json 文件中相应的一行即可\n\n实际上，很多人在 npm 2 时代也的确都这么实践过，的确也都可以安装和删除成功，并不会导致什么差错。\n\n但这样的文件结构也有很明显的问题：\n\n1\\. 对复杂的工程, node\\_modules 内目录结构可能会太深，导致深层的文件路径过长而触发 windows 文件系统中，文件路径不能超过 260 个字符长的错误 2. 部分被多个包所依赖的包，很可能在应用 node\\_modules 目录中的很多地方被重复安装。随着工程规模越来越大，依赖树越来越复杂，这样的包情况会越来越多，造成大量的冗余。\n\n——在我们的示例中就有这个问题，webpack 和 nconf 都依赖 async 这个包，所以在文件系统中，webpack 和 nconf 的 node_modules 子目录中都安装了相同的 async 包，并且是相同的版本。\n\n> +-------------------------------------------+\n> \n> | app/ |\n> \n> +----------+------------------------+-------+\n> \n>            | |\n> \n>            | |\n> \n> +----------v------+ +---------v-------+\n> \n> | | | |\n> \n> | webpack@1.15.0 | | nconf@0.8.5 |\n> \n> | | | |\n> \n> +--------+--------+ +--------+--------+\n> \n>          | |\n> \n>    +-----v-----+ +-----v-----+\n> \n>    |async@1.5.2| |async@1.5.2|\n> \n>    +-----------+ +-----------+\n\n### 3.2 npm 3 - 扁平结构\n\n主要为了解决以上问题，npm 3 的 node_modules 目录改成了更加扁平状的层级结构。文件系统中 webpack, nconf, async 的层级关系变成了平级关系，处于同一级目录中。\n\n> +-------------------------------------------+\n> \n>          | app/ |\n> \n>          +-+---------------------------------------+-+\n> \n>            | |\n> \n>            | |\n> \n> +----------v------+ +-------------+ +---------v-------+\n> \n> | | | | | |\n> \n> | webpack@1.15.0 | | async@1.5.2 | | nconf@0.8.5 |\n> \n> | | | | | |\n> \n> +-----------------+ +-------------+ +-----------------+\n\n虽然这样一来 webpack/node\\_modules 和 nconf/node\\_modules 中都不再有 async 文件夹，但得益于 node 的模块加载机制，他们都可以在上一级 node_modules 目录中找到 async 库。所以 webpack 和 nconf 的库代码中 require(\'async\') 语句的执行都不会有任何问题。\n\n这只是最简单的例子，实际的工程项目中，依赖树不可避免地会有很多层级，很多依赖包，其中会有很多同名但版本不同的包存在于不同的依赖层级，对这些复杂的情况, npm 3 都会在安装时遍历整个依赖树，计算出最合理的文件夹安装方式，使得所有被重复依赖的包都可以去重安装。\n\nnpm 文档提供了更直观的例子解释这种情况：\n\n> 假如 package{dep} 写法代表包和包的依赖，那么  A{B,C}, B{C}, C{D} 的依赖结构在安装之后的 node_modules 是这样的结构：\n\n这里之所以 D 也安装到了与 B C 同一级目录，是因为 npm 会默认会在无冲突的前提下，尽可能将包安装到较高的层级。\n\n> 如果是 A{B,C}, B{C,D@1}, C{D@2} 的依赖关系，得到的安装后结构是：\n\n> A\n> \n> +-- B\n> \n> +-- C\n> \n>    `-- D@2\n> \n> +-- D@1\n\n这里是因为，对于 npm 来说同名但不同版本的包是两个独立的包，而同层不能有两个同名子目录，所以其中的 D@2 放到了 C 的子目录而另一个 D@1 被放到了再上一层目录。\n\n很明显在 npm 3 之后 npm 的依赖树结构不再与文件夹层级一一对应了。想要查看 app 的直接依赖项，要通过 npm ls 命令指定 --depth 参数来查看：\n\n> npm ls --depth 1\n\n> PS: 与本地依赖包不同，如果我们通过 npm install --global 全局安装包到全局目录时，得到的目录依然是“传统的”目录结构。而如果使用 npm 3 想要得到“传统”形式的本地 node_modules 目录，使用 npm install --global-style 命令即可。\n\n### 3.3 npm 5 - package-lock 文件\n\nnpm 5 发布于 2017 年也是目前最新的 npm 版本，这一版本依然沿用 npm 3 之后扁平化的依赖包安装方式，此外最大的变化是增加了 package-lock.json 文件。\n\npackage-lock.json 的作用是**锁定**依赖安装结构，如果查看这个 json 的结构，会发现与 node_modules 目录的文件层级结构是一一对应的。\n\n以依赖关系为: app{webpack} 的 \'app\' 项目为例, 其 package-lock 文件包含了这样的片段。\n\n> {\n> \n>     \"name\": \"app\",\n> \n>     \"version\": \"0.1.0\",\n> \n>     \"lockfileVersion\": 1,\n> \n>     \"requires\": true,\n> \n>     \"dependencies\": {\n> \n>         // ... 其他依赖包\n> \n>         \"webpack\": {\n> \n>             \"version\": \"1.8.11\",\n> \n>             \"resolved\": \"https://registry.npmjs.org/webpack/-/webpack-1.8.11.tgz\",\n> \n>             \"integrity\": \"sha1-Yu0hnstBy/qcKuanu6laSYtgkcI=\",\n> \n>             \"requires\": {\n> \n>                 \"async\": \"0.9.2\",\n> \n>                 \"clone\": \"0.1.19\",\n> \n>                 \"enhanced-resolve\": \"0.8.6\",\n> \n>                 \"esprima\": \"1.2.5\",\n> \n>                 \"interpret\": \"0.5.2\",\n> \n>                 \"memory-fs\": \"0.2.0\",\n> \n>                 \"mkdirp\": \"0.5.1\",\n> \n>                 \"node-libs-browser\": \"0.4.3\",\n> \n>                 \"optimist\": \"0.6.1\",\n> \n>                 \"supports-color\": \"1.3.1\",\n> \n>                 \"tapable\": \"0.1.10\",\n> \n>                 \"uglify-js\": \"2.4.24\",\n> \n>                 \"watchpack\": \"0.2.9\",\n> \n>                 \"webpack-core\": \"0.6.9\"\n> \n>             }\n> \n>         },\n> \n>         \"webpack-core\": {\n> \n>             \"version\": \"0.6.9\",\n> \n>             \"resolved\": \"https://registry.npmjs.org/webpack-core/-/webpack-core-0.6.9.tgz\",\n> \n>             \"integrity\": \"sha1-/FcViMhVjad76e+23r3Fo7FyvcI=\",\n> \n>             \"requires\": {\n> \n>                 \"source-list-map\": \"0.1.8\",\n> \n>                 \"source-map\": \"0.4.4\"\n> \n>             },\n> \n>             \"dependencies\": {\n> \n>                 \"source-map\": {\n> \n>                     \"version\": \"0.4.4\",\n> \n>                     \"resolved\": \"https://registry.npmjs.org/source-map/-/source-map-0.4.4.tgz\",\n> \n>                     \"integrity\": \"sha1-66T12pwNyZneaAMti092FzZSA2s=\",\n> \n>                     \"requires\": {\n> \n>                         \"amdefine\": \"1.0.1\"\n> \n>                     }\n> \n>                 }\n> \n>             }\n> \n>         },\n> \n>         //... 其他依赖包\n> \n>     }\n> \n> }\n\n看懂 package-lock 文件并不难，其结构是同样类型的几个字段嵌套起来的，主要是 version, resolved, integrity, requires, dependencies 这几个字段而已。\n\n*   version, resolved, integrity 用来记录包的准确版本号、内容hash、安装源的，决定了要安装的包的准确“身份”信息\n    \n*   假设盖住其他字段，只关注文件中的 dependencies: {} 我们会发现，整个文件的 JSON 配置里的 dependencies 层次结构与文件系统中 node_modules 的文件夹层次结构是完全对照的\n    \n*   只关注 requires: {} 字段又会发现，除最外层的 requires 属性为 true 以外, 其他层的 requires 属性都对应着这个包的 package.json 里记录的自己的依赖项\n    \n\n因为这个文件记录了 node\\_modules 里所有包的结构、层级和版本号甚至安装源，它也就事实上提供了 “保存” node\\_modules 状态的能力。只要有这样一个 lock 文件，不管在那一台机器上执行 npm install 都会得到完全相同的 node_modules 结果。\n\n这就是 package-lock 文件致力于优化的场景：在从前仅仅用 package.json 记录依赖，由于 semver range 的机制；一个月前由 A 生成的 package.json 文件，B 在一个月后根据它执行 npm install 所得到的 node_modules 结果很可能许多包都存在不同的差异，虽然 semver 机制的限制使得同一份 package.json 不会得到大版本不同的依赖包，但同一份代码在不同环境安装出不同的依赖包，依然是可能导致意外的潜在因素。\n\n相同作用的文件在 npm 5 之前就有，称为 npm shrinkwrap 文件，二者作用完全相同，不同的是后者需要手动生成，而 npm 5 默认会在执行 npm install 后就生成 package-lock 文件，并且建议你提交到 git/svn 代码库中。\n\npackage-lock.json 文件在最初 npm 5.0 默认引入时也引起了相当大的争议。在 npm 5.0 中，如果已有 package-lock 文件存在，若手动在 package.json 文件新增一条依赖，再执行 npm install, 新增的依赖并不会被安装到 node_modules 中, package-lock.json 也不会做相应的更新。这样的表现与使用者的自然期望表现不符。在 npm 5.1 的首个 Release 版本中这个问题得以修复。这个事情告诉我们，要升级，不要使用 5.0。\n\n——但依然有反对的声音认为 package-lock 太复杂，对此 npm 也提供了禁用配置：\n\n> npm config set package-lock false\n\n4\\. 依赖包版本管理\n-----------\n\n依赖包安装完并不意味着就万事大吉了，版本的维护和更新也很重要。这一章介绍依赖包升级管理相关知识，太长不看版本请直接跳到 4.3 最佳实践\n\n### 4.1 semver\n\nnpm 依赖管理的一个重要特性是采用了语义化版本 (semver) 规范，作为依赖**版本**管理方案。\n\nsemver 约定一个包的版本号必须包含3个数字，格式必须为 MAJOR.MINOR.PATCH, 意为 主版本号.小版本号.修订版本号.\n\n*   MAJOR 对应大的版本号迭代，做了不兼容旧版的修改时要更新 MAJOR 版本号\n    \n*   MINOR 对应小版本迭代，发生兼容旧版API的修改或功能更新时，更新MINOR版本号\n    \n*   PATCH 对应修订版本号，一般针对修复 BUG 的版本号\n    \n\n对于包作者（发布者），npm 要求在 publish 之前，必须更新版本号。npm 提供了 npm version 工具，执行 npm version major|minor|patch 可以简单地将版本号中相应的数字加1.\n\n> 如果包是一个 git 仓库，npm version 还会自动创建一条注释为更新后版本号的 git commit 和名为该版本号的 tag\n\n对于包的引用者来说，我们需要在 dependencies 中使用 semver 约定的 semver range 指定所需依赖包的版本号或版本范围。npm 提供了网站 https://semver.npmjs.com 可方便地计算所输入的表达式的匹配范围。常用的规则示例如下表：\n\n| range | 含义 | 例 |\n| --- | --- | --- |\n| ^2.2.1 | 指定的 MAJOR 版本号下, 所有**更新**的版本 | 匹配 2.2.3, 2.3.0; 不匹配 1.0.3, 3.0.1 |\n| ~2.2.1 | 指定 MAJOR.MINOR 版本号下，所有**更新**的版本 | 匹配 2.2.3, 2.2.9 ; 不匹配 2.3.0, 2.4.5 |\n| >=2.1 | 版本号大于或等于 2.1.0 | 匹配 2.1.2, 3.1 |\n| <=2.2 | 版本号小于或等于 2.2 | 匹配 1.0.0, 2.2.1, 2.2.11 |\n| 1.0.0 - 2.0.0 | 版本号从 1.0.0 (含) 到 2.0.0 (含) | 匹配 1.0.0, 1.3.4, 2.0.0 |\n\n任意两条规则，用空格连接起来，表示“与”逻辑，即两条规则的交集:\n\n如 >=2.3.1 <=2.8.0 可以解读为: >=2.3.1 且 <=2.8.0:\n\n*   可以匹配 2.3.1, 2.4.5, 2.8.0\n    \n*   但不匹配 1.0.0, 2.3.0, 2.8.1, 3.0.0\n    \n\n任意两条规则，通过 || 连接起来，表示“或”逻辑，即两条规则的并集:\n\n如 ^2 >=2.3.1 || ^3 >3.2\n\n*   可以匹配  2.3.1, 2,8.1, 3.3.1\n    \n*   但不匹配 1.0.0, 2.2.0, 3.1.0, 4.0.0\n    \n\nPS: 除了这几种，还有如下更直观的表示版本号范围的写法:\n\n*   * 或 x 匹配所有主版本\n    \n*   1 或 1.x 匹配 主版本号为 1 的所有版本\n    \n*   1.2 或 1.2.x 匹配 版本号为 1.2 开头的所有版本\n    \n\nPPS: 在常规仅包含数字的版本号之外，semver 还允许在 MAJOR.MINOR.PATCH 后追加 - 后跟点号分隔的标签，作为预发布版本标签 \\- Prerelese Tags，通常被视为不稳定、不建议生产使用的版本。例如：\n\n*   1.0.0-alpha\n    \n*   1.0.0-beta.1\n    \n*   1.0.0-rc.3\n    \n\n上表中我们最常见的是 ^1.8.11 这种格式的 range, 因为我们在使用 npm install 安装包时，npm 默认安装当前最新版本，例如 1.8.11, 然后在所安装的版本号前加^号, 将 ^1.8.11 写入 package.json 依赖配置，意味着可以匹配 1.8.11 以上，2.0.0 以下的所有版本。\n\n### 4.2 依赖版本升级\n\n问题来了，在安装完一个依赖包之后有新版本发布了，如何使用 npm 进行版本升级呢？——答案是简单的 npm install 或 npm update，但在不同的 npm 版本，不同的 package.json, package-lock.json 文件，安装/升级的表现也不同。\n\n我们不妨还以 webpack 举例，做如下的**前提假设**:\n\n*   我们的工程项目 app 依赖 webpack\n    \n*   项目最初初始化时，安装了当时最新的包 webpack@1.8.0，并且 package.json 中的依赖配置为: \"webpack\": \"^1.8.0\"\n    \n*   当前（2018年3月） webpack 最新版本为 4.2.0, webpack 1.x 最新子版本为 1.15.0\n    \n\n如果我们使用的是 npm 3, 并且项目不含 package-lock.json, 那么根据 node_modules 是否为空，执行 install/update 的结果如下 (**node 6.13.1, npm 3.10.10** 环境下试验):\n\n| # | package.json (BEFORE) | node_modules (BEFORE) | command (npm 3) | package.json (AFTER) | node_modules (AFTER) |\n| --- | --- | --- | --- | --- | --- |\n| a) | webpack: ^1.8.0 | webpack@1.8.0 | install | webpack: ^1.8.0 | webpack@1.8.0 |\n| b) | webpack: ^1.8.0 | 空 | install | webpack: ^1.8.0 | webpack@1.15.0 |\n| c) | webpack: ^1.8.0 | webpack@1.8.0 | update | webpack: ^1.8.0 | webpack@1.15.0 |\n| d) | webpack: ^1.8.0 | 空 | update | webpack: ^1.8.0 | webpack@1.15.0 |\n\n根据这个表我们可以对 npm 3 得出以下结论：\n\n*   如果本地 node\\_modules 已安装，再次执行 install 不会更新包版本, 执行 update 才会更新; 而如果本地 node\\_modules 为空时，执行 install/update 都会直接安装更新包;\n    \n*   npm update 总是会把包更新到符合 package.json 中指定的 semver 的**最新**版本号——本例中符合 ^1.8.0 的最新版本为 1.15.0\n    \n*   一旦给定 package.json, 无论后面执行 npm install 还是 update, package.json 中的 webpack 版本一直顽固地保持 一开始的 ^1.8.0 岿然不动\n    \n\n这里不合理的地方在于，如果最开始团队中第一个人安装了 webpack@1.8.0, 而新加入项目的成员, checkout 工程代码后执行 npm install 会安装得到不太一样的 1.15.0 版本。虽然 semver 约定了小版本号应当保持向下兼容（相同大版本号下的小版本号）兼容，但万一有不熟悉不遵循此约定的包发布者，发布了不兼容的包，此时就可能出现因依赖环境不同导致的 bug。\n\n下面由 npm 5 带着 package-lock.json 闪亮登场，执行 install/update 的效果是这样的 (**node 9.8.0, npm 5.7.1** 环境下试验):\n\n> 下表为表述简单，省略了包名 webpack, install 简写 i, update 简写为 up\n\n| # | package.json (BEFORE) | node_modules (BEFORE) | package-lock (BEFORE) | command | package.json (AFTER) | node_modules (AFTER) |\n| --- | --- | --- | --- | --- | --- | --- |\n| a) | ^1.8.0 | @1.8.0 | @1.8.0 | i | ^1.8.0 | @1.8.0 |\n| b) | ^1.8.0 | 空 | @1.8.0 | i | ^1.8.0 | @1.8.0 |\n| c) | ^1.8.0 | @1.8.0 | @1.8.0 | **up** | **^1.15.0** | @1.15.0 |\n| d) | ^1.8.0 | 空 | @1.8.0 | up | ^1.8.0 | @1.15.0 |\n| e) | ^1.15.0 | @1.8.0 (旧) | @1.15.0 | **i** | **^1.15.0** | @1.15.0 |\n| f) | ^1.15.0 | @1.8.0 (旧) | @1.15.0 | **up** | **^1.15.0** | @1.15.0 |\n\n与 npm 3 相比，在安装和更新依赖版本上主要的区别为：\n\n*   无论何时执行 install, npm 都会优先按照 package-lock 中指定的版本来安装 webpack; 避免了 npm 3 表中情形 b) 的状况;\n    \n*   无论何时完成安装/更新, package-lock 文件总会跟着 node\\_modules 更新 —— (因此可以视 package-lock 文件为 node\\_modules 的 JSON 表述)\n    \n*   已安装 node_modules 后若执行 npm update，package.json 中的版本号也会随之更改为 ^1.15.0\n    \n\n由此可见 npm 5.1 使得 package.json 和 package-lock.json 中所保存的版本号更加统一，解决了 npm 之前的各种问题。只要遵循好的实践习惯，团队成员可以很方便地维护一套应用代码和 node_modules 依赖都一致的环境。\n\n皆大欢喜。\n\n### 4.3 最佳实践\n\n总结起来，在 2018 年 (node 9.8.0, npm 5.7.1) 时代，我认为的依赖版本管理应当是:\n\n*   使用 npm: >=5.1 版本, 保持 package-lock.json 文件默认开启配置\n    \n*   初始化：第一作者初始化项目时使用 npm install 安装依赖包, 默认保存 ^X.Y.Z 依赖 range 到 package.json中; 提交 package.json, package-lock.json, **不要提交** node_modules 目录\n    \n*   初始化：项目成员**首次** checkout/clone 项目代码后，执行**一次** npm install 安装依赖包\n    \n*   **不要**手动修改 package-lock.json\n    \n*   升级依赖包:\n    \n      \n    \n\n*   升级小版本: 本地执行 npm update 升级到新的小版本\n    \n*   升级大版本: 本地执行 npm install @ 升级到新的大版本\n    \n*   也可手动修改 package.json 中版本号为要**升级**的版本(大于现有版本号)并指定所需的 semver, 然后执行 npm install\n    \n*   本地验证升级后新版本无问题后，**提交**新的 package.json, package-lock.json 文件\n    \n\n*     \n    \n    降级依赖包:\n    \n      \n    \n\n*   **正确**: npm install @ 验证无问题后，**提交** package.json 和 package-lock.json 文件\n    \n*   **错误**: 手动修改 package.json 中的版本号为更低版本的 semver, 这样修改并不会生效，因为再次执行 npm install 依然会安装 package-lock.json 中的锁定版本\n    \n\n*     \n    \n    删除依赖包:\n    \n      \n    \n\n*   Plan A: npm uninstall  并提交 package.json 和 package-lock.json\n    \n*   Plan B: 把要卸载的包从 package.json 中 dependencies 字段删除, 然后执行 npm install 并提交 package.json 和 package-lock.json\n    \n\n*     \n    \n    任何时候有人提交了 package.json, package-lock.json 更新后，团队其他成员应在 svn update/git pull 拉取更新后执行 npm install 脚本安装更新后的依赖包\n    \n      \n    \n\n恭喜你终于可以跟 **rm -rf node_modules && npm install** 这波操作说拜拜了（其实并不会）\n\n5\\. npm scripts\n---------------\n\n### 5.1 基本使用\n\nnpm scripts 是 npm 另一个很重要的特性。通过在 package.json 中 scripts 字段定义一个脚本，例如：\n\n> {\n> \n>     \"scripts\": {\n> \n>         \"echo\": \"echo HELLO WORLD\"\n> \n>     }\n> \n> }\n\n我们就可以通过 npm run echo 命令来执行这段脚本，像在 shell 中执行该命令 echo HELLO WORLD 一样，看到终端输出 HELLO WORLD.\n\n—— npm scripts 的基本使用就是这么简单，它提供了一个简单的接口用来调用工程相关的脚本。关于更详细的相关信息，可以参考阮一峰老师的文章 npm script 使用指南 (2016年10月).\n\n简要总结阮老师文章内容：\n\n1\\. npm run 命令执行时，会把 ./node_modules/.bin/ 目录添加到执行环境的 PATH 变量中，因此如果某个**命令行包**未全局安装，而只安装在了当前项目的 node_modules 中，通过 npm run 一样可以调用该命令。 2\\. 执行 npm 脚本时要传入参数，需要在命令后加 -- 标明, 如 npm run test -- --grep=\"pattern\" 可以将 --grep=\"pattern\" 参数传给 test 命令 3\\. npm 提供了 pre 和 post 两种钩子机制，可以定义某个脚本前后的执行脚本 4. 运行时变量：在 npm run 的脚本执行环境内，可以通过环境变量的方式获取许多运行时相关信息，以下都可以通过 process.env 对象访问获得：\n\n> * \\`npm\\_lifecycle\\_event\\` - 正在运行的脚本名称\n> \n> * `npm\\_package\\_` - 获取当前包 package.json 中某个字段的配置值：如 \\`npm\\_package\\_name\\` 获取包名\n> \n> * `npm\\_package\\__` - package.json 中嵌套字段属性：如 \\`npm\\_pacakge\\_dependencies_webpack\\` 可以获取到 package.json 中的 \\`dependencies.webpack\\` 字段的值，即 webpack 的版本号\n\n### 5.2 node_modules/.bin 目录\n\n上面所说的 node_modules/.bin 目录，保存了依赖目录中所安装的可供调用的命令行包。\n\n何谓命令行包？例如 webpack 就属于一个命令行包。如果我们在安装 webpack 时添加 --global 参数，就可以在终端直接输入 webpack 进行调用。但如果不加 --global 参数，我们会在 node_modules/.bin 目录里看到名为 webpack 的文件，如果在终端直接输入 ./node_modules/.bin/webpack 命令，一样可以执行。\n\n这是因为 webpack 在 package.json 文件中定义了 bin 字段为:\n\n> {\n> \n>     \"bin\": {\n> \n>         \"webpack\": \"./bin/webpack.js\"\n> \n>     }\n> \n> }\n\nbin 字段的配置格式为: : , 即 命令名: 可执行文件. npm 执行 install 时，会分析每个依赖包的 package.json 中的 bin 字段，并将其包含的条目安装到 ./node_modules/.bin 目录中，文件名为 。而如果是全局模式安装，则会在 npm 全局安装路径的 bin 目录下创建指向  名为  的软链。因此，./node_modules/.bin/webpack 文件在通过命令行调用时，实际上就是在执行 node ./node_modules/.bin/webpack.js 命令。\n\n正如上一节所说，npm run 命令在执行时会把 ./node_modules/.bin 加入到 PATH 中，使我们可直接调用所有提供了命令行调用接口的依赖包。所以这里就引出了一个最佳实践：\n\n> 将项目依赖的命令行工具安装到项目依赖文件夹中，然后通过 npm scripts 调用；而非全局安装\n\n举例而言 webpack 作为前端工程标配的构建工具，虽然我们都习惯了全局安装并直接使用命令行调用，但不同的项目依赖的 webpack 版本可能不同，相应的 webpack.config.js 配置文件也可能只兼容了特定版本的 webpack. 如果我们仅全局安装了最新的 webpack 4.x 并使用 webpack 命令调用，在一个依赖 webpack 3.x 的工程中就会无法成功执行构建。\n\n但如果这类工具总是本地安装，我们要调用一个命令，要手动添加 ./node_modules/.bin 这个长长的前缀，未免也太麻烦了，我们 nodejs 开发者都很懒的。于是 npm 从5.2 开始自带了一个新的工具 npx.\n\n### 5.3 npx\n\nnpx 的使用很简单，就是执行 npx  即可，这里的  默认就是 ./node_modules 目录中安装的可执行脚本名。例如上面本地安装好的 webpack 包，我们可以直接使用 npx webpack 执行即可。\n\n除了这种最简单的场景, npm cli 团队开发者 Kat Marchán 还在这篇文章中介绍了其他几种 npx 的神奇用法:  Introducing npx: an npm package runner, 国内有位开发者 robin.law 将原文翻译为中文 npx是什么，为什么需要npx?.\n\n有兴趣的可以戳链接了解，懒得点链接的，看总结：\n\n#### 场景a) 一键执行远程 npm 源的二进制包\n\n除了在 package 中执行 ./node\\_modules/.bin 中已安装的命令, 还可以直接指定未安装的二进制包名执行。例如我们在一个没有 package.json 也没有 node\\_modules 的目录下，执行:\n\n> npx cowsay hello\n\nnpx 将会从 npm 源下载 cowsay 这个包（但并不安装）并执行：\n\n> \\_\\_\\_\\_\\_\\_\\_\n> \n> < hello >\n> \n>  -------\n> \n>         \\ ^__^\n> \n>          \\ (oo)\\\\_______\n> \n>             (__)\\ )\\/\\\n> \n>                 ||----w |\n> \n>                 || ||\n\n这种用途非常适合 1\\. 在本地简单测试或调试 npm 源上这些二进制包的功能；2. 调用 create-react-app 或 yeoman 这类往往每个项目只需要使用一次的脚手架工具\n\nPS: 此处有彩蛋，执行这条命令试试:\n\n> npx workin-hard\n\n#### 场景b) 一键执行 GitHub Gist\n\n还记得前面提到的 2.1 package定义 么，npm install 可以是包含了有效 package.json 的 git url.\n\n刚好 GitHub Gist 也是 git 仓库 的一种，集合 npx 就可以方便地将简单的脚本共享给其他人，拥有该链接的人无需将脚本安装到本地工作目录即可执行。将 package.json 和 需执行的二进制脚本上传至 gist, 在运行 npx 就可以方便地执行该 gist 定义的命令。\n\n原文作者 Kat Marchán 提供了这个示例 gist, 执行：\n\n> npx https://gist.github.com/zkat/4bc19503fe9e9309e2bfaa2c58074d32\n\n可得到一个来自 GitHubGist 的 hello world 问候。\n\n#### 场景c) 使用不同版本 node 执行命令\n\n将 npx 与 Aria Stewart 创建的 node 包 (https://www.npmjs.com/package/node) 结合，可以实现在一行命令中使用指定版本的 node 执行命令。\n\n例如先后执行：\n\n> npx node@4 -e \"console.log(process.version)\"\n> \n> npx node@6 -e \"console.log(process.version)\"\n\n将分别输出 v4.8.7 和 v6.13.0.\n\n往常这种工作是由 nvm 这类 node 版本管理工具来做的，但 npx node@4 这种方式免去 nvm 手动切换配置的步骤，更加简洁简单。\n\n6\\. npm 配置\n----------\n\n### 6.1 npm config\n\nnpm cli 提供了 npm config 命令进行 npm 相关配置，通过 npm config ls -l 可查看 npm 的所有配置，包括默认配置。npm 文档页为每个配置项提供了详细的说明 https://docs.npmjs.com/misc/config .\n\n修改配置的命令为 npm config set , 我们使用相关的常见重要配置:\n\n*   proxy, https-proxy: 指定 npm 使用的代理\n    \n*   registry 指定 npm 下载安装包时的源，默认为 https://registry.npmjs.org/ 可以指定为私有 Registry 源\n    \n*   package-lock 指定是否默认生成 package-lock 文件，建议保持默认 true\n    \n*   save true/false 指定是否在 npm install 后保存包为 dependencies, npm 5 起默认为 true\n    \n\n删除指定的配置项命令为 npm config delete .\n\n### 6.2 npmrc 文件\n\n除了使用 CLI 的 npm config 命令显示更改 npm 配置，还可以通过 npmrc 文件直接修改配置。\n\n这样的 npmrc 文件优先级由高到低包括：\n\n*   工程内配置文件: /path/to/my/project/.npmrc\n    \n*   用户级配置文件: ~/.npmrc\n    \n*   全局配置文件: $PREFIX/etc/npmrc (即npm config get globalconfig 输出的路径)\n    \n*   npm内置配置文件: /path/to/npm/npmrc\n    \n\n通过这个机制，我们可以方便地在工程跟目录创建一个 .npmrc 文件来共享需要在团队间共享的 npm 运行相关配置。比如如果我们在公司内网环境下需通过代理才可访问 registry.npmjs.org 源，或需访问内网的 registry, 就可以在工作项目下新增 .npmrc 文件并提交代码库。\n\n> proxy = http://proxy.example.com/\n> \n> https-proxy = http://proxy.example.com/\n> \n> registry = http://registry.example.com/\n\n因为项目级 .npmrc 文件的作用域只在本项目下，所以在非本目录下，这些配置并不生效。对于使用笔记本工作的开发者，可以很好地隔离公司的工作项目、在家学习研究项目两种不同的环境。\n\n将这个功能与 ~/.npm-init.js 配置相结合，可以将特定配置的 .npmrc 跟 .gitignore, README 之类文件一起做到 npm init 脚手架中，进一步减少手动配置。\n\n### 6.3 node 版本约束\n\n虽然一个项目的团队都共享了相同的代码，但每个人的开发机器可能安装了不同的 node 版本，此外服务器端的也可能与本地开发机不一致。\n\n这又是一个可能带来不一致性的因素 —— 但也不是很难解决，声明式约束+脚本限制即可。\n\n**声明**：通过 package.json 的 engines 属性声明应用运行所需的版本运行时要求。例如我们的项目中使用了 async, await 特性，查阅兼容性表格得知最低支持版本为 7.6.0，因此指定 engines 配置为:\n\n> {\n> \n>     \"engines\": { \"node\": \">=7.6.0\"}\n> \n> }\n\n**强约束**(可选)：在 npm 中以上字段内容仅作为建议字段使用，若要在私有项目中添加强约束，需要自己写脚本钩子，读取并解析 engines 字段的 semver range 并与运行时环境做对比校验并适当提醒。\n\n7\\. 小结 npm 最佳实践\n---------------\n\n*   使用 npm-init 初始化新项目\n    \n*   统一项目配置: 需团队共享的 npm config 配置项，固化到 .npmrc 文件中\n    \n*   统一运行环境，统一 package.json，统一 package-lock 文件\n    \n*   合理使用多样化的源安装依赖包: npm install |\n    \n*   使用 npm: >=5.2 版本\n    \n*   使用 npm scripts 与 npx (npm: >=5.2) 脚本管理应用相关脚本\n    \n\n8\\. 更多资料\n--------\n\n**参考**\n\n*   npm team 成员 Ashley Williams 在 2016 年 Node.js Live 上的 talk: _You Don\'t Know npm_, 当时还没有 npm 5\n    \n      \n    \n\n*   YouTube 视频链接: Node.js Live (Paris) - Ashley Williams, You Don\'t Know npm\n    \n*   演讲用的 slides: the ag_deck\n    \n\n*   这篇 2015 年的文章介绍了如何使用把本地模块打包到 node_modules 依赖中: Build modular application with npm local modules\n    \n*   一篇很好的介绍 package-lock.json 的文章: Everything you wanted to know about package-lock.json\n    \n*   阮一峰 npm scripts 使用指南\n    \n*   Kat Marchán 介绍npx:\n    \n      \n    \n\n*   原文 Introducing npx: an npm package runner\n    \n*   中文 npx是什么，为什么需要npx?\n    \n\n**文档**  \n\n*   npm 官方文档, 无中文翻译\n    \n      \n    \n\n*   package.json 文件\n    \n*   npm config 配置\n    \n*   npm semver 计算器\n    \n*   node_modules 目录扁平化\n    \n\n*   yarn 中文文档，虽然是 npm 竞争者但兼容 package.json 和 node_modules 目录，因此这两部分一样可参考：\n    \n      \n    \n\n*   package.json - 中文\n    \n*   依赖与版本 \\- 中文\n    \n\n**延伸阅读**\n\n*   sam boyer 《所以你想开发一个包管理系统》，从无关特定语言的角度，介绍一个包管理系统的方方面面: So you want to write a package manager\n    \n\n关于奇舞周刊\n------\n\n《奇舞周刊》是360公司专业前端团队「奇舞团」运营的前端技术社区。关注公众号后，直接发送链接到后台即可给我们投稿。', 0, 1, 0);
INSERT INTO `post` (`id`, `createAt`, `updateAt`, `title`, `description`, `thumb`, `url`, `html`, `markdown`, `views`, `status`, `push`) VALUES
(37, '2018-04-23 11:01:44.076873', '2018-04-23 11:01:44.076873', '[前端工坊]快应用开发-从入门到放(jing)弃(tong)系列（一）', '作者|京东金融-移动研发部-前端开发工程师前戏--什么是快应用3月20号快应用标准启动发布会后，这一新生技术瞬间火了。前端群里号召大家有兴趣的去调研下快应用，于是我用一天时间写了个京东金融快应用简易demo，接下来总结下遇到的一些问题和个人见解：首先介绍下什么是快应用快应用是基于手机硬件平台的新型应用形态，标准是由主流手机厂商组成的快应用联盟联合制定。快应用标准的诞生将在研发接口、能力接入、开发者服务等层面建设标准平台，以平台化的生态模式对个人开发者和企业开发者全品类开放。快应用具备传统APP完整的应用体', 'https://mmbiz.qpic.cn/mmbiz_jpg/BC87ECNQcz3eWciau9poTSqNZFoCrxCewDcB5d1Cnnwa7AM0iaCQK9odZmAPUttyImTWPswstiawCYW7yAPicz6IAw/640?wx_fmt=jpeg', 'https://mp.weixin.qq.com/s/sgCJUgYhtFkRSNPSi9-3Tg', '<h1 style=\"text-align: center;\"><strong><span style=\"background-color: rgb(41, 147, 252);color: rgb(255, 255, 255);font-size: 16px;\"></span></strong></h1><h2 style=\"max-width: 100%;white-space: normal;color: rgb(62, 62, 62);background-color: rgb(255, 255, 255);box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 14px;box-sizing: border-box !important;word-wrap: break-word !important;\"><strong style=\"max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;background-color: rgb(41, 147, 252);color: rgb(255, 255, 255);box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;background-color: rgb(255, 255, 255);color: rgb(136, 136, 136);box-sizing: border-box !important;word-wrap: break-word !important;\"><strong style=\"max-width: 100%;color: rgb(62, 62, 62);font-size: 16px;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 14px;color: rgb(68, 68, 68);box-sizing: border-box !important;word-wrap: break-word !important;\"><strong style=\"max-width: 100%;color: rgb(62, 62, 62);font-size: 16px;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 14px;color: rgb(136, 136, 136);box-sizing: border-box !important;word-wrap: break-word !important;\">作者 |  </span></strong></span></strong></span><strong style=\"max-width: 100%;color: rgb(62, 62, 62);font-size: 16px;background-color: rgb(255, 255, 255);box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 14px;color: rgb(136, 136, 136);box-sizing: border-box !important;word-wrap: break-word !important;\">京东金融-移动研发部-前端开发工程师</span></strong></span></strong></span></h2><h1 style=\"text-align: center;\"><strong><span style=\"background-color: rgb(41, 147, 252);color: rgb(255, 255, 255);font-size: 16px;\"></span></strong><br></h1><h1 style=\"text-align: center;\"><strong><span style=\"background-color: rgb(41, 147, 252);color: rgb(255, 255, 255);font-size: 16px;\">前戏--什么是快应用</span></strong></h1><p><span style=\"font-size: 14px;color: rgb(68, 68, 68);\"><br></span></p><p><span style=\"font-size: 14px;color: rgb(68, 68, 68);\">3月20号快应用标准启动发布会后，这一新生技术瞬间火了。前端群里号召大家有兴趣的去调研下快应用，于是我用一天时间写了个京东金融快应用简易demo，接下来总结下遇到的一些问题和个人见解：</span></p><p><span style=\"font-size: 14px;color: rgb(68, 68, 68);\"><br></span></p><h3><strong><span style=\"font-size: 14px;color: rgb(68, 68, 68);\">首先介绍下什么是快应用</span></strong></h3><p><strong><span style=\"font-size: 14px;color: rgb(68, 68, 68);\"><br></span></strong></p><blockquote><p><span style=\"font-size: 14px;color: rgb(136, 136, 136);\">快应用是基于手机硬件平台的新型应用形态，标准是由主流手机厂商组成的快应用联盟联合制定。</span></p><p><span style=\"font-size: 14px;color: rgb(136, 136, 136);\">快应用标准的诞生将在研发接口、能力接入、开发者服务等层面建设标准平台，以平台化的生态模式对个人开发者和企业开发者全品类开放。</span></p><p><span style=\"font-size: 14px;color: rgb(136, 136, 136);\">快应用具备传统APP完整的应用体验，无需安装、即点即用。</span></p></blockquote><h3><span style=\"font-size: 14px;color: rgb(68, 68, 68);\"><br></span></h3><h3><strong><span style=\"font-size: 14px;color: rgb(68, 68, 68);\">快应用技术栈</span></strong></h3><h5><span style=\"font-size: 14px;color: rgb(68, 68, 68);\">利用前端技术栈编写，转换成原生语法：</span></h5><p><span style=\"font-size: 14px;color: rgb(68, 68, 68);\"></span></p><p><img class=\"\" data-backh=\"252\" data-backw=\"558\" data-copyright=\"0\" data-ratio=\"0.45078125\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/BC87ECNQcz3eWciau9poTSqNZFoCrxCewDcB5d1Cnnwa7AM0iaCQK9odZmAPUttyImTWPswstiawCYW7yAPicz6IAw/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"1280\" style=\"width: 100%;height: auto;\"></p><p><span style=\"color:#888888;\"><span style=\"font-size: 12px;\">图片来源：快应用发布会PPT</span></span></p><p><span style=\"color:#888888;\"><span style=\"font-size: 12px;\"><br></span></span></p><p><img class=\"\" data-backh=\"148\" data-backw=\"558\" data-copyright=\"0\" data-ratio=\"0.26484375\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/BC87ECNQcz3eWciau9poTSqNZFoCrxCewUrTibrXZjRNHOfuPjuyt9Hia2Sibb5ibfZm7JP7IPmUyrx2BggP8iapydZw/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"1280\" style=\"width: 100%;height: auto;\"></p><p><span style=\"color: rgb(136, 136, 136);font-size: 12px;\"><span style=\"color: rgb(136, 136, 136);font-size: 12px;\">图片来源：快应用发布会PPT</span></span></p><p><span style=\"font-size: 14px;color: rgb(68, 68, 68);\"></span><br></p><h1 style=\"text-align: center;\"><strong><span style=\"background-color: rgb(41, 147, 252);color: rgb(255, 255, 255);font-size: 16px;\">理论到实践--从入门到放(jing)弃(tong)</span></strong></h1><h3><span style=\"font-size: 14px;color: rgb(68, 68, 68);\"><br></span></h3><h3><span style=\"font-size: 14px;color: rgb(68, 68, 68);\">入门千篇一律 请看<strong>官</strong><strong>方文档</strong> </span><span style=\"font-size: 14px;color: rgb(68, 68, 68);text-decoration: underline;\">https://doc.quickapp.cn/</span></h3><p><br></p><h3><strong><span style=\"font-size: 14px;color: rgb(68, 68, 68);\">开发心得体会【布局篇】</span></strong></h3><p><strong><span style=\"font-size: 14px;color: rgb(68, 68, 68);\"><br></span></strong></p><blockquote><h5><span style=\"font-size: 14px;color: rgb(136, 136, 136);\">需安装6.0以上版本的NodeJS，请从NodeJS官网下载，推荐v6.11.3（高于8.0会报错），同时最好有一部安卓系统8.0的安卓机，编译后可以扫码安装，这样便可以一路顺畅见到官方的\"Hello Word\"页面。</span></h5></blockquote><p><span style=\"font-size: 14px;color: rgb(68, 68, 68);\"><br></span></p><ol style=\"\" class=\" list-paddingleft-2\"><li><p><span style=\"font-size: 14px;color: rgb(68, 68, 68);\">要实现自动编译项目，需开启两个窗口，一个运行npm run build->npm run server,另一个运行npm run watch.</span></p></li><li><p><span style=\"font-size: 14px;color: rgb(68, 68, 68);\">命令hap init初始化项目后，先设置项目配置信息，在src目录下的manifest.json配置文件里，比如设计稿是基于750px的，在config设置如下：</span><strong><span style=\"font-size: 14px;color: rgb(68, 68, 68);\">javascript \"config\": { \"designWidth\":750 } </span></strong></p></li><li><p><span style=\"font-size: 14px;color: rgb(68, 68, 68);\">页面结构跟vuejs极其相似，dom元素写在template里，style标签支持less语法，需安装<strong>less</strong>和<strong>less-loader</strong>依赖，style标签设置<strong>lang=\"less\"</strong>即可，业务逻辑写在script里。这里要强调一点的是，template里只能有一个根节点。</span></p></li><li><p><span style=\"font-size: 14px;color: rgb(68, 68, 68);\">为了解决屏幕适配问题，所有与大小相关的样式（例如width、font-size）均以基准宽度（默认750px）为基础，根据实际屏幕宽度进行缩放，例如width:100px，在1500px宽度屏幕上，width实际上为200px。框架目前仅支持长度单位px，百分比也不支持，<strong>\"margin:0 auto;\"</strong>这类写法也不支持,官方文档说margin&padding属性值可以有1~4个值，但在实际使用时却不支持，上右下左4个值需要分开写。</span></p></li><li><p><span style=\"font-size: 14px;color: rgb(68, 68, 68);\">文本必须包含在text标签内才能显示，同时针对文本的样式class也要写在text标签内才能生效（这点跟react-native的Text标签一样）。</span></p></li><li><p><span style=\"font-size: 14px;color: rgb(68, 68, 68);\">position属性不支持absolute和relative，可以为fixed和none;(不支持的属性值会报错)</span></p></li><li><p><strong><span style=\"font-size: 14px;color: rgb(68, 68, 68);\">background</span></strong><span style=\"font-size: 14px;color: rgb(68, 68, 68);\">属性不支持url写法，要用背景图得用<strong>background-image</strong>属性。需要强调的是，<strong>background</strong>属性支持渐变样式，暂时不能与<strong>background-color</strong>、<strong>background-image</strong>同时使用。<strong>background-image</strong>暂时不支持与<strong>background-color</strong>，<strong>border-color</strong>同时使用；不支持网络图片资源，支持本地图片资源。 背景颜色则要用<strong>background-color</strong>去设置，颜色值也必须为6位的十六进制，如：<strong>\"background-color:#ffffff;\"</strong></span></p></li><li><p><strong><span style=\"font-size: 14px;color: rgb(68, 68, 68);\">box-shadow</span></strong><span style=\"font-size: 14px;color: rgb(68, 68, 68);\">和<strong>font-family</strong>属性暂时不支持；</span></p></li><li><p><span style=\"font-size: 14px;color: rgb(68, 68, 68);\">框架提供了一套基础的界面组件，界面组件标签除了支持常用的HTML5标签，例如div，a，input等标签之外，还提供与原生UI相关的组件标签，例如switch，slider，list等（注意：不支持ul li 、dl dt dd等标签）。不支持的标签会报错，具体使用请参考</span><strong><span style=\"font-size: 14px;color: rgb(68, 68, 68);\">官方文档--组件 </span></strong><span style=\"font-size: 14px;color: rgb(68, 68, 68);text-decoration: underline;\">https://doc.quickapp.cn/widgets/div.html</span><span style=\"font-size: 14px;color: rgb(68, 68, 68);\">。</span></p></li><li><p><span style=\"font-size: 14px;color: rgb(68, 68, 68);\">页面布局虽然默认采用了flex盒布局，但justify-content支持的属性值有限，有效枚举值为: <strong>flex-start|flex-end|center|space-between</strong>，报错如下所示：</span></p><p><img class=\"\" data-copyright=\"0\" data-ratio=\"0.15760266370699222\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/BC87ECNQcz3eWciau9poTSqNZFoCrxCewe9jb549AH0VIWOtsRzv3glWSev4OqAn0qXKfKScvRWTH2EDDXicyB3g/640?wx_fmt=png\" data-type=\"png\" data-w=\"1802\" style=\"\"></p><p><br></p></li><li><p><span style=\"font-size: 14px;color: rgb(68, 68, 68);\">list组件的使用，其子组件必须是block，然后block的子组件必须是list-item。block组件不支持class属性，支持的属性有[for,tid,if,elif,else]，注意：1）list-item内不能再嵌套list；2）list-item的type属性为必填属性；3）list-item内部需谨慎使用if指令或for指令，因为相同type属性的list-item的DOM结构必须完全相同，而使用if指令或for指令会造成DOM结构差异；</span></p></li><li><p><span style=\"font-size: 14px;color: rgb(68, 68, 68);\">div组件支持的属性有 [id, style, class, disabled, if, elif, else, for, tid, show]。</span></p></li><li><p><span style=\"font-size: 14px;color: rgb(68, 68, 68);\">当DOM结构复杂时，滚动页面会出现卡顿现象，因为Native无法复用div组件实现的列表元素，为了得到流畅的列表滚动体验，推荐使用list组件替代div组件实现长列表布局，因为Native会复用相同type属性的list-item。</span></p></li></ol><p><br></p><h3 style=\"text-align: center;\"><strong><span style=\"background-color: rgb(41, 147, 252);color: rgb(255, 255, 255);font-size: 16px;\">轻松实现京东金融小程序首页</span></strong></h3><h5><span style=\"font-size: 14px;color: rgb(68, 68, 68);\"><br></span></h5><h5><span style=\"font-size: 14px;color: rgb(68, 68, 68);\">掌握了一些原理后，接下来进入采坑之旅（建议：先看官方文档，特别是<strong>css属性的支持范围 </strong></span><span style=\"font-size: 14px;color: rgb(68, 68, 68);text-decoration: underline;\">https://doc.quickapp.cn/widgets/common-styles.html</span><span style=\"font-size: 14px;color: rgb(68, 68, 68);\">）先来张首页初版截图：</span></h5><p><span style=\"font-size: 14px;color: rgb(68, 68, 68);\"></span></p><p><img class=\"\" data-backh=\"992\" data-backw=\"558\" data-copyright=\"0\" data-ratio=\"1.7777777777777777\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/BC87ECNQcz3eWciau9poTSqNZFoCrxCewHaEXLeickGPBPITqw1JRE7I9uk0pA5Nb9eM5GA9hlPRLsTm51wmzUOA/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"1080\" style=\"width: 100%;height: auto;\"></p><p><span style=\"font-size: 14px;color: rgb(68, 68, 68);\"><br></span></p><h5><strong><span style=\"font-size: 14px;color: rgb(68, 68, 68);\">一言不合就上代码『Dom部分』</span></strong></h5><p><br></p><section class=\"output_wrapper\" style=\"font-size: 16px;color: rgb(62, 62, 62);line-height: 1.6;letter-spacing: 0px;\"><pre style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 0px;margin-bottom: 0px;padding: 0px;\"><code class=\"hljs xml\" style=\"margin-right: 2px;margin-left: 2px;line-height: 15px;font-size: 11px;word-spacing: -3px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;color: rgb(169, 183, 198);background: rgb(40, 43, 46);padding: 0.5em;display: block !important;word-wrap: normal !important;word-break: normal !important;overflow: auto !important;\"><span class=\"hljs-tag\" style=\"font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;\"><<span class=\"hljs-name\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">template</span>></span><br>  <span class=\"hljs-comment\" style=\"font-size: inherit;line-height: inherit;color: rgb(128, 128, 128);word-wrap: inherit !important;word-break: inherit !important;\"><!-- template里只能有一个根节点 --></span><br>  <span class=\"hljs-tag\" style=\"font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;\"><<span class=\"hljs-name\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">div</span> <span class=\"hljs-attr\" style=\"font-size: inherit;line-height: inherit;color: rgb(165, 218, 45);word-wrap: inherit !important;word-break: inherit !important;\">class</span>=<span class=\"hljs-string\" style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);word-wrap: inherit !important;word-break: inherit !important;\">\"mainWrapper\"</span>></span><br>        <span class=\"hljs-tag\" style=\"font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;\"><<span class=\"hljs-name\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">div</span> <span class=\"hljs-attr\" style=\"font-size: inherit;line-height: inherit;color: rgb(165, 218, 45);word-wrap: inherit !important;word-break: inherit !important;\">class</span>=<span class=\"hljs-string\" style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);word-wrap: inherit !important;word-break: inherit !important;\">\"topPart\"</span>></span><br>              <span class=\"hljs-tag\" style=\"font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;\"><<span class=\"hljs-name\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">div</span> <span class=\"hljs-attr\" style=\"font-size: inherit;line-height: inherit;color: rgb(165, 218, 45);word-wrap: inherit !important;word-break: inherit !important;\">class</span>=<span class=\"hljs-string\" style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);word-wrap: inherit !important;word-break: inherit !important;\">\"topBg\"</span>></span><span class=\"hljs-tag\" style=\"font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;\"></<span class=\"hljs-name\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">div</span>></span><br>              <span class=\"hljs-tag\" style=\"font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;\"><<span class=\"hljs-name\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">div</span> <span class=\"hljs-attr\" style=\"font-size: inherit;line-height: inherit;color: rgb(165, 218, 45);word-wrap: inherit !important;word-break: inherit !important;\">class</span>=<span class=\"hljs-string\" style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);word-wrap: inherit !important;word-break: inherit !important;\">\"slogan_title\"</span>></span><br>                    <span class=\"hljs-tag\" style=\"font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;\"><<span class=\"hljs-name\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">image</span> <span class=\"hljs-attr\" style=\"font-size: inherit;line-height: inherit;color: rgb(165, 218, 45);word-wrap: inherit !important;word-break: inherit !important;\">class</span>=<span class=\"hljs-string\" style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);word-wrap: inherit !important;word-break: inherit !important;\">\"slogan\"</span> <span class=\"hljs-attr\" style=\"font-size: inherit;line-height: inherit;color: rgb(165, 218, 45);word-wrap: inherit !important;word-break: inherit !important;\">src</span>=<span class=\"hljs-string\" style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);word-wrap: inherit !important;word-break: inherit !important;\">\"./../Images/slogan@3x.png\"</span>></span><span class=\"hljs-tag\" style=\"font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;\"></<span class=\"hljs-name\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">image</span>></span><br>                    <span class=\"hljs-tag\" style=\"font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;\"><<span class=\"hljs-name\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">image</span> <span class=\"hljs-attr\" style=\"font-size: inherit;line-height: inherit;color: rgb(165, 218, 45);word-wrap: inherit !important;word-break: inherit !important;\">class</span>=<span class=\"hljs-string\" style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);word-wrap: inherit !important;word-break: inherit !important;\">\"title\"</span> <span class=\"hljs-attr\" style=\"font-size: inherit;line-height: inherit;color: rgb(165, 218, 45);word-wrap: inherit !important;word-break: inherit !important;\">src</span>=<span class=\"hljs-string\" style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);word-wrap: inherit !important;word-break: inherit !important;\">\"./../Images/logo.png\"</span>></span><span class=\"hljs-tag\" style=\"font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;\"></<span class=\"hljs-name\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">image</span>></span><br>              <span class=\"hljs-tag\" style=\"font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;\"></<span class=\"hljs-name\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">div</span>></span><br>              <span class=\"hljs-tag\" style=\"font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;\"><<span class=\"hljs-name\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">div</span> <span class=\"hljs-attr\" style=\"font-size: inherit;line-height: inherit;color: rgb(165, 218, 45);word-wrap: inherit !important;word-break: inherit !important;\">class</span>=<span class=\"hljs-string\" style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);word-wrap: inherit !important;word-break: inherit !important;\">\"menu_icons\"</span>></span><br>                     <span class=\"hljs-tag\" style=\"font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;\"><<span class=\"hljs-name\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">div</span> <span class=\"hljs-attr\" style=\"font-size: inherit;line-height: inherit;color: rgb(165, 218, 45);word-wrap: inherit !important;word-break: inherit !important;\">class</span>=<span class=\"hljs-string\" style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);word-wrap: inherit !important;word-break: inherit !important;\">\"menu\"</span> <span class=\"hljs-attr\" style=\"font-size: inherit;line-height: inherit;color: rgb(165, 218, 45);word-wrap: inherit !important;word-break: inherit !important;\">for</span>=<span class=\"hljs-string\" style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);word-wrap: inherit !important;word-break: inherit !important;\">\"{{menuList}}\"</span> <span class=\"hljs-attr\" style=\"font-size: inherit;line-height: inherit;color: rgb(165, 218, 45);word-wrap: inherit !important;word-break: inherit !important;\">onclick</span>=<span class=\"hljs-string\" style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);word-wrap: inherit !important;word-break: inherit !important;\">\"routeDetail($idx+1)\"</span>></span><br>                          <span class=\"hljs-tag\" style=\"font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;\"><<span class=\"hljs-name\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">div</span> <span class=\"hljs-attr\" style=\"font-size: inherit;line-height: inherit;color: rgb(165, 218, 45);word-wrap: inherit !important;word-break: inherit !important;\">class</span>=<span class=\"hljs-string\" style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);word-wrap: inherit !important;word-break: inherit !important;\">\"icon\"</span>></span><br>                               <span class=\"hljs-tag\" style=\"font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;\"><<span class=\"hljs-name\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">image</span> <span class=\"hljs-attr\" style=\"font-size: inherit;line-height: inherit;color: rgb(165, 218, 45);word-wrap: inherit !important;word-break: inherit !important;\">src</span>=<span class=\"hljs-string\" style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);word-wrap: inherit !important;word-break: inherit !important;\">{{$item.icon}}</span>></span><span class=\"hljs-tag\" style=\"font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;\"></<span class=\"hljs-name\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">image</span>></span><br>                          <span class=\"hljs-tag\" style=\"font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;\"></<span class=\"hljs-name\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">div</span>></span><br>                          <span class=\"hljs-tag\" style=\"font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;\"><<span class=\"hljs-name\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">div</span>></span><br>                               <span class=\"hljs-tag\" style=\"font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;\"><<span class=\"hljs-name\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">text</span> <span class=\"hljs-attr\" style=\"font-size: inherit;line-height: inherit;color: rgb(165, 218, 45);word-wrap: inherit !important;word-break: inherit !important;\">class</span>=<span class=\"hljs-string\" style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);word-wrap: inherit !important;word-break: inherit !important;\">\"name\"</span>></span>{{$item.name}}<span class=\"hljs-tag\" style=\"font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;\"></<span class=\"hljs-name\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">text</span>></span><br>                          <span class=\"hljs-tag\" style=\"font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;\"></<span class=\"hljs-name\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">div</span>></span><br>                     <span class=\"hljs-tag\" style=\"font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;\"></<span class=\"hljs-name\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">div</span>></span><br>              <span class=\"hljs-tag\" style=\"font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;\"></<span class=\"hljs-name\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">div</span>></span><br>        <span class=\"hljs-tag\" style=\"font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;\"></<span class=\"hljs-name\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">div</span>></span><br>        <span class=\"hljs-tag\" style=\"font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;\"><<span class=\"hljs-name\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">div</span> <span class=\"hljs-attr\" style=\"font-size: inherit;line-height: inherit;color: rgb(165, 218, 45);word-wrap: inherit !important;word-break: inherit !important;\">class</span>=<span class=\"hljs-string\" style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);word-wrap: inherit !important;word-break: inherit !important;\">\"contentPart\"</span> <span class=\"hljs-attr\" style=\"font-size: inherit;line-height: inherit;color: rgb(165, 218, 45);word-wrap: inherit !important;word-break: inherit !important;\">onclick</span>=<span class=\"hljs-string\" style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);word-wrap: inherit !important;word-break: inherit !important;\">\"routeDetail(7)\"</span>></span><br>              <span class=\"hljs-tag\" style=\"font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;\"><<span class=\"hljs-name\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">div</span> <span class=\"hljs-attr\" style=\"font-size: inherit;line-height: inherit;color: rgb(165, 218, 45);word-wrap: inherit !important;word-break: inherit !important;\">class</span>=<span class=\"hljs-string\" style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);word-wrap: inherit !important;word-break: inherit !important;\">\"articleWrap\"</span> <span class=\"hljs-attr\" style=\"font-size: inherit;line-height: inherit;color: rgb(165, 218, 45);word-wrap: inherit !important;word-break: inherit !important;\">for</span>=<span class=\"hljs-string\" style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);word-wrap: inherit !important;word-break: inherit !important;\">\"{{articleList}}\"</span>></span><br>                    <span class=\"hljs-tag\" style=\"font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;\"><<span class=\"hljs-name\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">div</span>></span><br>                         <span class=\"hljs-tag\" style=\"font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;\"><<span class=\"hljs-name\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">text</span> <span class=\"hljs-attr\" style=\"font-size: inherit;line-height: inherit;color: rgb(165, 218, 45);word-wrap: inherit !important;word-break: inherit !important;\">class</span>=<span class=\"hljs-string\" style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);word-wrap: inherit !important;word-break: inherit !important;\">\"title\"</span>></span>{{$item.title}}<span class=\"hljs-tag\" style=\"font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;\"></<span class=\"hljs-name\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">text</span>></span><br>                    <span class=\"hljs-tag\" style=\"font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;\"></<span class=\"hljs-name\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">div</span>></span><br>                    <span class=\"hljs-tag\" style=\"font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;\"><<span class=\"hljs-name\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">div</span>></span><br>                          <span class=\"hljs-tag\" style=\"font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;\"><<span class=\"hljs-name\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">image</span> <span class=\"hljs-attr\" style=\"font-size: inherit;line-height: inherit;color: rgb(165, 218, 45);word-wrap: inherit !important;word-break: inherit !important;\">class</span>=<span class=\"hljs-string\" style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);word-wrap: inherit !important;word-break: inherit !important;\">\"thumbnail\"</span> <span class=\"hljs-attr\" style=\"font-size: inherit;line-height: inherit;color: rgb(165, 218, 45);word-wrap: inherit !important;word-break: inherit !important;\">src</span>=<span class=\"hljs-string\" style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);word-wrap: inherit !important;word-break: inherit !important;\">{{$item.img}}</span>></span><span class=\"hljs-tag\" style=\"font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;\"></<span class=\"hljs-name\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">image</span>></span><br>                    <span class=\"hljs-tag\" style=\"font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;\"></<span class=\"hljs-name\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">div</span>></span><br>                    <span class=\"hljs-tag\" style=\"font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;\"><<span class=\"hljs-name\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">div</span>></span><br>                          <span class=\"hljs-tag\" style=\"font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;\"><<span class=\"hljs-name\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">text</span> <span class=\"hljs-attr\" style=\"font-size: inherit;line-height: inherit;color: rgb(165, 218, 45);word-wrap: inherit !important;word-break: inherit !important;\">class</span>=<span class=\"hljs-string\" style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);word-wrap: inherit !important;word-break: inherit !important;\">\"brief\"</span>></span>{{$item.brief}}<span class=\"hljs-tag\" style=\"font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;\"></<span class=\"hljs-name\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">text</span>></span><br>                    <span class=\"hljs-tag\" style=\"font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;\"></<span class=\"hljs-name\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">div</span>></span><br>                    <span class=\"hljs-tag\" style=\"font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;\"><<span class=\"hljs-name\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">div</span> <span class=\"hljs-attr\" style=\"font-size: inherit;line-height: inherit;color: rgb(165, 218, 45);word-wrap: inherit !important;word-break: inherit !important;\">class</span>=<span class=\"hljs-string\" style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);word-wrap: inherit !important;word-break: inherit !important;\">\"readAll\"</span>></span><br>                           <span class=\"hljs-tag\" style=\"font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;\"><<span class=\"hljs-name\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">div</span>></span><br>                                 <span class=\"hljs-tag\" style=\"font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;\"><<span class=\"hljs-name\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">text</span> <span class=\"hljs-attr\" style=\"font-size: inherit;line-height: inherit;color: rgb(165, 218, 45);word-wrap: inherit !important;word-break: inherit !important;\">class</span>=<span class=\"hljs-string\" style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);word-wrap: inherit !important;word-break: inherit !important;\">\"tip\"</span>></span>阅读全文<span class=\"hljs-tag\" style=\"font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;\"></<span class=\"hljs-name\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">text</span>></span><br>                           <span class=\"hljs-tag\" style=\"font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;\"></<span class=\"hljs-name\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">div</span>></span><br>                           <span class=\"hljs-tag\" style=\"font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;\"><<span class=\"hljs-name\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">div</span>></span><br>                                 <span class=\"hljs-tag\" style=\"font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;\"><<span class=\"hljs-name\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">text</span> <span class=\"hljs-attr\" style=\"font-size: inherit;line-height: inherit;color: rgb(165, 218, 45);word-wrap: inherit !important;word-break: inherit !important;\">class</span>=<span class=\"hljs-string\" style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);word-wrap: inherit !important;word-break: inherit !important;\">\"arrow\"</span>></span>><span class=\"hljs-tag\" style=\"font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;\"></<span class=\"hljs-name\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">text</span>></span><br>                           <span class=\"hljs-tag\" style=\"font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;\"></<span class=\"hljs-name\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">div</span>></span><br>                    <span class=\"hljs-tag\" style=\"font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;\"></<span class=\"hljs-name\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">div</span>></span><br>              <span class=\"hljs-tag\" style=\"font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;\"></<span class=\"hljs-name\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">div</span>></span><br>        <span class=\"hljs-tag\" style=\"font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;\"></<span class=\"hljs-name\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">div</span>></span><br>        <span class=\"hljs-tag\" style=\"font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;\"><<span class=\"hljs-name\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">image</span> <span class=\"hljs-attr\" style=\"font-size: inherit;line-height: inherit;color: rgb(165, 218, 45);word-wrap: inherit !important;word-break: inherit !important;\">class</span>=<span class=\"hljs-string\" style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);word-wrap: inherit !important;word-break: inherit !important;\">\"bottomPart\"</span> <span class=\"hljs-attr\" style=\"font-size: inherit;line-height: inherit;color: rgb(165, 218, 45);word-wrap: inherit !important;word-break: inherit !important;\">src</span>=<span class=\"hljs-string\" style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);word-wrap: inherit !important;word-break: inherit !important;\">\"./../Images/logo_grey@3X.png\"</span>></span><span class=\"hljs-tag\" style=\"font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;\"></<span class=\"hljs-name\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">image</span>></span><br>  <span class=\"hljs-tag\" style=\"font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;\"></<span class=\"hljs-name\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">div</span>></span><br><span class=\"hljs-tag\" style=\"font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;\"></<span class=\"hljs-name\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">template</span>></span><br></code></pre></section><p><span style=\"font-size: 14px;color: rgb(68, 68, 68);\"></span><br></p><h5><strong><span style=\"font-size: 14px;color: rgb(68, 68, 68);\">一言不合就上代码『css部分』</span></strong></h5><p><span style=\"font-size: 14px;color: rgb(68, 68, 68);\"></span></p><section class=\"output_wrapper\" style=\"font-size: 16px;color: rgb(62, 62, 62);line-height: 1.6;letter-spacing: 0px;\"><pre style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 0px;margin-bottom: 0px;padding: 0px;\"><code class=\"hljs bash\" style=\"margin-right: 2px;margin-left: 2px;line-height: 15px;font-size: 11px;word-spacing: -3px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;color: rgb(169, 183, 198);background: rgb(40, 43, 46);padding: 0.5em;display: block !important;word-wrap: normal !important;word-break: normal !important;overflow: auto !important;\"><style lang=<span class=\"hljs-string\" style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);word-wrap: inherit !important;word-break: inherit !important;\">\"less\"</span>><br>      .mainWrapper{<br>              flex-direction: column;<br>              justify-content:flex-start;<br>              background-color:rgba(84,95,113,0.10);<br>             .topPart{<br>                   flex-direction: column;<br>                   justify-content:flex-start;<br>                   .topBg{<br>                         width:750px;<br>                         height:326px;<br>                         background-image:url(<span class=\"hljs-string\" style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);word-wrap: inherit !important;word-break: inherit !important;\">\'./../Images/index_top_bg@3x.png\'</span>);<br>                         background-size:cover;<br>                   }<br>                  .slogan_title{<br>                       justify-content:space-between;<br>                       margin-left:40px;<br>                       margin-top:-263px;<br>                       width:680px;<br>                       .slogan{<br>                            width:381px;<br>                            height:52px;<br>                            img{<br>                                width:100%;<br>                            }<br>                       }<br>                       .title{<br>                            width:66px;<br>                            height:66px;<br>                            margin-left:233px;<br>                            border-radius:50px;<br>                            img{<br>                                 width:100%;<br>                            }<br>                       }<br>                  }<br>                  .menu_icons{<br>                        width:710px;<br>                        height:220px;<br>                        background-color:<span class=\"hljs-comment\" style=\"font-size: inherit;line-height: inherit;color: rgb(128, 128, 128);word-wrap: inherit !important;word-break: inherit !important;\">#ffffff;</span><br>                        margin-left:20px;<br>                        margin-top:40px;<br>                        border-radius:6px;<br>                        justify-content:space-between;<br>                        align-items:center;<br>                        .menu{<br>                             width:138px;<br>                             display:flex;<br>                             flex-direction:column;<br>                             justify-content:space-between;<br>                             align-items:center;<br>                             margin-left:10px;<br>                             margin-top:48px;<br>                             margin-bottom:54px;<br>                             .icon{<br>                                   width:64px;<br>                                   height:64px;<br>                                   img{<br>                                        width:100%;<br>                                   }<br>                             }<br>                            div>.name{<br>                                 font-size:24px;<br>                                 line-height:34px;<br>                                 color:<span class=\"hljs-comment\" style=\"font-size: inherit;line-height: inherit;color: rgb(128, 128, 128);word-wrap: inherit !important;word-break: inherit !important;\">#666666;</span><br>                                 margin-top:20px;<br>                             }<br>                        }<br>                  }<br>             }<br>            .contentPart{<br>                margin-top:40px;<br>                margin-left:20px;<br>                margin-right:20px;<br>                flex-direction:column;<br>                justify-content:flex-start;<br>                .articleWrap{<br>                     width:710px;<br>                     background-color:<span class=\"hljs-comment\" style=\"font-size: inherit;line-height: inherit;color: rgb(128, 128, 128);word-wrap: inherit !important;word-break: inherit !important;\">#ffffff;</span><br>                     border-radius:6px;<br>                     flex-direction:column;<br>                     justify-content:flex-start;<br>                     padding-left:30px;<br>                     padding-right:30px;<br>                     margin-bottom:40px;<br>                     .title{<br>                          padding-top:33px;<br>                          padding-bottom:33px;<br>                          font-size:32px;<br>                          color:<span class=\"hljs-comment\" style=\"font-size: inherit;line-height: inherit;color: rgb(128, 128, 128);word-wrap: inherit !important;word-break: inherit !important;\">#333333;</span><br>                          font-weight:bold;<br>                     }<br>                     .thumbnail{<br>                         width:650px;<br>                         img{<br>                             width:100%;<br>                         }<br>                     }<br>                     .brief{<br>                         padding-top:30px;<br>                         padding-bottom:30px;<br>                         font-size:28px;<br>                         color:<span class=\"hljs-comment\" style=\"font-size: inherit;line-height: inherit;color: rgb(128, 128, 128);word-wrap: inherit !important;word-break: inherit !important;\">#999999;</span><br>                         line-height:32px;<br>                     }<br>                     .readAll{<br>                          justify-content:space-between;<br>                          align-items:center;<br>                          border-top-width:0.5px;<br>                          border-top-color:<span class=\"hljs-comment\" style=\"font-size: inherit;line-height: inherit;color: rgb(128, 128, 128);word-wrap: inherit !important;word-break: inherit !important;\">#eeeeee;</span><br>                          padding-top:20px;<br>                          padding-bottom:20px;<br>                          .tip{<br>                               color:<span class=\"hljs-comment\" style=\"font-size: inherit;line-height: inherit;color: rgb(128, 128, 128);word-wrap: inherit !important;word-break: inherit !important;\">#333333;</span><br>                               font-size:28px;<br>                          }<br>                          .arrow{<br>                               color:<span class=\"hljs-comment\" style=\"font-size: inherit;line-height: inherit;color: rgb(128, 128, 128);word-wrap: inherit !important;word-break: inherit !important;\">#cccccc;</span><br>                               font-size:28px;<br>                          }<br>                     }<br>                }<br>            }<br>            .bottomPart{<br>                 width:180px;<br>                 height:54px;<br>                 margin-top:20px;<br>                 margin-left:284px;<br>                 margin-bottom:30px;<br>                 img{<br>                     width:100%;<br>                 }<br>            }<br>      }<br></style><br></code></pre></section><p><br></p><h5><strong><span style=\"font-size: 14px;color: rgb(68, 68, 68);\">一言不合就上代码『js部分』</span></strong></h5><section class=\"output_wrapper\" style=\"font-size: 16px;color: rgb(62, 62, 62);line-height: 1.6;letter-spacing: 0px;\"><pre style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 0px;margin-bottom: 0px;padding: 0px;\"><code class=\"hljs xml\" style=\"margin-right: 2px;margin-left: 2px;line-height: 15px;font-size: 11px;word-spacing: -3px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;color: rgb(169, 183, 198);background: rgb(40, 43, 46);padding: 0.5em;display: block !important;word-wrap: normal !important;word-break: normal !important;overflow: auto !important;\"><span class=\"hljs-tag\" style=\"font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;\"><<span class=\"hljs-name\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">script</span>></span><span class=\"javascript\" style=\"font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;\"><br>  <span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">import</span> router <span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">from</span> <span class=\"hljs-string\" style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);word-wrap: inherit !important;word-break: inherit !important;\">\'@system.router\'</span><br>  <span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">export</span> <span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">default</span> {<br>    <span class=\"hljs-attr\" style=\"font-size: inherit;line-height: inherit;color: rgb(165, 218, 45);word-wrap: inherit !important;word-break: inherit !important;\">data</span>: {<br>        <span class=\"hljs-attr\" style=\"font-size: inherit;line-height: inherit;color: rgb(165, 218, 45);word-wrap: inherit !important;word-break: inherit !important;\">title</span>: <span class=\"hljs-string\" style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);word-wrap: inherit !important;word-break: inherit !important;\">\'京东金融\'</span>,<br>        <span class=\"hljs-attr\" style=\"font-size: inherit;line-height: inherit;color: rgb(165, 218, 45);word-wrap: inherit !important;word-break: inherit !important;\">menuList</span>:[{<br>              <span class=\"hljs-attr\" style=\"font-size: inherit;line-height: inherit;color: rgb(165, 218, 45);word-wrap: inherit !important;word-break: inherit !important;\">icon</span>:<span class=\"hljs-string\" style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);word-wrap: inherit !important;word-break: inherit !important;\">\'./../Images/index_icon_asset@3x.png\'</span>,<br>              <span class=\"hljs-attr\" style=\"font-size: inherit;line-height: inherit;color: rgb(165, 218, 45);word-wrap: inherit !important;word-break: inherit !important;\">name</span>:<span class=\"hljs-string\" style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);word-wrap: inherit !important;word-break: inherit !important;\">\'资产\'</span><br>        },{<br>              <span class=\"hljs-attr\" style=\"font-size: inherit;line-height: inherit;color: rgb(165, 218, 45);word-wrap: inherit !important;word-break: inherit !important;\">icon</span>:<span class=\"hljs-string\" style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);word-wrap: inherit !important;word-break: inherit !important;\">\'./../Images/index_icon_profit@3x.png\'</span>,<br>              <span class=\"hljs-attr\" style=\"font-size: inherit;line-height: inherit;color: rgb(165, 218, 45);word-wrap: inherit !important;word-break: inherit !important;\">name</span>:<span class=\"hljs-string\" style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);word-wrap: inherit !important;word-break: inherit !important;\">\'查收益\'</span><br>        },{<br>              <span class=\"hljs-attr\" style=\"font-size: inherit;line-height: inherit;color: rgb(165, 218, 45);word-wrap: inherit !important;word-break: inherit !important;\">icon</span>:<span class=\"hljs-string\" style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);word-wrap: inherit !important;word-break: inherit !important;\">\'./../Images/index_icon_quota@3x.png\'</span>,<br>              <span class=\"hljs-attr\" style=\"font-size: inherit;line-height: inherit;color: rgb(165, 218, 45);word-wrap: inherit !important;word-break: inherit !important;\">name</span>:<span class=\"hljs-string\" style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);word-wrap: inherit !important;word-break: inherit !important;\">\'查额度\'</span><br>        },{<br>              <span class=\"hljs-attr\" style=\"font-size: inherit;line-height: inherit;color: rgb(165, 218, 45);word-wrap: inherit !important;word-break: inherit !important;\">icon</span>:<span class=\"hljs-string\" style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);word-wrap: inherit !important;word-break: inherit !important;\">\'./../Images/index_icon_bill@3x.png\'</span>,<br>              <span class=\"hljs-attr\" style=\"font-size: inherit;line-height: inherit;color: rgb(165, 218, 45);word-wrap: inherit !important;word-break: inherit !important;\">name</span>:<span class=\"hljs-string\" style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);word-wrap: inherit !important;word-break: inherit !important;\">\'查账单\'</span><br>        },{<br>              <span class=\"hljs-attr\" style=\"font-size: inherit;line-height: inherit;color: rgb(165, 218, 45);word-wrap: inherit !important;word-break: inherit !important;\">icon</span>:<span class=\"hljs-string\" style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);word-wrap: inherit !important;word-break: inherit !important;\">\'./../Images/index_icon_credit@3x.png\'</span>,<br>              <span class=\"hljs-attr\" style=\"font-size: inherit;line-height: inherit;color: rgb(165, 218, 45);word-wrap: inherit !important;word-break: inherit !important;\">name</span>:<span class=\"hljs-string\" style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);word-wrap: inherit !important;word-break: inherit !important;\">\'信用\'</span><br>        }],<br>        <span class=\"hljs-attr\" style=\"font-size: inherit;line-height: inherit;color: rgb(165, 218, 45);word-wrap: inherit !important;word-break: inherit !important;\">articleList</span>:[{<br>             <span class=\"hljs-attr\" style=\"font-size: inherit;line-height: inherit;color: rgb(165, 218, 45);word-wrap: inherit !important;word-break: inherit !important;\">title</span>:<span class=\"hljs-string\" style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);word-wrap: inherit !important;word-break: inherit !important;\">\'白条是什么？怎么申请？\'</span>,<br>             <span class=\"hljs-attr\" style=\"font-size: inherit;line-height: inherit;color: rgb(165, 218, 45);word-wrap: inherit !important;word-break: inherit !important;\">img</span>:<span class=\"hljs-string\" style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);word-wrap: inherit !important;word-break: inherit !important;\">\'./../Images/bottom-img02.png\'</span>,<br>             <span class=\"hljs-attr\" style=\"font-size: inherit;line-height: inherit;color: rgb(165, 218, 45);word-wrap: inherit !important;word-break: inherit !important;\">brief</span>:<span class=\"hljs-string\" style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);word-wrap: inherit !important;word-break: inherit !important;\">\'白条是京东金融推出的个人消费信贷产品，申请京东白条后，您可以使用白条额度在京东商城消费，享受先消费、后付款服务，同时支持最高24期分期还款。\'</span><br>        },{<br>             <span class=\"hljs-attr\" style=\"font-size: inherit;line-height: inherit;color: rgb(165, 218, 45);word-wrap: inherit !important;word-break: inherit !important;\">title</span>:<span class=\"hljs-string\" style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);word-wrap: inherit !important;word-break: inherit !important;\">\'京东金融的理财产品，收益怎么样？\'</span>,<br>             <span class=\"hljs-attr\" style=\"font-size: inherit;line-height: inherit;color: rgb(165, 218, 45);word-wrap: inherit !important;word-break: inherit !important;\">img</span>:<span class=\"hljs-string\" style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);word-wrap: inherit !important;word-break: inherit !important;\">\'./../Images/bottom-img01.png\'</span>,<br>             <span class=\"hljs-attr\" style=\"font-size: inherit;line-height: inherit;color: rgb(165, 218, 45);word-wrap: inherit !important;word-break: inherit !important;\">brief</span>:<span class=\"hljs-string\" style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);word-wrap: inherit !important;word-break: inherit !important;\">\'京东定期理财是京东金融推出的简单、安全的稳健型理财产品,多种定期理财产品的投资收益、投资时间一目了然。从投资历史来看,收益高且稳定,得到了众多好评。\'</span><br>        }]<br>    },<br>    routeDetail(id) {<br>      <span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">let</span> uri = <span class=\"hljs-string\" style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);word-wrap: inherit !important;word-break: inherit !important;\">\'\'</span><br>      <span class=\"hljs-comment\" style=\"font-size: inherit;line-height: inherit;color: rgb(128, 128, 128);word-wrap: inherit !important;word-break: inherit !important;\">// 跳转到应用内的某个页面，router用法详见：文档->接口->页面路由</span><br>      <span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">switch</span> (id) {<br>        <span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">case</span> <span class=\"hljs-number\" style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);word-wrap: inherit !important;word-break: inherit !important;\">1</span>:<br>          uri = <span class=\"hljs-string\" style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);word-wrap: inherit !important;word-break: inherit !important;\">\'/Assets\'</span><br>          <span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">break</span>;<br>        <span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">case</span> <span class=\"hljs-number\" style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);word-wrap: inherit !important;word-break: inherit !important;\">2</span>:<br>          uri = <span class=\"hljs-string\" style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);word-wrap: inherit !important;word-break: inherit !important;\">\'/Income\'</span><br>          <span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">break</span>;<br>        <span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">case</span> <span class=\"hljs-number\" style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);word-wrap: inherit !important;word-break: inherit !important;\">3</span>:<br>          uri = <span class=\"hljs-string\" style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);word-wrap: inherit !important;word-break: inherit !important;\">\'/Quota\'</span><br>          <span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">break</span>;<br>        <span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);word-wrap: inherit !important;word-break: inherit !important;\">case</span> <span class=\"hljs-number\" style=\"', '******作者 |  ******京东金融-移动研发部-前端开发工程师****\n----------------------------------------\n\n  \n\n===\n\n**前戏--什么是快应用**\n==============\n\n  \n\n3月20号快应用标准启动发布会后，这一新生技术瞬间火了。前端群里号召大家有兴趣的去调研下快应用，于是我用一天时间写了个京东金融快应用简易demo，接下来总结下遇到的一些问题和个人见解：\n\n  \n\n### **首先介绍下什么是快应用**\n\n> 快应用是基于手机硬件平台的新型应用形态，标准是由主流手机厂商组成的快应用联盟联合制定。\n> \n> 快应用标准的诞生将在研发接口、能力接入、开发者服务等层面建设标准平台，以平台化的生态模式对个人开发者和企业开发者全品类开放。\n> \n> 快应用具备传统APP完整的应用体验，无需安装、即点即用。\n\n###   \n\n### **快应用技术栈**\n\n##### 利用前端技术栈编写，转换成原生语法：\n\n图片来源：快应用发布会PPT\n\n  \n\n图片来源：快应用发布会PPT\n\n  \n\n**理论到实践--从入门到放(jing)弃(tong)**\n=============================\n\n###   \n\n### 入门千篇一律 请看**官****方文档** https://doc.quickapp.cn/\n\n  \n\n### **开发心得体会【布局篇】**\n\n> ##### 需安装6.0以上版本的NodeJS，请从NodeJS官网下载，推荐v6.11.3（高于8.0会报错），同时最好有一部安卓系统8.0的安卓机，编译后可以扫码安装，这样便可以一路顺畅见到官方的\"Hello Word\"页面。\n\n  \n\n1.  要实现自动编译项目，需开启两个窗口，一个运行npm run build->npm run server,另一个运行npm run watch.\n    \n2.  命令hap init初始化项目后，先设置项目配置信息，在src目录下的manifest.json配置文件里，比如设计稿是基于750px的，在config设置如下：**javascript \"config\": { \"designWidth\":750 } **\n    \n3.  页面结构跟vuejs极其相似，dom元素写在template里，style标签支持less语法，需安装**less**和**less-loader**依赖，style标签设置**lang=\"less\"**即可，业务逻辑写在script里。这里要强调一点的是，template里只能有一个根节点。\n    \n4.  为了解决屏幕适配问题，所有与大小相关的样式（例如width、font-size）均以基准宽度（默认750px）为基础，根据实际屏幕宽度进行缩放，例如width:100px，在1500px宽度屏幕上，width实际上为200px。框架目前仅支持长度单位px，百分比也不支持，**\"margin:0 auto;\"**这类写法也不支持,官方文档说margin&padding属性值可以有1~4个值，但在实际使用时却不支持，上右下左4个值需要分开写。\n    \n5.  文本必须包含在text标签内才能显示，同时针对文本的样式class也要写在text标签内才能生效（这点跟react-native的Text标签一样）。\n    \n6.  position属性不支持absolute和relative，可以为fixed和none;(不支持的属性值会报错)\n    \n7.  **background**属性不支持url写法，要用背景图得用**background-image**属性。需要强调的是，**background**属性支持渐变样式，暂时不能与**background-color**、**background-image**同时使用。**background-image**暂时不支持与**background-color**，**border-color**同时使用；不支持网络图片资源，支持本地图片资源。 背景颜色则要用**background-color**去设置，颜色值也必须为6位的十六进制，如：**\"background-color:#ffffff;\"**\n    \n8.  **box-shadow**和**font-family**属性暂时不支持；\n    \n9.  框架提供了一套基础的界面组件，界面组件标签除了支持常用的HTML5标签，例如div，a，input等标签之外，还提供与原生UI相关的组件标签，例如switch，slider，list等（注意：不支持ul li 、dl dt dd等标签）。不支持的标签会报错，具体使用请参考**官方文档--组件 **https://doc.quickapp.cn/widgets/div.html。\n    \n10.  页面布局虽然默认采用了flex盒布局，但justify-content支持的属性值有限，有效枚举值为: **flex-start|flex-end|center|space-between**，报错如下所示：\n    \n      \n    \n11.  list组件的使用，其子组件必须是block，然后block的子组件必须是list-item。block组件不支持class属性，支持的属性有\\[for,tid,if,elif,else\\]，注意：1）list-item内不能再嵌套list；2）list-item的type属性为必填属性；3）list-item内部需谨慎使用if指令或for指令，因为相同type属性的list-item的DOM结构必须完全相同，而使用if指令或for指令会造成DOM结构差异；\n    \n12.  div组件支持的属性有 \\[id, style, class, disabled, if, elif, else, for, tid, show\\]。\n    \n13.  当DOM结构复杂时，滚动页面会出现卡顿现象，因为Native无法复用div组件实现的列表元素，为了得到流畅的列表滚动体验，推荐使用list组件替代div组件实现长列表布局，因为Native会复用相同type属性的list-item。\n    \n\n  \n\n### **轻松实现京东金融小程序首页**\n\n#####   \n\n##### 掌握了一些原理后，接下来进入采坑之旅（建议：先看官方文档，特别是**css属性的支持范围 **https://doc.quickapp.cn/widgets/common-styles.html）先来张首页初版截图：\n\n  \n\n##### **一言不合就上代码『Dom部分』**\n\n  \n\n    <template>    <div class=\"mainWrapper\">        <div class=\"topPart\">              <div class=\"topBg\">div>              <div class=\"slogan_title\">                    <image class=\"slogan\" src=\"./../Images/slogan@3x.png\">image>                    <image class=\"title\" src=\"./../Images/logo.png\">image>              div>              <div class=\"menu_icons\">                     <div class=\"menu\" for=\"{{menuList}}\" onclick=\"routeDetail($idx+1)\">                          <div class=\"icon\">                               <image src={{$item.icon}}>image>                          div>                          <div>                               <text class=\"name\">{{$item.name}}text>                          div>                     div>              div>        div>        <div class=\"contentPart\" onclick=\"routeDetail(7)\">              <div class=\"articleWrap\" for=\"{{articleList}}\">                    <div>                         <text class=\"title\">{{$item.title}}text>                    div>                    <div>                          <image class=\"thumbnail\" src={{$item.img}}>image>                    div>                    <div>                          <text class=\"brief\">{{$item.brief}}text>                    div>                    <div class=\"readAll\">                           <div>                                 <text class=\"tip\">阅读全文text>                           div>                           <div>                                 <text class=\"arrow\">>text>                           div>                    div>              div>        div>        <image class=\"bottomPart\" src=\"./../Images/logo_grey@3X.png\">image>  div>template>\n\n  \n\n##### **一言不合就上代码『css部分』**\n\n    \"less\"</span>><br>      .mainWrapper{<br>              flex-direction: column;<br>              justify-content:flex-start;<br>              background-color:rgba(84,95,113,0.10);<br>             .topPart{<br>                   flex-direction: column;<br>                   justify-content:flex-start;<br>                   .topBg{<br>                         width:750px;<br>                         height:326px;<br>                         background-image:url(<span class=\"hljs-string\" style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);word-wrap: inherit !important;word-break: inherit !important;\">\'./../Images/index_top_bg@3x.png\'</span>);<br>                         background-size:cover;<br>                   }<br>                  .slogan_title{<br>                       justify-content:space-between;<br>                       margin-left:40px;<br>                       margin-top:-263px;<br>                       width:680px;<br>                       .slogan{<br>                            width:381px;<br>                            height:52px;<br>                            img{<br>                                width:100%;<br>                            }<br>                       }<br>                       .title{<br>                            width:66px;<br>                            height:66px;<br>                            margin-left:233px;<br>                            border-radius:50px;<br>                            img{<br>                                 width:100%;<br>                            }<br>                       }<br>                  }<br>                  .menu_icons{<br>                        width:710px;<br>                        height:220px;<br>                        background-color:<span class=\"hljs-comment\" style=\"font-size: inherit;line-height: inherit;color: rgb(128, 128, 128);word-wrap: inherit !important;word-break: inherit !important;\">#ffffff;</span><br>                        margin-left:20px;<br>                        margin-top:40px;<br>                        border-radius:6px;<br>                        justify-content:space-between;<br>                        align-items:center;<br>                        .menu{<br>                             width:138px;<br>                             display:flex;<br>                             flex-direction:column;<br>                             justify-content:space-between;<br>                             align-items:center;<br>                             margin-left:10px;<br>                             margin-top:48px;<br>                             margin-bottom:54px;<br>                             .icon{<br>                                   width:64px;<br>                                   height:64px;<br>                                   img{<br>                                        width:100%;<br>                                   }<br>                             }<br>                            div>.name{<br>                                 font-size:24px;<br>                                 line-height:34px;<br>                                 color:<span class=\"hljs-comment\" style=\"font-size: inherit;line-height: inherit;color: rgb(128, 128, 128);word-wrap: inherit !important;word-break: inherit !important;\">#666666;</span><br>                                 margin-top:20px;<br>                             }<br>                        }<br>                  }<br>             }<br>            .contentPart{<br>                margin-top:40px;<br>                margin-left:20px;<br>                margin-right:20px;<br>                flex-direction:column;<br>                justify-content:flex-start;<br>                .articleWrap{<br>                     width:710px;<br>                     background-color:<span class=\"hljs-comment\" style=\"font-size: inherit;line-height: inherit;color: rgb(128, 128, 128);word-wrap: inherit !important;word-break: inherit !important;\">#ffffff;</span><br>                     border-radius:6px;<br>                     flex-direction:column;<br>                     justify-content:flex-start;<br>                     padding-left:30px;<br>                     padding-right:30px;<br>                     margin-bottom:40px;<br>                     .title{<br>                          padding-top:33px;<br>                          padding-bottom:33px;<br>                          font-size:32px;<br>                          color:<span class=\"hljs-comment\" style=\"font-size: inherit;line-height: inherit;color: rgb(128, 128, 128);word-wrap: inherit !important;word-break: inherit !important;\">#333333;</span><br>                          font-weight:bold;<br>                     }<br>                     .thumbnail{<br>                         width:650px;<br>                         img{<br>                             width:100%;<br>                         }<br>                     }<br>                     .brief{<br>                         padding-top:30px;<br>                         padding-bottom:30px;<br>                         font-size:28px;<br>                         color:<span class=\"hljs-comment\" style=\"font-size: inherit;line-height: inherit;color: rgb(128, 128, 128);word-wrap: inherit !important;word-break: inherit !important;\">#999999;</span><br>                         line-height:32px;<br>                     }<br>                     .readAll{<br>                          justify-content:space-between;<br>                          align-items:center;<br>                          border-top-width:0.5px;<br>                          border-top-color:<span class=\"hljs-comment\" style=\"font-size: inherit;line-height: inherit;color: rgb(128, 128, 128);word-wrap: inherit !important;word-break: inherit !important;\">#eeeeee;</span><br>                          padding-top:20px;<br>                          padding-bottom:20px;<br>                          .tip{<br>                               color:<span class=\"hljs-comment\" style=\"font-size: inherit;line-height: inherit;color: rgb(128, 128, 128);word-wrap: inherit !important;word-break: inherit !important;\">#333333;</span><br>                               font-size:28px;<br>                          }<br>                          .arrow{<br>                               color:<span class=\"hljs-comment\" style=\"font-size: inherit;line-height: inherit;color: rgb(128, 128, 128);word-wrap: inherit !important;word-break: inherit !important;\">#cccccc;</span><br>                               font-size:28px;<br>                          }<br>                     }<br>                }<br>            }<br>            .bottomPart{<br>                 width:180px;<br>                 height:54px;<br>                 margin-top:20px;<br>                 margin-left:284px;<br>                 margin-bottom:30px;<br>                 img{<br>                     width:100%;<br>                 }<br>            }<br>      }<br>\n\n  \n\n##### **一言不合就上代码『js部分』**\n\n    <script>  import router from \'@system.router\'  export default {    data: {        title: \'京东金融\',        menuList:[{              icon:\'./../Images/index_icon_asset@3x.png\',              name:\'资产\'        },{              icon:\'./../Images/index_icon_profit@3x.png\',              name:\'查收益\'        },{              icon:\'./../Images/index_icon_quota@3x.png\',              name:\'查额度\'        },{              icon:\'./../Images/index_icon_bill@3x.png\',              name:\'查账单\'        },{              icon:\'./../Images/index_icon_credit@3x.png\',              name:\'信用\'        }],        articleList:[{             title:\'白条是什么？怎么申请？\',             img:\'./../Images/bottom-img02.png\',             brief:\'白条是京东金融推出的个人消费信贷产品，申请京东白条后，您可以使用白条额度在京东商城消费，享受先消费、后付款服务，同时支持最高24期分期还款。\'        },{             title:\'京东金融的理财产品，收益怎么样？\',             img:\'./../Images/bottom-img01.png\',             brief:\'京东定期理财是京东金融推出的简单、安全的稳健型理财产品,多种定期理财产品的投资收益、投资时间一目了然。从投资历史来看,收益高且稳定,得到了众多好评。\'        }]    },    routeDetail(id) {      let uri = \'\'      // 跳转到应用内的某个页面，router用法详见：文档->接口->页面路由      switch (id) {        case 1:          uri = \'/Assets\'          break;        case 2:          uri = \'/Income\'          break;        case 3:          uri = \'/Quota\'          break;        case 4:          uri = \'/Bill\'          break;        case 5:          uri = \'/Credit\'          break;        case 6:          uri = \'/About\'          break;        case 7:          uri = \'/Detail\'          break;        case 8:          uri = \'/Test\'          break;        default:          break;      }      router.push({        uri: uri      })    }  }script>\n\n  \n\n  \n\n  \n\n### **底层架构和接口能力『下期预告』**\n\n#####   \n\n##### **底层架构：**\n\n图片来源：快应用发布会PPT\n\n  \n\n图片来源：快应用发布会PPT\n\n  \n\n##### **接口能力：**\n\n图片来源：快应用发布会PPT\n\n  \n\n**参考资料：**\n\n**快应用开发文档官网** https://doc.quickapp.cn/', 0, 1, 0);
INSERT INTO `post` (`id`, `createAt`, `updateAt`, `title`, `description`, `thumb`, `url`, `html`, `markdown`, `views`, `status`, `push`) VALUES
(38, '2018-04-23 11:01:44.139325', '2018-04-23 11:01:44.139325', '[前端工坊]Javascript中Promise的内存泄露', '译者|京东金融-移动研发部-前端开发工程师李崇下面的这段代码会造成内存泄露，最终让你的Nodejs进程或浏览器彻底崩溃：数据堆提升到GB量级需要一些时间，况且Node本身也不是保守型的，所以要等待垃圾回收最终冻结进程并尝试恢复内存，需要花费几秒钟时间。上面的代码相当于这样一个异步函数：当然，如果不使用Promise或async/await，这一循环将会是同步的，进程将会抛出堆栈溢出异常，此时的JavaScript代码还没有做尾调用优化（tailcallsoptimazation）（除非所有人都使用ECMA', 'https://mmbiz.qpic.cn/mmbiz_png/BC87ECNQcz1PicFqqHSATKfp8ZboOQpwV5MHKVcSEShxPNxwSl4fpiaFyibVzgrpZmejj2exfVNOWYjBnkeKklMrw/0?wx_fmt=png', 'https://mp.weixin.qq.com/s/XyDBi2oAOxROB9mVC630kw', '<p><strong><span style=\"font-size: 14px;max-width: 100%;color: rgb(136, 136, 136);box-sizing: border-box !important;word-wrap: break-word !important;\">译者 |  京东金融-移动研发部-前端开发工程师  李崇</span></strong></p><p><span style=\"font-size: 14px;max-width: 100%;color: rgb(136, 136, 136);box-sizing: border-box !important;word-wrap: break-word !important;\"></span></p><p style=\"text-align: center;\"><img data-s=\"300,640\" data-type=\"png\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/BC87ECNQcz1PicFqqHSATKfp8ZboOQpwV5MHKVcSEShxPNxwSl4fpiaFyibVzgrpZmejj2exfVNOWYjBnkeKklMrw/0?wx_fmt=png\" data-copyright=\"0\" style=\"\" class=\"\" data-ratio=\"0.5555555555555556\" data-w=\"900\"></p><p><span style=\"color: rgb(68, 68, 68);\"><br></span></p><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\">下面的这段代码会造成内存泄露，最终让你的Nodejs进程或浏览器彻底崩溃：</span></p><p><img data-s=\"300,640\" data-type=\"jpeg\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/BC87ECNQcz1PicFqqHSATKfp8ZboOQpwVvcwlibKp43adbGDbkghoXE7YJbQpsSeOHlTAUiaibYIrHYFEH9Aic0Nqnw/0?wx_fmt=jpeg\" data-copyright=\"0\" style=\"\" class=\"\" data-ratio=\"0.4791666666666667\" data-w=\"768\"></p><p><br></p><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\">数据堆提升到GB量级需要一些时间，况且Node本身也不是保守型的，所以要等待垃圾回收最终冻结进程并尝试恢复内存，需要花费几秒钟时间。</span></p><p><br></p><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\">上面的代码相当于这样一个异步函数：</span></p><p><img data-s=\"300,640\" data-type=\"jpeg\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/BC87ECNQcz1PicFqqHSATKfp8ZboOQpwVvZBB4oN8B3swRddiabcTSk3WlCv4uDHdIkM2WcZcAjpO45RGmviatHyA/0?wx_fmt=jpeg\" data-copyright=\"0\" style=\"\" class=\"\" data-ratio=\"0.21801566579634465\" data-w=\"766\"></p><p><br></p><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\">当然，如果不使用Promise或async/await，这一循环将会是同步的，进程将会抛出堆栈溢出异常，此时的JavaScript代码还没有做尾调用优化（tail callsoptimazation）（除非所有人都使用ECMAScript 6进行开发）。</span></p><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\"><br></span></p><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\">在这之前，缺少尾调用优化机制的JavaScript对于这类异常无计可施。这是因为我们给出的这个递归函数并不是由JavaScript的调用栈来管理的，而是由Promise来做的。递归调用是异步的，所以根据定义不会滥用调用栈。</span><br></p><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\"><br></span></p><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\">可惜，和常规函数使用调用栈处理递归调用一样，Promise滥用了堆内存，而没有使用更合理的then链式调用。那个例子不应该泄露，Promise应该能够做类似尾调用优化的处理，即可以在创建的then链中清除帧（函数调用会在内存形成一个\"调用记录\"，又称\"调用帧\"（call frame））。</span><br></p><p><br></p><p style=\"text-align: center;\"><strong><span style=\"color: rgb(255, 255, 255);background-color: rgb(51, 153, 255);\"> 特性即问题 </span></strong></p><p><br></p><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\">我们指的是Promise/A++特性。这里有GitHub上几个相关Issue的链接，解释了原因：</span></p><ol class=\" list-paddingleft-2\" style=\"list-style-type: decimal;\"><li><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\">Node.js issue，目前已关闭：<span style=\"font-size: 14px;text-decoration: underline;color: rgb(136, 136, 136);\">https://github.com/nodejs/node/issues/6673</span></span></p></li><li><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\">Promise/A++特性issue，2014年创建的：<span style=\"font-size: 14px;text-decoration: underline;color: rgb(136, 136, 136);\">https://github.com/promises-aplus/promises-spec/issues/179</span></span></p></li></ol><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\">正如你所看到的，对于为什么Promise会允许内存泄露是有几个合理的原因的，但我并不认同。</span><br></p><p><span style=\"color: rgb(68, 68, 68);\"> </span></p><p style=\"text-align: center;\"><strong><span style=\"color: rgb(255, 255, 255);background-color: rgb(51, 153, 255);\"> 非泄露方案 </span></strong></p><p><span style=\"color: rgb(68, 68, 68);\"><br></span></p><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\">如是你坚持使用Promise，那么解决方案就是不要使用递归函数：</span></p><p><img data-s=\"300,640\" data-type=\"jpeg\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/BC87ECNQcz1PicFqqHSATKfp8ZboOQpwVOGyJ4tK02zy4yf7fuHribLqslNlKibG9FdDh4rQSRQ07icjtjDTjqaibFw/0?wx_fmt=jpeg\" data-copyright=\"0\" style=\"\" class=\"\" data-ratio=\"0.24285714285714285\" data-w=\"770\"></p><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\">但是这样的话，所有类似的函数式编程也就失去它的意义了。</span><br></p><p><span style=\"color: rgb(68, 68, 68);\"> </span></p><p style=\"text-align: center;\"><strong><span style=\"color: rgb(255, 255, 255);background-color: rgb(51, 153, 255);\"> 常见的异议 </span></strong></p><p><span style=\"color: rgb(68, 68, 68);\"> </span></p><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\">我收集了大家的反馈，这里有一些常见的异议。</span></p><p><br></p><h3><span style=\"color: rgb(68, 68, 68);font-size: 14px;\"><strong>1. 这是正常的</strong></span></h3><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\">如果按照其他使用了Promise/Future的方案来做横向对比，你会发现有很多实现方法并没有泄露内存：</span><br></p><ul class=\" list-paddingleft-2\" style=\"list-style-type: disc;\"><li><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\">Bluebird，<span style=\"font-size: 14px;text-decoration: underline;color: rgb(136, 136, 136);\">http://bluebirdjs.com/docs/getting-started.html</span><span style=\"font-size: 14px;color: rgb(68, 68, 68);text-decoration: underline;\"> </span>可能是JavaScript中最有名的非标准的Promise实现方案了</span></p></li><li><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\">Scala <span style=\"font-size: 14px;text-decoration: underline;color: rgb(136, 136, 136);\">https://www.scala-lang.org/</span>的标准Future，2013年得到广泛使用；而Rich Dougherty又受到了Twitter的Future方案的启发，进而修复了flatMap chain的泄露问题。</span></p></li><li><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\">Twitter的Future <span style=\"font-size: 14px;text-decoration: underline;color: rgb(136, 136, 136);\">https://twitter.github.io/util/docs/com/twitter/util/Future.html</span>，被广泛应用在Twitter的后台架构中，并被整合到了Finagle中。</span></p></li><li><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\">Trane.io <span style=\"font-size: 14px;color: rgb(68, 68, 68);text-decoration: underline;\">http://trane.io/</span> ，Java的一个Future方案，提供了一个TailRec工具用于精准用例。</span></p></li><li><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\">我自己写的Funfix Future <span style=\"font-size: 14px;text-decoration: underline;color: rgb(136, 136, 136);\">https://funfix.org/api/exec/classes/future.html</span> 和Monix CancelableFuture <span style=\"font-size: 14px;color: rgb(136, 136, 136);\"><span style=\"color: rgb(68, 68, 68);font-size: 14px;text-decoration: underline;\">https://monix.io/api/3.0/monix/execution/CancelableFuture.html </span>。</span></span></p></li></ul><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\"> </span></p><h3><span style=\"color: rgb(68, 68, 68);font-size: 14px;\"><strong>2. 毕竟它使用了Promise的无限链式函数</strong></span></h3><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\">是的，这是它泄露内存的原因。</span><br></p><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\">但这一方案不应该这样使用Promise链，另一已知方案更可行，能够阻止泄露。</span></p><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\">错误来自于标准的Promise方案，而不是展示的代码示例，这个示例是合规的用例。</span></p><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\"> </span></p><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\"><strong>3. 这个例子没有使用Return</strong></span></p><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\">该例子为了方便说明尽可能写的简单了，然而：</span><br></p><ul class=\" list-paddingleft-2\" style=\"list-style-type: disc;\"><li><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\">你很容易想象出一个循环，用于处理巨大量级的数据，期间一直在聚合信息，最终返回结果。</span></p></li><li><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\">脚本做了error处理，也没有内部return，catch（console.error）不会有效果。</span></p></li></ul><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\"> </span></p><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\"><strong>4. 这样和堆栈溢出是对等的</strong></span></p><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\">是的，我上面也提到了这一点，但更应注意到这一点：正确的尾调用优化正在被引入到常规的调用标准中，并将作为ECMAScript的一部分：</span><br></p><ul class=\" list-paddingleft-2\" style=\"list-style-type: disc;\"><li><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\">ECMAScript specification <span style=\"font-size: 14px;text-decoration: underline;color: rgb(136, 136, 136);\">http://www.ecma-international.org/ecma-262/6.0/#sec-tail-position-calls</span></span></p></li><li><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\">ECMAScript 6 Proper Tail Calls inWebKit <span style=\"font-size: 14px;text-decoration: underline;color: rgb(136, 136, 136);\">https://webkit.org/blog/6240/ecmascript-6-proper-tail-calls-in-webkit/</span></span></p></li></ul><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\"><br></span></p><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\">需要现在还指望不上，但可以明确地是，未来，如果这个变为了同步执行，那么它并不会触发stackoverflow。</span></p><p><br></p><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\"><strong>5.你可能不了解的Promise工作原理</strong></span></p><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\">我曾被告知我不理解promises.所以我为我差点作出的权威的呼吁而道歉。</span><br></p><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\">自2012年以来，处理异步数据类型一直是我的爱好，我一直在编写几个类似Promise数据类型的项目；</span><br></p><ul class=\" list-paddingleft-2\" style=\"list-style-type: disc;\"><li><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\">Monix <span style=\"font-size: 14px;color: rgb(68, 68, 68);text-decoration: underline;\">https://monix.io/</span> , 实现了任务，其中棒的部分是实现了Haskell 的IO包，以及对CancelableFuture 的补充，并且我认为它是存在的对back-pressured Rx Observable最好的实现。</span></p></li><li><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\">Funfix <span style=\"font-size: 14px;color: rgb(68, 68, 68);text-decoration: underline;\">https://github.com/funfix/funfix</span> ,一个函数式编程的javascript库，提供了一个Future和IO的实现,请参考下面；</span></p></li><li><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\">对cats-effect <span style=\"font-size: 14px;color: rgb(68, 68, 68);text-decoration: underline;\">https://github.com/typelevel/cats-effect</span> 库贡献了代码，更加保守的IO端口；</span></p></li></ul><p><br></p><p><span style=\"font-size: 14px;\"><strong><span style=\"font-size: 14px;color: rgb(68, 68, 68);\">福利：</span></strong><span style=\"font-size: 14px;color: rgb(68, 68, 68);\">查看我的ScalaDays演示<span style=\"font-size: 14px;color: rgb(136, 136, 136);\"> <span style=\"font-size: 14px;text-decoration: underline;\">https://www.youtube.com/watch?v=wi97X8_JQUk</span></span></span></span></p><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\">我的工作，无论好坏，都遵循一定的模式，这也是我理解了Promise的原因，我至少理解了两种解决方案，因此才有了这篇文章；</span><br></p><p><br></p><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\"><strong>6.没有使用，它很小众</strong></span></p><p><span style=\"color: rgb(51, 153, 255);font-size: 14px;\">函数式编程很小众吗？</span><br></p><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\">您不能描述涉及没有尾递归的循环的任何函数式编程算法。如果使用折叠，则使用尾部递归来描述折叠。 那是因为：</span><br></p><ul class=\" list-paddingleft-2\" style=\"list-style-type: disc;\"><li><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\">任何循环都可以用尾递归来描述</span></p></li><li><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\">如果没有它，你就无法改变你的状态</span></p></li></ul><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\">处理长或者无限的事件流的一个用例，使用尾递归来描述算法是非常自然的，并且您无法真正处理基于紧急的、突然变化的循环。</span><br></p><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\"><br></span></p><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\">想象一下，从一个文件中读取大量数据，并使用如下数据结构对其进行描述：</span></p><p><img data-s=\"300,640\" data-type=\"jpeg\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/BC87ECNQcz1PicFqqHSATKfp8ZboOQpwVhA7O8am06SZIVASHib51qN0c5UQiclmUlRiaRiaEOv1GnzMuLnd8Bm1UHw/0?wx_fmt=jpeg\" data-copyright=\"0\" class=\"\" data-ratio=\"0.33852140077821014\" data-w=\"771\"><br></p><p><span style=\"color: rgb(68, 68, 68);\"><br></span></p><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\">简单的方法是使用 TypeScript（也可以使用Flow）来说明它们是什么类型。当然您也可以使用原生的Javascript；</span></p><p><br></p><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\">这种结构开发成本很低且十分有效，是一个延迟的、异步的、引用的透明流。实际上它和异步迭代器的JavaScript实现非常相似，所以，你将来会使用类似的东西，即使你不喜欢它;-)</span></p><p><br></p><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\">并且描述像这样的转换函数功能也很有趣：</span></p><p><img data-s=\"300,640\" data-type=\"jpeg\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/BC87ECNQcz1PicFqqHSATKfp8ZboOQpwVKQkOkIo8Kgu4HXRtMSnriaRzvn4oUE72QZXNx4xVKEBIX5NT9Iv5M7Q/0?wx_fmt=jpeg\" data-copyright=\"0\" style=\"\" class=\"\" data-ratio=\"0.3359273670557717\" data-w=\"771\"></p><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\">哎，由于实现Promise 泄漏，这样写是行不通的;</span></p><p><span style=\"color: rgb(68, 68, 68);\"><br></span></p><h2 style=\"text-align: center;\"><strong><span style=\"color: rgb(255, 255, 255);background-color: rgb(51, 153, 255);\">Funfix库</span></strong></h2><p><strong><span style=\"color: rgb(255, 255, 255);background-color: rgb(51, 153, 255);\"><br></span></strong></p><p style=\"text-align: center;\"><img data-s=\"300,640\" data-type=\"png\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/BC87ECNQcz1PicFqqHSATKfp8ZboOQpwVM7q3nm4zblYgTHBApHBDVgicia5Ugibc3oC7bSygb3KlAVJ4xiaQ94OzwQ/0?wx_fmt=png\" data-copyright=\"0\" style=\"width: 132px;height: 132px;\" class=\"\" data-ratio=\"1\" data-w=\"1024\"></p><p><span style=\"color: rgb(68, 68, 68);\"><br></span></p><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\">我一直在构建一个新的项目，<strong>Funfix</strong> </span><span style=\"font-size: 14px;text-decoration: underline;color: rgb(136, 136, 136);\">https://github.com/funfix/funfix</span><span style=\"color: rgb(68, 68, 68);font-size: 14px;\">，一个用于函数式编程(简称FP)的JavaScript库，支持 TypeScript 和 Flow 流类型。</span></p><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\">Funfix库暴露了<strong>Future<A></strong></span><span style=\"font-size: 14px;text-decoration: underline;color: rgb(136, 136, 136);\">https://funfix.org/api/exec/classes/future.html</span><span style=\"color: rgb(68, 68, 68);font-size: 14px;\">， 一个Promise 的替代方案，它是安全的，可取消并且充满了好的思想，以及Promise ，延迟的、合法的，可降水的数据类型来处理各样的副作用，灵感来自Haskell，两者互补；</span></p><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\"><br></span></p><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\">下面代码由Future 库提供，并且不会造成内存泄露；</span></p><p><img data-s=\"300,640\" data-type=\"jpeg\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/BC87ECNQcz1PicFqqHSATKfp8ZboOQpwViajIlbibia7Wua8epXHcD13wzDicqmqxsvztcicicib9BOX44gqTCluyZKYIw/0?wx_fmt=jpeg\" data-copyright=\"0\" style=\"\" class=\"\" data-ratio=\"0.2935064935064935\" data-w=\"770\"></p><p><span style=\"color: rgb(68, 68, 68);\"><br></span></p><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\">下面由IO提供的代码，也不会造成泄露</span></p><p><img data-s=\"300,640\" data-type=\"jpeg\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/BC87ECNQcz1PicFqqHSATKfp8ZboOQpwVYYSsLuibSibaUOicXFDQoul4PvicQWpjzDRXDoraVPA6bPeW7b2xxibrjEw/0?wx_fmt=jpeg\" data-copyright=\"0\" style=\"\" class=\"\" data-ratio=\"0.2907431551499348\" data-w=\"767\"></p><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\"><br></span></p><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\">这个<strong>IO</strong> 是Monix的任务，比Haskell的IO 要好，因为它可以被取消;-)。</span></p><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\">在这次的Pull Request(请求代码合并)中，我也修复了Future的内存泄漏；</span></p><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\">使用到的技巧，Scala也即使将使用。现在已经在Future的 v6.2.0.版本中发布；</span></p><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\">而且要注意的是，对于Funfix库的Future部分来说，这是很困难的，因为它还必须处理可取消引用的链，因为它也也会泄露。</span></p><p><br></p><h2 style=\"text-align: center;\"><strong><span style=\"color: rgb(255, 255, 255);background-color: rgb(51, 153, 255);\">结语</span></strong></h2><p><span style=\"font-size: 14px;\"><strong><span style=\"color: rgb(255, 255, 255);background-color: rgb(51, 153, 255);\"><br></span></strong></span></p><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\">目前的JavaScript <strong>Promise</strong>实现有这种泄漏是一个大问题，因为尾递归调用是功能编程的基石。</span></p><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\"><br></span></p><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\">没错, <strong>Promise</strong>不是函数式编程的中有用的一元类型，因为它还是有副作用（这就是为什么你还需要使用<strong>IO</strong> </span><span style=\"font-size: 14px;text-decoration: underline;color: rgb(136, 136, 136);\">https://funfix.org/api/effect/classes/io.html</span><span style=\"color: rgb(68, 68, 68);font-size: 14px;\">）,但这无关紧要,加上函数式编程的的纯粹主义者,你可以假设它不会在then的链中泄漏，因为你可以随时在程序中中止它。</span></p><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\"> </span></p><p><span style=\"color: rgb(68, 68, 68);font-size: 14px;\">这也是为什么我担心整个委员会将它的标准化，除了完全尴尬的签名，不能用TypeScript或Flow的类型进行安全描述，这种标准解决方案可能是另一个有害的例子，因为通过成为标准，它使得替代方案难以存在，因为大多数人只是要使用标准的实现，人们害怕依赖它们，特别是在JavaScript的生态系统中。</span></p><p><br></p><p><strong><span style=\"color: rgb(68, 68, 68);font-size: 14px;\">作者</span></strong><span style=\"color: rgb(68, 68, 68);font-size: 14px;\">: alexelcu</span></p><p><strong><span style=\"font-size: 14px;color: rgb(68, 68, 68);\">来源</span></strong><span style=\"font-size: 14px;color: rgb(68, 68, 68);\">: </span><span style=\"font-size: 14px;color: rgb(68, 68, 68);text-decoration: underline;\">https://alexn.org/blog/2017/10/11/javascript-promise-leaks-memory.html</span></p>', '**译者 |  京东金融-移动研发部-前端开发工程师  李崇**\n\n  \n\n下面的这段代码会造成内存泄露，最终让你的Nodejs进程或浏览器彻底崩溃：\n\n  \n\n数据堆提升到GB量级需要一些时间，况且Node本身也不是保守型的，所以要等待垃圾回收最终冻结进程并尝试恢复内存，需要花费几秒钟时间。\n\n  \n\n上面的代码相当于这样一个异步函数：\n\n  \n\n当然，如果不使用Promise或async/await，这一循环将会是同步的，进程将会抛出堆栈溢出异常，此时的JavaScript代码还没有做尾调用优化（tail callsoptimazation）（除非所有人都使用ECMAScript 6进行开发）。\n\n  \n\n在这之前，缺少尾调用优化机制的JavaScript对于这类异常无计可施。这是因为我们给出的这个递归函数并不是由JavaScript的调用栈来管理的，而是由Promise来做的。递归调用是异步的，所以根据定义不会滥用调用栈。  \n\n  \n\n可惜，和常规函数使用调用栈处理递归调用一样，Promise滥用了堆内存，而没有使用更合理的then链式调用。那个例子不应该泄露，Promise应该能够做类似尾调用优化的处理，即可以在创建的then链中清除帧（函数调用会在内存形成一个\"调用记录\"，又称\"调用帧\"（call frame））。  \n\n  \n\n** 特性即问题 **\n\n  \n\n我们指的是Promise/A++特性。这里有GitHub上几个相关Issue的链接，解释了原因：\n\n1.  Node.js issue，目前已关闭：https://github.com/nodejs/node/issues/6673\n    \n2.  Promise/A++特性issue，2014年创建的：https://github.com/promises-aplus/promises-spec/issues/179\n    \n\n正如你所看到的，对于为什么Promise会允许内存泄露是有几个合理的原因的，但我并不认同。  \n\n** 非泄露方案 **\n\n  \n\n如是你坚持使用Promise，那么解决方案就是不要使用递归函数：\n\n但是这样的话，所有类似的函数式编程也就失去它的意义了。  \n\n** 常见的异议 **\n\n我收集了大家的反馈，这里有一些常见的异议。\n\n  \n\n### **1\\. 这是正常的**\n\n如果按照其他使用了Promise/Future的方案来做横向对比，你会发现有很多实现方法并没有泄露内存：  \n\n*   Bluebird，http://bluebirdjs.com/docs/getting-started.html可能是JavaScript中最有名的非标准的Promise实现方案了\n    \n*   Scala https://www.scala-lang.org/的标准Future，2013年得到广泛使用；而Rich Dougherty又受到了Twitter的Future方案的启发，进而修复了flatMap chain的泄露问题。\n    \n*   Twitter的Future https://twitter.github.io/util/docs/com/twitter/util/Future.html，被广泛应用在Twitter的后台架构中，并被整合到了Finagle中。\n    \n*   Trane.io http://trane.io/ ，Java的一个Future方案，提供了一个TailRec工具用于精准用例。\n    \n*   我自己写的Funfix Future https://funfix.org/api/exec/classes/future.html 和Monix CancelableFuture https://monix.io/api/3.0/monix/execution/CancelableFuture.html 。\n    \n\n### **2\\. 毕竟它使用了Promise的无限链式函数**\n\n是的，这是它泄露内存的原因。  \n\n但这一方案不应该这样使用Promise链，另一已知方案更可行，能够阻止泄露。\n\n错误来自于标准的Promise方案，而不是展示的代码示例，这个示例是合规的用例。\n\n**3\\. 这个例子没有使用Return**\n\n该例子为了方便说明尽可能写的简单了，然而：  \n\n*   你很容易想象出一个循环，用于处理巨大量级的数据，期间一直在聚合信息，最终返回结果。\n    \n*   脚本做了error处理，也没有内部return，catch（console.error）不会有效果。\n    \n\n**4\\. 这样和堆栈溢出是对等的**\n\n是的，我上面也提到了这一点，但更应注意到这一点：正确的尾调用优化正在被引入到常规的调用标准中，并将作为ECMAScript的一部分：  \n\n*   ECMAScript specification http://www.ecma-international.org/ecma-262/6.0/#sec-tail-position-calls\n    \n*   ECMAScript 6 Proper Tail Calls inWebKit https://webkit.org/blog/6240/ecmascript-6-proper-tail-calls-in-webkit/\n    \n\n  \n\n需要现在还指望不上，但可以明确地是，未来，如果这个变为了同步执行，那么它并不会触发stackoverflow。\n\n  \n\n**5.你可能不了解的Promise工作原理**\n\n我曾被告知我不理解promises.所以我为我差点作出的权威的呼吁而道歉。  \n\n自2012年以来，处理异步数据类型一直是我的爱好，我一直在编写几个类似Promise数据类型的项目；  \n\n*   Monix https://monix.io/ , 实现了任务，其中棒的部分是实现了Haskell 的IO包，以及对CancelableFuture 的补充，并且我认为它是存在的对back-pressured Rx Observable最好的实现。\n    \n*   Funfix https://github.com/funfix/funfix ,一个函数式编程的javascript库，提供了一个Future和IO的实现,请参考下面；\n    \n*   对cats-effect https://github.com/typelevel/cats-effect 库贡献了代码，更加保守的IO端口；\n    \n\n  \n\n**福利：**查看我的ScalaDays演示 https://www.youtube.com/watch?v=wi97X8_JQUk\n\n我的工作，无论好坏，都遵循一定的模式，这也是我理解了Promise的原因，我至少理解了两种解决方案，因此才有了这篇文章；  \n\n  \n\n**6.没有使用，它很小众**\n\n函数式编程很小众吗？  \n\n您不能描述涉及没有尾递归的循环的任何函数式编程算法。如果使用折叠，则使用尾部递归来描述折叠。 那是因为：  \n\n*   任何循环都可以用尾递归来描述\n    \n*   如果没有它，你就无法改变你的状态\n    \n\n处理长或者无限的事件流的一个用例，使用尾递归来描述算法是非常自然的，并且您无法真正处理基于紧急的、突然变化的循环。  \n\n  \n\n想象一下，从一个文件中读取大量数据，并使用如下数据结构对其进行描述：\n\n  \n\n  \n\n简单的方法是使用 TypeScript（也可以使用Flow）来说明它们是什么类型。当然您也可以使用原生的Javascript；\n\n  \n\n这种结构开发成本很低且十分有效，是一个延迟的、异步的、引用的透明流。实际上它和异步迭代器的JavaScript实现非常相似，所以，你将来会使用类似的东西，即使你不喜欢它;-)\n\n  \n\n并且描述像这样的转换函数功能也很有趣：\n\n哎，由于实现Promise 泄漏，这样写是行不通的;\n\n  \n\n**Funfix库**\n-----------\n\n  \n\n我一直在构建一个新的项目，**Funfix** https://github.com/funfix/funfix，一个用于函数式编程(简称FP)的JavaScript库，支持 TypeScript 和 Flow 流类型。\n\nFunfix库暴露了**Future**https://funfix.org/api/exec/classes/future.html， 一个Promise 的替代方案，它是安全的，可取消并且充满了好的思想，以及Promise ，延迟的、合法的，可降水的数据类型来处理各样的副作用，灵感来自Haskell，两者互补；\n\n  \n\n下面代码由Future 库提供，并且不会造成内存泄露；\n\n  \n\n下面由IO提供的代码，也不会造成泄露\n\n  \n\n这个**IO** 是Monix的任务，比Haskell的IO 要好，因为它可以被取消;-)。\n\n在这次的Pull Request(请求代码合并)中，我也修复了Future的内存泄漏；\n\n使用到的技巧，Scala也即使将使用。现在已经在Future的 v6.2.0.版本中发布；\n\n而且要注意的是，对于Funfix库的Future部分来说，这是很困难的，因为它还必须处理可取消引用的链，因为它也也会泄露。\n\n  \n\n**结语**\n------\n\n目前的JavaScript **Promise**实现有这种泄漏是一个大问题，因为尾递归调用是功能编程的基石。\n\n  \n\n没错, **Promise**不是函数式编程的中有用的一元类型，因为它还是有副作用（这就是为什么你还需要使用**IO** https://funfix.org/api/effect/classes/io.html）,但这无关紧要,加上函数式编程的的纯粹主义者,你可以假设它不会在then的链中泄漏，因为你可以随时在程序中中止它。\n\n这也是为什么我担心整个委员会将它的标准化，除了完全尴尬的签名，不能用TypeScript或Flow的类型进行安全描述，这种标准解决方案可能是另一个有害的例子，因为通过成为标准，它使得替代方案难以存在，因为大多数人只是要使用标准的实现，人们害怕依赖它们，特别是在JavaScript的生态系统中。\n\n  \n\n**作者**: alexelcu\n\n**来源**: https://alexn.org/blog/2017/10/11/javascript-promise-leaks-memory.html', 0, 1, 0);
INSERT INTO `post` (`id`, `createAt`, `updateAt`, `title`, `description`, `thumb`, `url`, `html`, `markdown`, `views`, `status`, `push`) VALUES
(39, '2018-04-23 11:01:44.189924', '2018-04-23 11:01:44.189924', '设计规范 | Web端设计组件篇－反馈类', '转自：UEDC（ID：uxecho）作者：Echo设计规范中最重要的部分就是组件规范了，制定组件的规范有哪些好处呢？1.高效简单：熟悉了解组件的用法之后，在做界面设计时，只需要合理运用组件就可以快速搭建web端界面，高效无差错。由于有成套的组件规范，所以在交互设计和视觉设计过程中无需每次都重复劳动。2.统一用户体验：由于使用了统一的组件规范，所以保证了的视觉和交互设计统一性，保证整体的用户体验性。3.提升设计综合能力：由于减少了做组件重复性劳动，交互设计师/PM可以将更多时间和精力放在讨论业务、设计方法、', 'https://mmbiz.qpic.cn/mmbiz_png/IBNv5M0t2ZhfvIqUvekl63syQTdlDHibZ6rfxI5umDliaARAeM1viafq1rUbfNRHyd5eM8KmHmahn7TMY9bwI2vXQ/640?wx_fmt=png', 'https://mp.weixin.qq.com/s/hrqa88leq6qXBfgM3WAmOg', '<blockquote><p><span style=\"font-size: 12px;color: rgb(2, 30, 170);\">转自：UEDC（ID：uxecho）</span></p><p><span style=\"font-size: 12px;color: rgb(2, 30, 170);\">作者：Echo</span></p></blockquote><p><br></p><p style=\"margin-right: 16px;margin-bottom: 15px;margin-left: 16px;max-width: 100%;min-height: 1em;font-size: 16px;white-space: normal;color: rgba(0, 0, 0, 0.8);line-height: 1.75em;text-align: justify;box-sizing: border-box !important;word-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><span style=\"max-width: 100%;font-size: 14px;color: rgb(119, 119, 119);letter-spacing: 2px;box-sizing: border-box !important;word-wrap: break-word !important;\">设计规范中最重要的部分就是组件规范了，制定组件的规范有哪些好处呢？</span></p><p style=\"margin-right: 16px;margin-bottom: 15px;margin-left: 16px;max-width: 100%;min-height: 1em;font-size: 16px;white-space: normal;color: rgba(0, 0, 0, 0.8);line-height: 1.75em;text-align: justify;box-sizing: border-box !important;word-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><span style=\"max-width: 100%;font-size: 14px;color: rgb(119, 119, 119);letter-spacing: 2px;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-weight: bolder;box-sizing: border-box !important;word-wrap: break-word !important;\">1.高效简单：</span>熟悉了解组件的用法之后，在做界面设计时，只需要合理运用组件就可以快速搭建web端界面，高效无差错。由于有成套的组件规范，所以在交互设计和视觉设计过程中无需每次都重复劳动。</span></p><p style=\"margin-right: 16px;margin-bottom: 15px;margin-left: 16px;max-width: 100%;min-height: 1em;font-size: 16px;white-space: normal;color: rgba(0, 0, 0, 0.8);line-height: 1.75em;text-align: justify;box-sizing: border-box !important;word-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><span style=\"max-width: 100%;font-size: 14px;color: rgb(119, 119, 119);letter-spacing: 2px;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-weight: bolder;box-sizing: border-box !important;word-wrap: break-word !important;\">2.统一用户体验：</span>由于使用了统一的组件规范，所以保证了的视觉和交互设计统一性，保证整体的用户体验性。</span></p><p style=\"margin-right: 16px;margin-bottom: 15px;margin-left: 16px;max-width: 100%;min-height: 1em;font-size: 16px;white-space: normal;color: rgba(0, 0, 0, 0.8);line-height: 1.75em;text-align: justify;box-sizing: border-box !important;word-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><span style=\"max-width: 100%;font-size: 14px;color: rgb(119, 119, 119);letter-spacing: 2px;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-weight: bolder;box-sizing: border-box !important;word-wrap: break-word !important;\">3.提升设计综合能力：</span>由于减少了做组件重复性劳动，交互设计师/PM 可以将更多时间和精力放在讨论业务、设计方法、设计思维、定义产品等综合能力方面。从而驱动业务创新。</span></p><p style=\"margin-right: 16px;margin-bottom: 15px;margin-left: 16px;max-width: 100%;min-height: 1em;font-size: 16px;white-space: normal;color: rgba(0, 0, 0, 0.8);line-height: 1.75em;text-align: justify;box-sizing: border-box !important;word-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><span style=\"max-width: 100%;font-size: 14px;color: rgb(119, 119, 119);letter-spacing: 2px;box-sizing: border-box !important;word-wrap: break-word !important;\">根据组件的用途，可以分为六大类：Feedback 反馈、from 表单、basic 基础、data 数据 、navigation 导航、other 其他。</span></p><p style=\"margin-right: 16px;margin-left: 16px;max-width: 100%;min-height: 1em;color: rgb(62, 62, 62);font-size: 16px;white-space: normal;line-height: 1.75em;text-align: justify;box-sizing: border-box !important;word-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><img class=\"\" data-copyright=\"0\" data-ratio=\"0.6427976686094921\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/IBNv5M0t2ZhfvIqUvekl63syQTdlDHibZ6rfxI5umDliaARAeM1viafq1rUbfNRHyd5eM8KmHmahn7TMY9bwI2vXQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"1201\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;width: auto !important;visibility: visible !important;\"></p><p style=\"margin-right: 16px;margin-bottom: 15px;margin-left: 16px;max-width: 100%;min-height: 1em;font-size: 16px;white-space: normal;color: rgba(0, 0, 0, 0.8);line-height: 1.75em;text-align: justify;box-sizing: border-box !important;word-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><span style=\"max-width: 100%;font-size: 14px;letter-spacing: 2px;color: rgb(119, 119, 119);box-sizing: border-box !important;word-wrap: break-word !important;\">本篇讲述的是feedback反馈类；反馈就是用户做了某项操作之后，系统给用户的一个响应。这个响应根据场景的不同会有不同的响应形式和不同作用。</span></p><h3 style=\"margin: 30px 16px 10px;padding-bottom: 5px;font-weight: 600;font-size: 18px;max-width: 100%;white-space: normal;border-bottom-width: 1px;border-bottom-style: solid;border-bottom-color: rgb(233, 233, 233);color: rgba(0, 0, 0, 0.8);box-sizing: border-box !important;word-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><span style=\"max-width: 100%;letter-spacing: 2px;color: rgb(255, 76, 0);font-size: 16px;box-sizing: border-box !important;word-wrap: break-word !important;\">toast</span></h3><p style=\"margin-right: 16px;margin-bottom: 15px;margin-left: 16px;max-width: 100%;min-height: 1em;font-size: 16px;white-space: normal;color: rgba(0, 0, 0, 0.8);line-height: 1.75em;text-align: justify;box-sizing: border-box !important;word-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><span style=\"max-width: 100%;font-size: 14px;letter-spacing: 2px;color: rgb(119, 119, 119);box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-weight: bolder;box-sizing: border-box !important;word-wrap: break-word !important;\">定义：</span>用户产生操作，出现toast提示，一般2-3s消失；通过toast中的提示语告知用户需要了解的信息。让用户的行为在使用过程中得到反馈和帮助。</span></p><p style=\"margin-right: 16px;margin-bottom: 15px;margin-left: 16px;max-width: 100%;min-height: 1em;font-size: 16px;white-space: normal;color: rgba(0, 0, 0, 0.8);line-height: 1.75em;text-align: justify;box-sizing: border-box !important;word-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><span style=\"max-width: 100%;font-weight: bolder;font-size: 14px;letter-spacing: 2px;color: rgb(119, 119, 119);box-sizing: border-box !important;word-wrap: break-word !important;\">使用场景：</span></p><p style=\"margin-right: 16px;margin-bottom: 15px;margin-left: 16px;max-width: 100%;min-height: 1em;font-size: 16px;white-space: normal;color: rgba(0, 0, 0, 0.8);line-height: 1.75em;text-align: justify;box-sizing: border-box !important;word-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><span style=\"max-width: 100%;font-size: 14px;letter-spacing: 2px;color: rgb(119, 119, 119);box-sizing: border-box !important;word-wrap: break-word !important;\">1.可提供成功、警告或错误等反馈信息。</span></p><p style=\"margin-right: 16px;margin-bottom: 15px;margin-left: 16px;max-width: 100%;min-height: 1em;font-size: 16px;white-space: normal;color: rgba(0, 0, 0, 0.8);line-height: 1.75em;text-align: justify;box-sizing: border-box !important;word-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><span style=\"max-width: 100%;font-size: 14px;letter-spacing: 2px;color: rgb(119, 119, 119);box-sizing: border-box !important;word-wrap: break-word !important;\">2.顶部居中显示并自动消失，是一种不打断用户操作的轻量级提示方式。</span></p><p style=\"margin-right: 16px;margin-bottom: 15px;margin-left: 16px;max-width: 100%;min-height: 1em;font-size: 16px;white-space: normal;color: rgba(0, 0, 0, 0.8);line-height: 1.75em;text-align: justify;box-sizing: border-box !important;word-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><span style=\"max-width: 100%;font-size: 14px;letter-spacing: 2px;color: rgb(119, 119, 119);box-sizing: border-box !important;word-wrap: break-word !important;\">例如简书在没有上传专题封面时就点击创建专题按钮，出现toast提示，提示用户要先上传专题封面才能创建专题。</span></p><p style=\"max-width: 100%;min-height: 1em;color: rgb(62, 62, 62);font-size: 16px;white-space: normal;line-height: 1.75em;text-align: justify;box-sizing: border-box !important;word-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><img class=\"\" data-copyright=\"0\" data-ratio=\"0.6508183943881528\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/IBNv5M0t2ZhfvIqUvekl63syQTdlDHibZoG2zApn8s4JDxJdWQvehR7nGra7ZAjwkOAdSb17yQ9BZtEMuH1HGQQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"1283\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;width: auto !important;visibility: visible !important;\"></p><p style=\"margin-right: 16px;margin-bottom: 15px;margin-left: 16px;max-width: 100%;min-height: 1em;font-size: 16px;white-space: normal;color: rgba(0, 0, 0, 0.8);text-align: justify;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><span style=\"max-width: 100%;font-size: 14px;letter-spacing: 2px;color: rgb(119, 119, 119);box-sizing: border-box !important;word-wrap: break-word !important;\">toast的消息提示分类一共有三种类型：成功类、失败类、常规类。</span></p><p style=\"margin-right: 16px;margin-bottom: 15px;margin-left: 16px;max-width: 100%;min-height: 1em;font-size: 16px;white-space: normal;color: rgba(0, 0, 0, 0.8);text-align: justify;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><span style=\"max-width: 100%;font-size: 14px;letter-spacing: 2px;color: rgb(119, 119, 119);box-sizing: border-box !important;word-wrap: break-word !important;\">组件样式有两种：可以点击操作使其消失、不可点击操作使其消失。</span></p><p style=\"max-width: 100%;min-height: 1em;color: rgb(62, 62, 62);font-size: 16px;white-space: normal;line-height: 1.75em;text-align: justify;box-sizing: border-box !important;word-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><img class=\"\" data-copyright=\"0\" data-ratio=\"0.5164556962025316\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/IBNv5M0t2ZhfvIqUvekl63syQTdlDHibZIua3glt1IpfIHPiaRxs2dDY4lqzw7U2HIOoBxez5vbQ71ec1AmLhLpg/640?wx_fmt=png\" data-type=\"png\" data-w=\"790\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;width: auto !important;visibility: visible !important;\"></p><h3 style=\"margin: 30px 16px 10px;padding-bottom: 5px;font-weight: 600;font-size: 18px;max-width: 100%;white-space: normal;border-bottom-width: 1px;border-bottom-style: solid;border-bottom-color: rgb(233, 233, 233);color: rgba(0, 0, 0, 0.8);box-sizing: border-box !important;word-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><span style=\"max-width: 100%;letter-spacing: 2px;color: rgb(255, 76, 0);font-size: 16px;box-sizing: border-box !important;word-wrap: break-word !important;\">alert警示提示</span></h3><p style=\"margin-right: 16px;margin-bottom: 15px;margin-left: 16px;max-width: 100%;min-height: 1em;font-size: 16px;white-space: normal;color: rgba(0, 0, 0, 0.8);line-height: 1.75em;text-align: justify;box-sizing: border-box !important;word-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><span style=\"max-width: 100%;font-size: 14px;color: rgb(119, 119, 119);letter-spacing: 2px;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-weight: bolder;box-sizing: border-box !important;word-wrap: break-word !important;\">定义：</span>当用户进行某种操作时，网站会出现对应的警告信息提示用户，该提示信息的状态不会主动消失。</span></p><p style=\"margin-right: 16px;margin-bottom: 15px;margin-left: 16px;max-width: 100%;min-height: 1em;font-size: 16px;white-space: normal;color: rgba(0, 0, 0, 0.8);line-height: 1.75em;text-align: justify;box-sizing: border-box !important;word-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><span style=\"max-width: 100%;font-weight: bolder;font-size: 14px;color: rgb(119, 119, 119);letter-spacing: 2px;box-sizing: border-box !important;word-wrap: break-word !important;\">使用场景：</span></p><p style=\"margin-right: 16px;margin-bottom: 15px;margin-left: 16px;max-width: 100%;min-height: 1em;font-size: 16px;white-space: normal;color: rgba(0, 0, 0, 0.8);line-height: 1.75em;text-align: justify;box-sizing: border-box !important;word-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><span style=\"max-width: 100%;font-size: 14px;color: rgb(119, 119, 119);letter-spacing: 2px;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-weight: bolder;box-sizing: border-box !important;word-wrap: break-word !important;\">1.</span>当某个页面需要向用户显示警告的信息时。</span></p><p style=\"margin-right: 16px;margin-bottom: 15px;margin-left: 16px;max-width: 100%;min-height: 1em;font-size: 16px;white-space: normal;color: rgba(0, 0, 0, 0.8);line-height: 1.75em;text-align: justify;box-sizing: border-box !important;word-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><span style=\"max-width: 100%;font-size: 14px;color: rgb(119, 119, 119);letter-spacing: 2px;box-sizing: border-box !important;word-wrap: break-word !important;\">2.非浮层的静态展现形式，始终展现，不会自动消失，有的组件用户可以点击关闭。</span></p><p style=\"margin-right: 16px;margin-bottom: 15px;margin-left: 16px;max-width: 100%;min-height: 1em;font-size: 16px;white-space: normal;color: rgba(0, 0, 0, 0.8);line-height: 1.75em;text-align: justify;box-sizing: border-box !important;word-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><span style=\"max-width: 100%;font-size: 14px;color: rgb(119, 119, 119);letter-spacing: 2px;box-sizing: border-box !important;word-wrap: break-word !important;\">例如淘宝购物车，删除之后，会出现alert警示提示，淘宝的例子属于alert的变种，用户可以点击“撤销本次删除 ”进行还原之前的毁灭性操作。</span></p><p style=\"max-width: 100%;min-height: 1em;color: rgb(62, 62, 62);font-size: 16px;white-space: normal;line-height: 1.75em;text-align: justify;box-sizing: border-box !important;word-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><img class=\"\" data-copyright=\"0\" data-ratio=\"0.42267267267267267\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/IBNv5M0t2ZhfvIqUvekl63syQTdlDHibZ6csUiahibQnllsIpu7ibHicrWu2OAjsicVkCvrFQicM7YJcFMfgorxqapyUg/640?wx_fmt=png\" data-type=\"png\" data-w=\"1332\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;width: auto !important;visibility: visible !important;\"></p><p style=\"margin-right: 16px;margin-bottom: 15px;margin-left: 16px;max-width: 100%;min-height: 1em;font-size: 16px;white-space: normal;color: rgba(0, 0, 0, 0.8);line-height: 1.75em;text-align: justify;box-sizing: border-box !important;word-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><span style=\"max-width: 100%;font-size: 14px;letter-spacing: 2px;color: rgb(119, 119, 119);box-sizing: border-box !important;word-wrap: break-word !important;\">alert警示提示的消息分类一共有三种类型：成功类、失败类、常规类。当然也可以不含有icon操作，含有icon操作的话警示性会更强。</span></p><p style=\"margin-right: 16px;margin-bottom: 15px;margin-left: 16px;max-width: 100%;min-height: 1em;font-size: 16px;white-space: normal;color: rgba(0, 0, 0, 0.8);line-height: 1.75em;text-align: justify;box-sizing: border-box !important;word-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><span style=\"max-width: 100%;font-size: 14px;letter-spacing: 2px;color: rgb(119, 119, 119);box-sizing: border-box !important;word-wrap: break-word !important;\">alert警示组件样式有两种：带有删除操作，不带有删除操作。</span></p><p style=\"max-width: 100%;min-height: 1em;color: rgb(62, 62, 62);font-size: 16px;white-space: normal;line-height: 1.75em;text-align: justify;box-sizing: border-box !important;word-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><img class=\"\" data-copyright=\"0\" data-ratio=\"0.5328407224958949\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/IBNv5M0t2ZhfvIqUvekl63syQTdlDHibZ4NdrZ1JWWnFOicf6sNaTPy6GgUiaC9lnzd9z6uSEU7KPrVYv9abkibyOg/640?wx_fmt=png\" data-type=\"png\" data-w=\"1218\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;width: auto !important;visibility: visible !important;\"></p><h3 style=\"margin: 30px 16px 10px;padding-bottom: 5px;font-weight: 600;font-size: 18px;max-width: 100%;white-space: normal;border-bottom-width: 1px;border-bottom-style: solid;border-bottom-color: rgb(233, 233, 233);color: rgba(0, 0, 0, 0.8);box-sizing: border-box !important;word-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><span style=\"max-width: 100%;letter-spacing: 2px;color: rgb(255, 76, 0);font-size: 16px;box-sizing: border-box !important;word-wrap: break-word !important;\">dialog对话框</span></h3><p style=\"margin-right: 16px;margin-bottom: 15px;margin-left: 16px;max-width: 100%;min-height: 1em;font-size: 16px;white-space: normal;color: rgba(0, 0, 0, 0.8);text-align: justify;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><span style=\"max-width: 100%;font-size: 14px;color: rgb(119, 119, 119);letter-spacing: 2px;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-weight: bolder;box-sizing: border-box !important;word-wrap: break-word !important;\">定义：</span>用于提示用户当前操作，或是完成某个任务时需要的一些其他额外的信息。对话框可以用确定/取消的简单的应答模式，也可以是自定义复杂的模式，例如表单的填写。</span></p><p style=\"margin-right: 16px;margin-bottom: 15px;margin-left: 16px;max-width: 100%;min-height: 1em;font-size: 16px;white-space: normal;color: rgba(0, 0, 0, 0.8);text-align: justify;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><span style=\"max-width: 100%;font-weight: bolder;font-size: 14px;color: rgb(119, 119, 119);letter-spacing: 2px;box-sizing: border-box !important;word-wrap: break-word !important;\">使用场景：</span></p><p style=\"margin-right: 16px;margin-bottom: 15px;margin-left: 16px;max-width: 100%;min-height: 1em;font-size: 16px;white-space: normal;color: rgba(0, 0, 0, 0.8);text-align: justify;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><span style=\"max-width: 100%;font-size: 14px;color: rgb(119, 119, 119);letter-spacing: 2px;box-sizing: border-box !important;word-wrap: break-word !important;\">1.用户在进行重要操作的时，需要进行二次确认。</span></p><p style=\"margin-right: 16px;margin-bottom: 15px;margin-left: 16px;max-width: 100%;min-height: 1em;font-size: 16px;white-space: normal;color: rgba(0, 0, 0, 0.8);text-align: justify;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><span style=\"max-width: 100%;font-size: 14px;color: rgb(119, 119, 119);letter-spacing: 2px;box-sizing: border-box !important;word-wrap: break-word !important;\">2.用于重要的反馈提示，让用户知道信息提示。</span></p><p style=\"margin-right: 16px;margin-bottom: 15px;margin-left: 16px;max-width: 100%;min-height: 1em;font-size: 16px;white-space: normal;color: rgba(0, 0, 0, 0.8);text-align: justify;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><span style=\"max-width: 100%;font-size: 14px;color: rgb(119, 119, 119);letter-spacing: 2px;box-sizing: border-box !important;word-wrap: break-word !important;\">3.承载少量的表单填写类，减少页面的跳转。</span></p><p style=\"margin-right: 16px;margin-bottom: 15px;margin-left: 16px;max-width: 100%;min-height: 1em;font-size: 16px;white-space: normal;color: rgba(0, 0, 0, 0.8);text-align: justify;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><span style=\"max-width: 100%;font-size: 14px;color: rgb(119, 119, 119);letter-spacing: 2px;box-sizing: border-box !important;word-wrap: break-word !important;\">windows系统的确定按钮一般在左边，而Mac OS的确定一般在右边。因为这个原因，导致我们平时看到的确定有时候在左边，有时候在右边。</span></p><p style=\"margin-right: 16px;margin-bottom: 15px;margin-left: 16px;max-width: 100%;min-height: 1em;font-size: 16px;white-space: normal;color: rgba(0, 0, 0, 0.8);text-align: justify;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><span style=\"max-width: 100%;font-size: 14px;color: rgb(119, 119, 119);letter-spacing: 2px;box-sizing: border-box !important;word-wrap: break-word !important;\">微博和微信公众号后台的的对话框，确定在左边，而淘宝的对话框在右边。微信公众号的对话框是小浮层弹窗，避免了遮罩出现，同时对话框也出现在操作按钮的附近，对用户的干扰性也是最弱的。</span></p><p style=\"max-width: 100%;min-height: 1em;color: rgb(62, 62, 62);font-size: 16px;white-space: normal;line-height: 1.75em;text-align: justify;box-sizing: border-box !important;word-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><img class=\"\" data-copyright=\"0\" data-ratio=\"0.7542908762420958\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/IBNv5M0t2ZhfvIqUvekl63syQTdlDHibZ8UdVL6yiaO7qAgAiayFtyCsWynE3ovXDP6I0WZpKtgIW8XuHpNOicbRPg/640?wx_fmt=png\" data-type=\"png\" data-w=\"1107\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;width: auto !important;visibility: visible !important;\"></p><p style=\"margin-right: 16px;margin-left: 16px;max-width: 100%;min-height: 1em;color: rgb(62, 62, 62);font-size: 16px;white-space: normal;text-align: justify;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><span style=\"max-width: 100%;font-size: 14px;letter-spacing: 2px;color: rgb(119, 119, 119);box-sizing: border-box !important;word-wrap: break-word !important;\">dialog对话框，有三种常见的使用场景。其中表单对话框、提示类、轻量级提示类、表单类样式都是基于二次确认类对话框样式的改变而得到不同的样式。</span></p><p style=\"margin-right: 16px;margin-left: 16px;max-width: 100%;min-height: 1em;color: rgb(62, 62, 62);font-size: 16px;white-space: normal;line-height: 1.75em;text-align: justify;box-sizing: border-box !important;word-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><span style=\"max-width: 100%;color: rgba(0, 0, 0, 0.8);box-sizing: border-box !important;word-wrap: break-word !important;\"></span></p><p style=\"max-width: 100%;min-height: 1em;color: rgb(62, 62, 62);font-size: 16px;white-space: normal;line-height: 1.75em;text-align: justify;box-sizing: border-box !important;word-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><img class=\"\" data-copyright=\"0\" data-ratio=\"0.6931711880261927\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/IBNv5M0t2ZhfvIqUvekl63syQTdlDHibZ5d0tTYVg51eNWziboZWicibmfqPP6JiaYREokVn6fEO9bAXxKjvM5FBmKw/640?wx_fmt=png\" data-type=\"png\" data-w=\"1069\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;width: auto !important;visibility: visible !important;\"></p><h3 style=\"margin: 30px 16px 10px;padding-bottom: 5px;font-weight: 600;font-size: 18px;max-width: 100%;white-space: normal;border-bottom-width: 1px;border-bottom-style: solid;border-bottom-color: rgb(233, 233, 233);color: rgba(0, 0, 0, 0.8);box-sizing: border-box !important;word-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><span style=\"max-width: 100%;letter-spacing: 2px;font-size: 16px;color: rgb(255, 76, 0);box-sizing: border-box !important;word-wrap: break-word !important;\">Notification通知提醒框</span></h3><p style=\"margin-right: 16px;margin-bottom: 15px;margin-left: 16px;max-width: 100%;min-height: 1em;font-size: 16px;white-space: normal;color: rgba(0, 0, 0, 0.8);line-height: 1.75em;text-align: justify;box-sizing: border-box !important;word-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><span style=\"max-width: 100%;font-size: 14px;letter-spacing: 2px;color: rgb(119, 119, 119);box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-weight: bolder;box-sizing: border-box !important;word-wrap: break-word !important;\">定义：</span>悬浮出现在网页右上角，用于全局的提醒式通知。常见于服务器异常、操作失败等</span></p><p style=\"margin-right: 16px;margin-bottom: 15px;margin-left: 16px;max-width: 100%;min-height: 1em;font-size: 16px;white-space: normal;color: rgba(0, 0, 0, 0.8);line-height: 1.75em;text-align: justify;box-sizing: border-box !important;word-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><span style=\"max-width: 100%;font-weight: bolder;font-size: 14px;letter-spacing: 2px;color: rgb(119, 119, 119);box-sizing: border-box !important;word-wrap: break-word !important;\">使用场景：</span></p><p style=\"margin-right: 16px;margin-bottom: 15px;margin-left: 16px;max-width: 100%;min-height: 1em;font-size: 16px;white-space: normal;color: rgba(0, 0, 0, 0.8);line-height: 1.75em;text-align: justify;box-sizing: border-box !important;word-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><span style=\"max-width: 100%;font-size: 14px;letter-spacing: 2px;color: rgb(119, 119, 119);box-sizing: border-box !important;word-wrap: break-word !important;\">1.较为复杂的通知内容。</span></p><p style=\"margin-right: 16px;margin-bottom: 15px;margin-left: 16px;max-width: 100%;min-height: 1em;font-size: 16px;white-space: normal;color: rgba(0, 0, 0, 0.8);line-height: 1.75em;text-align: justify;box-sizing: border-box !important;word-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><span style=\"max-width: 100%;font-size: 14px;letter-spacing: 2px;color: rgb(119, 119, 119);box-sizing: border-box !important;word-wrap: break-word !important;\">2.带有交互的通知，给出用户下一步的行动点。</span></p><p style=\"margin-right: 16px;margin-bottom: 15px;margin-left: 16px;max-width: 100%;min-height: 1em;font-size: 16px;white-space: normal;color: rgba(0, 0, 0, 0.8);line-height: 1.75em;text-align: justify;box-sizing: border-box !important;word-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><span style=\"max-width: 100%;font-size: 14px;letter-spacing: 2px;color: rgb(119, 119, 119);box-sizing: border-box !important;word-wrap: break-word !important;\">3.系统主动推送。</span></p><p style=\"margin-right: 16px;margin-bottom: 15px;margin-left: 16px;max-width: 100%;min-height: 1em;font-size: 16px;white-space: normal;color: rgba(0, 0, 0, 0.8);line-height: 1.75em;text-align: justify;box-sizing: border-box !important;word-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><span style=\"max-width: 100%;font-size: 14px;letter-spacing: 2px;color: rgb(119, 119, 119);box-sizing: border-box !important;word-wrap: break-word !important;\">Notification通知提醒框出现在网页右上角，一般4-5s消失，也可以点击叉号进行关闭。</span></p><p style=\"margin-right: 16px;margin-left: 16px;max-width: 100%;min-height: 1em;color: rgb(62, 62, 62);font-size: 16px;white-space: normal;line-height: 1.75em;text-align: justify;box-sizing: border-box !important;word-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><span style=\"max-width: 100%;color: rgba(0, 0, 0, 0.8);box-sizing: border-box !important;word-wrap: break-word !important;\"></span></p><p style=\"max-width: 100%;min-height: 1em;color: rgb(62, 62, 62);font-size: 16px;white-space: normal;line-height: 1.75em;text-align: justify;box-sizing: border-box !important;word-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><img class=\"\" data-copyright=\"0\" data-ratio=\"0.935064935064935\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/IBNv5M0t2ZhfvIqUvekl63syQTdlDHibZhmp4icINnJMJGXKzHkGCvkAagMHHDS4mVpeDaFx8ibxRdg4Bb1iaDUanA/640?wx_fmt=png\" data-type=\"png\" data-w=\"770\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;width: auto !important;visibility: visible !important;\"></p><h3 style=\"margin: 30px 16px 10px;padding-bottom: 5px;font-weight: 600;font-size: 18px;max-width: 100%;white-space: normal;border-bottom-width: 1px;border-bottom-style: solid;border-bottom-color: rgb(233, 233, 233);color: rgba(0, 0, 0, 0.8);box-sizing: border-box !important;word-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><span style=\"max-width: 100%;letter-spacing: 2px;color: rgb(255, 76, 0);font-size: 16px;box-sizing: border-box !important;word-wrap: break-word !important;\">tooltip文字提示</span></h3><p style=\"margin-right: 16px;margin-bottom: 15px;margin-left: 16px;max-width: 100%;min-height: 1em;font-size: 16px;white-space: normal;color: rgba(0, 0, 0, 0.8);text-align: justify;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><span style=\"max-width: 100%;font-size: 14px;color: rgb(119, 119, 119);letter-spacing: 2px;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"max-width: 100%;font-weight: bolder;box-sizing: border-box !important;word-wrap: break-word !important;\">定义：</span>简单轻量的的文字提示。</span></p><p style=\"margin-right: 16px;margin-bottom: 15px;margin-left: 16px;max-width: 100%;min-height: 1em;font-size: 16px;white-space: normal;color: rgba(0, 0, 0, 0.8);text-align: justify;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><span style=\"max-width: 100%;font-weight: bolder;font-size: 14px;color: rgb(119, 119, 119);letter-spacing: 2px;box-sizing: border-box !important;word-wrap: break-word !important;\">使用场景：</span></p><p style=\"margin-right: 16px;margin-bottom: 15px;margin-left: 16px;max-width: 100%;min-height: 1em;font-size: 16px;white-space: normal;color: rgba(0, 0, 0, 0.8);text-align: justify;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><span style=\"max-width: 100%;font-size: 14px;color: rgb(119, 119, 119);letter-spacing: 2px;box-sizing: border-box !important;word-wrap: break-word !important;\">1.鼠标移入则立即显示提示，移出则立即消失，不承载复杂文本和操作。</span></p><p style=\"margin-right: 16px;margin-bottom: 15px;margin-left: 16px;max-width: 100%;min-height: 1em;font-size: 16px;white-space: normal;color: rgba(0, 0, 0, 0.8);text-align: justify;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><span style=\"max-width: 100%;font-size: 14px;color: rgb(119, 119, 119);letter-spacing: 2px;box-sizing: border-box !important;word-wrap: break-word !important;\">2.常用于解释操作按钮的文字说明。</span></p><p style=\"margin-right: 16px;margin-bottom: 15px;margin-left: 16px;max-width: 100%;min-height: 1em;font-size: 16px;white-space: normal;color: rgba(0, 0, 0, 0.8);text-align: justify;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><span style=\"max-width: 100%;font-size: 14px;color: rgb(119, 119, 119);letter-spacing: 2px;box-sizing: border-box !important;word-wrap: break-word !important;\">还有一种tooltip是浏览器自带的，浏览器自带的和本篇的tooltip的区别是：浏览器自带的鼠标移入一般2s才显示，多用于折行打点的文字提示。例如简书，</span><span style=\"max-width: 100%;font-size: 14px;color: rgb(119, 119, 119);letter-spacing: 2px;box-sizing: border-box !important;word-wrap: break-word !important;\">而本篇的tooltip鼠标移入就出现，切组件风格和浏览器自带完全不一样。</span></p><p style=\"margin-right: 16px;margin-left: 16px;max-width: 100%;min-height: 1em;color: rgb(62, 62, 62);font-size: 16px;white-space: normal;line-height: 1.75em;text-align: justify;box-sizing: border-box !important;word-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><span style=\"max-width: 100%;color: rgb(136, 136, 136);box-sizing: border-box !important;word-wrap: break-word !important;\"></span></p><p style=\"max-width: 100%;min-height: 1em;color: rgb(62, 62, 62);font-size: 16px;white-space: normal;line-height: 1.75em;text-align: justify;box-sizing: border-box !important;word-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><img class=\"\" data-copyright=\"0\" data-ratio=\"0.46657754010695185\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/IBNv5M0t2ZhfvIqUvekl63syQTdlDHibZ9f7P4Tgh3e88M4hxQ4wLaIerGKUA0bMM6ACibp07YjMqkoWuOsiaQoNw/640?wx_fmt=png\" data-type=\"png\" data-w=\"748\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;width: auto !important;visibility: visible !important;\"></p><p style=\"margin-right: 16px;margin-left: 16px;max-width: 100%;min-height: 1em;color: rgb(62, 62, 62);font-size: 16px;white-space: normal;line-height: 1.75em;text-align: justify;box-sizing: border-box !important;word-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><span style=\"max-width: 100%;font-size: 14px;letter-spacing: 2px;color: rgb(119, 119, 119);box-sizing: border-box !important;word-wrap: break-word !important;\">tooltip组件按照需要解释说明的对象位置不同，可以有以下不同的样式。</span><span style=\"max-width: 100%;font-size: 14px;color: rgba(0, 0, 0, 0.8);box-sizing: border-box !important;word-wrap: break-word !important;\"><br style=\"max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;\"></span></p><p style=\"margin-right: 16px;margin-left: 16px;max-width: 100%;min-height: 1em;color: rgb(62, 62, 62);font-size: 16px;white-space: normal;line-height: 1.75em;text-align: justify;box-sizing: border-box !important;word-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><span style=\"max-width: 100%;color: rgba(0, 0, 0, 0.8);box-sizing: border-box !important;word-wrap: break-word !important;\"></span></p><p style=\"max-width: 100%;min-height: 1em;color: rgb(62, 62, 62);font-size: 16px;white-space: normal;line-height: 1.75em;text-align: justify;box-sizing: border-box !important;word-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><img class=\"\" data-copyright=\"0\" data-ratio=\"0.45866666666666667\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/IBNv5M0t2ZhfvIqUvekl63syQTdlDHibZqhic5X9E3LWic0xJXTEuU2gBSVpoiaHKcaEpVQRTXJUf5Y8Ly9iayIAicbA/640?wx_fmt=png\" data-type=\"png\" data-w=\"750\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;width: auto !important;visibility: visible !important;\"></p><p><br></p><p><br></p><p style=\"font-size: 16px;line-height: 25.6px;white-space: normal;max-width: 100%;min-height: 1em;color: rgb(62, 62, 62);text-align: center;box-sizing: border-box !important;overflow-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><span style=\"max-width: 100%;font-size: 18px;color: rgb(255, 169, 0);box-sizing: border-box !important;overflow-wrap: break-word !important;\"><strong style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">关注<strong style=\"max-width: 100%;line-height: 28.8px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">『</strong>网页设计精选』</strong></span></p><p style=\"font-size: 16px;line-height: 25.6px;white-space: normal;max-width: 100%;min-height: 1em;color: rgb(62, 62, 62);text-align: center;box-sizing: border-box !important;overflow-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><span style=\"max-width: 100%;color: rgb(255, 169, 0);box-sizing: border-box !important;overflow-wrap: break-word !important;\">看更多精选网页设计文章</span></p><p style=\"font-size: 16px;line-height: 25.6px;white-space: normal;max-width: 100%;min-height: 1em;color: rgb(62, 62, 62);text-align: center;box-sizing: border-box !important;overflow-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><span style=\"max-width: 100%;color: rgb(255, 169, 0);box-sizing: border-box !important;overflow-wrap: break-word !important;\">↓<span style=\"max-width: 100%;line-height: 25.6px;\">↓↓</span></span></p><p style=\"font-size: 16px;line-height: 25.6px;white-space: normal;max-width: 100%;min-height: 1em;color: rgb(62, 62, 62);text-align: center;box-sizing: border-box !important;overflow-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><span style=\"max-width: 100%;color: rgb(255, 169, 0);line-height: 25.6px;box-sizing: border-box !important;overflow-wrap: break-word !important;\"></span><img class=\"\" data-ratio=\"0.9166666666666666\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz/CiboI7J6KQxAFYXczJcB7bJAlfgofnmgGicJzsuuadDIg4TBO3icOnfhaem2OMW553OEPicH7Nszv9KgJ0ibuRWMghQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"600\" width=\"auto\" style=\"box-sizing: border-box !important;overflow-wrap: break-word !important;visibility: visible !important;width: auto !important;\"></p><p style=\"line-height: 25.6px;white-space: normal;\"><em class=\"rich_media_meta rich_media_meta_text\"></em></p><p style=\"line-height: 25.6px;white-space: normal;\"><img class=\"\" data-copyright=\"0\" data-ratio=\"0.5\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/CiboI7J6KQxA859RKgL1JwprpWPLw3LzHBPsSicU927ticO8qsW9d4vgnaNqv59xnRnL7oTwwiaiaTG9YCibVPLvKdTw/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"800\"></p><p style=\"white-space: normal;max-width: 100%;min-height: 1em;font-size: 14px;box-sizing: border-box !important;overflow-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><span style=\"max-width: 100%;font-size: 16px;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><strong style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;color: rgb(255, 76, 0);box-sizing: border-box !important;overflow-wrap: break-word !important;\"><br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"></span></strong></span></p><p style=\"white-space: normal;max-width: 100%;min-height: 1em;font-size: 14px;box-sizing: border-box !important;overflow-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><span style=\"max-width: 100%;font-size: 16px;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><strong style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;color: rgb(255, 76, 0);box-sizing: border-box !important;overflow-wrap: break-word !important;\">淘口令</span></strong><span style=\"max-width: 100%;\">：</span>复制以下红色内容，再打开手淘即可购买</span></p><section class=\"\" style=\"line-height: 25.6px;white-space: normal;max-width: 100%;font-size: 14px;box-sizing: border-box !important;overflow-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><section class=\"\" style=\"margin-top: 8px;margin-bottom: 8px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><section class=\"\" style=\"padding-right: 10px;padding-left: 10px;max-width: 100%;display: inline-block;border-radius: 5px;line-height: 1.8;color: rgb(255, 255, 255);width: 556px;box-sizing: border-box !important;overflow-wrap: break-word !important;background-color: rgb(239, 79, 79);\"><p style=\"max-width: 100%;min-height: 1em;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 16px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">范品社，使用￥极客T恤￥抢先预览（长按复制整段文案，打开手机淘宝即可进入活动内容）</span></p></section></section></section><p style=\"line-height: 25.6px;white-space: normal;max-width: 100%;min-height: 1em;box-sizing: border-box !important;overflow-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><span style=\"max-width: 100%;font-size: 14px;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><strong style=\"max-width: 100%;color: rgb(255, 76, 0);box-sizing: border-box !important;overflow-wrap: break-word !important;\">微店购买</strong><span style=\"max-width: 100%;font-size: 16px;\">，</span>直接点击 </span><strong style=\"max-width: 100%;color: rgb(255, 76, 0);font-size: 14px;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 16px;color: rgb(0, 0, 0);box-sizing: border-box !important;overflow-wrap: break-word !important;\">阅读原文</span></strong><br style=\"max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"></p><p style=\"white-space: normal;max-width: 100%;min-height: 1em;font-size: 14px;box-sizing: border-box !important;overflow-wrap: break-word !important;background-color: rgb(255, 255, 255);\"><span style=\"max-width: 100%;font-size: 16px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">↓↓↓</span></p>', '> 转自：UEDC（ID：uxecho）\n> \n> 作者：Echo\n\n  \n\n设计规范中最重要的部分就是组件规范了，制定组件的规范有哪些好处呢？\n\n1.高效简单：熟悉了解组件的用法之后，在做界面设计时，只需要合理运用组件就可以快速搭建web端界面，高效无差错。由于有成套的组件规范，所以在交互设计和视觉设计过程中无需每次都重复劳动。\n\n2.统一用户体验：由于使用了统一的组件规范，所以保证了的视觉和交互设计统一性，保证整体的用户体验性。\n\n3.提升设计综合能力：由于减少了做组件重复性劳动，交互设计师/PM 可以将更多时间和精力放在讨论业务、设计方法、设计思维、定义产品等综合能力方面。从而驱动业务创新。\n\n根据组件的用途，可以分为六大类：Feedback 反馈、from 表单、basic 基础、data 数据 、navigation 导航、other 其他。\n\n本篇讲述的是feedback反馈类；反馈就是用户做了某项操作之后，系统给用户的一个响应。这个响应根据场景的不同会有不同的响应形式和不同作用。\n\n### toast\n\n定义：用户产生操作，出现toast提示，一般2-3s消失；通过toast中的提示语告知用户需要了解的信息。让用户的行为在使用过程中得到反馈和帮助。\n\n使用场景：\n\n1.可提供成功、警告或错误等反馈信息。\n\n2.顶部居中显示并自动消失，是一种不打断用户操作的轻量级提示方式。\n\n例如简书在没有上传专题封面时就点击创建专题按钮，出现toast提示，提示用户要先上传专题封面才能创建专题。\n\ntoast的消息提示分类一共有三种类型：成功类、失败类、常规类。\n\n组件样式有两种：可以点击操作使其消失、不可点击操作使其消失。\n\n### alert警示提示\n\n定义：当用户进行某种操作时，网站会出现对应的警告信息提示用户，该提示信息的状态不会主动消失。\n\n使用场景：\n\n1.当某个页面需要向用户显示警告的信息时。\n\n2.非浮层的静态展现形式，始终展现，不会自动消失，有的组件用户可以点击关闭。\n\n例如淘宝购物车，删除之后，会出现alert警示提示，淘宝的例子属于alert的变种，用户可以点击“撤销本次删除 ”进行还原之前的毁灭性操作。\n\nalert警示提示的消息分类一共有三种类型：成功类、失败类、常规类。当然也可以不含有icon操作，含有icon操作的话警示性会更强。\n\nalert警示组件样式有两种：带有删除操作，不带有删除操作。\n\n### dialog对话框\n\n定义：用于提示用户当前操作，或是完成某个任务时需要的一些其他额外的信息。对话框可以用确定/取消的简单的应答模式，也可以是自定义复杂的模式，例如表单的填写。\n\n使用场景：\n\n1.用户在进行重要操作的时，需要进行二次确认。\n\n2.用于重要的反馈提示，让用户知道信息提示。\n\n3.承载少量的表单填写类，减少页面的跳转。\n\nwindows系统的确定按钮一般在左边，而Mac OS的确定一般在右边。因为这个原因，导致我们平时看到的确定有时候在左边，有时候在右边。\n\n微博和微信公众号后台的的对话框，确定在左边，而淘宝的对话框在右边。微信公众号的对话框是小浮层弹窗，避免了遮罩出现，同时对话框也出现在操作按钮的附近，对用户的干扰性也是最弱的。\n\ndialog对话框，有三种常见的使用场景。其中表单对话框、提示类、轻量级提示类、表单类样式都是基于二次确认类对话框样式的改变而得到不同的样式。\n\n### Notification通知提醒框\n\n定义：悬浮出现在网页右上角，用于全局的提醒式通知。常见于服务器异常、操作失败等\n\n使用场景：\n\n1.较为复杂的通知内容。\n\n2.带有交互的通知，给出用户下一步的行动点。\n\n3.系统主动推送。\n\nNotification通知提醒框出现在网页右上角，一般4-5s消失，也可以点击叉号进行关闭。\n\n### tooltip文字提示\n\n定义：简单轻量的的文字提示。\n\n使用场景：\n\n1.鼠标移入则立即显示提示，移出则立即消失，不承载复杂文本和操作。\n\n2.常用于解释操作按钮的文字说明。\n\n还有一种tooltip是浏览器自带的，浏览器自带的和本篇的tooltip的区别是：浏览器自带的鼠标移入一般2s才显示，多用于折行打点的文字提示。例如简书，而本篇的tooltip鼠标移入就出现，切组件风格和浏览器自带完全不一样。\n\ntooltip组件按照需要解释说明的对象位置不同，可以有以下不同的样式。  \n\n  \n\n  \n\n**关注**『**网页设计精选』**\n\n看更多精选网页设计文章\n\n↓↓↓\n\n**淘口令**：复制以下红色内容，再打开手淘即可购买\n\n范品社，使用￥极客T恤￥抢先预览（长按复制整段文案，打开手机淘宝即可进入活动内容）\n\n**微店购买**，直接点击 **阅读原文**  \n\n↓↓↓', 0, 1, 0);
INSERT INTO `post` (`id`, `createAt`, `updateAt`, `title`, `description`, `thumb`, `url`, `html`, `markdown`, `views`, `status`, `push`) VALUES
(40, '2018-04-23 11:01:44.370634', '2018-04-23 11:01:44.370634', '全面解析Vue.nextTick实现原理', '编者按：本文由大豹杂说公众号吕大豹授权奇舞周刊转载。来一起学习吧！vue中有一个较为特殊的API，nextTick。根据官方文档的解释，它可以在DOM更新完毕之后执行一个回调，用法如下：//修改数据vm.msg=\'Hello\'//DOM还没有更新Vue.nextTick(function(){//DOM更新了})尽管MVVM框架并不推荐访问DOM，但有时候确实会有这样的需求，尤其是和第三方插件进行配合的时候，免不了要进行DOM操作。而nextTick就提供了一个桥梁，确保我们操作的是更新后的DOM。本文从', 'https://mmbiz.qpic.cn/mmbiz_png/Ln9Ehepfls2VCgexqyyfibk2lbSVK5bL9SicAz8cGAJ1WsiaNd30pibBRPEoLtCYRk9PbyIlNC0xB348xX4Mu4Cl9g/640?wx_fmt=png', 'https://mp.weixin.qq.com/s/mCcW4OYj3p3471ghMBylBw', '<p class=\"weekly-start-desc\" style=\"margin-bottom: 20px;border-width: 0px 0px 0px 2px;border-top-style: initial;border-right-style: initial;border-bottom-style: initial;border-left-style: solid;border-top-color: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: rgb(221, 221, 221);padding-left: 10px;line-height: 2;font-size: 14px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;color: rgb(153, 153, 153);\">编者按：本文由大豹杂说公众号吕大豹授权奇舞周刊转载。来一起学习吧！</p><p style=\"margin-top: 1.8em;margin-bottom: 1.8em;border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;font-size: 15px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;color: rgb(51, 51, 51);\">vue中有一个较为特殊的API，nextTick。根据官方文档的解释，它可以在DOM更新完毕之后执行一个回调，用法如下：</p><blockquote class=\"code-wrap\" style=\"border-width: 0px;border-style: initial;border-color: initial;padding-left: 0px;color: rgb(51, 51, 51);\"><pre class=\"language-\" style=\"border-width: 0px;border-style: initial;border-color: initial;padding: 1em;overflow: auto;background-color: rgb(45, 45, 45);color: rgb(204, 204, 204);\"><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;white-space: nowrap !important;\"><span class=\"token comment\" spellcheck=\"true\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(153, 153, 153);\">// 修改数据</span></p><p class=\"lbr\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 0;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;height: 6px;white-space: nowrap !important;\"><br style=\"border-width: 0px;border-style: initial;border-color: initial;\"></p><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;white-space: nowrap !important;\">vm<span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">.</span>msg <span class=\"token operator\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(103, 205, 204);\">=</span> <span class=\"token string\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(126, 198, 153);\">\'Hello\'</span></p><p class=\"lbr\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 0;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;height: 6px;white-space: nowrap !important;\"><br style=\"border-width: 0px;border-style: initial;border-color: initial;\"></p><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;white-space: nowrap !important;\"><span class=\"token comment\" spellcheck=\"true\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(153, 153, 153);\">// DOM 还没有更新</span></p><p class=\"lbr\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 0;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;height: 6px;white-space: nowrap !important;\"><br style=\"border-width: 0px;border-style: initial;border-color: initial;\"></p><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;white-space: nowrap !important;\">Vue<span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">.</span><span class=\"token function\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(240, 141, 73);\">nextTick</span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">(</span><span class=\"token keyword\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(204, 153, 205);\">function</span> <span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">()</span> <span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">{</span></p><p class=\"lbr\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 0;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;height: 6px;white-space: nowrap !important;\"><br style=\"border-width: 0px;border-style: initial;border-color: initial;\"></p><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;white-space: nowrap !important;\"><span class=\"token comment\" spellcheck=\"true\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(153, 153, 153);\">// DOM 更新了</span></p><p class=\"lbr\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 0;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;height: 6px;white-space: nowrap !important;\"><br style=\"border-width: 0px;border-style: initial;border-color: initial;\"></p><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;white-space: nowrap !important;\"><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">})</span></p></pre></blockquote><p style=\"margin-top: 1.8em;margin-bottom: 1.8em;border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;font-size: 15px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;color: rgb(51, 51, 51);\">尽管MVVM框架并不推荐访问DOM，但有时候确实会有这样的需求，尤其是和第三方插件进行配合的时候，免不了要进行DOM操作。而nextTick就提供了一个桥梁，确保我们操作的是更新后的DOM。</p><p style=\"margin-top: 1.8em;margin-bottom: 1.8em;border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;font-size: 15px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;color: rgb(51, 51, 51);\">本文从这样一个问题开始探索：vue如何检测到DOM更新完毕呢？</p><p style=\"margin-top: 1.8em;margin-bottom: 1.8em;border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;font-size: 15px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;color: rgb(51, 51, 51);\">检索一下自己的前端知识库，能监听到DOM改动的API好像只有MutationObserver了，后面简称MO.</p><h3 style=\"margin-top: 20px;margin-bottom: 20px;border-width: 0px;border-style: initial;border-color: initial;padding-left: 25px;font-weight: bold;word-break: break-all;word-wrap: break-word;background-image: url(\"https://mmbiz.qpic.cn/mmbiz_png/MpGQUHiaib4ib6j9X9s2kibfaicBLmIm6dUBqor8qjBj66mDs0V98xzicMIaHT0lv8c30WsIR3MNHeCGz091kCp7CqVg/640?wx_fmt=png\");background-position: 0px 8px;background-size: 20px 16px;background-repeat: no-repeat;background-attachment: initial;background-origin: initial;background-clip: initial;color: rgb(100, 159, 12);line-height: 2;\">理解MutationObserver</h3><p style=\"margin-top: 8px;margin-bottom: 1.8em;border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;font-size: 15px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;color: rgb(51, 51, 51);\">MutationObserver是HTML5新增的属性，用于监听DOM修改事件，能够监听到节点的属性、文本内容、子节点等的改动，是一个功能强大的利器，基本用法如下：</p><blockquote class=\"code-wrap\" style=\"border-width: 0px;border-style: initial;border-color: initial;padding-left: 0px;color: rgb(51, 51, 51);\"><pre class=\"language-\" style=\"border-width: 0px;border-style: initial;border-color: initial;padding: 1em;overflow: auto;background-color: rgb(45, 45, 45);color: rgb(204, 204, 204);\"><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;white-space: nowrap !important;\"><span class=\"token comment\" spellcheck=\"true\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(153, 153, 153);\">//MO基本用法</span></p><p class=\"lbr\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 0;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;height: 6px;white-space: nowrap !important;\"><br style=\"border-width: 0px;border-style: initial;border-color: initial;\"></p><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;white-space: nowrap !important;\"><span class=\"token keyword\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(204, 153, 205);\">var</span> observer <span class=\"token operator\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(103, 205, 204);\">=</span> <span class=\"token keyword\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(204, 153, 205);\">new</span> <span class=\"token class-name\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(248, 197, 85);\">MutationObserver</span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">(</span><span class=\"token keyword\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(204, 153, 205);\">function</span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">(){</span></p><p class=\"lbr\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 0;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;height: 6px;white-space: nowrap !important;\"><br style=\"border-width: 0px;border-style: initial;border-color: initial;\"></p><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;white-space: nowrap !important;\">  <span class=\"token comment\" spellcheck=\"true\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(153, 153, 153);\">//这里是回调函数</span></p><p class=\"lbr\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 0;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;height: 6px;white-space: nowrap !important;\"><br style=\"border-width: 0px;border-style: initial;border-color: initial;\"></p><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;white-space: nowrap !important;\">  console<span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">.</span><span class=\"token function\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(240, 141, 73);\">log</span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">(</span><span class=\"token string\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(126, 198, 153);\">\'DOM被修改了！\'</span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">);</span></p><p class=\"lbr\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 0;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;height: 6px;white-space: nowrap !important;\"><br style=\"border-width: 0px;border-style: initial;border-color: initial;\"></p><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;white-space: nowrap !important;\"><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">});</span></p><p class=\"lbr\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 0;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;height: 6px;white-space: nowrap !important;\"><br style=\"border-width: 0px;border-style: initial;border-color: initial;\"></p><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;white-space: nowrap !important;\"><span class=\"token keyword\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(204, 153, 205);\">var</span> article <span class=\"token operator\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(103, 205, 204);\">=</span> document<span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">.</span><span class=\"token function\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(240, 141, 73);\">querySelector</span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">(</span><span class=\"token string\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(126, 198, 153);\">\'article\'</span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">);</span></p><p class=\"lbr\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 0;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;height: 6px;white-space: nowrap !important;\"><br style=\"border-width: 0px;border-style: initial;border-color: initial;\"></p><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;white-space: nowrap !important;\">observer<span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">.</span><span class=\"token function\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(240, 141, 73);\">observer</span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">(</span>article<span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">);</span></p></pre></blockquote><p style=\"margin-top: 1.8em;margin-bottom: 1.8em;border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;font-size: 15px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;color: rgb(51, 51, 51);\">MO的使用不是本篇重点。这里我们要思考的是：vue是不是用MO来监听DOM更新完毕的呢？</p><p style=\"margin-top: 1.8em;margin-bottom: 1.8em;border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;font-size: 15px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;color: rgb(51, 51, 51);\">那就打开vue的源码看看吧，在实现nextTick的地方，确实能看到这样的代码：</p><blockquote class=\"code-wrap\" style=\"border-width: 0px;border-style: initial;border-color: initial;padding-left: 0px;color: rgb(51, 51, 51);\"><pre class=\"language-\" style=\"border-width: 0px;border-style: initial;border-color: initial;padding: 1em;overflow: auto;background-color: rgb(45, 45, 45);color: rgb(204, 204, 204);\"><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;white-space: nowrap !important;\"><span class=\"token comment\" spellcheck=\"true\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(153, 153, 153);\">//vue@2.2.5 /src/core/util/env.js</span></p><p class=\"lbr\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 0;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;height: 6px;white-space: nowrap !important;\"><br style=\"border-width: 0px;border-style: initial;border-color: initial;\"></p><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;white-space: nowrap !important;\"><span class=\"token keyword\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(204, 153, 205);\">if</span> <span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">(</span><span class=\"token keyword\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(204, 153, 205);\">typeof</span> MutationObserver <span class=\"token operator\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(103, 205, 204);\">!==</span> <span class=\"token string\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(126, 198, 153);\">\'undefined\'</span> <span class=\"token operator\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(103, 205, 204);\">&&</span> <span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">(</span><span class=\"token function\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(240, 141, 73);\">isNative</span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">(</span>MutationObserver<span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">)</span> <span class=\"token operator\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(103, 205, 204);\">||</span> MutationObserver<span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">.</span><span class=\"token function\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(240, 141, 73);\">toString</span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">()</span> <span class=\"token operator\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(103, 205, 204);\">===</span> <span class=\"token string\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(126, 198, 153);\">\'[object MutationObserverConstructor]\'</span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">))</span> <span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">{</span></p><p class=\"lbr\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 0;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;height: 6px;white-space: nowrap !important;\"><br style=\"border-width: 0px;border-style: initial;border-color: initial;\"></p><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;white-space: nowrap !important;\">  <span class=\"token keyword\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(204, 153, 205);\">var</span> counter <span class=\"token operator\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(103, 205, 204);\">=</span> <span class=\"token number\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(240, 141, 73);\">1</span></p><p class=\"lbr\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 0;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;height: 6px;white-space: nowrap !important;\"><br style=\"border-width: 0px;border-style: initial;border-color: initial;\"></p><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;white-space: nowrap !important;\">  <span class=\"token keyword\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(204, 153, 205);\">var</span> observer <span class=\"token operator\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(103, 205, 204);\">=</span> <span class=\"token keyword\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(204, 153, 205);\">new</span> <span class=\"token class-name\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(248, 197, 85);\">MutationObserver</span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">(</span>nextTickHandler<span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">)</span></p><p class=\"lbr\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 0;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;height: 6px;white-space: nowrap !important;\"><br style=\"border-width: 0px;border-style: initial;border-color: initial;\"></p><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;white-space: nowrap !important;\">  <span class=\"token keyword\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(204, 153, 205);\">var</span> textNode <span class=\"token operator\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(103, 205, 204);\">=</span> document<span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">.</span><span class=\"token function\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(240, 141, 73);\">createTextNode</span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">(</span><span class=\"token function\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(240, 141, 73);\">String</span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">(</span>counter<span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">))</span></p><p class=\"lbr\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 0;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;height: 6px;white-space: nowrap !important;\"><br style=\"border-width: 0px;border-style: initial;border-color: initial;\"></p><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;white-space: nowrap !important;\">  observer<span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">.</span><span class=\"token function\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(240, 141, 73);\">observe</span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">(</span>textNode<span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">,</span> <span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">{</span></p><p class=\"lbr\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 0;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;height: 6px;white-space: nowrap !important;\"><br style=\"border-width: 0px;border-style: initial;border-color: initial;\"></p><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;white-space: nowrap !important;\">      characterData<span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">:</span> <span class=\"token boolean\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(240, 141, 73);\">true</span></p><p class=\"lbr\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 0;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;height: 6px;white-space: nowrap !important;\"><br style=\"border-width: 0px;border-style: initial;border-color: initial;\"></p><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;white-space: nowrap !important;\">  <span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">})</span></p><p class=\"lbr\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 0;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;height: 6px;white-space: nowrap !important;\"><br style=\"border-width: 0px;border-style: initial;border-color: initial;\"></p><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;white-space: nowrap !important;\">  timerFunc <span class=\"token operator\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(103, 205, 204);\">=</span> <span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">()</span> <span class=\"token operator\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(103, 205, 204);\">=></span> <span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">{</span></p><p class=\"lbr\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 0;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;height: 6px;white-space: nowrap !important;\"><br style=\"border-width: 0px;border-style: initial;border-color: initial;\"></p><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;white-space: nowrap !important;\">    counter <span class=\"token operator\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(103, 205, 204);\">=</span> <span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">(</span>counter <span class=\"token operator\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(103, 205, 204);\">+</span> <span class=\"token number\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(240, 141, 73);\">1</span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">)</span> <span class=\"token operator\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(103, 205, 204);\">%</span> <span class=\"token number\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(240, 141, 73);\">2</span></p><p class=\"lbr\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 0;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;height: 6px;white-space: nowrap !important;\"><br style=\"border-width: 0px;border-style: initial;border-color: initial;\"></p><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;white-space: nowrap !important;\">    textNode<span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">.</span>data <span class=\"token operator\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(103, 205, 204);\">=</span> <span class=\"token function\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(240, 141, 73);\">String</span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">(</span>counter<span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">)</span></p><p class=\"lbr\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 0;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;height: 6px;white-space: nowrap !important;\"><br style=\"border-width: 0px;border-style: initial;border-color: initial;\"></p><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;white-space: nowrap !important;\">  <span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">}</span></p><p class=\"lbr\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 0;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;height: 6px;white-space: nowrap !important;\"><br style=\"border-width: 0px;border-style: initial;border-color: initial;\"></p><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;white-space: nowrap !important;\"><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">}</span></p></pre></blockquote><p style=\"margin-top: 1.8em;margin-bottom: 1.8em;border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;font-size: 15px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;color: rgb(51, 51, 51);\">简单解释一下，如果检测到浏览器支持MO，则创建一个文本节点，监听这个文本节点的改动事件，以此来触发nextTickHandler（也就是DOM更新完毕回调）的执行。后面的代码中，会执行手工修改文本节点属性，这样就能进入到回调函数了。</p><p style=\"margin-top: 1.8em;margin-bottom: 1.8em;border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;font-size: 15px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;color: rgb(51, 51, 51);\">大体扫了一眼，似乎可以得到实锤了：哦！vue是用MutationObserver监听DOM更新完毕的！</p><p style=\"margin-top: 1.8em;margin-bottom: 1.8em;border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;font-size: 15px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;color: rgb(51, 51, 51);\">难道不感觉哪里不对劲吗？让我们细细想一下：</p><ol style=\"\" class=\" list-paddingleft-2\"><li><p style=\"border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;\"><span style=\"text-align: justify;white-space: pre-wrap;\">我们要监听的是模板中的DOM更新完毕，vue为什么自己创建了一个文本节点来监听，这有点说不通啊！</span></p><p style=\"border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;\"><br></p></li><li><p style=\"border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;\"><span style=\"text-align: justify;white-space: pre-wrap;\">难道自己创建的文本节点更新完毕，就能代表其他DOM节点更新完毕吗？这又是什么道理！</span></p></li></ol><p style=\"margin-top: 1.8em;margin-bottom: 1.8em;border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;font-size: 15px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;color: rgb(51, 51, 51);\">看来我们上面得出的结论并不对，这时候就需要讲讲js的事件循环机制了。</p><h3 style=\"margin-top: 20px;margin-bottom: 20px;border-width: 0px;border-style: initial;border-color: initial;padding-left: 25px;font-weight: bold;word-break: break-all;word-wrap: break-word;background-image: url(\"https://mmbiz.qpic.cn/mmbiz_png/MpGQUHiaib4ib6j9X9s2kibfaicBLmIm6dUBqor8qjBj66mDs0V98xzicMIaHT0lv8c30WsIR3MNHeCGz091kCp7CqVg/640?wx_fmt=png\");background-position: 0px 8px;background-size: 20px 16px;background-repeat: no-repeat;background-attachment: initial;background-origin: initial;background-clip: initial;color: rgb(100, 159, 12);line-height: 2;\">事件循环（Event Loop）</h3><p style=\"margin-top: 8px;margin-bottom: 1.8em;border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;font-size: 15px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;color: rgb(51, 51, 51);\">在js的运行环境中，我们这里光说浏览器吧，通常伴随着很多事件的发生，比如用户点击、页面渲染、脚本执行、网络请求，等等。为了协调这些事件的处理，浏览器使用事件循环机制。</p><p style=\"margin-top: 1.8em;margin-bottom: 1.8em;border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;font-size: 15px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;color: rgb(51, 51, 51);\">简要来说，事件循环会维护一个或多个任务队列（task queues），以上提到的事件作为任务源往队列中加入任务。有一个持续执行的线程来处理这些任务，每执行完一个就从队列中移除它，这就是一次事件循环了，如下图所示：</p><p class=\"img-wrap\" style=\"margin: 15px auto;border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;font-size: 15px;text-align: center;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;overflow: hidden;color: rgb(51, 51, 51);\"><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Ln9Ehepfls2VCgexqyyfibk2lbSVK5bL9SicAz8cGAJ1WsiaNd30pibBRPEoLtCYRk9PbyIlNC0xB348xX4Mu4Cl9g/640?wx_fmt=png\" style=\"border-width: 0px;border-style: initial;border-color: initial;vertical-align: middle;\" data-type=\"png\" class=\"\" data-ratio=\"0.75\" data-w=\"1024\"></p><p style=\"margin-top: 1.8em;margin-bottom: 1.8em;border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;font-size: 15px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;color: rgb(51, 51, 51);\">我们平时用setTimeout来执行异步代码，其实就是在任务队列的末尾加入了一个task，待前面的任务都执行完后再执行它。</p><p style=\"margin-top: 1.8em;margin-bottom: 1.8em;border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;font-size: 15px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;color: rgb(51, 51, 51);\">关键的地方来了，每次event loop的最后，会有一个UI render步骤，也就是更新DOM。标准为什么这样设计呢？考虑下面的代码：</p><blockquote class=\"code-wrap\" style=\"border-width: 0px;border-style: initial;border-color: initial;padding-left: 0px;color: rgb(51, 51, 51);\"><pre class=\"language-\" style=\"border-width: 0px;border-style: initial;border-color: initial;padding: 1em;overflow: auto;background-color: rgb(45, 45, 45);color: rgb(204, 204, 204);\"><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;white-space: nowrap !important;\"><span class=\"token keyword\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(204, 153, 205);\">for</span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">(</span><span class=\"token keyword\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(204, 153, 205);\">let</span> i<span class=\"token operator\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(103, 205, 204);\">=</span><span class=\"token number\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(240, 141, 73);\">0</span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">;</span> i<span class=\"token operator\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(103, 205, 204);\"><</span><span class=\"token number\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(240, 141, 73);\">100</span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">;</span> i<span class=\"token operator\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(103, 205, 204);\">++</span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">){</span></p><p class=\"lbr\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 0;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;height: 6px;white-space: nowrap !important;\"><br style=\"border-width: 0px;border-style: initial;border-color: initial;\"></p><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;white-space: nowrap !important;\">    dom<span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">.</span>style<span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">.</span>left <span class=\"token operator\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(103, 205, 204);\">=</span> i <span class=\"token operator\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(103, 205, 204);\">+</span> <span class=\"token string\" style=\"border-width: 0px;border-style: initial;border-color: initial;color: rgb(126, 198, 153);\">\'px\'</span><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">;</span></p><p class=\"lbr\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 0;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;height: 6px;white-space: nowrap !important;\"><br style=\"border-width: 0px;border-style: initial;border-color: initial;\"></p><p class=\"line\" style=\"margin-top: 3px;margin-bottom: 3px;border-width: 0px;border-style: initial;border-color: initial;line-height: 16px;font-size: 12px;text-align: justify;word-break: break-all;word-wrap: break-word;white-space: nowrap !important;\"><span class=\"token punctuation\" style=\"border-width: 0px;border-style: initial;border-color: initial;\">}</span></p></pre></blockquote><p style=\"margin-top: 1.8em;margin-bottom: 1.8em;border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;font-size: 15px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;color: rgb(51, 51, 51);\">浏览器会进行100次DOM更新吗？显然不是的，这样太耗性能了。事实上，这100次for循环同属一个task，浏览器只在该task执行完后进行一次DOM更新。</p><p style=\"margin-top: 1.8em;margin-bottom: 1.8em;border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;font-size: 15px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;color: rgb(51, 51, 51);\">那我们的思路就来了：只要让nextTick里的代码放在UI render步骤后面执行，岂不就能访问到更新后的DOM了？</p><p style=\"margin-top: 1.8em;margin-bottom: 1.8em;border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;font-size: 15px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;color: rgb(51, 51, 51);\">vue就是这样的思路，并不是用MO进行DOM变动监听，而是用队列控制的方式达到目的。那么vue又是如何做到队列控制的呢？我们可以很自然的想到setTimeout，把nextTick要执行的代码当作下一个task放入队列末尾。</p><p style=\"margin-top: 1.8em;margin-bottom: 1.8em;border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;font-size: 15px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;color: rgb(51, 51, 51);\">然而事情却没这么简单，vue的数据响应过程包含：数据更改->通知Watcher->更新DOM。而数据的更改不由我们控制，可能在任何时候发生。如果恰巧发生在repaint之前，就会发生多次渲染。这意味着性能浪费，是vue不愿意看到的。</p><p style=\"margin-top: 1.8em;margin-bottom: 1.8em;border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;font-size: 15px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;color: rgb(51, 51, 51);\">所以，vue的队列控制是经过了深思熟虑的（也经过了多次改动）。在这之前，我们还需了解event loop的另一个重要概念，microtask.</p><h3 style=\"margin-top: 20px;margin-bottom: 20px;border-width: 0px;border-style: initial;border-color: initial;padding-left: 25px;font-weight: bold;word-break: break-all;word-wrap: break-word;background-image: url(\"https://mmbiz.qpic.cn/mmbiz_png/MpGQUHiaib4ib6j9X9s2kibfaicBLmIm6dUBqor8qjBj66mDs0V98xzicMIaHT0lv8c30WsIR3MNHeCGz091kCp7CqVg/640?wx_fmt=png\");background-position: 0px 8px;background-size: 20px 16px;background-repeat: no-repeat;background-attachment: initial;background-origin: initial;background-clip: initial;color: rgb(100, 159, 12);line-height: 2;\">microtask</h3><p style=\"margin-top: 8px;margin-bottom: 1.8em;border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;font-size: 15px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;color: rgb(51, 51, 51);\">从名字看，我们可以把它称为微任务。对应的，task队列中的任务也被叫做macrotask。名字相似，性质可不一样了。</p><p style=\"margin-top: 1.8em;margin-bottom: 1.8em;border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;font-size: 15px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;color: rgb(51, 51, 51);\">每一次事件循环都包含一个microtask队列，在循环结束后会依次执行队列中的microtask并移除，然后再开始下一次事件循环。</p><p style=\"margin-top: 1.8em;margin-bottom: 1.8em;border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;font-size: 15px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;color: rgb(51, 51, 51);\">在执行microtask的过程中后加入microtask队列的微任务，也会在下一次事件循环之前被执行。也就是说，macrotask总要等到microtask都执行完后才能执行，microtask有着更高的优先级。</p><p style=\"margin-top: 1.8em;margin-bottom: 1.8em;border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;font-size: 15px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;color: rgb(51, 51, 51);\">microtask的这一特性，简直是做队列控制的最佳选择啊！vue进行DOM更新内部也是调用nextTick来做异步队列控制。而当我们自己调用nextTick的时候，它就在更新DOM的那个microtask后追加了我们自己的回调函数，从而确保我们的代码在DOM更新后执行，同时也避免了setTimeout可能存在的多次执行问题。</p><p style=\"margin-top: 1.8em;margin-bottom: 1.8em;border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;font-size: 15px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;color: rgb(51, 51, 51);\">常见的microtask有：Promise、MutationObserver、Object.observe(废弃)，以及nodejs中的process.nextTick.</p><p style=\"margin-top: 1.8em;margin-bottom: 1.8em;border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;font-size: 15px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;color: rgb(51, 51, 51);\">咦？好像看到了MutationObserver，难道说vue用MO是想利用它的microtask特性，而不是想做DOM监听？对喽，就是这样的。核心是microtask，用不用MO都行的。事实上，vue在2.5版本中已经删去了MO相关的代码，因为它是HTML5新增的特性，在iOS上尚有bug。</p><p style=\"margin-top: 1.8em;margin-bottom: 1.8em;border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;font-size: 15px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;color: rgb(51, 51, 51);\">那么最优的microtask策略就是Promise了，而令人尴尬的是，Promise是ES6新增的东西，也存在兼容问题呀~ 所以vue就面临一个降级策略。</p><h3 style=\"margin-top: 20px;margin-bottom: 20px;border-width: 0px;border-style: initial;border-color: initial;padding-left: 25px;font-weight: bold;word-break: break-all;word-wrap: break-word;background-image: url(\"https://mmbiz.qpic.cn/mmbiz_png/MpGQUHiaib4ib6j9X9s2kibfaicBLmIm6dUBqor8qjBj66mDs0V98xzicMIaHT0lv8c30WsIR3MNHeCGz091kCp7CqVg/640?wx_fmt=png\");background-position: 0px 8px;background-size: 20px 16px;background-repeat: no-repeat;background-attachment: initial;background-origin: initial;background-clip: initial;color: rgb(100, 159, 12);line-height: 2;\">vue的降级策略</h3><p style=\"margin-top: 8px;margin-bottom: 1.8em;border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;font-size: 15px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;color: rgb(51, 51, 51);\">上面我们讲到了，队列控制的最佳选择是microtask，而microtask的最佳选择是Promise.但如果当前环境不支持Promise，vue就不得不降级为macrotask来做队列控制了。</p><p style=\"margin-top: 1.8em;margin-bottom: 1.8em;border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;font-size: 15px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;color: rgb(51, 51, 51);\">macrotask有哪些可选的方案呢？前面提到了setTimeout是一种，但它不是理想的方案。因为setTimeout执行的最小时间间隔是约4ms的样子，略微有点延迟。还有其他的方案吗？</p><p style=\"margin-top: 1.8em;margin-bottom: 1.8em;border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;font-size: 15px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;color: rgb(51, 51, 51);\">不卖关子了，在vue2.5的源码中，macrotask降级的方案依次是：setImmediate、MessageChannel、setTimeout.</p><p style=\"margin-top: 1.8em;margin-bottom: 1.8em;border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;font-size: 15px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;color: rgb(51, 51, 51);\">setImmediate是最理想的方案了，可惜的是只有IE和nodejs支持。</p><p style=\"margin-top: 1.8em;margin-bottom: 1.8em;border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;font-size: 15px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;color: rgb(51, 51, 51);\">MessageChannel的onmessage回调也是microtask，但也是个新API，面临兼容性的尴尬...</p><p style=\"margin-top: 1.8em;margin-bottom: 1.8em;border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;font-size: 15px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;color: rgb(51, 51, 51);\">所以最后的兜底方案就是setTimeout了，尽管它有执行延迟，可能造成多次渲染，算是没有办法的办法了。</p><h3 style=\"margin-top: 20px;margin-bottom: 20px;border-width: 0px;border-style: initial;border-color: initial;padding-left: 25px;font-weight: bold;word-break: break-all;word-wrap: break-word;background-image: url(\"https://mmbiz.qpic.cn/mmbiz_png/MpGQUHiaib4ib6j9X9s2kibfaicBLmIm6dUBqor8qjBj66mDs0V98xzicMIaHT0lv8c30WsIR3MNHeCGz091kCp7CqVg/640?wx_fmt=png\");background-position: 0px 8px;background-size: 20px 16px;background-repeat: no-repeat;background-attachment: initial;background-origin: initial;background-clip: initial;color: rgb(100, 159, 12);line-height: 2;\">总结</h3><p style=\"margin-top: 8px;margin-bottom: 1.8em;border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;font-size: 15px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;color: rgb(51, 51, 51);\">以上就是vue的nextTick方法的实现原理了，总结一下就是：</p><ol style=\"\" class=\" list-paddingleft-2\"><li><p style=\"border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;\"><span style=\"text-align: justify;white-space: pre-wrap;\">vue用异步队列的方式来控制DOM更新和nextTick回调先后执行</span><br></p><p style=\"border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;\"><br></p></li><li><p style=\"border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;\"><span style=\"text-align: justify;white-space: pre-wrap;\">microtask因为其高优先级特性，能确保队列中的微任务在一次事件循环前被执行完毕</span></p><p style=\"border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;\"><br></p></li><li><p style=\"border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;\"><span style=\"text-align: justify;white-space: pre-wrap;\">因为兼容性问题，vue不得不做了microtask向macrotask的降级方案</span></p></li></ol><p style=\"border-width: 0px;border-style: initial;border-color: initial;line-height: 1.9;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;\"><span style=\"text-align: justify;white-space: pre-wrap;\"></span></p><p style=\"margin-top: 1.8em;margin-bottom: 1.8em;border-width: 0px;border-style: initial;border-color: initial;font-size: 15px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;color: rgb(51, 51, 51);\"><span style=\"letter-spacing: normal;\">相关资料：</span></p><p style=\"margin-top: 1.8em;margin-bottom: 1.8em;border-width: 0px;border-style: initial;border-color: initial;font-size: 15px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;color: rgb(51, 51, 51);\"><span style=\"letter-spacing: normal;\">event loop标准</span></p><p style=\"margin-top: 1.8em;margin-bottom: 1.8em;border-width: 0px;border-style: initial;border-color: initial;font-size: 15px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;color: rgb(51, 51, 51);\"><span style=\"letter-spacing: normal;\">https://html.spec.whatwg.org/multipage/webappapis.html#event-loops</span></p><p style=\"margin-top: 1.8em;margin-bottom: 1.8em;border-width: 0px;border-style: initial;border-color: initial;font-size: 15px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;color: rgb(51, 51, 51);\"><span style=\"letter-spacing: normal;\">vue2.5的nextTick更改记录</span></p><p style=\"margin-top: 1.8em;margin-bottom: 1.8em;border-width: 0px;border-style: initial;border-color: initial;font-size: 15px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;color: rgb(51, 51, 51);\"><span style=\"letter-spacing: normal;\">https://github.com/vuejs/vue/commit/6e41679a96582da3e0a60bdbf123c33ba0e86b31</span></p><p style=\"margin-top: 1.8em;margin-bottom: 1.8em;border-width: 0px;border-style: initial;border-color: initial;font-size: 15px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;color: rgb(51, 51, 51);\"><span style=\"letter-spacing: normal;\">源码解析文章</span></p><p style=\"margin-top: 1.8em;margin-bottom: 1.8em;border-width: 0px;border-style: initial;border-color: initial;font-size: 15px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;color: rgb(51, 51, 51);\"><span style=\"letter-spacing: normal;\">https://github.com/answershuto/learnVue/blob/master/docs/Vue.js%E5%BC%82%E6%AD%A5%E6%9B%B4%E6%96%B0DOM%E7%AD%96%E7%95%A5%E5%8F%8AnextTick.MarkDown</span></p><h2 style=\"border-width: 0px;border-style: initial;border-color: initial;word-break: break-all;word-wrap: break-word;line-height: 110px;height: 110px;font-size: 18px;color: rgb(100, 159, 12);text-align: center;background-image: url(\"https://mmbiz.qpic.cn/mmbiz_png/MpGQUHiaib4ib6j9X9s2kibfaicBLmIm6dUBq1YM6xzAOuiaQW3qCATvwcQCI9Hh21gicUUnZ0FFtbjdVoCQMIZjDBUaA/640?wx_fmt=png\");background-position: center center;background-size: 150px 110px;background-repeat: no-repeat;background-attachment: initial;background-origin: initial;background-clip: initial;\">关于奇舞周刊</h2><p class=\"weekly-end-desc\" style=\"margin-top: 15px;margin-bottom: 30px;border-width: 0px;border-style: initial;border-color: initial;line-height: 2;font-size: 14px;text-align: justify;white-space: pre-wrap;word-break: break-all;word-wrap: break-word;color: rgb(136, 136, 136);\">《奇舞周刊》是360公司专业前端团队「<span style=\"border-width: 0px;border-style: initial;border-color: initial;font-weight: bold;\">奇舞团</span>」运营的前端技术社区。关注公众号后，直接发送链接到后台即可给我们投稿。</p><p><img class=\"weekly-end-img\" data-ratio=\"0.34490238611713664\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/MpGQUHiaib4ib6j9X9s2kibfaicBLmIm6dUBqymVmiaKqGFEPn0G3VyVnqQjvognHq4cMibayW2400j4OyEtdz5fkMbmA/640?wx_fmt=png\" data-type=\"png\" data-w=\"922\" style=\"margin-right: auto;margin-bottom: 20px;margin-left: auto;border-width: 0px;border-style: initial;border-color: initial;vertical-align: middle;height: 106px;width: 307px;display: block;color: rgb(51, 51, 51);\"></p><p><br></p>', '编者按：本文由大豹杂说公众号吕大豹授权奇舞周刊转载。来一起学习吧！\n\nvue中有一个较为特殊的API，nextTick。根据官方文档的解释，它可以在DOM更新完毕之后执行一个回调，用法如下：\n\n> // 修改数据\n> \n>   \n> \n> vm.msg = \'Hello\'\n> \n>   \n> \n> // DOM 还没有更新\n> \n>   \n> \n> Vue.nextTick(function () {\n> \n>   \n> \n> // DOM 更新了\n> \n>   \n> \n> })\n\n尽管MVVM框架并不推荐访问DOM，但有时候确实会有这样的需求，尤其是和第三方插件进行配合的时候，免不了要进行DOM操作。而nextTick就提供了一个桥梁，确保我们操作的是更新后的DOM。\n\n本文从这样一个问题开始探索：vue如何检测到DOM更新完毕呢？\n\n检索一下自己的前端知识库，能监听到DOM改动的API好像只有MutationObserver了，后面简称MO.\n\n### 理解MutationObserver\n\nMutationObserver是HTML5新增的属性，用于监听DOM修改事件，能够监听到节点的属性、文本内容、子节点等的改动，是一个功能强大的利器，基本用法如下：\n\n> //MO基本用法\n> \n>   \n> \n> var observer = new MutationObserver(function(){\n> \n>   \n> \n>   //这里是回调函数\n> \n>   \n> \n>   console.log(\'DOM被修改了！\');\n> \n>   \n> \n> });\n> \n>   \n> \n> var article = document.querySelector(\'article\');\n> \n>   \n> \n> observer.observer(article);\n\nMO的使用不是本篇重点。这里我们要思考的是：vue是不是用MO来监听DOM更新完毕的呢？\n\n那就打开vue的源码看看吧，在实现nextTick的地方，确实能看到这样的代码：\n\n> //vue@2.2.5 /src/core/util/env.js\n> \n>   \n> \n> if (typeof MutationObserver !== \'undefined\' && (isNative(MutationObserver) || MutationObserver.toString() === \'\\[object MutationObserverConstructor\\]\')) {\n> \n>   \n> \n>   var counter = 1\n> \n>   \n> \n>   var observer = new MutationObserver(nextTickHandler)\n> \n>   \n> \n>   var textNode = document.createTextNode(String(counter))\n> \n>   \n> \n>   observer.observe(textNode, {\n> \n>   \n> \n>       characterData: true\n> \n>   \n> \n>   })\n> \n>   \n> \n>   timerFunc = () => {\n> \n>   \n> \n>     counter = (counter + 1) % 2\n> \n>   \n> \n>     textNode.data = String(counter)\n> \n>   \n> \n>   }\n> \n>   \n> \n> }\n\n简单解释一下，如果检测到浏览器支持MO，则创建一个文本节点，监听这个文本节点的改动事件，以此来触发nextTickHandler（也就是DOM更新完毕回调）的执行。后面的代码中，会执行手工修改文本节点属性，这样就能进入到回调函数了。\n\n大体扫了一眼，似乎可以得到实锤了：哦！vue是用MutationObserver监听DOM更新完毕的！\n\n难道不感觉哪里不对劲吗？让我们细细想一下：\n\n1.  我们要监听的是模板中的DOM更新完毕，vue为什么自己创建了一个文本节点来监听，这有点说不通啊！\n    \n      \n    \n2.  难道自己创建的文本节点更新完毕，就能代表其他DOM节点更新完毕吗？这又是什么道理！\n    \n\n看来我们上面得出的结论并不对，这时候就需要讲讲js的事件循环机制了。\n\n### 事件循环（Event Loop）\n\n在js的运行环境中，我们这里光说浏览器吧，通常伴随着很多事件的发生，比如用户点击、页面渲染、脚本执行、网络请求，等等。为了协调这些事件的处理，浏览器使用事件循环机制。\n\n简要来说，事件循环会维护一个或多个任务队列（task queues），以上提到的事件作为任务源往队列中加入任务。有一个持续执行的线程来处理这些任务，每执行完一个就从队列中移除它，这就是一次事件循环了，如下图所示：\n\n我们平时用setTimeout来执行异步代码，其实就是在任务队列的末尾加入了一个task，待前面的任务都执行完后再执行它。\n\n关键的地方来了，每次event loop的最后，会有一个UI render步骤，也就是更新DOM。标准为什么这样设计呢？考虑下面的代码：\n\n> for(let i=0; i<100; i++){\n> \n>   \n> \n>     dom.style.left = i + \'px\';\n> \n>   \n> \n> }\n\n浏览器会进行100次DOM更新吗？显然不是的，这样太耗性能了。事实上，这100次for循环同属一个task，浏览器只在该task执行完后进行一次DOM更新。\n\n那我们的思路就来了：只要让nextTick里的代码放在UI render步骤后面执行，岂不就能访问到更新后的DOM了？\n\nvue就是这样的思路，并不是用MO进行DOM变动监听，而是用队列控制的方式达到目的。那么vue又是如何做到队列控制的呢？我们可以很自然的想到setTimeout，把nextTick要执行的代码当作下一个task放入队列末尾。\n\n然而事情却没这么简单，vue的数据响应过程包含：数据更改->通知Watcher->更新DOM。而数据的更改不由我们控制，可能在任何时候发生。如果恰巧发生在repaint之前，就会发生多次渲染。这意味着性能浪费，是vue不愿意看到的。\n\n所以，vue的队列控制是经过了深思熟虑的（也经过了多次改动）。在这之前，我们还需了解event loop的另一个重要概念，microtask.\n\n### microtask\n\n从名字看，我们可以把它称为微任务。对应的，task队列中的任务也被叫做macrotask。名字相似，性质可不一样了。\n\n每一次事件循环都包含一个microtask队列，在循环结束后会依次执行队列中的microtask并移除，然后再开始下一次事件循环。\n\n在执行microtask的过程中后加入microtask队列的微任务，也会在下一次事件循环之前被执行。也就是说，macrotask总要等到microtask都执行完后才能执行，microtask有着更高的优先级。\n\nmicrotask的这一特性，简直是做队列控制的最佳选择啊！vue进行DOM更新内部也是调用nextTick来做异步队列控制。而当我们自己调用nextTick的时候，它就在更新DOM的那个microtask后追加了我们自己的回调函数，从而确保我们的代码在DOM更新后执行，同时也避免了setTimeout可能存在的多次执行问题。\n\n常见的microtask有：Promise、MutationObserver、Object.observe(废弃)，以及nodejs中的process.nextTick.\n\n咦？好像看到了MutationObserver，难道说vue用MO是想利用它的microtask特性，而不是想做DOM监听？对喽，就是这样的。核心是microtask，用不用MO都行的。事实上，vue在2.5版本中已经删去了MO相关的代码，因为它是HTML5新增的特性，在iOS上尚有bug。\n\n那么最优的microtask策略就是Promise了，而令人尴尬的是，Promise是ES6新增的东西，也存在兼容问题呀~ 所以vue就面临一个降级策略。\n\n### vue的降级策略\n\n上面我们讲到了，队列控制的最佳选择是microtask，而microtask的最佳选择是Promise.但如果当前环境不支持Promise，vue就不得不降级为macrotask来做队列控制了。\n\nmacrotask有哪些可选的方案呢？前面提到了setTimeout是一种，但它不是理想的方案。因为setTimeout执行的最小时间间隔是约4ms的样子，略微有点延迟。还有其他的方案吗？\n\n不卖关子了，在vue2.5的源码中，macrotask降级的方案依次是：setImmediate、MessageChannel、setTimeout.\n\nsetImmediate是最理想的方案了，可惜的是只有IE和nodejs支持。\n\nMessageChannel的onmessage回调也是microtask，但也是个新API，面临兼容性的尴尬...\n\n所以最后的兜底方案就是setTimeout了，尽管它有执行延迟，可能造成多次渲染，算是没有办法的办法了。\n\n### 总结\n\n以上就是vue的nextTick方法的实现原理了，总结一下就是：\n\n1.  vue用异步队列的方式来控制DOM更新和nextTick回调先后执行  \n    \n      \n    \n2.  microtask因为其高优先级特性，能确保队列中的微任务在一次事件循环前被执行完毕\n    \n      \n    \n3.  因为兼容性问题，vue不得不做了microtask向macrotask的降级方案\n    \n\n相关资料：\n\nevent loop标准\n\nhttps://html.spec.whatwg.org/multipage/webappapis.html#event-loops\n\nvue2.5的nextTick更改记录\n\nhttps://github.com/vuejs/vue/commit/6e41679a96582da3e0a60bdbf123c33ba0e86b31\n\n源码解析文章\n\nhttps://github.com/answershuto/learnVue/blob/master/docs/Vue.js%E5%BC%82%E6%AD%A5%E6%9B%B4%E6%96%B0DOM%E7%AD%96%E7%95%A5%E5%8F%8AnextTick.MarkDown\n\n关于奇舞周刊\n------\n\n《奇舞周刊》是360公司专业前端团队「奇舞团」运营的前端技术社区。关注公众号后，直接发送链接到后台即可给我们投稿。', 0, 1, 0);
INSERT INTO `post` (`id`, `createAt`, `updateAt`, `title`, `description`, `thumb`, `url`, `html`, `markdown`, `views`, `status`, `push`) VALUES
(41, '2018-04-23 11:01:44.406714', '2018-04-23 11:01:44.406714', 'webpack从此不再是我们的痛点 — 核心基础', 'webpack一直是前端工程师的痛点，因为他的复杂、分散、loader、plugin这些第三方，让我们的学习成本陡然上升，使我们一直对他的配置模棱两可，今天带大家彻底明白他如何配置，摆脱困扰我们很久的痛点。本篇主要是webpack基础配置详解，关于webpack的模块chunk、编译阶段流程、输出阶段流程、loader的编写和手写plugin会在后续文章推出，为了避免错过可以关注我或者收藏我的个人博客www.ngaiwe.com1.webpack是什么？WebPack可以看做是模块打包机：它做的事情是，分', '', 'https://juejin.im/post/5ad1d85f518825651d081c68?utm_source=gold_browser_extension', '<blockquote>\n<p>webpack一直是前端工程师的痛点，因为他的复杂、分散、loader、plugin这些第三方，让我们的学习成本陡然上升，使我们一直对他的配置模棱两可，今天带大家彻底明白他如何配置，摆脱困扰我们很久的痛点。本篇主要是webpack基础配置详解，关于webpack的模块chunk、编译阶段流程、输出阶段流程、loader的编写和手写plugin会在后续文章推出，为了避免错过可以关注我或者收藏我的个人博客www.ngaiwe.com</p>\n</blockquote>\n<h3 class=\"heading\" data-id=\"heading-0\">1.webpack是什么？</h3>\n<p>WebPack可以看做是模块打包机：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其打包为合适的格式以供浏览器使用。并且跟具你的在项目中的各种需求，实现自动化处理，解放我们的生产力</p>\n<ul>\n<li>代码转换：TypeScript 编译成 JavaScript、SCSS 编译成 CSS 。</li>\n<li>文件优化：压缩 JavaScript、CSS、HTML 代码，压缩合并图片等。</li>\n<li>代码分割：提取多个页面的公共代码、提取首屏不需要执行部分的代码让其异步加载。</li>\n<li>模块合并：在采用模块化的项目里会有很多个模块和文件，需要构建功能把模块分类合并成一个文件。</li>\n<li>自动刷新：监听本地源代码的变化，自动重新构建、刷新浏览器。</li>\n<li>代码校验：在代码被提交到仓库前需要校验代码是否符合规范，以及单元测试是否通过。</li>\n<li>自动发布：更新完代码后，自动构建出线上发布代码并传输给发布系统。</li>\n</ul>\n<h3 class=\"heading\" data-id=\"heading-1\">2.项目初始化</h3>\n<pre><code class=\"hljs webpack init\" lang=\"webpack init\">mkdir webpack-start\ncd webpack-start\nnpm init\n</code></pre><h3 class=\"heading\" data-id=\"heading-2\">3.webpack核心概念</h3>\n<ul>\n<li>Entry：入口，webpack执行构建的第一步将从Entry开始，可抽象理解为输入</li>\n<li>Module：模块，在webpacl中一切皆为模块，一个模块对应一个文件，webpack会从配置的Entry开始递归找出所有依赖的模块</li>\n<li>Chunk：代码块，一个chunk由多个模块组合而成，用于将代码合并和分割</li>\n<li>Loader：模块转换器，用于把模块原内容按照需求转换为需要的新内容</li>\n<li>Plugin：扩展插件，在webpack构建流程中的特定时机注入扩展逻辑来改变构建结果和想要做的事情</li>\n<li>Output：输入结果，在webpack经过一系列处理并得到最终想要的代码然后输出结果</li>\n</ul>\n<blockquote>\n<p>Webpack 启动后会从 <code>Entry</code> 里配置的 <code>Module</code> 开始递归解析 Entry 依赖的所有 Module。 每找到一个 Module， 就会根据配置的<code>Loader</code>去找出对应的转换规则，对 Module 进行转换后，再解析出当前 Module 依赖的 Module。 这些模块会以 Entry 为单位进行分组，一个 Entry 和其所有依赖的 Module 被分到一个组也就是一个 <code>Chunk</code>。最后 Webpack 会把所有 Chunk 转换成文件输出。 在整个流程中 Webpack 会在恰当的时机执行 Plugin 里定义的逻辑。</p>\n</blockquote>\n<h5 class=\"heading\" data-id=\"heading-3\">1.Entry</h5>\n<blockquote>\n<p>context用来解决配置文件和入口文件不再同一层结构，列如我们配置文件在config，入口文件在根目录，则如下配置</p>\n</blockquote>\n<pre><code class=\"hljs context\" lang=\"context\">module.exports = {\n  context: path.join(__dirname, \'..\'), // 找到根目录\n  entry: \'./main.js\' //根目录下的入口文件\n}\n</code></pre><blockquote>\n<p>最简单的单页面(SPA)Entry入口，将main.js引入，并根据main.js中引用和依赖的模块开始解析</p>\n</blockquote>\n<pre><code class=\"hljs entry\" lang=\"entry\">module.exports = {\n  entry: \'./main.js\'\n}\n</code></pre><blockquote>\n<p>多页面(MPA)Entry入口，将多个文件引入，当然一般是读取指定文件夹内的入口文件，然后引入</p>\n</blockquote>\n<pre><code class=\"hljs entry\" lang=\"entry\">entry: {\n  home: \"./home.js\",\n  about: \"./about.js\",\n  contact: \"./contact.js\"\n}\n</code></pre><p>如果是单页面(传入的是字符串或字符串数组)，则chunk会被命名为main，如果是多页面(传入一个对象)，则每个键(key)会是chunk的名称，描述了chunk的入口起点</p>\n<h5 class=\"heading\" data-id=\"heading-4\">2.Output</h5>\n<blockquote>\n<p>Object 指示webpack如何去输出，以及在哪里输出你的bundle、asset 和其他你所打包或使用 webpack 载入的任何内容</p>\n</blockquote>\n<ul>\n<li>\n<p>path：输出目录对应一个绝对路径</p>\n<pre><code class=\"hljs path\" lang=\"path\">path: path.resolve(__dirname, \'dist\')\n</code></pre></li>\n<li>\n<p>pathinfo：boolean 默认false作用是告诉webpack在bundle中引入所包含模块信息的相关注释，不应用于生产环境(production)，对开发环境(development)极其有用</p>\n</li>\n<li>\n<p>publicPath：主要作用是针对打包后的文件里面的静态文件路径处理</p>\n</li>\n<li>\n<p>filename：定义每个输出bundle的名称，这些bundle将写入output.path选项指定的目录下，对于单入口Entry，filename是一个静态名称</p>\n<pre><code class=\"hljs filename\" lang=\"filename\">filename: \"bundle.js\"\n</code></pre><p>但是在webpack中我们会用到代码拆分、各种插件plugin或多入口Entry创建多个bundle，这样我们就应该给每个bundle一个唯一的名称</p>\n<pre><code class=\"hljs filename\" lang=\"filename\">filename: \"[name].bundle.js\"\n</code></pre><p>使用内部chunk id</p>\n<pre><code class=\"hljs filename\" lang=\"filename\">filename: \"[id].bundle.js\"\n</code></pre><p>唯一hash生成</p>\n<pre><code class=\"hljs filename\" lang=\"filename\">filename: \"[name].[hash].bundle.js\"\n</code></pre><p>使用基于每个 chunk 内容的 hash</p>\n<pre><code class=\"hljs filename\" lang=\"filename\">filename: \"[chunkhash].bundle.js\"\n</code></pre></li>\n</ul>\n<h5 class=\"heading\" data-id=\"heading-5\">3.Module模块</h5>\n<blockquote>\n<p>处理项目中应用的不同模块，主要配置皆在Rules中，匹配到请求的规则数组，这些规则能够对模块应用loader，或者修改解析器parser</p>\n</blockquote>\n<ul>\n<li>\n<p>Module.noParse： 防止webpack解析的时候，将规则匹配成功的文件进行解析和忽略大型的library来对性能的优化，在被忽略的文件中不应该含有import、require和define的调用</p>\n<pre><code class=\"hljs noParse\" lang=\"noParse\">module.exports = {\n  module: {\n    rules: [],\n    noParse: function(content) {\n      return /jquery|lodash/.test(content) // 忽略jquery文件解析，直接编译打包\n    }\n  }\n}\n</code></pre></li>\n<li>\n<p>Rules：创建模块时，匹配请求的规则数组</p>\n<ul>\n<li>\n<p>Rule条件：resource(请求文件的绝对路径)、issuer(被请求资源的模块文件的绝对路径，导入时的位置)，比如一个文件A导入文件B，resource是/B，issuer是/A是导入文件时的位置，而不是真正的位置，在规则中，test/include/exclude/resource对resource匹配，而issuer只对issuer匹配</p>\n</li>\n<li>\n<p>Test/include/exclude/resource/issuer的用法和区别</p>\n<pre><code class=\"hljs rule\" lang=\"rule\">module.exports = {\n    modules: {\n        rules: [\n          {\n            test: /\\.js?$/,\n            include: [\n              path.resolve(__dirname, \"app\")\n            ],\n            exclude: [\n              path.resolve(__dirname, \"app/demo\")\n            ],\n            resource:{\n              test: /\\.js?$/,\n              include: path.resolve(__dirname, \"app\"),\n              exclude: path.resolve(__dirname, \"app/demo\")\n            },\n            issuer: {\n              test: /\\.js?$/,\n              include: path.resolve(__dirname, \"app\"),\n              exclude: path.resolve(__dirname, \"app/demo\")\n            }\n          }\n        ]\n  }\n}\n</code></pre><p>test：一般是提供一个正则表达式或正则表达式的数组，绝对路径符合这个正则的则意味着满足这个条件</p>\n<p>include：是一个字符串或者字符串数组，指定目录中的文件需要走这个规则</p>\n<p>exclude：同样是一个字符串或者字符串数组，指定目录中的文件不需要走这个规则</p>\n<p>resource：就是对text/include/exclude的一个对象包装，和他们单独写没有区别</p>\n<p>issuer：和resource有异曲同工的作用，不过区别在于它是将这个rule应用于哪个文件以及这个文件所导入的所有依赖文件</p>\n</li>\n<li>\n<p>resourceQuery：和resource用法一样，不过针对的是匹配结果\'?\'后面的路径参数，可以调用resource中的text等</p>\n</li>\n<li>\n<p>oneOf：表示对该资源只应用第一个匹配的规则，一般结合resourceQuery</p>\n<pre><code class=\"hljs oneOf\" lang=\"oneOf\">{\n  test: /\\.(png|jpe?g|gif|svg)$/,\n  oneOf: [\n    {\n      resourceQuery: /inline/, \n      loader: \'url-loader\'\n    },\n    {\n      loader: \'file-loader\'\n    }\n  ]\n}\n</code></pre><ul>\n<li>path/to/foo.png?inline: 会匹配url-loader</li>\n<li>path/to/foo.png?other:会匹配file-loader</li>\n<li>path/to/foo.png: 会匹配file-loader</li>\n</ul>\n</li>\n<li>\n<p>useEntry：object包含着每一个loader并且对应loader的配置文件</p>\n<pre><code class=\"hljs useEntry\" lang=\"useEntry\">{\n  loader: \"css-loader\",\n  options: {\n    modules: true\n  }\n}\n</code></pre><p>options会传入loader，可以理解为loader的选项</p>\n</li>\n<li>\n<p>use：是对useEntry的集合，并且对每一个入口指定使用一个loader</p>\n<pre><code class=\"hljs use\" lang=\"use\">use: [\n  \'style-loader\',\n  {\n    loader: \'css-loader\',\n    options: {\n      importLoaders: 1\n    }\n  },\n  {\n    loader: \'less-loader\',\n    options: {\n      noIeCompat: true\n    }\n  }\n]\n</code></pre></li>\n</ul>\n</li>\n</ul>\n<h5 class=\"heading\" data-id=\"heading-6\">4.Resolve解析</h5>\n<blockquote>\n<p>主要用来模块如何被解析，给webpack提供默认值</p>\n</blockquote>\n<ul>\n<li>\n<p>alias：object主要用来让import和require调用更方便，设置初始路径</p>\n<pre><code class=\"hljs alias\" lang=\"alias\">module.exports = {\n alias: {\n  Utilities: path.resolve(__dirname, \'src/utilities/\'),\n  Templates: path.resolve(__dirname, \'src/templates/\')\n }   \n}\n// 最开始的import\nimport Utility from \'../../utilities/utility\';\n// 配置完以后\nimport Utility from \'Utilities/utility\';\n</code></pre></li>\n<li>\n<p>enforceExtension：Boolean 默认false，表示引用不需要扩展名，为true时，import、require中引用必须加扩展名</p>\n</li>\n<li>\n<p>extensions：Array 自动解析不需要扩展名</p>\n<pre><code class=\"hljs extensions\" lang=\"extensions\">extensions: [\".js\", \".json\"]  // .js、.json引入不需要扩展名\n</code></pre></li>\n<li>\n<p>modules：Array webpack解析模块的时候需要搜索的目录，一般用于优先搜索和非node_modules文件中的自定义模块</p>\n<pre><code class=\"hljs modules\" lang=\"modules\">modules: [path.resolve(__dirname, \"src\"), \"node_modules\"] //优先搜索src目录\n</code></pre></li>\n</ul>\n<h5 class=\"heading\" data-id=\"heading-7\">5.Loader</h5>\n<blockquote>\n<p>通过使用不同的Loader，Webpack可以要把不同的文件都转成JS文件,比如CSS、ES6/7、JSX等，一般用于module的use中</p>\n</blockquote>\n<pre><code class=\"hljs loader\" lang=\"loader\">module: {\n  rules:[\n      {\n        test:/\\.css$/,\n        use:[\'style-loader\',\'css-loader\'],\n        include:path.join(__dirname,\'./src\'),\n        exclude:/node_modules/\n      }\n  ]      \n}\n</code></pre><p>具体相关loader需要查看你要引入的loader官方文档API，手写Loader会在下一篇文章具体介绍</p>\n<h5 class=\"heading\" data-id=\"heading-8\">6.Plugin插件</h5>\n<blockquote>\n<p>Array 扩展webpack，在webpack构建流程中的特定时机注入扩展逻辑来改变构建结果和想要做的事情，具体使用查看你引入的plugin官方文档，手写plugin会在后续文章中推出</p>\n</blockquote>\n<h5 class=\"heading\" data-id=\"heading-9\">7.webpack-dev-server</h5>\n<blockquote>\n<p>开发中的server，webpack-dev-server可以快速搭建起本地服务，具体使用查看 <a target=\"_blank\" href=\"https://link.juejin.im/?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fwebpack-dev-server\" rel=\"nofollow noopener noreferrer\">webpack-dev-server</a></p>\n</blockquote>\n<h5 class=\"heading\" data-id=\"heading-10\">8.Devtool</h5>\n<blockquote>\n<p>此选项控制是否生成，以及如何生成，官方推荐 <a target=\"_blank\" href=\"https://link.juejin.im/?target=https%3A%2F%2Fdoc.webpack-china.org%2Fplugins%2Fsource-map-dev-tool-plugin\" rel=\"nofollow noopener noreferrer\">SourceMapDevToolPlugin</a> 和 <a target=\"_blank\" href=\"https://link.juejin.im/?target=https%3A%2F%2Fdoc.webpack-china.org%2Floaders%2Fsource-map-loader\" rel=\"nofollow noopener noreferrer\">source-map-loader</a> 建议看官方文档 <a target=\"_blank\" href=\"https://link.juejin.im/?target=https%3A%2F%2Fdoc.webpack-china.org%2Fconfiguration%2Fdevtool%2F\" rel=\"nofollow noopener noreferrer\">Devtool</a> 主要用来控制打包品质和在dev环境的调试便捷度和编译的快慢</p>\n</blockquote>\n<h5 class=\"heading\" data-id=\"heading-11\">9.Watch</h5>\n<blockquote>\n<p>webpack 可以监听文件变化，当它们修改后会重新编译和 <a target=\"_blank\" href=\"https://link.juejin.im/?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fwebpack-hot-middleware\" rel=\"nofollow noopener noreferrer\">HotModuleReplacementPlugin</a> 有相似之处，监听文件变动热启动</p>\n</blockquote>\n<h3 class=\"heading\" data-id=\"heading-12\">4.配置webpack</h3>\n<p>webpack安装命令</p>\n<pre><code class=\"hljs webpack\" lang=\"webpack\">npm install webpack webpack-cli -D\n</code></pre><p>Webpack.config.js</p>\n<blockquote>\n<p>具体用到的plugin插件</p>\n</blockquote>\n<ul>\n<li>clean-webpack-plugin：用于打包前清空输出目录 <a target=\"_blank\" href=\"https://link.juejin.im/?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fclean-webpack-plugin\" rel=\"nofollow noopener noreferrer\">官方API</a></li>\n<li>html-webpack-plugin：用于自动产出HTML和引用产出的资源 <a target=\"_blank\" href=\"https://link.juejin.im/?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fhtml-webpack-plugin\" rel=\"nofollow noopener noreferrer\">官方API</a></li>\n<li>copy-webpack-plugin：用于拷贝静态资源，包括未被引用的资源 <a target=\"_blank\" href=\"https://link.juejin.im/?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fcopy-webpack-plugin\" rel=\"nofollow noopener noreferrer\">官方API</a></li>\n<li>uglifyjs-webpack-plugin：用于压缩JS可以让输出的JS文件体积更小、加载更快、流量更省，还有混淆代码的加密功能 <a target=\"_blank\" href=\"https://link.juejin.im/?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fuglifyjs-webpack-plugin\" rel=\"nofollow noopener noreferrer\">官方API</a></li>\n<li>extract-text-webpack-plugin：因为CSS的下载和JS可以并行,当一个HTML文件很大的时候，我们可以把CSS单独提取出来加载 <a target=\"_blank\" href=\"https://link.juejin.im/?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fextract-text-webpack-plugin\" rel=\"nofollow noopener noreferrer\">官方API</a></li>\n</ul>\n<pre><code class=\"hljs webpack-server\" lang=\"webpack-server\">const path = require(\'path\');\nconst webpack = require(\'webpack\');\nconst CleanWebpackPlugin = require(\'clean-webpack-plugin\');\nconst HtmlWebpackPlugin = require(\'html-webpack-plugin\');\nconst CopyWebpackPlugin = require(\'copy-webpack-plugin\');\nconst UglifyjsWebpackPlugin = require(\'uglifyjs-webpack-plugin\')\n// npm i extract-text-webpack-plugin@next // @next可以安装下一个非正式版本\nconst ExtractTextWebpackPlugin = require(\'extract-text-webpack-plugin\');\nlet cssExtract = new ExtractTextWebpackPlugin({\n    filename: \'css/css.css\',\n    allChunks: true\n});\nlet lessExtract = new ExtractTextWebpackPlugin(\'css/less.css\');\nlet sassExtract = new ExtractTextWebpackPlugin(\'css/sass.css\');\n/**\n * 有些时候我们希望把页面中的CSS文件单独拉出来保存加载\n * extract-text-webpack-plugin\n */\n//let pages = [\'index\', \'base\'];\n// pages = pages.map(page => new HtmlWebpackPlugin({\n//     template: \'./src/index.html\',//指定产的HTML模板\n//     filename: `${page}.html`,//产出的HTML文件名\n//     title: `${page}`,\n//     chunks: [\'common\', `${page}`],//在产出的HTML文件里引入哪些代码块\n//     hash: true,// 会在引入的js里加入查询字符串避免缓存,\n//     minify: {\n//         removeAttributeQuotes: true\n//     }\n// }));\nmodule.exports = {\n    //先找到每个入口(Entry)，然后从各个入口分别出发，找到依赖的模块(Module)，\n    //然后生成一个Chunk(代码块),最后会把Chunk写到文件系统中(Assets)   \n    entry: \'./src/main.js\',\n    output: {\n        path: path.join(__dirname, \'dist\'),//输出的文件夹，只能是绝对路径 \n        //name是entry名字main,hash根据打包后的文件内容计算出来的一个hash值\n        filename: \'[name].[hash].js\' //打包后的文件名\n    },\n    resolve: {\n        //引入模块的时候，可以不用扩展名 \n        extensions: [\".js\", \".less\", \".json\"],\n        alias: {//别名\n            \"bootstrap\": \"bootstrap/dist/css/bootstrap.css\"\n        }\n    },\n    //表示监控源文件的变化，当源文件发生改变后，则重新打包\n    watch: false,\n    watchOptions: {\n        ignored: /node_modules/,\n        poll: 1000,//每秒钟询问的次数\n        aggregateTimeout: 500//\n    },\n    //devtool: \'source-map\',//单独文件，可以定位到哪一列出错了\n    // devtool: \'cheap-module-source-map\',//单独文件，体积更小，但只能定位到哪一行出错\n    // devtool: \'eval-source-map\',//不会生成单独文件，\n    // devtool: \'cheap-module-eval-source-map\',//不会生成单独文件 只定位到行，体积更小\n    /*\n    loader有三种写法\n    use\n    loader\n    use+loader\n    * */\n    module: {\n        rules: [\n            {\n                test: require.resolve(\'jquery\'),\n                use: {\n                    loader: \'expose-loader\',\n                    options: \'$\'\n                }\n            },\n            {\n                test: /\\.js/,\n                use: {\n                    loader: \'babel-loader\',\n                    query: {\n                        presets: [\"env\", \"stage-0\", \"react\"]\n                    }\n                }\n            },\n            {\n                //file-loader是解析图片地址，把图片从源位置拷贝到目标位置并且修改原引用地址\n                //可以处理任意的二进制，bootstrap 里字体\n                //url-loader可以在文件比较小的时候，直接变成base64字符串内嵌到页面中\n                test: /\\.(png|jpg|gif|svg|bmp|eot|woff|woff2|ttf)/,\n                loader: {\n                    loader: \'url-loader\',\n                    options: {\n                        limit: 5 * 1024,\n                        //指定拷贝文件的输出目录 \n                        outputPath: \'images/\'\n                    }\n                }\n            },\n            {\n                test: /\\.css$/,//转换文件的匹配正则\n                //css-loader用来解析处理CSS文件中的url路径,要把CSS文件变成一个模块\n                //style-loader 可以把CSS文件变成style标签插入head中\n                //多个loader是有顺序要求的，从右往左写，因为转换的时候是从右往左转换\n                //此插件先用css-loader处理一下css文件\n                //如果压缩\n                loader: cssExtract.extract({\n                    use: [\"css-loader?minimize\"]\n                })\n                //loader: [\"style-loader\", \"css-loader\", \"postcss-loader\"]\n            },\n            {\n                test: /\\.less$/,\n                loader: lessExtract.extract({\n                    use: [\"css-loader?minimize\", \"less-loader\"]\n                })\n                //use: [\"style-loader\", \"css-loader\", \"less-loader\"]\n            },\n            {\n                test: /\\.scss$/,\n                loader: sassExtract.extract({\n                    use: [\"css-loader?minimize\", \"sass-loader\"]\n                })\n                // use: [\"style-loader\", \"css-loader\", \"sass-loader\"]\n            },\n            {\n                test: /\\.(html|htm)/,\n                loader: \'html-withimg-loader\'\n            }\n        ]\n    },\n    plugins: [\n        //用来自动向模块内部注入变量\n        // new webpack.ProvidePlugin({\n        //     $: \'jquery\'\n        // }),\n        new UglifyjsWebpackPlugin(),\n        new CleanWebpackPlugin([path.join(__dirname, \'dist\')]),\n        //此插件可以自动产出html文件\n        new HtmlWebpackPlugin({\n            template: \'./src/index.html\',//指定产的HTML模板\n            filename: `index.html`,//产出的HTML文件名\n            title: \'index\',\n            hash: true,// 会在引入的js里加入查询字符串避免缓存,\n            minify: {\n                removeAttributeQuotes: true\n            }\n        }),\n        new CopyWebpackPlugin([{\n            from: path.join(__dirname, \'public\'),\n            to: path.join(__dirname, \'dist\', \'public\')\n        }]),\n        cssExtract,\n        lessExtract,\n        sassExtract\n    ],\n    //配置此静态文件服务器，可以用来预览打包后项目\n    devServer: {\n        contentBase: \'./dist\',\n        host: \'localhost\',\n        port: 8000,\n        compress: true,//服务器返回给浏览器的时候是否启动gzip压缩\n    }\n}\n</code></pre><h3 class=\"heading\" data-id=\"heading-13\">5.总结</h3>\n<blockquote>\n<p>本篇偏向基础，能够搭建起简单的webpack配置，高级进阶会在后续文章推出，并且希望大家多去看官方API然后自我总结输出，只有将知识输出出来，才能更好的记忆和学习</p>\n</blockquote>\n<h3 class=\"heading\" data-id=\"heading-14\">6.博客</h3>\n<p><a target=\"_blank\" href=\"https://link.juejin.im/?target=http%3A%2F%2Fwww.ngaiwe.com\" rel=\"nofollow noopener noreferrer\">魏燃技术博客</a></p>\n<p>有任何问题可留言或者发送本人邮箱ngaiwe@126.com</p>', '> webpack一直是前端工程师的痛点，因为他的复杂、分散、loader、plugin这些第三方，让我们的学习成本陡然上升，使我们一直对他的配置模棱两可，今天带大家彻底明白他如何配置，摆脱困扰我们很久的痛点。本篇主要是webpack基础配置详解，关于webpack的模块chunk、编译阶段流程、输出阶段流程、loader的编写和手写plugin会在后续文章推出，为了避免错过可以关注我或者收藏我的个人博客www.ngaiwe.com\n\n### 1.webpack是什么？\n\nWebPack可以看做是模块打包机：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其打包为合适的格式以供浏览器使用。并且跟具你的在项目中的各种需求，实现自动化处理，解放我们的生产力\n\n*   代码转换：TypeScript 编译成 JavaScript、SCSS 编译成 CSS 。\n*   文件优化：压缩 JavaScript、CSS、HTML 代码，压缩合并图片等。\n*   代码分割：提取多个页面的公共代码、提取首屏不需要执行部分的代码让其异步加载。\n*   模块合并：在采用模块化的项目里会有很多个模块和文件，需要构建功能把模块分类合并成一个文件。\n*   自动刷新：监听本地源代码的变化，自动重新构建、刷新浏览器。\n*   代码校验：在代码被提交到仓库前需要校验代码是否符合规范，以及单元测试是否通过。\n*   自动发布：更新完代码后，自动构建出线上发布代码并传输给发布系统。\n\n### 2.项目初始化\n\n    mkdir webpack-start\n    cd webpack-start\n    npm init\n    \n\n### 3.webpack核心概念\n\n*   Entry：入口，webpack执行构建的第一步将从Entry开始，可抽象理解为输入\n*   Module：模块，在webpacl中一切皆为模块，一个模块对应一个文件，webpack会从配置的Entry开始递归找出所有依赖的模块\n*   Chunk：代码块，一个chunk由多个模块组合而成，用于将代码合并和分割\n*   Loader：模块转换器，用于把模块原内容按照需求转换为需要的新内容\n*   Plugin：扩展插件，在webpack构建流程中的特定时机注入扩展逻辑来改变构建结果和想要做的事情\n*   Output：输入结果，在webpack经过一系列处理并得到最终想要的代码然后输出结果\n\n> Webpack 启动后会从 `Entry` 里配置的 `Module` 开始递归解析 Entry 依赖的所有 Module。 每找到一个 Module， 就会根据配置的`Loader`去找出对应的转换规则，对 Module 进行转换后，再解析出当前 Module 依赖的 Module。 这些模块会以 Entry 为单位进行分组，一个 Entry 和其所有依赖的 Module 被分到一个组也就是一个 `Chunk`。最后 Webpack 会把所有 Chunk 转换成文件输出。 在整个流程中 Webpack 会在恰当的时机执行 Plugin 里定义的逻辑。\n\n##### 1.Entry\n\n> context用来解决配置文件和入口文件不再同一层结构，列如我们配置文件在config，入口文件在根目录，则如下配置\n\n    module.exports = {\n      context: path.join(__dirname, \'..\'), // 找到根目录\n      entry: \'./main.js\' //根目录下的入口文件\n    }\n    \n\n> 最简单的单页面(SPA)Entry入口，将main.js引入，并根据main.js中引用和依赖的模块开始解析\n\n    module.exports = {\n      entry: \'./main.js\'\n    }\n    \n\n> 多页面(MPA)Entry入口，将多个文件引入，当然一般是读取指定文件夹内的入口文件，然后引入\n\n    entry: {\n      home: \"./home.js\",\n      about: \"./about.js\",\n      contact: \"./contact.js\"\n    }\n    \n\n如果是单页面(传入的是字符串或字符串数组)，则chunk会被命名为main，如果是多页面(传入一个对象)，则每个键(key)会是chunk的名称，描述了chunk的入口起点\n\n##### 2.Output\n\n> Object 指示webpack如何去输出，以及在哪里输出你的bundle、asset 和其他你所打包或使用 webpack 载入的任何内容\n\n*   path：输出目录对应一个绝对路径\n    \n        path: path.resolve(__dirname, \'dist\')\n        \n    \n*   pathinfo：boolean 默认false作用是告诉webpack在bundle中引入所包含模块信息的相关注释，不应用于生产环境(production)，对开发环境(development)极其有用\n    \n*   publicPath：主要作用是针对打包后的文件里面的静态文件路径处理\n    \n*   filename：定义每个输出bundle的名称，这些bundle将写入output.path选项指定的目录下，对于单入口Entry，filename是一个静态名称\n    \n        filename: \"bundle.js\"\n        \n    \n    但是在webpack中我们会用到代码拆分、各种插件plugin或多入口Entry创建多个bundle，这样我们就应该给每个bundle一个唯一的名称\n    \n        filename: \"[name].bundle.js\"\n        \n    \n    使用内部chunk id\n    \n        filename: \"[id].bundle.js\"\n        \n    \n    唯一hash生成\n    \n        filename: \"[name].[hash].bundle.js\"\n        \n    \n    使用基于每个 chunk 内容的 hash\n    \n        filename: \"[chunkhash].bundle.js\"\n        \n    \n\n##### 3.Module模块\n\n> 处理项目中应用的不同模块，主要配置皆在Rules中，匹配到请求的规则数组，这些规则能够对模块应用loader，或者修改解析器parser\n\n*   Module.noParse： 防止webpack解析的时候，将规则匹配成功的文件进行解析和忽略大型的library来对性能的优化，在被忽略的文件中不应该含有import、require和define的调用\n    \n        module.exports = {\n          module: {\n            rules: [],\n            noParse: function(content) {\n              return /jquery|lodash/.test(content) // 忽略jquery文件解析，直接编译打包\n            }\n          }\n        }\n        \n    \n*   Rules：创建模块时，匹配请求的规则数组\n    \n    *   Rule条件：resource(请求文件的绝对路径)、issuer(被请求资源的模块文件的绝对路径，导入时的位置)，比如一个文件A导入文件B，resource是/B，issuer是/A是导入文件时的位置，而不是真正的位置，在规则中，test/include/exclude/resource对resource匹配，而issuer只对issuer匹配\n        \n    *   Test/include/exclude/resource/issuer的用法和区别\n        \n            module.exports = {\n                modules: {\n                    rules: [\n                      {\n                        test: /\\.js?$/,\n                        include: [\n                          path.resolve(__dirname, \"app\")\n                        ],\n                        exclude: [\n                          path.resolve(__dirname, \"app/demo\")\n                        ],\n                        resource:{\n                          test: /\\.js?$/,\n                          include: path.resolve(__dirname, \"app\"),\n                          exclude: path.resolve(__dirname, \"app/demo\")\n                        },\n                        issuer: {\n                          test: /\\.js?$/,\n                          include: path.resolve(__dirname, \"app\"),\n                          exclude: path.resolve(__dirname, \"app/demo\")\n                        }\n                      }\n                    ]\n              }\n            }\n            \n        \n        test：一般是提供一个正则表达式或正则表达式的数组，绝对路径符合这个正则的则意味着满足这个条件\n        \n        include：是一个字符串或者字符串数组，指定目录中的文件需要走这个规则\n        \n        exclude：同样是一个字符串或者字符串数组，指定目录中的文件不需要走这个规则\n        \n        resource：就是对text/include/exclude的一个对象包装，和他们单独写没有区别\n        \n        issuer：和resource有异曲同工的作用，不过区别在于它是将这个rule应用于哪个文件以及这个文件所导入的所有依赖文件\n        \n    *   resourceQuery：和resource用法一样，不过针对的是匹配结果\'?\'后面的路径参数，可以调用resource中的text等\n        \n    *   oneOf：表示对该资源只应用第一个匹配的规则，一般结合resourceQuery\n        \n            {\n              test: /\\.(png|jpe?g|gif|svg)$/,\n              oneOf: [\n                {\n                  resourceQuery: /inline/, \n                  loader: \'url-loader\'\n                },\n                {\n                  loader: \'file-loader\'\n                }\n              ]\n            }\n            \n        \n        *   path/to/foo.png?inline: 会匹配url-loader\n        *   path/to/foo.png?other:会匹配file-loader\n        *   path/to/foo.png: 会匹配file-loader\n    *   useEntry：object包含着每一个loader并且对应loader的配置文件\n        \n            {\n              loader: \"css-loader\",\n              options: {\n                modules: true\n              }\n            }\n            \n        \n        options会传入loader，可以理解为loader的选项\n        \n    *   use：是对useEntry的集合，并且对每一个入口指定使用一个loader\n        \n            use: [\n              \'style-loader\',\n              {\n                loader: \'css-loader\',\n                options: {\n                  importLoaders: 1\n                }\n              },\n              {\n                loader: \'less-loader\',\n                options: {\n                  noIeCompat: true\n                }\n              }\n            ]\n            \n        \n\n##### 4.Resolve解析\n\n> 主要用来模块如何被解析，给webpack提供默认值\n\n*   alias：object主要用来让import和require调用更方便，设置初始路径\n    \n        module.exports = {\n         alias: {\n          Utilities: path.resolve(__dirname, \'src/utilities/\'),\n          Templates: path.resolve(__dirname, \'src/templates/\')\n         }   \n        }\n        // 最开始的import\n        import Utility from \'../../utilities/utility\';\n        // 配置完以后\n        import Utility from \'Utilities/utility\';\n        \n    \n*   enforceExtension：Boolean 默认false，表示引用不需要扩展名，为true时，import、require中引用必须加扩展名\n    \n*   extensions：Array 自动解析不需要扩展名\n    \n        extensions: [\".js\", \".json\"]  // .js、.json引入不需要扩展名\n        \n    \n*   modules：Array webpack解析模块的时候需要搜索的目录，一般用于优先搜索和非node_modules文件中的自定义模块\n    \n        modules: [path.resolve(__dirname, \"src\"), \"node_modules\"] //优先搜索src目录\n        \n    \n\n##### 5.Loader\n\n> 通过使用不同的Loader，Webpack可以要把不同的文件都转成JS文件,比如CSS、ES6/7、JSX等，一般用于module的use中\n\n    module: {\n      rules:[\n          {\n            test:/\\.css$/,\n            use:[\'style-loader\',\'css-loader\'],\n            include:path.join(__dirname,\'./src\'),\n            exclude:/node_modules/\n          }\n      ]      \n    }\n    \n\n具体相关loader需要查看你要引入的loader官方文档API，手写Loader会在下一篇文章具体介绍\n\n##### 6.Plugin插件\n\n> Array 扩展webpack，在webpack构建流程中的特定时机注入扩展逻辑来改变构建结果和想要做的事情，具体使用查看你引入的plugin官方文档，手写plugin会在后续文章中推出\n\n##### 7.webpack-dev-server\n\n> 开发中的server，webpack-dev-server可以快速搭建起本地服务，具体使用查看 [webpack-dev-server](https://link.juejin.im/?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fwebpack-dev-server)\n\n##### 8.Devtool\n\n> 此选项控制是否生成，以及如何生成，官方推荐 [SourceMapDevToolPlugin](https://link.juejin.im/?target=https%3A%2F%2Fdoc.webpack-china.org%2Fplugins%2Fsource-map-dev-tool-plugin) 和 [source-map-loader](https://link.juejin.im/?target=https%3A%2F%2Fdoc.webpack-china.org%2Floaders%2Fsource-map-loader) 建议看官方文档 [Devtool](https://link.juejin.im/?target=https%3A%2F%2Fdoc.webpack-china.org%2Fconfiguration%2Fdevtool%2F) 主要用来控制打包品质和在dev环境的调试便捷度和编译的快慢\n\n##### 9.Watch\n\n> webpack 可以监听文件变化，当它们修改后会重新编译和 [HotModuleReplacementPlugin](https://link.juejin.im/?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fwebpack-hot-middleware) 有相似之处，监听文件变动热启动\n\n### 4.配置webpack\n\nwebpack安装命令\n\n    npm install webpack webpack-cli -D\n    \n\nWebpack.config.js\n\n> 具体用到的plugin插件\n\n*   clean-webpack-plugin：用于打包前清空输出目录 [官方API](https://link.juejin.im/?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fclean-webpack-plugin)\n*   html-webpack-plugin：用于自动产出HTML和引用产出的资源 [官方API](https://link.juejin.im/?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fhtml-webpack-plugin)\n*   copy-webpack-plugin：用于拷贝静态资源，包括未被引用的资源 [官方API](https://link.juejin.im/?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fcopy-webpack-plugin)\n*   uglifyjs-webpack-plugin：用于压缩JS可以让输出的JS文件体积更小、加载更快、流量更省，还有混淆代码的加密功能 [官方API](https://link.juejin.im/?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fuglifyjs-webpack-plugin)\n*   extract-text-webpack-plugin：因为CSS的下载和JS可以并行,当一个HTML文件很大的时候，我们可以把CSS单独提取出来加载 [官方API](https://link.juejin.im/?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fextract-text-webpack-plugin)\n\n    const path = require(\'path\');\n    const webpack = require(\'webpack\');\n    const CleanWebpackPlugin = require(\'clean-webpack-plugin\');\n    const HtmlWebpackPlugin = require(\'html-webpack-plugin\');\n    const CopyWebpackPlugin = require(\'copy-webpack-plugin\');\n    const UglifyjsWebpackPlugin = require(\'uglifyjs-webpack-plugin\')\n    // npm i extract-text-webpack-plugin@next // @next可以安装下一个非正式版本\n    const ExtractTextWebpackPlugin = require(\'extract-text-webpack-plugin\');\n    let cssExtract = new ExtractTextWebpackPlugin({\n        filename: \'css/css.css\',\n        allChunks: true\n    });\n    let lessExtract = new ExtractTextWebpackPlugin(\'css/less.css\');\n    let sassExtract = new ExtractTextWebpackPlugin(\'css/sass.css\');\n    /**\n     * 有些时候我们希望把页面中的CSS文件单独拉出来保存加载\n     * extract-text-webpack-plugin\n     */\n    //let pages = [\'index\', \'base\'];\n    // pages = pages.map(page => new HtmlWebpackPlugin({\n    //     template: \'./src/index.html\',//指定产的HTML模板\n    //     filename: `${page}.html`,//产出的HTML文件名\n    //     title: `${page}`,\n    //     chunks: [\'common\', `${page}`],//在产出的HTML文件里引入哪些代码块\n    //     hash: true,// 会在引入的js里加入查询字符串避免缓存,\n    //     minify: {\n    //         removeAttributeQuotes: true\n    //     }\n    // }));\n    module.exports = {\n        //先找到每个入口(Entry)，然后从各个入口分别出发，找到依赖的模块(Module)，\n        //然后生成一个Chunk(代码块),最后会把Chunk写到文件系统中(Assets)   \n        entry: \'./src/main.js\',\n        output: {\n            path: path.join(__dirname, \'dist\'),//输出的文件夹，只能是绝对路径 \n            //name是entry名字main,hash根据打包后的文件内容计算出来的一个hash值\n            filename: \'[name].[hash].js\' //打包后的文件名\n        },\n        resolve: {\n            //引入模块的时候，可以不用扩展名 \n            extensions: [\".js\", \".less\", \".json\"],\n            alias: {//别名\n                \"bootstrap\": \"bootstrap/dist/css/bootstrap.css\"\n            }\n        },\n        //表示监控源文件的变化，当源文件发生改变后，则重新打包\n        watch: false,\n        watchOptions: {\n            ignored: /node_modules/,\n            poll: 1000,//每秒钟询问的次数\n            aggregateTimeout: 500//\n        },\n        //devtool: \'source-map\',//单独文件，可以定位到哪一列出错了\n        // devtool: \'cheap-module-source-map\',//单独文件，体积更小，但只能定位到哪一行出错\n        // devtool: \'eval-source-map\',//不会生成单独文件，\n        // devtool: \'cheap-module-eval-source-map\',//不会生成单独文件 只定位到行，体积更小\n        /*\n        loader有三种写法\n        use\n        loader\n        use+loader\n        * */\n        module: {\n            rules: [\n                {\n                    test: require.resolve(\'jquery\'),\n                    use: {\n                        loader: \'expose-loader\',\n                        options: \'$\'\n                    }\n                },\n                {\n                    test: /\\.js/,\n                    use: {\n                        loader: \'babel-loader\',\n                        query: {\n                            presets: [\"env\", \"stage-0\", \"react\"]\n                        }\n                    }\n                },\n                {\n                    //file-loader是解析图片地址，把图片从源位置拷贝到目标位置并且修改原引用地址\n                    //可以处理任意的二进制，bootstrap 里字体\n                    //url-loader可以在文件比较小的时候，直接变成base64字符串内嵌到页面中\n                    test: /\\.(png|jpg|gif|svg|bmp|eot|woff|woff2|ttf)/,\n                    loader: {\n                        loader: \'url-loader\',\n                        options: {\n                            limit: 5 * 1024,\n                            //指定拷贝文件的输出目录 \n                            outputPath: \'images/\'\n                        }\n                    }\n                },\n                {\n                    test: /\\.css$/,//转换文件的匹配正则\n                    //css-loader用来解析处理CSS文件中的url路径,要把CSS文件变成一个模块\n                    //style-loader 可以把CSS文件变成style标签插入head中\n                    //多个loader是有顺序要求的，从右往左写，因为转换的时候是从右往左转换\n                    //此插件先用css-loader处理一下css文件\n                    //如果压缩\n                    loader: cssExtract.extract({\n                        use: [\"css-loader?minimize\"]\n                    })\n                    //loader: [\"style-loader\", \"css-loader\", \"postcss-loader\"]\n                },\n                {\n                    test: /\\.less$/,\n                    loader: lessExtract.extract({\n                        use: [\"css-loader?minimize\", \"less-loader\"]\n                    })\n                    //use: [\"style-loader\", \"css-loader\", \"less-loader\"]\n                },\n                {\n                    test: /\\.scss$/,\n                    loader: sassExtract.extract({\n                        use: [\"css-loader?minimize\", \"sass-loader\"]\n                    })\n                    // use: [\"style-loader\", \"css-loader\", \"sass-loader\"]\n                },\n                {\n                    test: /\\.(html|htm)/,\n                    loader: \'html-withimg-loader\'\n                }\n            ]\n        },\n        plugins: [\n            //用来自动向模块内部注入变量\n            // new webpack.ProvidePlugin({\n            //     $: \'jquery\'\n            // }),\n            new UglifyjsWebpackPlugin(),\n            new CleanWebpackPlugin([path.join(__dirname, \'dist\')]),\n            //此插件可以自动产出html文件\n            new HtmlWebpackPlugin({\n                template: \'./src/index.html\',//指定产的HTML模板\n                filename: `index.html`,//产出的HTML文件名\n                title: \'index\',\n                hash: true,// 会在引入的js里加入查询字符串避免缓存,\n                minify: {\n                    removeAttributeQuotes: true\n                }\n            }),\n            new CopyWebpackPlugin([{\n                from: path.join(__dirname, \'public\'),\n                to: path.join(__dirname, \'dist\', \'public\')\n            }]),\n            cssExtract,\n            lessExtract,\n            sassExtract\n        ],\n        //配置此静态文件服务器，可以用来预览打包后项目\n        devServer: {\n            contentBase: \'./dist\',\n            host: \'localhost\',\n            port: 8000,\n            compress: true,//服务器返回给浏览器的时候是否启动gzip压缩\n        }\n    }\n    \n\n### 5.总结\n\n> 本篇偏向基础，能够搭建起简单的webpack配置，高级进阶会在后续文章推出，并且希望大家多去看官方API然后自我总结输出，只有将知识输出出来，才能更好的记忆和学习\n\n### 6.博客\n\n[魏燃技术博客](https://link.juejin.im/?target=http%3A%2F%2Fwww.ngaiwe.com)\n\n有任何问题可留言或者发送本人邮箱ngaiwe@126.com', 0, 1, 0),
(42, '2018-04-23 11:01:44.412118', '2018-04-23 11:01:44.412118', '【SNF-A】Angular CLI 增加了 library 支持', '类别新增功能／SplendidNewFeature置信度Announcement起始时间2018-04-09内容AngularCLI是Angular提供的官方开发工具，不过一直以来只支持「应用」的开发，而并未提供「类库」的开发支持。继Schematics之后，AngularDevkit又推出了新的抽象层Architect，用于定义应用构建过程。而原有基于Webpack的构建方式也就成为了Architect的一个实现，叫做BuildAngular，也是AngularCLI项目默认所使用的Architect。', '', 'https://zhuanlan.zhihu.com/p/35709453', '<h2>类别</h2><p>新增功能／Splendid New Feature</p><h2>置信度</h2><p>Announcement</p><h2>起始时间</h2><p>2018-04-09</p><h2>内容</h2><p>Angular CLI 是 Angular 提供的官方开发工具，不过一直以来只支持「应用」的开发，而并未提供「类库」的开发支持。</p><p>继 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/angular/devkit/tree/master/packages/angular_devkit/schematics\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Schematics</a> 之后，Angular Devkit 又推出了新的抽象层 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/angular/devkit/tree/master/packages/angular_devkit/architect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Architect</a>，用于定义应用构建过程。而原有基于 Webpack 的构建方式也就成为了 Architect 的一个实现，叫做 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/angular/devkit/tree/master/packages/angular_devkit/build_angular\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Build Angular</a>，也是 Angular CLI 项目默认所使用的 Architect。</p><p>为了支持类库的构建，Angular Devkit 引入了社区实现的 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/angular/devkit/tree/master/packages/angular_devkit/build_ng_packagr\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Build NG Packagr</a>，为基于 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/dherges/ng-packagr\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ng-packagr</a> 所实现的 Architect。</p><p>同应用构建所不同，处于众所周知的性能原因，类库的构建并不使用 Webpack，而是 Rollup，从而能够得到高质量的 Bundle。构建结果遵循 <a href=\"https://link.zhihu.com/?target=https%3A//docs.google.com/document/d/1CZC2rcpxffTDfRDs6p1cfbmKNLA6x5O-NtkJglDaBVs/preview\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Angular Package Format</a> 以便于各种使用场景。</p><p>自 6.0.0-rc.2 版本（不是 Angular 版本）开始， Angular CLI 也引入了对于 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/angular/devkit/tree/master/packages/angular_devkit/build_ng_packagr\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Build NG Packagr</a> 的命令集成，仅需要使用：</p><div class=\"highlight\"><pre><code class=\"language-bash\"><span></span>ng generate library projectName\n</code></pre></div><p>即可在 projects/projectName 目录建立一个类库项目。</p><p>事实上，我们知道 generate 命令只是自由执行一段 Schematics，因此除了 library 这个 Shortcut 外，并没有对于 Build NG Packagr 特殊的地方，用于完全可以自行实现一个 Architect，就能在继续使用 Angular CLI 的前提下（不需要 eject）实现自定义的构建过程。</p><h2>相关链接</h2><ul><li>Angular CLI 6.0.0-rc.2 的 Release Log：<a href=\"https://link.zhihu.com/?target=https%3A//github.com/angular/angular-cli/releases/tag/v6.0.0-rc.2\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">angular/angular-cli</a></li><li>NG-Packagr：<a href=\"https://link.zhihu.com/?target=https%3A//github.com/dherges/ng-packagr\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">dherges/ng-packagr</a></li><li> Angular Package Format：<a href=\"https://link.zhihu.com/?target=https%3A//docs.google.com/document/d/1CZC2rcpxffTDfRDs6p1cfbmKNLA6x5O-NtkJglDaBVs/preview\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">docs.google.com/documen</span><span class=\"invisible\">t/d/1CZC2rcpxffTDfRDs6p1cfbmKNLA6x5O-NtkJglDaBVs/preview</span><span class=\"ellipsis\"></span></a></li><li>Schematics：<a href=\"https://link.zhihu.com/?target=https%3A//github.com/angular/devkit/tree/master/packages/angular_devkit/schematics\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">angular/devkit</a></li><li>Architect：<a href=\"https://link.zhihu.com/?target=https%3A//github.com/angular/devkit/tree/master/packages/angular_devkit/architect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">angular/devkit</a></li></ul>', '类别\n--\n\n新增功能／Splendid New Feature\n\n置信度\n---\n\nAnnouncement\n\n起始时间\n----\n\n2018-04-09\n\n内容\n--\n\nAngular CLI 是 Angular 提供的官方开发工具，不过一直以来只支持「应用」的开发，而并未提供「类库」的开发支持。\n\n继 [Schematics](https://link.zhihu.com/?target=https%3A//github.com/angular/devkit/tree/master/packages/angular_devkit/schematics) 之后，Angular Devkit 又推出了新的抽象层 [Architect](https://link.zhihu.com/?target=https%3A//github.com/angular/devkit/tree/master/packages/angular_devkit/architect)，用于定义应用构建过程。而原有基于 Webpack 的构建方式也就成为了 Architect 的一个实现，叫做 [Build Angular](https://link.zhihu.com/?target=https%3A//github.com/angular/devkit/tree/master/packages/angular_devkit/build_angular)，也是 Angular CLI 项目默认所使用的 Architect。\n\n为了支持类库的构建，Angular Devkit 引入了社区实现的 [Build NG Packagr](https://link.zhihu.com/?target=https%3A//github.com/angular/devkit/tree/master/packages/angular_devkit/build_ng_packagr)，为基于 [ng-packagr](https://link.zhihu.com/?target=https%3A//github.com/dherges/ng-packagr) 所实现的 Architect。\n\n同应用构建所不同，处于众所周知的性能原因，类库的构建并不使用 Webpack，而是 Rollup，从而能够得到高质量的 Bundle。构建结果遵循 [Angular Package Format](https://link.zhihu.com/?target=https%3A//docs.google.com/document/d/1CZC2rcpxffTDfRDs6p1cfbmKNLA6x5O-NtkJglDaBVs/preview) 以便于各种使用场景。\n\n自 6.0.0-rc.2 版本（不是 Angular 版本）开始， Angular CLI 也引入了对于 [Build NG Packagr](https://link.zhihu.com/?target=https%3A//github.com/angular/devkit/tree/master/packages/angular_devkit/build_ng_packagr) 的命令集成，仅需要使用：\n\n    ng generate library projectName\n    \n\n即可在 projects/projectName 目录建立一个类库项目。\n\n事实上，我们知道 generate 命令只是自由执行一段 Schematics，因此除了 library 这个 Shortcut 外，并没有对于 Build NG Packagr 特殊的地方，用于完全可以自行实现一个 Architect，就能在继续使用 Angular CLI 的前提下（不需要 eject）实现自定义的构建过程。\n\n相关链接\n----\n\n*   Angular CLI 6.0.0-rc.2 的 Release Log：[angular/angular-cli](https://link.zhihu.com/?target=https%3A//github.com/angular/angular-cli/releases/tag/v6.0.0-rc.2)\n*   NG-Packagr：[dherges/ng-packagr](https://link.zhihu.com/?target=https%3A//github.com/dherges/ng-packagr)\n*   Angular Package Format：[https://docs.google.com/document/d/1CZC2rcpxffTDfRDs6p1cfbmKNLA6x5O-NtkJglDaBVs/preview](https://link.zhihu.com/?target=https%3A//docs.google.com/document/d/1CZC2rcpxffTDfRDs6p1cfbmKNLA6x5O-NtkJglDaBVs/preview)\n*   Schematics：[angular/devkit](https://link.zhihu.com/?target=https%3A//github.com/angular/devkit/tree/master/packages/angular_devkit/schematics)\n*   Architect：[angular/devkit](https://link.zhihu.com/?target=https%3A//github.com/angular/devkit/tree/master/packages/angular_devkit/architect)', 0, 1, 0);
INSERT INTO `post` (`id`, `createAt`, `updateAt`, `title`, `description`, `thumb`, `url`, `html`, `markdown`, `views`, `status`, `push`) VALUES
(43, '2018-04-23 11:01:44.444650', '2018-04-23 11:01:44.444650', '浅入浅出图解domDIff', '虚拟DOM／domDiff我们常说的虚拟DOM是通过JS对象模拟出来的DOM节点,domDiff是通过特定算法计算出来一次操作所带来的DOM变化。react和vue中都使用了虚拟DOM，vue我只停留在使用层面就不多说了，react了解多一些，就借着react聊聊虚拟DOM。react中涉及到虚拟DOM的代码主要分为以下三部分，其中核心是第二步的domDiff算法：把render中的JSX(或者createElement这个API)转化成虚拟DOM状态或属性改变后重新计算虚拟DOM并生成一个补丁对象(do', 'https://user-gold-cdn.xitu.io/2018/4/17/162d2d2c6cb0850e?imageView2/1/w/1304/h/734/q/85/interlace/1', 'https://juejin.im/post/5ad550f06fb9a028b4118d99', '<h2 class=\"heading\" data-id=\"heading-0\">虚拟DOM／domDiff</h2>\n<p>      我们常说的虚拟DOM是通过JS对象模拟出来的<code>DOM</code>节点,domDiff是通过特定算法计算出来一次操作所带来的<code>DOM</code>变化。<br>\n      react和vue中都使用了虚拟DOM，vue我只停留在使用层面就不多说了，react了解多一些，就借着react聊聊虚拟DOM。<br>\n      react中涉及到虚拟DOM的代码主要分为以下三部分，其中核心是第二步的domDiff算法：</p>\n<ul>\n<li>把render中的JSX(或者createElement这个API)转化成虚拟DOM</li>\n<li>状态或属性改变后重新计算虚拟DOM并生成一个补丁对象(domDiff)</li>\n<li>通过这个补丁对象更新视图中的DOM节点</li>\n</ul>\n<h2 class=\"heading\" data-id=\"heading-1\">虚拟DOM不一定更快</h2>\n<p>      干前端的都知道<code>DOM</code>操作是性能杀手，因为操作<code>DOM</code>会引起页面的回流或者重绘。相比起来，通过多一些预先计算来减少<code>DOM</code>的操作要划算的多。<br>\n      但是，“使用虚拟DOM会更快”这句话并不一定适用于所有场景。例如：一个页面就有一个按钮，点击一下，数字加一，那肯定是直接操作<code>DOM</code>更快。使用虚拟DOM无非白白增加了计算量和代码量。即使是复杂情况，浏览器也会对我们的<code>DOM</code>操作进行优化，大部分浏览器会根据我们操作的时间和次数进行批量处理，所以直接操作<code>DOM</code>也未必很慢。<br>\n      那么为什么现在的框架都使用虚拟DOM呢？因为使用虚拟DOM可以提高代码的性能下限，并极大的优化大量操作DOM时产生的性能损耗。同时这些框架也保证了，即使在少数虚拟DOM不太给力的场景下，性能也在我们接受的范围内。<br>\n      而且，我们之所以喜欢react、vue等使用了虚拟DOM框架，不光是因为他们快，还有很多其他更重要的原因。例如react对函数式编程的友好，vue优秀的开发体验等，目前社区也有好多比较这两个框架并打口水战的，我觉着还是在两个都懂的情况下多探究一下原理更有意义一些。</p>\n<h2 class=\"heading\" data-id=\"heading-2\">实现domDiff的思路</h2>\n<p>      实现domDiff分为以下四步：</p>\n<ol>\n<li>用JS模拟真实DOM节点</li>\n<li>把虚拟DOM转换成真实DOM插入页面中</li>\n<li>发生变化时，比较两棵树的差异，生成差异对象</li>\n<li>根据差异对象更新真实DOM</li>\n</ol>\n<p>      设计师的老本行不能忘，看我画张图：</p>\n<p></p><figure><img class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2018/4/17/162d2e734988eab2?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"1280\" data-height=\"658\" src=\"https://user-gold-cdn.xitu.io/2018/4/17/162d2e734988eab2?imageView2/0/w/1280/h/960/ignore-error/1\"><figcaption></figcaption></figure><p></p>\n<p>      解释一下这张图：<br>\n      首先看第一个红色色块，这里说的是把真实<code>DOM</code>映射为虚拟<code>DOM</code>，其实在react中没有这个过程，我们直接写的就是虚拟DOM(JSX)，只是这个虚拟<code>DOM</code>代表着真实<code>DOM</code>。<br>\n      当虚拟DOM变化时，例如上图，它的第三个<code>p</code>和第二个<code>p</code>中的<code>son2</code>被删除了。这个时候我们会根据前后的变化计算出一个差异对象<code>patches</code>。<br>\n      这个差异对象的key值就是老的<code>DOM</code>节点遍历时的索引，用这个索引我们可以找到那个节点。属性值是记录的变化，这里是<code>remove</code>，代表删除。<br>\n      最后，根据<code>patches</code>中每一项的索引去对应的位置修改老的<code>DOM</code>节点。</p>\n<h2 class=\"heading\" data-id=\"heading-3\">代码如何实现呢？</h2>\n<h4 class=\"heading\" data-id=\"heading-4\">通过虚拟DOM创建真实DOM</h4>\n<p>      下面这段代码是入口文件，我们模拟了一个虚拟DOM叫<code>oldEle</code>，我们这里是写死的。而在react中，是通过babel解析JSX语法得到一个抽象语法树（AST），进而生成虚拟DOM。如果对babel转换感兴趣，可以看看另一篇文章<a href=\"https://link.juejin.im/?target=https%3A%2F%2Fjuejin.im%2Fpost%2F5ac1c5bf518825558949f898\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">入门babel--实现一个es6的class转换器</a>。</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">import { createElement } from <span class=\"hljs-string\">\'./createElement\'</span>\n\n<span class=\"hljs-built_in\">let</span> oldEle = createElement(<span class=\"hljs-string\">\'div\'</span>, { class: <span class=\"hljs-string\">\'father\'</span> }, [\n    createElement(<span class=\"hljs-string\">\'h1\'</span>, { style:<span class=\"hljs-string\">\'color:red\'</span> }, [<span class=\"hljs-string\">\'son1\'</span>]),\n    createElement(<span class=\"hljs-string\">\'h2\'</span>, { style:<span class=\"hljs-string\">\'color:blue\'</span> }, [<span class=\"hljs-string\">\'son2\'</span>]),\n    createElement(<span class=\"hljs-string\">\'h3\'</span>, { style:<span class=\"hljs-string\">\'color:red\'</span> }, [<span class=\"hljs-string\">\'son3\'</span>])\n])\ndocument.body.appendChild(oldEle.render())\n</code></pre><p>      下面这个文件导出了<code>createElement</code>方法。它其实就是<code>new</code>了一个<code>Element</code>类,调用这个类的<code>render</code>方法可以把虚拟<code>DOM</code>转换为真实<code>DOM</code>。</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">class Element {\n    constructor(tagName, attrs, childs) {\n        this.tagName = tagName\n        this.attrs = attrs\n        this.childs = childs\n    }\n    <span class=\"hljs-function\"><span class=\"hljs-title\">render</span></span>() {\n        <span class=\"hljs-built_in\">let</span> element = document.createElement(this.tagName)\n        <span class=\"hljs-built_in\">let</span> attrs = this.attrs\n        <span class=\"hljs-built_in\">let</span> childs = this.childs\n        //设置属性\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">let</span> attr <span class=\"hljs-keyword\">in</span> attrs) {\n            <span class=\"hljs-built_in\">set</span>Attr(element, attr, attrs[attr])\n        }\n        //先序深度优先遍历子创建并插入子节点\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">let</span> i = 0; i < childs.length; i++) {\n            <span class=\"hljs-built_in\">let</span> child = childs[i]\n            console.log(111, child instanceof Element)\n            <span class=\"hljs-built_in\">let</span> childElement = child instanceof Element ? child.render() : document.createTextNode(child)\n            element.appendChild(childElement)\n        }\n        <span class=\"hljs-built_in\">return</span> element\n    }\n}\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-built_in\">set</span>Attr(ele, attr, value) {\n    switch (attr) {\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">\'style\'</span>:\n            ele.style.cssText = value\n            <span class=\"hljs-built_in\">break</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">\'value\'</span>:\n            <span class=\"hljs-built_in\">let</span> tageName = ele.tagName.toLowerCase()\n            <span class=\"hljs-keyword\">if</span> (tagName == <span class=\"hljs-string\">\'input\'</span> || tagName == <span class=\"hljs-string\">\'textarea\'</span>) {\n                ele.value = value\n            } <span class=\"hljs-keyword\">else</span> {\n                ele.setAttribute(attr, value)\n            }\n            <span class=\"hljs-built_in\">break</span>;\n        default:\n            ele.setAttribute(attr, value)\n            <span class=\"hljs-built_in\">break</span>;\n    }\n}\n<span class=\"hljs-keyword\">function</span> createElement(tagName, props, child) {\n    <span class=\"hljs-built_in\">return</span> new Element(tagName, props, child)\n}\nmodule.exports = { createElement }\n</code></pre><p>      现在这段代码已经可以跑起来了，执行以后的结果如下图：</p>\n<p></p><figure><img class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2018/4/17/162d14734c15ca59?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"1280\" data-height=\"493\" src=\"https://user-gold-cdn.xitu.io/2018/4/17/162d14734c15ca59?imageView2/0/w/1280/h/960/ignore-error/1\"><figcaption></figcaption></figure><p></p>\n<h4 class=\"heading\" data-id=\"heading-5\">继续看domDIff算法</h4>\n<pre><code class=\"hljs bash\" lang=\"bash\">//keyIndex记录遍历顺序\n<span class=\"hljs-built_in\">let</span> keyIndex = 0\n<span class=\"hljs-keyword\">function</span> diff(oldEle, newEle) {\n    <span class=\"hljs-built_in\">let</span> patches = {}\n    keyIndex = 0\n    walk(patches, 0, oldEle, newEle)\n    <span class=\"hljs-built_in\">return</span> patches\n}\n//分析变化\n<span class=\"hljs-keyword\">function</span> walk(patches, index, oldEle, newEle) {\n    <span class=\"hljs-built_in\">let</span> currentPatches = []\n    //这里应该有很多的判断类型，这里只处理了删除的情况...\n    <span class=\"hljs-keyword\">if</span> (!newEle) {\n        currentPatches.push({ <span class=\"hljs-built_in\">type</span>: <span class=\"hljs-string\">\'remove\'</span> })\n    }\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (oldEle.tagName == newEle.tagName) {\n        //比较儿子们\n        walkChild(patches, currentPatches, oldEle.childs, newEle.childs)\n    }\n    //判断当前节点是否有改变，有的话把补丁放入补丁集合中\n    <span class=\"hljs-keyword\">if</span> (currentPatches.length) {\n        patches[index] = currentPatches\n    }\n}\n<span class=\"hljs-keyword\">function</span> walkChild(patches, currentPatches, oldChilds, newChilds) {\n    <span class=\"hljs-keyword\">if</span> (oldChilds) {\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">let</span> i = 0; i < oldChilds.length; i++) {\n            <span class=\"hljs-built_in\">let</span> oldChild = oldChilds[i]\n            <span class=\"hljs-built_in\">let</span> newChild = newChilds[i]\n            walk(patches, ++keyIndex, oldChild, newChild)\n        }\n    }\n}\nmodule.exports = { diff }\n</code></pre><p>      上面这段代码就是domDiff算法的超级简化版本：</p>\n<ul>\n<li>首先声明一个变量记录遍历的顺序</li>\n<li>执行walk方法分析变化，如果两个元素tagName相同，递归遍历子节点</li>\n</ul>\n<p>      其实walk中应该有大量的逻辑，我只处理了一种情况，就是元素被删除。其实还应该有添加、替换等各种情况，同时涉及到大量的边界检查。真正的domDiff算法很复杂，它的复杂度应该是O(n3),react为了把复杂度降低到线性而做了一系列的妥协。<br>\n      我这里只是选取一种情况做了演示，有兴趣的可以看看源码或者搜索一些相关的文章。这篇文章毕竟叫“浅入浅出”，非常浅……</p>\n<p>      好，那我们执行这个算法看看效果：</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">import { createElement } from <span class=\"hljs-string\">\'./createElement\'</span>\nimport { diff } from <span class=\"hljs-string\">\'./diff\'</span>\n\n<span class=\"hljs-built_in\">let</span> oldEle = createElement(<span class=\"hljs-string\">\'div\'</span>, { class: <span class=\"hljs-string\">\'father\'</span> }, [\n    createElement(<span class=\"hljs-string\">\'h1\'</span>, { style: <span class=\"hljs-string\">\'color:red\'</span> }, [<span class=\"hljs-string\">\'son1\'</span>]),\n    createElement(<span class=\"hljs-string\">\'h2\'</span>, { style: <span class=\"hljs-string\">\'color:blue\'</span> }, [<span class=\"hljs-string\">\'son2\'</span>]),\n    createElement(<span class=\"hljs-string\">\'h3\'</span>, { style: <span class=\"hljs-string\">\'color:red\'</span> }, [<span class=\"hljs-string\">\'son3\'</span>])\n])\n<span class=\"hljs-built_in\">let</span> newEle = createElement(<span class=\"hljs-string\">\'div\'</span>, { class: <span class=\"hljs-string\">\'father\'</span> }, [\n    createElement(<span class=\"hljs-string\">\'h1\'</span>, { style: <span class=\"hljs-string\">\'color:red\'</span> }, [<span class=\"hljs-string\">\'son1\'</span>]),\n    createElement(<span class=\"hljs-string\">\'h2\'</span>, { style: <span class=\"hljs-string\">\'color:blue\'</span> }, [])\n])\nconsole.log(diff(oldEle, newEle))\n</code></pre><p>      我在入口文件中新创建了一个元素，用来代表被更改之后的虚拟DOM,它有两个元素被删除了，一个<code>h3</code>、一个文本节点<code>son2</code>，理论上应该有两条记录，执行代码我们看下：<br></p>\n<p></p><figure><img class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2018/4/17/162d1497b9cf4871?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"1088\" data-height=\"452\" src=\"https://user-gold-cdn.xitu.io/2018/4/17/162d1497b9cf4871?imageView2/0/w/1280/h/960/ignore-error/1\"><figcaption></figcaption></figure><p></p>\n<p>      我们看到，输出的<code>patches</code>对象里有两个属性，属性名是这个元素的遍历序号、属性值是记录的信息，我们就是通过序号去遍历找到老的<code>DOM</code>节点，通过属性值里的信息来做相应的更新。</p>\n<h4 class=\"heading\" data-id=\"heading-6\">更新视图</h4>\n<p>      下面我们看如何通过得到的<code>patches</code>对象更新视图：</p>\n<pre><code class=\"hljs bash\" lang=\"bash\"><span class=\"hljs-built_in\">let</span> index = 0;\n<span class=\"hljs-built_in\">let</span> allPatches;\n<span class=\"hljs-keyword\">function</span> patch(root, patches) {\n    allPatches = patches\n    walk(root)\n}\n<span class=\"hljs-keyword\">function</span> walk(root) {\n    <span class=\"hljs-built_in\">let</span> currentPatches = allPatches[index]\n    index++\n    (root.childNodes || []) && root.childNodes.forEach(child => {\n        walk(child)\n    })\n    <span class=\"hljs-keyword\">if</span> (currentPatches) {\n        <span class=\"hljs-keyword\">do</span>Patch(root, currentPatches)\n    }\n}\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-keyword\">do</span>Patch(ele, currentPatches) {\n    currentPatches.forEach(currentPatch => {\n        <span class=\"hljs-keyword\">if</span> (currentPatch.type == <span class=\"hljs-string\">\'remove\'</span>) {\n            ele.parentNode.removeChild(ele)\n        }\n    })\n}\nmodule.exports = { patch }\n</code></pre><p>      文件导出的<code>patch</code>方法有两个参数，<code>root</code>是真实的<code>DOM</code>节点，<code>patches</code>是补丁对象，我们用和遍历虚拟<code>DOM</code>同样的手段(先序深度优先)去遍历真实的节点，这很重要，因为我们是通过<code>patches</code>对象的<code>key</code>属性记录哪个节点发生了变化，相同的遍历手段可以保证我们的对应关系是正确的。<br>\n      <code>doPatch</code>方法很简单，判断如果<code>type</code>是“remove”，直接删掉该<code>DOM</code>节点。其实这个方法也不应该这么简单，它也应该处理很多事情，比如说删除、互换等，其实还应该判断属性的变化并做相应的处理。<br>\n      浅入浅出嘛，所以这些都没处理，我当然不会说我根本写不出来……<br>\n      现在我们应用一下这个<code>patch</code>方法：</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">import { createElement } from <span class=\"hljs-string\">\'./createElement\'</span>\nimport { diff } from <span class=\"hljs-string\">\'./diff\'</span>\nimport { patch } from <span class=\"hljs-string\">\'./patch\'</span>\n\n<span class=\"hljs-built_in\">let</span> oldEle = createElement(<span class=\"hljs-string\">\'div\'</span>, { class: <span class=\"hljs-string\">\'father\'</span> }, [\n    createElement(<span class=\"hljs-string\">\'h1\'</span>, { style: <span class=\"hljs-string\">\'color:red\'</span> }, [<span class=\"hljs-string\">\'son1\'</span>]),\n    createElement(<span class=\"hljs-string\">\'h2\'</span>, { style: <span class=\"hljs-string\">\'color:blue\'</span> }, [<span class=\"hljs-string\">\'son2\'</span>]),\n    createElement(<span class=\"hljs-string\">\'h3\'</span>, { style: <span class=\"hljs-string\">\'color:green\'</span> }, [<span class=\"hljs-string\">\'son3\'</span>])\n])\n<span class=\"hljs-built_in\">let</span> newEle = createElement(<span class=\"hljs-string\">\'div\'</span>, { class: <span class=\"hljs-string\">\'father\'</span> }, [\n    createElement(<span class=\"hljs-string\">\'h1\'</span>, { style: <span class=\"hljs-string\">\'color:red\'</span> }, [<span class=\"hljs-string\">\'son1\'</span>]),\n    createElement(<span class=\"hljs-string\">\'h2\'</span>, { style: <span class=\"hljs-string\">\'color:green\'</span> }, [])\n])\n//这里应用了patch方法，给原始的root节点打了补丁，更新成了新的节点\n<span class=\"hljs-built_in\">let</span> root = oldEle.render()\n<span class=\"hljs-built_in\">let</span> patches = diff(oldEle, newEle)\npatch(root, patches)\ndocument.body.appendChild(root) \n</code></pre><p>      好，我们执行代码，看一下视图的变化：</p>\n<p></p><figure><img class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2018/4/17/162d14b37e35866e?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"962\" data-height=\"430\" src=\"https://user-gold-cdn.xitu.io/2018/4/17/162d14b37e35866e?imageView2/0/w/1280/h/960/ignore-error/1\"><figcaption></figcaption></figure><p></p>\n<p>      我们看到，h3标签不见了，h2标签还在，但是里面的文本节点son2不见了，这跟我们的预期是一样的。<br>\n      到这里，这个算法就已经写完了，上面贴出来的代码都是按模块贴出来的，并且是完整可以运行的。</p>\n<h2 class=\"heading\" data-id=\"heading-7\">未处理的问题</h2>\n<p>      这个算法还有很多没有处理的问题，例如：</p>\n<ul>\n<li>没有处理属性变化</li>\n<li>只处理了删除的情况，添加和替换都没有处理</li>\n<li>如果你删除了第一个元素，那么因为索引错位，后面的元素都会被认为是不同的而被替换掉，react中使用了key属性解决了这个问题，同时为了性能也做了妥协。</li>\n<li>当然还有很多很多优化</li>\n</ul>\n<h2 class=\"heading\" data-id=\"heading-8\">最后</h2>\n<p>      上面的代码只是把react中的核心思路简单实现了一下，只是供大家了解一下domDiff算法的思路，如我我的描述让你对domDiff产生了一点兴趣或者对你有一点帮助，我很高兴。</p>', '虚拟DOM／domDiff\n-------------\n\n      我们常说的虚拟DOM是通过JS对象模拟出来的`DOM`节点,domDiff是通过特定算法计算出来一次操作所带来的`DOM`变化。  \n      react和vue中都使用了虚拟DOM，vue我只停留在使用层面就不多说了，react了解多一些，就借着react聊聊虚拟DOM。  \n      react中涉及到虚拟DOM的代码主要分为以下三部分，其中核心是第二步的domDiff算法：\n\n*   把render中的JSX(或者createElement这个API)转化成虚拟DOM\n*   状态或属性改变后重新计算虚拟DOM并生成一个补丁对象(domDiff)\n*   通过这个补丁对象更新视图中的DOM节点\n\n虚拟DOM不一定更快\n----------\n\n      干前端的都知道`DOM`操作是性能杀手，因为操作`DOM`会引起页面的回流或者重绘。相比起来，通过多一些预先计算来减少`DOM`的操作要划算的多。  \n      但是，“使用虚拟DOM会更快”这句话并不一定适用于所有场景。例如：一个页面就有一个按钮，点击一下，数字加一，那肯定是直接操作`DOM`更快。使用虚拟DOM无非白白增加了计算量和代码量。即使是复杂情况，浏览器也会对我们的`DOM`操作进行优化，大部分浏览器会根据我们操作的时间和次数进行批量处理，所以直接操作`DOM`也未必很慢。  \n      那么为什么现在的框架都使用虚拟DOM呢？因为使用虚拟DOM可以提高代码的性能下限，并极大的优化大量操作DOM时产生的性能损耗。同时这些框架也保证了，即使在少数虚拟DOM不太给力的场景下，性能也在我们接受的范围内。  \n      而且，我们之所以喜欢react、vue等使用了虚拟DOM框架，不光是因为他们快，还有很多其他更重要的原因。例如react对函数式编程的友好，vue优秀的开发体验等，目前社区也有好多比较这两个框架并打口水战的，我觉着还是在两个都懂的情况下多探究一下原理更有意义一些。\n\n实现domDiff的思路\n------------\n\n      实现domDiff分为以下四步：\n\n1.  用JS模拟真实DOM节点\n2.  把虚拟DOM转换成真实DOM插入页面中\n3.  发生变化时，比较两棵树的差异，生成差异对象\n4.  根据差异对象更新真实DOM\n\n      设计师的老本行不能忘，看我画张图：\n\n![](https://user-gold-cdn.xitu.io/2018/4/17/162d2e734988eab2?imageView2/0/w/1280/h/960/ignore-error/1)\n\n      解释一下这张图：  \n      首先看第一个红色色块，这里说的是把真实`DOM`映射为虚拟`DOM`，其实在react中没有这个过程，我们直接写的就是虚拟DOM(JSX)，只是这个虚拟`DOM`代表着真实`DOM`。  \n      当虚拟DOM变化时，例如上图，它的第三个`p`和第二个`p`中的`son2`被删除了。这个时候我们会根据前后的变化计算出一个差异对象`patches`。  \n      这个差异对象的key值就是老的`DOM`节点遍历时的索引，用这个索引我们可以找到那个节点。属性值是记录的变化，这里是`remove`，代表删除。  \n      最后，根据`patches`中每一项的索引去对应的位置修改老的`DOM`节点。\n\n代码如何实现呢？\n--------\n\n#### 通过虚拟DOM创建真实DOM\n\n      下面这段代码是入口文件，我们模拟了一个虚拟DOM叫`oldEle`，我们这里是写死的。而在react中，是通过babel解析JSX语法得到一个抽象语法树（AST），进而生成虚拟DOM。如果对babel转换感兴趣，可以看看另一篇文章[入门babel--实现一个es6的class转换器](https://link.juejin.im/?target=https%3A%2F%2Fjuejin.im%2Fpost%2F5ac1c5bf518825558949f898)。\n\n    import { createElement } from \'./createElement\'\n    \n    let oldEle = createElement(\'div\', { class: \'father\' }, [\n        createElement(\'h1\', { style:\'color:red\' }, [\'son1\']),\n        createElement(\'h2\', { style:\'color:blue\' }, [\'son2\']),\n        createElement(\'h3\', { style:\'color:red\' }, [\'son3\'])\n    ])\n    document.body.appendChild(oldEle.render())\n    \n\n      下面这个文件导出了`createElement`方法。它其实就是`new`了一个`Element`类,调用这个类的`render`方法可以把虚拟`DOM`转换为真实`DOM`。\n\n    class Element {\n        constructor(tagName, attrs, childs) {\n            this.tagName = tagName\n            this.attrs = attrs\n            this.childs = childs\n        }\n        render() {\n            let element = document.createElement(this.tagName)\n            let attrs = this.attrs\n            let childs = this.childs\n            //设置属性\n            for (let attr in attrs) {\n                setAttr(element, attr, attrs[attr])\n            }\n            //先序深度优先遍历子创建并插入子节点\n            for (let i = 0; i < childs.length; i++) {\n                let child = childs[i]\n                console.log(111, child instanceof Element)\n                let childElement = child instanceof Element ? child.render() : document.createTextNode(child)\n                element.appendChild(childElement)\n            }\n            return element\n        }\n    }\n    function setAttr(ele, attr, value) {\n        switch (attr) {\n            case \'style\':\n                ele.style.cssText = value\n                break;\n            case \'value\':\n                let tageName = ele.tagName.toLowerCase()\n                if (tagName == \'input\' || tagName == \'textarea\') {\n                    ele.value = value\n                } else {\n                    ele.setAttribute(attr, value)\n                }\n                break;\n            default:\n                ele.setAttribute(attr, value)\n                break;\n        }\n    }\n    function createElement(tagName, props, child) {\n        return new Element(tagName, props, child)\n    }\n    module.exports = { createElement }\n    \n\n      现在这段代码已经可以跑起来了，执行以后的结果如下图：\n\n![](https://user-gold-cdn.xitu.io/2018/4/17/162d14734c15ca59?imageView2/0/w/1280/h/960/ignore-error/1)\n\n#### 继续看domDIff算法\n\n    //keyIndex记录遍历顺序\n    let keyIndex = 0\n    function diff(oldEle, newEle) {\n        let patches = {}\n        keyIndex = 0\n        walk(patches, 0, oldEle, newEle)\n        return patches\n    }\n    //分析变化\n    function walk(patches, index, oldEle, newEle) {\n        let currentPatches = []\n        //这里应该有很多的判断类型，这里只处理了删除的情况...\n        if (!newEle) {\n            currentPatches.push({ type: \'remove\' })\n        }\n        else if (oldEle.tagName == newEle.tagName) {\n            //比较儿子们\n            walkChild(patches, currentPatches, oldEle.childs, newEle.childs)\n        }\n        //判断当前节点是否有改变，有的话把补丁放入补丁集合中\n        if (currentPatches.length) {\n            patches[index] = currentPatches\n        }\n    }\n    function walkChild(patches, currentPatches, oldChilds, newChilds) {\n        if (oldChilds) {\n            for (let i = 0; i < oldChilds.length; i++) {\n                let oldChild = oldChilds[i]\n                let newChild = newChilds[i]\n                walk(patches, ++keyIndex, oldChild, newChild)\n            }\n        }\n    }\n    module.exports = { diff }\n    \n\n      上面这段代码就是domDiff算法的超级简化版本：\n\n*   首先声明一个变量记录遍历的顺序\n*   执行walk方法分析变化，如果两个元素tagName相同，递归遍历子节点\n\n      其实walk中应该有大量的逻辑，我只处理了一种情况，就是元素被删除。其实还应该有添加、替换等各种情况，同时涉及到大量的边界检查。真正的domDiff算法很复杂，它的复杂度应该是O(n3),react为了把复杂度降低到线性而做了一系列的妥协。  \n      我这里只是选取一种情况做了演示，有兴趣的可以看看源码或者搜索一些相关的文章。这篇文章毕竟叫“浅入浅出”，非常浅……\n\n      好，那我们执行这个算法看看效果：\n\n    import { createElement } from \'./createElement\'\n    import { diff } from \'./diff\'\n    \n    let oldEle = createElement(\'div\', { class: \'father\' }, [\n        createElement(\'h1\', { style: \'color:red\' }, [\'son1\']),\n        createElement(\'h2\', { style: \'color:blue\' }, [\'son2\']),\n        createElement(\'h3\', { style: \'color:red\' }, [\'son3\'])\n    ])\n    let newEle = createElement(\'div\', { class: \'father\' }, [\n        createElement(\'h1\', { style: \'color:red\' }, [\'son1\']),\n        createElement(\'h2\', { style: \'color:blue\' }, [])\n    ])\n    console.log(diff(oldEle, newEle))\n    \n\n      我在入口文件中新创建了一个元素，用来代表被更改之后的虚拟DOM,它有两个元素被删除了，一个`h3`、一个文本节点`son2`，理论上应该有两条记录，执行代码我们看下：  \n\n![](https://user-gold-cdn.xitu.io/2018/4/17/162d1497b9cf4871?imageView2/0/w/1280/h/960/ignore-error/1)\n\n      我们看到，输出的`patches`对象里有两个属性，属性名是这个元素的遍历序号、属性值是记录的信息，我们就是通过序号去遍历找到老的`DOM`节点，通过属性值里的信息来做相应的更新。\n\n#### 更新视图\n\n      下面我们看如何通过得到的`patches`对象更新视图：\n\n    let index = 0;\n    let allPatches;\n    function patch(root, patches) {\n        allPatches = patches\n        walk(root)\n    }\n    function walk(root) {\n        let currentPatches = allPatches[index]\n        index++\n        (root.childNodes || []) && root.childNodes.forEach(child => {\n            walk(child)\n        })\n        if (currentPatches) {\n            doPatch(root, currentPatches)\n        }\n    }\n    function doPatch(ele, currentPatches) {\n        currentPatches.forEach(currentPatch => {\n            if (currentPatch.type == \'remove\') {\n                ele.parentNode.removeChild(ele)\n            }\n        })\n    }\n    module.exports = { patch }\n    \n\n      文件导出的`patch`方法有两个参数，`root`是真实的`DOM`节点，`patches`是补丁对象，我们用和遍历虚拟`DOM`同样的手段(先序深度优先)去遍历真实的节点，这很重要，因为我们是通过`patches`对象的`key`属性记录哪个节点发生了变化，相同的遍历手段可以保证我们的对应关系是正确的。  \n      `doPatch`方法很简单，判断如果`type`是“remove”，直接删掉该`DOM`节点。其实这个方法也不应该这么简单，它也应该处理很多事情，比如说删除、互换等，其实还应该判断属性的变化并做相应的处理。  \n      浅入浅出嘛，所以这些都没处理，我当然不会说我根本写不出来……  \n      现在我们应用一下这个`patch`方法：\n\n    import { createElement } from \'./createElement\'\n    import { diff } from \'./diff\'\n    import { patch } from \'./patch\'\n    \n    let oldEle = createElement(\'div\', { class: \'father\' }, [\n        createElement(\'h1\', { style: \'color:red\' }, [\'son1\']),\n        createElement(\'h2\', { style: \'color:blue\' }, [\'son2\']),\n        createElement(\'h3\', { style: \'color:green\' }, [\'son3\'])\n    ])\n    let newEle = createElement(\'div\', { class: \'father\' }, [\n        createElement(\'h1\', { style: \'color:red\' }, [\'son1\']),\n        createElement(\'h2\', { style: \'color:green\' }, [])\n    ])\n    //这里应用了patch方法，给原始的root节点打了补丁，更新成了新的节点\n    let root = oldEle.render()\n    let patches = diff(oldEle, newEle)\n    patch(root, patches)\n    document.body.appendChild(root) \n    \n\n      好，我们执行代码，看一下视图的变化：\n\n![](https://user-gold-cdn.xitu.io/2018/4/17/162d14b37e35866e?imageView2/0/w/1280/h/960/ignore-error/1)\n\n      我们看到，h3标签不见了，h2标签还在，但是里面的文本节点son2不见了，这跟我们的预期是一样的。  \n      到这里，这个算法就已经写完了，上面贴出来的代码都是按模块贴出来的，并且是完整可以运行的。\n\n未处理的问题\n------\n\n      这个算法还有很多没有处理的问题，例如：\n\n*   没有处理属性变化\n*   只处理了删除的情况，添加和替换都没有处理\n*   如果你删除了第一个元素，那么因为索引错位，后面的元素都会被认为是不同的而被替换掉，react中使用了key属性解决了这个问题，同时为了性能也做了妥协。\n*   当然还有很多很多优化\n\n最后\n--\n\n      上面的代码只是把react中的核心思路简单实现了一下，只是供大家了解一下domDiff算法的思路，如我我的描述让你对domDiff产生了一点兴趣或者对你有一点帮助，我很高兴。', 0, 1, 0);
INSERT INTO `post` (`id`, `createAt`, `updateAt`, `title`, `description`, `thumb`, `url`, `html`, `markdown`, `views`, `status`, `push`) VALUES
(44, '2018-04-23 11:01:44.487124', '2018-04-23 11:01:44.487124', '面试官: 你了解前端路由吗?', '面试官系列(3):前端路由的实现往期面试官系列(1):如何实现深克隆面试官系列(2):EventBus的实现文章目录基于hash的前端路由实现基于hash的前端路由升级基于H5History的前端路由实现前言前端路由是现代SPA应用必备的功能,每个现代前端框架都有对应的实现,例如vue-router、react-router。我们不想探究vue-router或者react-router们的实现，因为不管是哪种路由无外乎用兼容性更好的hash实现或者是H5History实现，与框架几个只需要做相应的封装即可', 'https://user-gold-cdn.xitu.io/2018/4/8/162a3eebc081125b', 'https://juejin.im/post/5ac61da66fb9a028c71eae1b', '<h3 class=\"heading\" data-id=\"heading-0\">面试官系列(3): 前端路由的实现</h3>\n<hr>\n<h3 class=\"heading\" data-id=\"heading-1\">往期</h3>\n<ul>\n<li><a target=\"_blank\" href=\"https://link.juejin.im/?target=https%3A%2F%2Fjuejin.im%2Fpost%2F5abb55ee6fb9a028e33b7e0a\" rel=\"nofollow noopener noreferrer\">面试官系列(1): 如何实现深克隆</a></li>\n<li><a target=\"_blank\" href=\"https://link.juejin.im/?target=https%3A%2F%2Fjuejin.im%2Fpost%2F5ac2fb886fb9a028b86e328c\" rel=\"nofollow noopener noreferrer\">面试官系列(2): Event Bus的实现</a></li>\n</ul>\n<hr>\n<h3 class=\"heading\" data-id=\"heading-2\">文章目录</h3>\n<ol>\n<li>基于hash的前端路由实现</li>\n<li>基于hash的前端路由升级</li>\n<li>基于H5 History的前端路由实现</li>\n</ol>\n<hr>\n<h2 class=\"heading\" data-id=\"heading-3\"><strong>前言</strong></h2>\n<p><strong>前端路由</strong>是现代SPA应用必备的功能,每个现代前端框架都有对应的实现,例如vue-router、react-router。</p>\n<p>我们不想探究vue-router或者react-router们的实现，因为不管是哪种路由无外乎用兼容性更好的hash实现或者是H5 History实现，与框架几个只需要做相应的封装即可。</p>\n<blockquote>\n<p><strong>提前声明:</strong> 我们没有对传入的参数进行及时判断而规避错误,也没有考虑兼容性问题,仅仅对核心方法进行了实现.</p>\n</blockquote>\n<hr>\n<h3 class=\"heading\" data-id=\"heading-4\">1.hash路由</h3>\n<p>hash路由一个明显的标志是带有<code>#</code>,我们主要是通过监听url中的hash变化来进行路由跳转。</p>\n<p>hash的优势就是兼容性更好,在老版IE中都有运行,问题在于url中一直存在<code>#</code>不够美观,而且hash路由更像是Hack而非标准,相信随着发展更加标准化的<strong>History API</strong>会逐步蚕食掉hash路由的市场。\n</p><figure><img class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2018/4/7/1629f23b36a32eda?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"209\" data-height=\"20\" src=\"https://user-gold-cdn.xitu.io/2018/4/7/1629f23b36a32eda?imageView2/0/w/1280/h/960/ignore-error/1\"><figcaption></figcaption></figure><p></p>\n<h4 class=\"heading\" data-id=\"heading-5\">1.1 初始化class</h4>\n<p>我们用<code>Class</code>关键字初始化一个路由.</p>\n<pre><code class=\"hljs javascript\" lang=\"javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Routers</span> </span>{\n  <span class=\"hljs-keyword\">constructor</span>() {\n    <span class=\"hljs-comment\">// 以键值对的形式储存路由</span>\n    <span class=\"hljs-keyword\">this</span>.routes = {};\n    <span class=\"hljs-comment\">// 当前路由的URL</span>\n    <span class=\"hljs-keyword\">this</span>.currentUrl = <span class=\"hljs-string\">\'\'</span>;\n  }\n}\n</code></pre><h4 class=\"heading\" data-id=\"heading-6\">1.2 实现路由hash储存与执行</h4>\n<p>在初始化完毕后我们需要思考两个问题:</p>\n<ol>\n<li>将路由的hash以及对应的callback函数储存</li>\n<li>触发路由hash变化后,执行对应的callback函数</li>\n</ol>\n<pre><code class=\"hljs javascript\" lang=\"javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Routers</span> </span>{\n  <span class=\"hljs-keyword\">constructor</span>() {\n    <span class=\"hljs-keyword\">this</span>.routes = {};\n    <span class=\"hljs-keyword\">this</span>.currentUrl = <span class=\"hljs-string\">\'\'</span>;\n  }\n  <span class=\"hljs-comment\">// 将path路径与对应的callback函数储存</span>\n  route(path, callback) {\n    <span class=\"hljs-keyword\">this</span>.routes[path] = callback || <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{};\n  }\n  <span class=\"hljs-comment\">// 刷新</span>\n  refresh() {\n    <span class=\"hljs-comment\">// 获取当前URL中的hash路径</span>\n    <span class=\"hljs-keyword\">this</span>.currentUrl = location.hash.slice(<span class=\"hljs-number\">1</span>) || <span class=\"hljs-string\">\'/\'</span>;\n    <span class=\"hljs-comment\">// 执行当前hash路径的callback函数</span>\n    <span class=\"hljs-keyword\">this</span>.routes[<span class=\"hljs-keyword\">this</span>.currentUrl]();\n  }\n}\n</code></pre><h4 class=\"heading\" data-id=\"heading-7\">1.3 监听对应事件</h4>\n<p>那么我们只需要在实例化<code>Class</code>的时候监听上面的事件即可.</p>\n<pre><code class=\"hljs javascript\" lang=\"javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Routers</span> </span>{\n  <span class=\"hljs-keyword\">constructor</span>() {\n    <span class=\"hljs-keyword\">this</span>.routes = {};\n    <span class=\"hljs-keyword\">this</span>.currentUrl = <span class=\"hljs-string\">\'\'</span>;\n    <span class=\"hljs-keyword\">this</span>.refresh = <span class=\"hljs-keyword\">this</span>.refresh.bind(<span class=\"hljs-keyword\">this</span>);\n    <span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">\'load\'</span>, <span class=\"hljs-keyword\">this</span>.refresh, <span class=\"hljs-literal\">false</span>);\n    <span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">\'hashchange\'</span>, <span class=\"hljs-keyword\">this</span>.refresh, <span class=\"hljs-literal\">false</span>);\n  }\n\n  route(path, callback) {\n    <span class=\"hljs-keyword\">this</span>.routes[path] = callback || <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{};\n  }\n\n  refresh() {\n    <span class=\"hljs-keyword\">this</span>.currentUrl = location.hash.slice(<span class=\"hljs-number\">1</span>) || <span class=\"hljs-string\">\'/\'</span>;\n    <span class=\"hljs-keyword\">this</span>.routes[<span class=\"hljs-keyword\">this</span>.currentUrl]();\n  }\n}\n</code></pre><p>对应效果如下:\n</p><figure><img class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2018/4/7/1629f6b9cb508a43?imageslim\" data-width=\"599\" data-height=\"61\" src=\"https://user-gold-cdn.xitu.io/2018/4/7/1629f6b9cb508a43?imageslim\"><figcaption></figcaption></figure><p></p>\n<p>完整示例</p><p class=\"codepen\" data-pen-title=\"KorqGx\" data-embed-version=\"2\" data-user=\"xiaomuzhu\" data-default-tab=\"html\" data-slug-hash=\"KorqGx\" data-theme-id=\"33015\" data-height=\"300\">点击这里 <a href=\"https://link.juejin.im/?target=https%3A%2F%2Fcodepen.io%2Fxiaomuzhu%2Fpen%2FKorqGx%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">hash router</a> by 寻找海蓝 (<a href=\"https://link.juejin.im/?target=https%3A%2F%2Fcodepen.io%2Fxiaomuzhu\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@xiaomuzhu</a>) on <a href=\"https://link.juejin.im/?target=https%3A%2F%2Fcodepen.io\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CodePen</a>.</p><p></p>\n\n<hr>\n<h3 class=\"heading\" data-id=\"heading-8\">2.增加回退功能</h3>\n<p>上一节我们只实现了简单的路由功能,没有我们常用的<strong>回退</strong>与<strong>前进</strong>功能,所以我们需要进行改造。</p>\n<h4 class=\"heading\" data-id=\"heading-9\">2.1 实现后退功能</h4>\n<p>我们在需要创建一个数组<code>history</code>来储存过往的hash路由例如<code>/blue</code>,并且创建一个指针<code>currentIndex</code>来随着<em>后退</em>和<em>前进</em>功能移动来指向不同的hash路由。</p>\n<pre><code class=\"hljs javascript\" lang=\"javascript\">\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Routers</span> </span>{\n  <span class=\"hljs-keyword\">constructor</span>() {\n    <span class=\"hljs-comment\">// 储存hash与callback键值对</span>\n    <span class=\"hljs-keyword\">this</span>.routes = {};\n    <span class=\"hljs-comment\">// 当前hash</span>\n    <span class=\"hljs-keyword\">this</span>.currentUrl = <span class=\"hljs-string\">\'\'</span>;\n    <span class=\"hljs-comment\">// 记录出现过的hash</span>\n    <span class=\"hljs-keyword\">this</span>.history = [];\n    <span class=\"hljs-comment\">// 作为指针,默认指向this.history的末尾,根据后退前进指向history中不同的hash</span>\n    <span class=\"hljs-keyword\">this</span>.currentIndex = <span class=\"hljs-keyword\">this</span>.history.length - <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">this</span>.refresh = <span class=\"hljs-keyword\">this</span>.refresh.bind(<span class=\"hljs-keyword\">this</span>);\n    <span class=\"hljs-keyword\">this</span>.backOff = <span class=\"hljs-keyword\">this</span>.backOff.bind(<span class=\"hljs-keyword\">this</span>);\n    <span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">\'load\'</span>, <span class=\"hljs-keyword\">this</span>.refresh, <span class=\"hljs-literal\">false</span>);\n    <span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">\'hashchange\'</span>, <span class=\"hljs-keyword\">this</span>.refresh, <span class=\"hljs-literal\">false</span>);\n  }\n\n  route(path, callback) {\n    <span class=\"hljs-keyword\">this</span>.routes[path] = callback || <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{};\n  }\n\n  refresh() {\n    <span class=\"hljs-keyword\">this</span>.currentUrl = location.hash.slice(<span class=\"hljs-number\">1</span>) || <span class=\"hljs-string\">\'/\'</span>;\n    <span class=\"hljs-comment\">// 将当前hash路由推入数组储存</span>\n    <span class=\"hljs-keyword\">this</span>.history.push(<span class=\"hljs-keyword\">this</span>.currentUrl);\n    <span class=\"hljs-comment\">// 指针向前移动</span>\n    <span class=\"hljs-keyword\">this</span>.currentIndex++;\n    <span class=\"hljs-keyword\">this</span>.routes[<span class=\"hljs-keyword\">this</span>.currentUrl]();\n  }\n  <span class=\"hljs-comment\">// 后退功能</span>\n  backOff() {\n    <span class=\"hljs-comment\">// 如果指针小于0的话就不存在对应hash路由了,因此锁定指针为0即可</span>\n    <span class=\"hljs-keyword\">this</span>.currentIndex <= <span class=\"hljs-number\">0</span>\n      ? (<span class=\"hljs-keyword\">this</span>.currentIndex = <span class=\"hljs-number\">0</span>)\n      : (<span class=\"hljs-keyword\">this</span>.currentIndex = <span class=\"hljs-keyword\">this</span>.currentIndex - <span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-comment\">// 随着后退,location.hash也应该随之变化</span>\n    location.hash = <span class=\"hljs-string\">`#<span class=\"hljs-subst\">${<span class=\"hljs-keyword\">this</span>.history[<span class=\"hljs-keyword\">this</span>.currentIndex]}</span>`</span>;\n    <span class=\"hljs-comment\">// 执行指针目前指向hash路由对应的callback</span>\n    <span class=\"hljs-keyword\">this</span>.routes[<span class=\"hljs-keyword\">this</span>.history[<span class=\"hljs-keyword\">this</span>.currentIndex]]();\n  }\n}\n</code></pre><p>我们看起来实现的不错,可是出现了Bug,在后退的时候我们往往需要点击两下。</p>\n<p class=\"codepen\" data-pen-title=\"mxQBod\" data-embed-version=\"2\" data-user=\"xiaomuzhu\" data-default-tab=\"js,result\" data-slug-hash=\"mxQBod\" data-theme-id=\"33015\" data-height=\"300\">点击查看Bug示例 <a href=\"https://link.juejin.im/?target=https%3A%2F%2Fcodepen.io%2Fxiaomuzhu%2Fpen%2FmxQBod%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">hash router</a> by 寻找海蓝 (<a href=\"https://link.juejin.im/?target=https%3A%2F%2Fcodepen.io%2Fxiaomuzhu\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@xiaomuzhu</a>) on <a href=\"https://link.juejin.im/?target=https%3A%2F%2Fcodepen.io\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CodePen</a>.</p>\n\n<p>问题在于,我们每次在后退都会执行相应的callback,这会触发<code>refresh()</code>执行,因此每次我们后退,<code>history</code>中都会被<code>push</code>新的路由hash,<code>currentIndex</code>也会向前移动,这显然不是我们想要的。</p>\n<pre><code class=\"hljs JavaScript\" lang=\"JavaScript\">  refresh() {\n    <span class=\"hljs-keyword\">this</span>.currentUrl = location.hash.slice(<span class=\"hljs-number\">1</span>) || <span class=\"hljs-string\">\'/\'</span>;\n    <span class=\"hljs-comment\">// 将当前hash路由推入数组储存</span>\n    <span class=\"hljs-keyword\">this</span>.history.push(<span class=\"hljs-keyword\">this</span>.currentUrl);\n    <span class=\"hljs-comment\">// 指针向前移动</span>\n    <span class=\"hljs-keyword\">this</span>.currentIndex++;\n    <span class=\"hljs-keyword\">this</span>.routes[<span class=\"hljs-keyword\">this</span>.currentUrl]();\n  }\n</code></pre><p>如图所示,我们每次点击后退,对应的指针位置和数组被打印出来\n</p><figure><img class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2018/4/7/162a01b9e9d6f502?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"494\" data-height=\"193\" src=\"https://user-gold-cdn.xitu.io/2018/4/7/162a01b9e9d6f502?imageView2/0/w/1280/h/960/ignore-error/1\"><figcaption></figcaption></figure><p></p>\n<h4 class=\"heading\" data-id=\"heading-10\">2.2 完整实现hash Router</h4>\n<p>我们必须做一个判断,如果是后退的话,我们只需要执行回调函数,不需要添加数组和移动指针。</p>\n<pre><code class=\"hljs JavaScript\" lang=\"JavaScript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Routers</span> </span>{\n  <span class=\"hljs-keyword\">constructor</span>() {\n    <span class=\"hljs-comment\">// 储存hash与callback键值对</span>\n    <span class=\"hljs-keyword\">this</span>.routes = {};\n    <span class=\"hljs-comment\">// 当前hash</span>\n    <span class=\"hljs-keyword\">this</span>.currentUrl = <span class=\"hljs-string\">\'\'</span>;\n    <span class=\"hljs-comment\">// 记录出现过的hash</span>\n    <span class=\"hljs-keyword\">this</span>.history = [];\n    <span class=\"hljs-comment\">// 作为指针,默认指向this.history的末尾,根据后退前进指向history中不同的hash</span>\n    <span class=\"hljs-keyword\">this</span>.currentIndex = <span class=\"hljs-keyword\">this</span>.history.length - <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">this</span>.refresh = <span class=\"hljs-keyword\">this</span>.refresh.bind(<span class=\"hljs-keyword\">this</span>);\n    <span class=\"hljs-keyword\">this</span>.backOff = <span class=\"hljs-keyword\">this</span>.backOff.bind(<span class=\"hljs-keyword\">this</span>);\n    <span class=\"hljs-comment\">// 默认不是后退操作</span>\n    <span class=\"hljs-keyword\">this</span>.isBack = <span class=\"hljs-literal\">false</span>;\n    <span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">\'load\'</span>, <span class=\"hljs-keyword\">this</span>.refresh, <span class=\"hljs-literal\">false</span>);\n    <span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">\'hashchange\'</span>, <span class=\"hljs-keyword\">this</span>.refresh, <span class=\"hljs-literal\">false</span>);\n  }\n\n  route(path, callback) {\n    <span class=\"hljs-keyword\">this</span>.routes[path] = callback || <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{};\n  }\n\n  refresh() {\n    <span class=\"hljs-keyword\">this</span>.currentUrl = location.hash.slice(<span class=\"hljs-number\">1</span>) || <span class=\"hljs-string\">\'/\'</span>;\n    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-keyword\">this</span>.isBack) {\n      <span class=\"hljs-comment\">// 如果不是后退操作,且当前指针小于数组总长度,直接截取指针之前的部分储存下来</span>\n      <span class=\"hljs-comment\">// 此操作来避免当点击后退按钮之后,再进行正常跳转,指针会停留在原地,而数组添加新hash路由</span>\n      <span class=\"hljs-comment\">// 避免再次造成指针的不匹配,我们直接截取指针之前的数组</span>\n      <span class=\"hljs-comment\">// 此操作同时与浏览器自带后退功能的行为保持一致</span>\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.currentIndex < <span class=\"hljs-keyword\">this</span>.history.length - <span class=\"hljs-number\">1</span>)\n        <span class=\"hljs-keyword\">this</span>.history = <span class=\"hljs-keyword\">this</span>.history.slice(<span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">this</span>.currentIndex + <span class=\"hljs-number\">1</span>);\n      <span class=\"hljs-keyword\">this</span>.history.push(<span class=\"hljs-keyword\">this</span>.currentUrl);\n      <span class=\"hljs-keyword\">this</span>.currentIndex++;\n    }\n    <span class=\"hljs-keyword\">this</span>.routes[<span class=\"hljs-keyword\">this</span>.currentUrl]();\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\'指针:\'</span>, <span class=\"hljs-keyword\">this</span>.currentIndex, <span class=\"hljs-string\">\'history:\'</span>, <span class=\"hljs-keyword\">this</span>.history);\n    <span class=\"hljs-keyword\">this</span>.isBack = <span class=\"hljs-literal\">false</span>;\n  }\n  <span class=\"hljs-comment\">// 后退功能</span>\n  backOff() {\n    <span class=\"hljs-comment\">// 后退操作设置为true</span>\n    <span class=\"hljs-keyword\">this</span>.isBack = <span class=\"hljs-literal\">true</span>;\n    <span class=\"hljs-keyword\">this</span>.currentIndex <= <span class=\"hljs-number\">0</span>\n      ? (<span class=\"hljs-keyword\">this</span>.currentIndex = <span class=\"hljs-number\">0</span>)\n      : (<span class=\"hljs-keyword\">this</span>.currentIndex = <span class=\"hljs-keyword\">this</span>.currentIndex - <span class=\"hljs-number\">1</span>);\n    location.hash = <span class=\"hljs-string\">`#<span class=\"hljs-subst\">${<span class=\"hljs-keyword\">this</span>.history[<span class=\"hljs-keyword\">this</span>.currentIndex]}</span>`</span>;\n    <span class=\"hljs-keyword\">this</span>.routes[<span class=\"hljs-keyword\">this</span>.history[<span class=\"hljs-keyword\">this</span>.currentIndex]]();\n  }\n}\n</code></pre><p class=\"codepen\" data-pen-title=\"VXVrxa\" data-embed-version=\"2\" data-user=\"xiaomuzhu\" data-default-tab=\"js,result\" data-slug-hash=\"VXVrxa\" data-theme-id=\"33015\" data-height=\"300\">查看完整示例 <a href=\"https://link.juejin.im/?target=https%3A%2F%2Fcodepen.io%2Fxiaomuzhu%2Fpen%2FVXVrxa%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Hash Router</a> by 寻找海蓝 (<a href=\"https://link.juejin.im/?target=https%3A%2F%2Fcodepen.io%2Fxiaomuzhu\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@xiaomuzhu</a>) on <a href=\"https://link.juejin.im/?target=https%3A%2F%2Fcodepen.io\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CodePen</a>.</p>\n\n<p>前进的部分就不实现了,思路我们已经讲得比较清楚了,可以看出来,hash路由这种方式确实有点繁琐,所以HTML5标准提供了History API供我们使用。</p>\n<hr>\n<h3 class=\"heading\" data-id=\"heading-11\">3. HTML5新路由方案</h3>\n<h4 class=\"heading\" data-id=\"heading-12\">3.1 History API</h4>\n<p>我们可以直接在浏览器中查询出History API的方法和属性。</p>\n<p></p><figure><img class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2018/4/8/162a3eebc081125b?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"300\" data-height=\"384\" src=\"https://user-gold-cdn.xitu.io/2018/4/8/162a3eebc081125b?imageView2/0/w/1280/h/960/ignore-error/1\"><figcaption></figcaption></figure><p></p>\n<p>当然,我们常用的方法其实是有限的,如果想全面了解可以去MDN查询<a target=\"_blank\" href=\"https://link.juejin.im/?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FAPI%2FHistory\" rel=\"nofollow noopener noreferrer\">History API的资料</a>。</p>\n<p>我们只简单看一下常用的API</p>\n<pre><code class=\"hljs JavaScript\" lang=\"JavaScript\"><span class=\"hljs-built_in\">window</span>.history.back();       <span class=\"hljs-comment\">// 后退</span>\n<span class=\"hljs-built_in\">window</span>.history.forward();    <span class=\"hljs-comment\">// 前进</span>\n<span class=\"hljs-built_in\">window</span>.history.go(<span class=\"hljs-number\">-3</span>);       <span class=\"hljs-comment\">// 后退三个页面</span>\n\n</code></pre><p><code>history.pushState</code>用于在浏览历史中添加历史记录,但是并不触发跳转,此方法接受三个参数，依次为：</p>\n<blockquote>\n<p><code>state</code>:一个与指定网址相关的状态对象，<code>popstate</code>事件触发时，该对象会传入回调函数。如果不需要这个对象，此处可以填<code>null</code>。<br>\n<code>title</code>：新页面的标题，但是所有浏览器目前都忽略这个值，因此这里可以填<code>null</code>。<br>\n<code>url</code>：新的网址，必须与当前页面处在同一个域。浏览器的地址栏将显示这个网址。</p>\n</blockquote>\n<p><code>history.replaceState</code>方法的参数与<code>pushState</code>方法一模一样，区别是它修改浏览历史中当前纪录,而非添加记录,同样不触发跳转。</p>\n<p><code>popstate</code>事件,每当同一个文档的浏览历史（即history对象）出现变化时，就会触发popstate事件。</p>\n<p>需要注意的是，仅仅调用<code>pushState</code>方法或<code>replaceState</code>方法 ，并不会触发该事件，只有用户点击浏览器倒退按钮和前进按钮，或者使用 JavaScript 调用<code>back</code>、<code>forward</code>、<code>go</code>方法时才会触发。</p>\n<p>另外，该事件只针对同一个文档，如果浏览历史的切换，导致加载不同的文档，该事件也不会触发。</p>\n<blockquote>\n<p>以上API介绍选自<a target=\"_blank\" href=\"https://link.juejin.im/?target=https%3A%2F%2Fjavascript.ruanyifeng.com%2Fbom%2Fhistory.html%23toc0\" rel=\"nofollow noopener noreferrer\">history对象</a>,可以点击查看完整版,我们不想占用过多篇幅来介绍API。</p>\n</blockquote>\n<h4 class=\"heading\" data-id=\"heading-13\">3.2 新标准下路由的实现</h4>\n<p>上一节我们介绍了新标准的History API,相比于我们在Hash 路由实现的那些操作,很显然新标准让我们的实现更加方便和可读。</p>\n<p>所以一个mini路由实现起来其实很简单</p>\n<pre><code class=\"hljs JavaScript\" lang=\"JavaScript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Routers</span> </span>{\n  <span class=\"hljs-keyword\">constructor</span>() {\n    <span class=\"hljs-keyword\">this</span>.routes = {};\n    <span class=\"hljs-comment\">// 在初始化时监听popstate事件</span>\n    <span class=\"hljs-keyword\">this</span>._bindPopState();\n  }\n  <span class=\"hljs-comment\">// 初始化路由</span>\n  init(path) {\n    history.replaceState({<span class=\"hljs-attr\">path</span>: path}, <span class=\"hljs-literal\">null</span>, path);\n    <span class=\"hljs-keyword\">this</span>.routes[path] && <span class=\"hljs-keyword\">this</span>.routes[path]();\n  }\n  <span class=\"hljs-comment\">// 将路径和对应回调函数加入hashMap储存</span>\n  route(path, callback) {\n    <span class=\"hljs-keyword\">this</span>.routes[path] = callback || <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{};\n  }\n\n  <span class=\"hljs-comment\">// 触发路由对应回调</span>\n  go(path) {\n    history.pushState({<span class=\"hljs-attr\">path</span>: path}, <span class=\"hljs-literal\">null</span>, path);\n    <span class=\"hljs-keyword\">this</span>.routes[path] && <span class=\"hljs-keyword\">this</span>.routes[path]();\n  }\n  <span class=\"hljs-comment\">// 监听popstate事件</span>\n  _bindPopState() {\n    <span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">\'popstate\'</span>, e => {\n      <span class=\"hljs-keyword\">const</span> path = e.state && e.state.path;\n      <span class=\"hljs-keyword\">this</span>.routes[path] && <span class=\"hljs-keyword\">this</span>.routes[path]();\n    });\n  }\n}\n</code></pre><p class=\"codepen\" data-pen-title=\"QmJorQ\" data-embed-version=\"2\" data-user=\"xiaomuzhu\" data-default-tab=\"js,result\" data-slug-hash=\"QmJorQ\" data-theme-id=\"33015\" data-height=\"300\">点击查看H5路由 <a href=\"https://link.juejin.im/?target=https%3A%2F%2Fcodepen.io%2Fxiaomuzhu%2Fpen%2FQmJorQ%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">H5 Router</a> by 寻找海蓝 (<a href=\"https://link.juejin.im/?target=https%3A%2F%2Fcodepen.io%2Fxiaomuzhu\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@xiaomuzhu</a>) on <a href=\"https://link.juejin.im/?target=https%3A%2F%2Fcodepen.io\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CodePen</a>.</p>\n\n<hr>\n<h3 class=\"heading\" data-id=\"heading-14\">小结</h3>\n<p>我们大致探究了前端路由的两种实现方法,在没有兼容性要求的情况下显然符合标准的History API实现的路由是更好的选择。</p>\n<p>想更深入了解前端路由实现可以阅读<a target=\"_blank\" href=\"https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fvuejs%2Fvue-router%2Fblob%2Fdev%2Fsrc%2Findex.js\" rel=\"nofollow noopener noreferrer\">vue-router代码</a>，除去开发模式代码、注释和类型检测代码，核心代码并不多，适合阅读。</p>\n<hr>\n<h3 class=\"heading\" data-id=\"heading-15\">下期预告</h3>\n<p>下期准备一篇关于<strong>双向绑定</strong>的话题,因为许多人只知道<code>Object.definedProperty</code>,禁不住深究:</p>\n<ol>\n<li>同是<strong>数据劫持</strong>,与<code>Proxy</code>相比有何优劣？</li>\n<li>除了数据劫持可以实现双向绑定还有没有其他方法？</li>\n<li>其他方法(例如脏检测、Observable模式、数据模型等)与数据劫持相比优劣如何？</li>\n</ol>\n<p>由于涉及的框架和知识点过多,我开了一个头已经小2000字了,,在考虑要不要分<em>上下篇</em>发出来,不过我相信它解决你对双向绑定所有的疑问。</p>', '### 面试官系列(3): 前端路由的实现\n\n* * *\n\n### 往期\n\n*   [面试官系列(1): 如何实现深克隆](https://link.juejin.im/?target=https%3A%2F%2Fjuejin.im%2Fpost%2F5abb55ee6fb9a028e33b7e0a)\n*   [面试官系列(2): Event Bus的实现](https://link.juejin.im/?target=https%3A%2F%2Fjuejin.im%2Fpost%2F5ac2fb886fb9a028b86e328c)\n\n* * *\n\n### 文章目录\n\n1.  基于hash的前端路由实现\n2.  基于hash的前端路由升级\n3.  基于H5 History的前端路由实现\n\n* * *\n\n**前言**\n------\n\n**前端路由**是现代SPA应用必备的功能,每个现代前端框架都有对应的实现,例如vue-router、react-router。\n\n我们不想探究vue-router或者react-router们的实现，因为不管是哪种路由无外乎用兼容性更好的hash实现或者是H5 History实现，与框架几个只需要做相应的封装即可。\n\n> **提前声明:** 我们没有对传入的参数进行及时判断而规避错误,也没有考虑兼容性问题,仅仅对核心方法进行了实现.\n\n* * *\n\n### 1.hash路由\n\nhash路由一个明显的标志是带有`#`,我们主要是通过监听url中的hash变化来进行路由跳转。\n\nhash的优势就是兼容性更好,在老版IE中都有运行,问题在于url中一直存在`#`不够美观,而且hash路由更像是Hack而非标准,相信随着发展更加标准化的**History API**会逐步蚕食掉hash路由的市场。\n\n![](https://user-gold-cdn.xitu.io/2018/4/7/1629f23b36a32eda?imageView2/0/w/1280/h/960/ignore-error/1)\n\n#### 1.1 初始化class\n\n我们用`Class`关键字初始化一个路由.\n\n    class Routers {\n      constructor() {\n        // 以键值对的形式储存路由\n        this.routes = {};\n        // 当前路由的URL\n        this.currentUrl = \'\';\n      }\n    }\n    \n\n#### 1.2 实现路由hash储存与执行\n\n在初始化完毕后我们需要思考两个问题:\n\n1.  将路由的hash以及对应的callback函数储存\n2.  触发路由hash变化后,执行对应的callback函数\n\n    class Routers {\n      constructor() {\n        this.routes = {};\n        this.currentUrl = \'\';\n      }\n      // 将path路径与对应的callback函数储存\n      route(path, callback) {\n        this.routes[path] = callback || function() {};\n      }\n      // 刷新\n      refresh() {\n        // 获取当前URL中的hash路径\n        this.currentUrl = location.hash.slice(1) || \'/\';\n        // 执行当前hash路径的callback函数\n        this.routes[this.currentUrl]();\n      }\n    }\n    \n\n#### 1.3 监听对应事件\n\n那么我们只需要在实例化`Class`的时候监听上面的事件即可.\n\n    class Routers {\n      constructor() {\n        this.routes = {};\n        this.currentUrl = \'\';\n        this.refresh = this.refresh.bind(this);\n        window.addEventListener(\'load\', this.refresh, false);\n        window.addEventListener(\'hashchange\', this.refresh, false);\n      }\n    \n      route(path, callback) {\n        this.routes[path] = callback || function() {};\n      }\n    \n      refresh() {\n        this.currentUrl = location.hash.slice(1) || \'/\';\n        this.routes[this.currentUrl]();\n      }\n    }\n    \n\n对应效果如下:\n\n![](https://user-gold-cdn.xitu.io/2018/4/7/1629f6b9cb508a43?imageslim)\n\n完整示例\n\n点击这里 [hash router](https://link.juejin.im/?target=https%3A%2F%2Fcodepen.io%2Fxiaomuzhu%2Fpen%2FKorqGx%2F) by 寻找海蓝 ([@xiaomuzhu](https://link.juejin.im/?target=https%3A%2F%2Fcodepen.io%2Fxiaomuzhu)) on [CodePen](https://link.juejin.im/?target=https%3A%2F%2Fcodepen.io).\n\n* * *\n\n### 2.增加回退功能\n\n上一节我们只实现了简单的路由功能,没有我们常用的**回退**与**前进**功能,所以我们需要进行改造。\n\n#### 2.1 实现后退功能\n\n我们在需要创建一个数组`history`来储存过往的hash路由例如`/blue`,并且创建一个指针`currentIndex`来随着_后退_和_前进_功能移动来指向不同的hash路由。\n\n    \n    class Routers {\n      constructor() {\n        // 储存hash与callback键值对\n        this.routes = {};\n        // 当前hash\n        this.currentUrl = \'\';\n        // 记录出现过的hash\n        this.history = [];\n        // 作为指针,默认指向this.history的末尾,根据后退前进指向history中不同的hash\n        this.currentIndex = this.history.length - 1;\n        this.refresh = this.refresh.bind(this);\n        this.backOff = this.backOff.bind(this);\n        window.addEventListener(\'load\', this.refresh, false);\n        window.addEventListener(\'hashchange\', this.refresh, false);\n      }\n    \n      route(path, callback) {\n        this.routes[path] = callback || function() {};\n      }\n    \n      refresh() {\n        this.currentUrl = location.hash.slice(1) || \'/\';\n        // 将当前hash路由推入数组储存\n        this.history.push(this.currentUrl);\n        // 指针向前移动\n        this.currentIndex++;\n        this.routes[this.currentUrl]();\n      }\n      // 后退功能\n      backOff() {\n        // 如果指针小于0的话就不存在对应hash路由了,因此锁定指针为0即可\n        this.currentIndex <= 0\n          ? (this.currentIndex = 0)\n          : (this.currentIndex = this.currentIndex - 1);\n        // 随着后退,location.hash也应该随之变化\n        location.hash = `#${this.history[this.currentIndex]}`;\n        // 执行指针目前指向hash路由对应的callback\n        this.routes[this.history[this.currentIndex]]();\n      }\n    }\n    \n\n我们看起来实现的不错,可是出现了Bug,在后退的时候我们往往需要点击两下。\n\n点击查看Bug示例 [hash router](https://link.juejin.im/?target=https%3A%2F%2Fcodepen.io%2Fxiaomuzhu%2Fpen%2FmxQBod%2F) by 寻找海蓝 ([@xiaomuzhu](https://link.juejin.im/?target=https%3A%2F%2Fcodepen.io%2Fxiaomuzhu)) on [CodePen](https://link.juejin.im/?target=https%3A%2F%2Fcodepen.io).\n\n问题在于,我们每次在后退都会执行相应的callback,这会触发`refresh()`执行,因此每次我们后退,`history`中都会被`push`新的路由hash,`currentIndex`也会向前移动,这显然不是我们想要的。\n\n      refresh() {\n        this.currentUrl = location.hash.slice(1) || \'/\';\n        // 将当前hash路由推入数组储存\n        this.history.push(this.currentUrl);\n        // 指针向前移动\n        this.currentIndex++;\n        this.routes[this.currentUrl]();\n      }\n    \n\n如图所示,我们每次点击后退,对应的指针位置和数组被打印出来\n\n![](https://user-gold-cdn.xitu.io/2018/4/7/162a01b9e9d6f502?imageView2/0/w/1280/h/960/ignore-error/1)\n\n#### 2.2 完整实现hash Router\n\n我们必须做一个判断,如果是后退的话,我们只需要执行回调函数,不需要添加数组和移动指针。\n\n    class Routers {\n      constructor() {\n        // 储存hash与callback键值对\n        this.routes = {};\n        // 当前hash\n        this.currentUrl = \'\';\n        // 记录出现过的hash\n        this.history = [];\n        // 作为指针,默认指向this.history的末尾,根据后退前进指向history中不同的hash\n        this.currentIndex = this.history.length - 1;\n        this.refresh = this.refresh.bind(this);\n        this.backOff = this.backOff.bind(this);\n        // 默认不是后退操作\n        this.isBack = false;\n        window.addEventListener(\'load\', this.refresh, false);\n        window.addEventListener(\'hashchange\', this.refresh, false);\n      }\n    \n      route(path, callback) {\n        this.routes[path] = callback || function() {};\n      }\n    \n      refresh() {\n        this.currentUrl = location.hash.slice(1) || \'/\';\n        if (!this.isBack) {\n          // 如果不是后退操作,且当前指针小于数组总长度,直接截取指针之前的部分储存下来\n          // 此操作来避免当点击后退按钮之后,再进行正常跳转,指针会停留在原地,而数组添加新hash路由\n          // 避免再次造成指针的不匹配,我们直接截取指针之前的数组\n          // 此操作同时与浏览器自带后退功能的行为保持一致\n          if (this.currentIndex < this.history.length - 1)\n            this.history = this.history.slice(0, this.currentIndex + 1);\n          this.history.push(this.currentUrl);\n          this.currentIndex++;\n        }\n        this.routes[this.currentUrl]();\n        console.log(\'指针:\', this.currentIndex, \'history:\', this.history);\n        this.isBack = false;\n      }\n      // 后退功能\n      backOff() {\n        // 后退操作设置为true\n        this.isBack = true;\n        this.currentIndex <= 0\n          ? (this.currentIndex = 0)\n          : (this.currentIndex = this.currentIndex - 1);\n        location.hash = `#${this.history[this.currentIndex]}`;\n        this.routes[this.history[this.currentIndex]]();\n      }\n    }\n    \n\n查看完整示例 [Hash Router](https://link.juejin.im/?target=https%3A%2F%2Fcodepen.io%2Fxiaomuzhu%2Fpen%2FVXVrxa%2F) by 寻找海蓝 ([@xiaomuzhu](https://link.juejin.im/?target=https%3A%2F%2Fcodepen.io%2Fxiaomuzhu)) on [CodePen](https://link.juejin.im/?target=https%3A%2F%2Fcodepen.io).\n\n前进的部分就不实现了,思路我们已经讲得比较清楚了,可以看出来,hash路由这种方式确实有点繁琐,所以HTML5标准提供了History API供我们使用。\n\n* * *\n\n### 3\\. HTML5新路由方案\n\n#### 3.1 History API\n\n我们可以直接在浏览器中查询出History API的方法和属性。\n\n![](https://user-gold-cdn.xitu.io/2018/4/8/162a3eebc081125b?imageView2/0/w/1280/h/960/ignore-error/1)\n\n当然,我们常用的方法其实是有限的,如果想全面了解可以去MDN查询[History API的资料](https://link.juejin.im/?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FAPI%2FHistory)。\n\n我们只简单看一下常用的API\n\n    window.history.back();       // 后退\n    window.history.forward();    // 前进\n    window.history.go(-3);       // 后退三个页面\n    \n    \n\n`history.pushState`用于在浏览历史中添加历史记录,但是并不触发跳转,此方法接受三个参数，依次为：\n\n> `state`:一个与指定网址相关的状态对象，`popstate`事件触发时，该对象会传入回调函数。如果不需要这个对象，此处可以填`null`。  \n> `title`：新页面的标题，但是所有浏览器目前都忽略这个值，因此这里可以填`null`。  \n> `url`：新的网址，必须与当前页面处在同一个域。浏览器的地址栏将显示这个网址。\n\n`history.replaceState`方法的参数与`pushState`方法一模一样，区别是它修改浏览历史中当前纪录,而非添加记录,同样不触发跳转。\n\n`popstate`事件,每当同一个文档的浏览历史（即history对象）出现变化时，就会触发popstate事件。\n\n需要注意的是，仅仅调用`pushState`方法或`replaceState`方法 ，并不会触发该事件，只有用户点击浏览器倒退按钮和前进按钮，或者使用 JavaScript 调用`back`、`forward`、`go`方法时才会触发。\n\n另外，该事件只针对同一个文档，如果浏览历史的切换，导致加载不同的文档，该事件也不会触发。\n\n> 以上API介绍选自[history对象](https://link.juejin.im/?target=https%3A%2F%2Fjavascript.ruanyifeng.com%2Fbom%2Fhistory.html%23toc0),可以点击查看完整版,我们不想占用过多篇幅来介绍API。\n\n#### 3.2 新标准下路由的实现\n\n上一节我们介绍了新标准的History API,相比于我们在Hash 路由实现的那些操作,很显然新标准让我们的实现更加方便和可读。\n\n所以一个mini路由实现起来其实很简单\n\n    class Routers {\n      constructor() {\n        this.routes = {};\n        // 在初始化时监听popstate事件\n        this._bindPopState();\n      }\n      // 初始化路由\n      init(path) {\n        history.replaceState({path: path}, null, path);\n        this.routes[path] && this.routes[path]();\n      }\n      // 将路径和对应回调函数加入hashMap储存\n      route(path, callback) {\n        this.routes[path] = callback || function() {};\n      }\n    \n      // 触发路由对应回调\n      go(path) {\n        history.pushState({path: path}, null, path);\n        this.routes[path] && this.routes[path]();\n      }\n      // 监听popstate事件\n      _bindPopState() {\n        window.addEventListener(\'popstate\', e => {\n          const path = e.state && e.state.path;\n          this.routes[path] && this.routes[path]();\n        });\n      }\n    }\n    \n\n点击查看H5路由 [H5 Router](https://link.juejin.im/?target=https%3A%2F%2Fcodepen.io%2Fxiaomuzhu%2Fpen%2FQmJorQ%2F) by 寻找海蓝 ([@xiaomuzhu](https://link.juejin.im/?target=https%3A%2F%2Fcodepen.io%2Fxiaomuzhu)) on [CodePen](https://link.juejin.im/?target=https%3A%2F%2Fcodepen.io).\n\n* * *\n\n### 小结\n\n我们大致探究了前端路由的两种实现方法,在没有兼容性要求的情况下显然符合标准的History API实现的路由是更好的选择。\n\n想更深入了解前端路由实现可以阅读[vue-router代码](https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fvuejs%2Fvue-router%2Fblob%2Fdev%2Fsrc%2Findex.js)，除去开发模式代码、注释和类型检测代码，核心代码并不多，适合阅读。\n\n* * *\n\n### 下期预告\n\n下期准备一篇关于**双向绑定**的话题,因为许多人只知道`Object.definedProperty`,禁不住深究:\n\n1.  同是**数据劫持**,与`Proxy`相比有何优劣？\n2.  除了数据劫持可以实现双向绑定还有没有其他方法？\n3.  其他方法(例如脏检测、Observable模式、数据模型等)与数据劫持相比优劣如何？\n\n由于涉及的框架和知识点过多,我开了一个头已经小2000字了,,在考虑要不要分_上下篇_发出来,不过我相信它解决你对双向绑定所有的疑问。', 0, 1, 0);
INSERT INTO `post` (`id`, `createAt`, `updateAt`, `title`, `description`, `thumb`, `url`, `html`, `markdown`, `views`, `status`, `push`) VALUES
(45, '2018-04-23 11:01:44.517239', '2018-04-23 11:01:44.517239', '美团金融扫码付静态资源加载优化实践', '孙辉 李罡 ·2017-12-23 18:24扫码付项目是美团金融智能支付团队面向 C 端消费者推出的一款 H5 融合支付类的产品，消费者在商家消费之后，可使用多种 App 进行扫码支付，同时可对商家进行评价，支持美团、大众点评、微信、支付宝、美团钱包等多种', 'https://tech.meituan.com/img/%E7%BE%8E%E5%9B%A2%E9%87%91%E8%9E%8D-%E5%AD%99%E8%BE%89/1.png', 'https://tech.meituan.com/qrcodepayment-static-optimize.html', '<div><header class=\"article__title\"><p class=\"info\"><span class=\"nick\">&#x5B59;&#x8F89; &#x674E;&#x7F61;</span><span class=\"Separate\"> &#xB7;</span><span class=\"date\">2017-12-23 18:24</span></p></header><div class=\"article__content\"><p>&#x626B;&#x7801;&#x4ED8;&#x9879;&#x76EE;&#x662F;&#x7F8E;&#x56E2;&#x91D1;&#x878D;&#x667A;&#x80FD;&#x652F;&#x4ED8;&#x56E2;&#x961F;&#x9762;&#x5411; C &#x7AEF;&#x6D88;&#x8D39;&#x8005;&#x63A8;&#x51FA;&#x7684;&#x4E00;&#x6B3E; H5 &#x878D;&#x5408;&#x652F;&#x4ED8;&#x7C7B;&#x7684;&#x4EA7;&#x54C1;&#xFF0C;&#x6D88;&#x8D39;&#x8005;&#x5728;&#x5546;&#x5BB6;&#x6D88;&#x8D39;&#x4E4B;&#x540E;&#xFF0C;&#x53EF;&#x4F7F;&#x7528;&#x591A;&#x79CD; App &#x8FDB;&#x884C;&#x626B;&#x7801;&#x652F;&#x4ED8;&#xFF0C;&#x540C;&#x65F6;&#x53EF;&#x5BF9;&#x5546;&#x5BB6;&#x8FDB;&#x884C;&#x8BC4;&#x4EF7;&#xFF0C;&#x652F;&#x6301;&#x7F8E;&#x56E2;&#x3001;&#x5927;&#x4F17;&#x70B9;&#x8BC4;&#x3001;&#x5FAE;&#x4FE1;&#x3001;&#x652F;&#x4ED8;&#x5B9D;&#x3001;&#x7F8E;&#x56E2;&#x94B1;&#x5305;&#x7B49;&#x591A;&#x79CD; App&#xFF0C;&#x76EE;&#x524D;&#x4E1A;&#x52A1;&#x65E5;&#x5747; PV &#x5343;&#x4E07;&#x7EA7;&#x3002;&#x5982;&#x4E0B;&#x56FE;&#x6240;&#x793A;&#xFF1A;</p>\n<p><img src=\"https://tech.meituan.com/img/&#x7F8E;&#x56E2;&#x91D1;&#x878D;-&#x5B59;&#x8F89;/1.png\" alt=\"&#x626B;&#x7801;&#x4ED8;&#x9875;&#x9762;\"> </p>\n<p>&#x63A5;&#x5165;&#x626B;&#x7801;&#x4ED8;&#x7684;&#x5546;&#x5BB6;&#x5927;&#x591A;&#x6570;&#x4F4D;&#x4E8E;&#x8D2D;&#x7269;&#x4E2D;&#x5FC3;&#x3001;&#x5199;&#x5B57;&#x697C;&#x7B49;&#x4EBA;&#x53E3;&#x5BC6;&#x96C6;&#x7684;&#x5BA4;&#x5185;&#x7A7A;&#x95F4;&#x3002;&#x7F51;&#x7EDC;&#x94FE;&#x8DEF;&#x590D;&#x6742;&#x3001;&#x76F8;&#x5BF9;&#x5F00;&#x9614;&#x7684;&#x5730;&#x533A;&#x7F51;&#x7EDC;&#x8D28;&#x91CF;&#x8F83;&#x5DEE;&#xFF0C;&#x4E3A;&#x4E86;&#x51CF;&#x8F7B;&#x7F51;&#x7EDC;&#x6761;&#x4EF6;&#x7684;&#x5F71;&#x54CD;&#xFF0C;&#x6211;&#x4EEC;&#x4F7F;&#x7528;&#x56E2;&#x961F;&#x4E4B;&#x524D;&#x5B9E;&#x73B0;&#x7684;&#x6A21;&#x5757;&#x52A0;&#x8F7D;&#x5668; ThunderJS&#x3002;&#x901A;&#x8FC7; <strong>&#x5B57;&#x7B26;&#x7EA7;&#x589E;&#x91CF;&#x66F4;&#x65B0;</strong> &#x51CF;&#x5C11;&#x6587;&#x4EF6;&#x4F20;&#x8F93;&#x5927;&#x5C0F;&#xFF0C;&#x8282;&#x7701;&#x6D41;&#x91CF;&#x3001;&#x63D0;&#x9AD8;&#x9875;&#x9762;&#x6210;&#x529F;&#x7387;&#x548C;&#x52A0;&#x8F7D;&#x901F;&#x5EA6;&#x3002;&#x5176;&#x4E2D;&#x589E;&#x91CF;&#x8BA1;&#x7B97;&#x80FD;&#x529B;&#x7531;&#x7F8E;&#x56E2;&#x5E73;&#x53F0;&#x7684;&#x9759;&#x6001;&#x8D44;&#x6E90;&#x6258;&#x7BA1;&#x65B9;&#x6848; Build Service &#x652F;&#x6301;&#x3002;</p>\n<p>&#x6211;&#x4EEC;&#x66FE;&#x7ECF;&#x5728; &#x300A;<a href=\"https://juejin.im/post/58be3fac2f301e006c784733\">&#x7F8E;&#x56E2;&#x667A;&#x80FD;&#x652F;&#x4ED8;&#x80CC;&#x540E;&#x7684;&#x524D;&#x7AEF;&#x5DE5;&#x7A0B;&#x5E08;</a>&#x300B;&#x4ECB;&#x7ECD;&#x8FC7;&#x6211;&#x4EEC;&#x7684;&#x524D;&#x7AEF;&#x670D;&#x52A1;&#x67B6;&#x6784;&#xFF0C;&#x5982;&#x4E0B;&#x56FE;&#xFF1A;</p>\n<p><img src=\"http://p0.meituan.net/codeman/5bc29587258df22d9646d0962de796dd53632.png\" alt=\"&#x67B6;&#x6784;&#x56FE;\"></p>\n<p>ThunderJS&#xFF08;&#x56E2;&#x961F;&#x5185;&#x90E8;&#x5B9E;&#x73B0;&#x7684;&#x4E00;&#x6B3E; CMD &#x6A21;&#x5757;&#x52A0;&#x8F7D;&#x5668;&#xFF09; &#x5C5E;&#x4E8E;&#x5176;&#x4E2D;&#x975E;&#x5E38;&#x91CD;&#x8981;&#x7684;&#x4E00;&#x73AF;&#xFF0C;&#x96C6;&#x6210;&#x5728;&#x811A;&#x624B;&#x67B6;&#x4E2D;&#x4E3A;&#x4E95;&#x55B7;&#x7684;&#x4E1A;&#x52A1;&#x53D1;&#x5C55;&#x63D0;&#x4F9B;&#x4E86;&#x57FA;&#x7840;&#x3002;&#x76F8;&#x6BD4;&#x4E1A;&#x754C;&#x5176;&#x5B83;&#x6A21;&#x5757;&#x52A0;&#x8F7D;&#x5668;&#xFF0C;ThunderJS &#x5B9A;&#x5236;&#x52A0;&#x5F3A;&#x4E86;&#x4E0E;&#x9759;&#x6001;&#x8D44;&#x6E90;&#x6258;&#x7BA1;&#xFF08;&#x516C;&#x53F8;&#x81EA;&#x7814;&#x7684;Build Service&#xFF09;&#x7ED3;&#x5408;&#x7684;&#x80FD;&#x529B;&#xFF0C;&#x80FD;&#x591F;&#x8BA9;&#x6211;&#x4EEC;&#x5BF9;&#x9759;&#x6001;&#x8D44;&#x6E90;&#x7684;&#x52A0;&#x8F7D;&#x8FDB;&#x884C;&#x9488;&#x5BF9;&#x6027;&#x7684;&#x4F18;&#x5316;&#xFF0C;&#x800C;&#x5728; C &#x7AEF;&#x9879;&#x76EE;&#x4E2D;&#xFF0C;&#x9759;&#x6001;&#x8D44;&#x6E90;&#x7684;&#x52A0;&#x8F7D;&#x4F18;&#x5316;&#x662F;&#x6211;&#x4EEC;&#x5C24;&#x4E3A;&#x91CD;&#x89C6;&#x7684;&#x3002;</p>\n<p>&#x626B;&#x7801;&#x4ED8;&#x9879;&#x76EE;&#x4E2D;&#x4E5F;&#x4F7F;&#x7528;&#x4E86;ThunderJS&#xFF0C;&#x968F;&#x7740;&#x4E1A;&#x52A1;&#x89C4;&#x6A21;&#x7684;&#x6301;&#x7EED;&#x589E;&#x957F;&#xFF0C;ThunderJS &#x7684;&#x65B9;&#x6848;&#x4E5F;&#x5728;&#x4E0D;&#x65AD;&#x4F18;&#x5316;&#xFF0C;&#x672C;&#x6587;&#x4E3B;&#x8981;&#x4ECB;&#x7ECD;&#x57FA;&#x4E8E; ThunderJS &#x548C; Build Service &#x7684;&#x4EA7;&#x54C1;&#x4F18;&#x5316;&#x65B9;&#x6848;&#xFF0C;&#x5E0C;&#x671B;&#x4E3A;&#x5927;&#x5BB6;&#x4F18;&#x5316;&#x9879;&#x76EE;&#x7684;&#x9759;&#x6001;&#x8D44;&#x6E90;&#x52A0;&#x8F7D;&#x63D0;&#x4F9B;&#x66F4;&#x591A;&#x601D;&#x8DEF;&#x3002;</p>\n<h2 id=\"-\">&#x6700;&#x521D;&#x7684;&#x65B9;&#x6848;</h2> <p><img src=\"https://tech.meituan.com/img/&#x7F8E;&#x56E2;&#x91D1;&#x878D;-&#x5B59;&#x8F89;/2.png\" alt=\"ThunderJS&#x6D41;&#x7A0B;&#x56FE;\"></p>\n<p>ThunderJS &#x5C06;&#x9875;&#x9762;&#x7684; JS &#x8D44;&#x6E90;&#x53CA;&#x7248;&#x672C;&#x4FE1;&#x606F;&#x5B58;&#x50A8;&#x5728; LocalStorage &#x4E2D;&#x3002;&#x9875;&#x9762;&#x52A0;&#x8F7D;&#x65F6;&#x901A;&#x8FC7;&#x7EBF;&#x4E0A;&#x7248;&#x672C;&#x548C;&#x672C;&#x5730;&#x7248;&#x672C;&#x6765;&#x5224;&#x65AD;&#x662F;&#x5426;&#x9700;&#x8981;&#x66F4;&#x65B0;&#xFF0C;&#x5982;&#x679C;&#x9700;&#x8981;&#x5219;&#x4F1A;&#x5C1D;&#x8BD5;&#x8FDB;&#x884C; Diff &#x5408;&#x5E76;&#x8BF7;&#x6C42;&#x5E76; Patch &#x5230;&#x672C;&#x5730;&#x8D44;&#x6E90;&#x3002;&#x4E0D;&#x9700;&#x8981;&#x66F4;&#x65B0;&#x5219;&#x76F4;&#x63A5;&#x6267;&#x884C; LocalStorage &#x4E2D;&#x7F13;&#x5B58;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x5E76;&#x4E14;&#x5728;&#x5408;&#x5E76;&#x8BF7;&#x6C42;&#x5931;&#x8D25;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#x4F1A;&#x9010;&#x4E00;&#x52A0;&#x8F7D;&#x5355;&#x6587;&#x4EF6;&#x3002;</p>\n<h3 id=\"-\">&#x662F;&#x5426;&#x9700;&#x8981;&#x66F4;&#x65B0;</h3>\n<p>&#x5224;&#x65AD;<strong>&#x662F;&#x5426;&#x9700;&#x8981;&#x66F4;&#x65B0;</strong>&#x7684;&#x5177;&#x4F53;&#x539F;&#x5219;&#x5982;&#x4E0B;&#xFF1A;</p>\n<ol>\n<li>&#x8BE5;&#x6587;&#x4EF6;&#x540D;&#x5728;&#x7EBF;&#x4E0A;&#x7248;&#x672C;&#x548C;&#x672C;&#x5730;&#x7248;&#x672C;&#x4E2D;&#x90FD;&#x5B58;&#x5728;&#x3002;</li>\n<li>&#x8BE5;&#x6587;&#x4EF6;&#x7684;&#x7248;&#x672C;&#x5728;&#x7EBF;&#x4E0A;&#x548C;&#x672C;&#x5730;&#x4E2D;&#x4E00;&#x81F4;&#x3002;</li>\n<li>&#x8BE5;&#x6587;&#x4EF6;&#x5B58;&#x5728;&#x4E8E;LocalStorage&#x4E2D;&#x3002;</li>\n</ol>\n<h3 id=\"diff-patch-diff-\">Diff &#x5408;&#x5E76;&#x8BF7;&#x6C42; &#x4E0E; Patch Diff &#x7ED3;&#x679C;</h3>\n<p>&#x6D41;&#x7A0B;&#x56FE;&#x4E2D;&#x7684; <strong>Diff &#x5408;&#x5E76;&#x8BF7;&#x6C42;</strong> &#x662F;&#x6307;&#x5728;&#x4E00;&#x6B21;&#x8BF7;&#x6C42;&#x4E2D;&#x8F93;&#x51FA;&#x591A;&#x4E2A;&#x6587;&#x4EF6;&#x7684;&#x589E;&#x91CF;&#x8BA1;&#x7B97;&#x7ED3;&#x679C;&#xFF0C;&#x8BF7;&#x6C42;&#x5408;&#x5E76;&#x662F;&#x4E00;&#x79CD;&#x5E38;&#x7528;&#x7684; Web &#x8D44;&#x6E90;&#x4F18;&#x5316;&#x7B56;&#x7565;&#xFF0C;&#x62FC;&#x63A5;&#x591A;&#x4E2A;&#x76F8;&#x540C;&#x5A92;&#x4F53;&#x7C7B;&#x578B;&#x7684;&#x8D44;&#x6E90;&#x7ECF;&#x7531;&#x5355;&#x4E2A;&#x8BF7;&#x6C42;&#x8F93;&#x51FA;&#xFF0C;&#x53EF;&#x51CF;&#x5C11;&#x9875;&#x9762;&#x5B9E;&#x9645;&#x53D1;&#x8D77;&#x7684;&#x7F51;&#x7EDC;&#x8BF7;&#x6C42;&#x6570;&#x3002;&#x8BF7;&#x6C42;&#x5408;&#x5E76;&#x9700;&#x8981; Web &#x8D44;&#x6E90;&#x52A0;&#x8F7D;&#x5668;&#x914D;&#x5408;&#x3002;</p>\n<p>&#x589E;&#x91CF;&#x8BA1;&#x7B97;&#x7684;&#x8F93;&#x51FA;&#x662F;&#x4E00;&#x4E2A;&#x56FA;&#x5B9A;&#x683C;&#x5F0F;&#x7684; JSON&#xFF0C;&#x63CF;&#x8FF0;&#x4E86; Patch Diff &#x7ED3;&#x679C;&#x65F6;&#x6240;&#x9075;&#x5FAA;&#x7684;&#x89C4;&#x5219;&#xFF0C;&#x5982;&#x4E0B;&#x56FE;&#xFF1A;</p>\n<p><img src=\"https://tech.meituan.com/img/&#x7F8E;&#x56E2;&#x91D1;&#x878D;-&#x5B59;&#x8F89;/3.png\" alt=\"patch&#x89C4;&#x5219;\"></p>\n<p>&#x4F8B;&#x5982;&#xFF1A;</p>\n<pre><code class=\"js\">[ <span class=\"string\">&apos;cmp/util.js&apos;</span>, [<span class=\"number\">0</span>, <span class=\"number\">33</span>], <span class=\"string\">&apos;mn&apos;</span>, [<span class=\"number\">34</span>, <span class=\"number\">10</span>] ]\n</code></pre>\n<p>&#x4EE5;&#x4E0A;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x8868;&#x793A;&#x539F;&#x6587;&#x4EF6;&#x4ECE;&#x7B2C; 0 &#x4E2A;&#x4F4D;&#x7F6E;&#x5F00;&#x59CB;&#x4FDD;&#x7559; 33 &#x4E2A;&#x5B57;&#x7B26;&#xFF0C;&#x8FDE;&#x63A5; <code>mn</code> &#xFF0C;&#x4ECE;&#x7B2C; 34 &#x4E2A;&#x4F4D;&#x7F6E;&#x5F00;&#x59CB;&#x4FDD;&#x7559;10&#x4E2A;&#x5B57;&#x7B26;&#x3002;</p>\n<p><strong>Patch Diff &#x7ED3;&#x679C;</strong>&#x5C31;&#x662F;&#x5229;&#x7528;&#x589E;&#x91CF;&#x66F4;&#x65B0;&#x7684;&#x7ED3;&#x679C;&#xFF0C;&#x7ED3;&#x5408;&#x539F;&#x6587;&#x4EF6;&#xFF0C;&#x5C06;&#x6587;&#x4EF6;&#x6062;&#x590D;&#x81F3;&#x6700;&#x65B0;&#x6587;&#x4EF6;&#x7684;&#x8FC7;&#x7A0B;&#x3002;</p>\n<h2 id=\"build-service-\">Build Service &#x5DE5;&#x4F5C;&#x6D41;&#x7A0B;</h2>\n<p>Build Service &#x662F;&#x7F8E;&#x56E2;&#x5E73;&#x53F0;&#x7684;&#x9759;&#x6001;&#x8D44;&#x6E90;&#x6258;&#x7BA1;&#x65B9;&#x6848;&#xFF0C;&#x63D0;&#x4F9B;&#x9759;&#x6001;&#x8D44;&#x6E90;&#x90E8;&#x7F72;&#x3001;&#x5904;&#x7406;&#x548C;&#x5206;&#x53D1;&#x80FD;&#x529B;&#xFF0C;&#x5BF9;&#x63A5; CDN&#x3002;</p>\n<p><img src=\"https://tech.meituan.com/img/&#x7F8E;&#x56E2;&#x91D1;&#x878D;-&#x5B59;&#x8F89;/4.png\" alt=\"Build Service &#x57FA;&#x672C;&#x94FE;&#x8DEF;\"></p>\n<p>&#x5982;&#x56FE;&#xFF0C;&#x7528;&#x6237;&#x8BF7;&#x6C42;&#x8FBE;&#x5230; CDN &#x5982;&#x679C;&#x6CA1;&#x6709;&#x547D;&#x4E2D;&#x7F13;&#x5B58;&#xFF0C;&#x4F1A;&#x4E00;&#x8DEF;&#x56DE;&#x6E90;&#x81F3;&#x6E90;&#x7AD9;&#xFF0C;&#x6E90;&#x7AD9;&#x68C0;&#x7D22;&#x5E76;&#x5904;&#x7406;&#x8D44;&#x6E90;&#xFF0C;&#x7ECF;&#x7F51;&#x5173;&#x8F93;&#x51FA;&#x7ED9; CDN&#x3002;&#x672C;&#x6587;&#x4E2D;&#x63D0;&#x5230;&#x7684;&#x589E;&#x91CF;&#x8BA1;&#x7B97;&#x5C5E;&#x4E8E;&#x8D44;&#x6E90;&#x5904;&#x7406;&#x4EFB;&#x52A1;&#xFF0C;&#x7531;&#x6E90;&#x7AD9;&#x6267;&#x884C;&#x3002;</p>\n<h2 id=\"-\">&#x6587;&#x672C;&#x589E;&#x91CF;&#x8BA1;&#x7B97;&#x7684;&#x5DE5;&#x7A0B;&#x9009;&#x62E9;</h2>\n<p>&#x6587;&#x672C;&#x589E;&#x91CF;&#x8BA1;&#x7B97;&#x6700;&#x521D;&#x57FA;&#x4E8E;&#x7F16;&#x8F91;&#x8DDD;&#x79BB;&#x539F;&#x7406;&#x5B9E;&#x73B0;&#xFF0C;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6; O(N^2)&#xFF0C;&#x4E0E;&#x6587;&#x672C;&#x957F;&#x5EA6;&#x6B63;&#x76F8;&#x5173;&#xFF0C;&#x5B9E;&#x9645;&#x5E94;&#x7528;&#x65F6;&#x6027;&#x80FD;&#x8F83;&#x5DEE;&#x3002;Build Service &#x9009;&#x62E9; <a href=\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.4.6927\">Myers &#x589E;&#x91CF;&#x7B97;&#x6CD5;</a>&#xFF0C;&#x6709;&#x6548;&#x964D;&#x4F4E;&#x5355;&#x6B21;&#x589E;&#x91CF;&#x8BA1;&#x7B97;&#x7684;&#x65F6;&#x95F4;&#x6D88;&#x8017;&#x3002;&#x5176;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x7531; O(N^2) &#x6539;&#x53D8;&#x4E3A; O(ND)&#xFF0C;&#x4E0E;&#x6587;&#x672C;&#x957F;&#x5EA6;&#x3001;&#x5DEE;&#x5F02;&#x957F;&#x5EA6;&#x6B63;&#x76F8;&#x5173;&#x3002;Web &#x4E1A;&#x52A1;&#x8FED;&#x4EE3;&#x9891;&#x7387;&#x9AD8;&#x3001;&#x5355;&#x6B21;&#x8FED;&#x4EE3;&#x5DEE;&#x5F02;&#x5C0F;&#x3001;D &#x63A5;&#x8FD1;&#x5E38;&#x6570;&#xFF0C;&#x4F7F;&#x7528; Myers &#x589E;&#x91CF;&#x7B97;&#x6CD5;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x53EF;&#x63A5;&#x8FD1; O(N)&#x3002;</p>\n<h2 id=\"-\">&#x521D;&#x6B65;&#x6548;&#x679C;</h2>\n<p>&#x6839;&#x636E;&#x626B;&#x7801;&#x4ED8;&#x7684;&#x7EDF;&#x8BA1;&#x7ED3;&#x679C;&#xFF0C;&#x589E;&#x91CF;&#x66F4;&#x65B0;&#x76F8;&#x6BD4;&#x5168;&#x91CF;&#x8BF7;&#x6C42;&#xFF0C;&#x4F20;&#x8F93;&#x6570;&#x636E;&#x53EF;&#x51CF;&#x5C11;&#x591A;&#x81F3;99%&#xFF0C;&#x5408;&#x5E76;&#x8BF7;&#x6C42;&#x5E73;&#x5747;&#x53EF;&#x51CF;&#x5C11;&#x8BF7;&#x6C42;&#x6570;95%&#x3002;</p>\n<h2 id=\"-\">&#x4E1A;&#x52A1;&#x589E;&#x957F;&#x4E0E;&#x8BA1;&#x7B97;&#x74F6;&#x9888;</h2>\n<p>&#x968F;&#x7740;&#x4E1A;&#x52A1;&#x7684;&#x589E;&#x957F;&#xFF0C;PV &#x5F88;&#x5FEB;&#x5C31;&#x5728;2017&#x5E74;4&#x6708;&#x4EFD;&#x8FBE;&#x5230;&#x4E86;&#x767E;&#x4E07;&#x7EA7;&#x3002;&#x626B;&#x7801;&#x4ED8;&#x4E1A;&#x52A1;&#x91C7;&#x7528;&#x7EC6;&#x7C92;&#x5EA6;&#x6A21;&#x5757;&#x5316;&#x7684;&#x8BBE;&#x8BA1;&#xFF0C;&#x4E1A;&#x52A1;&#x4E0D;&#x65AD;&#x8FED;&#x4EE3;&#xFF0C;&#x6587;&#x4EF6;&#x6570;&#x8D8A;&#x6765;&#x8D8A;&#x591A;&#xFF0C;&#x5355;&#x6B21;&#x5408;&#x5E76;&#x8BF7;&#x6C42;&#x7684;&#x6587;&#x4EF6;&#x6570;&#x8D85;&#x8FC7; 30&#x4E2A;&#x3002;&#x9700;&#x8981;&#x8FDB;&#x884C;&#x589E;&#x91CF;&#x8BA1;&#x7B97;&#x7684;&#x7248;&#x672C;&#x7EC4;&#x5408;&#x4E5F;&#x8D8A;&#x6765;&#x8D8A;&#x591A;&#xFF0C;&#x8DE8;&#x8D8A;&#x591A;&#x4E2A;&#x7248;&#x672C;&#x7684;&#x589E;&#x91CF;&#x8BA1;&#x7B97;&#x5F00;&#x59CB;&#x51FA;&#x73B0;&#xFF0C;&#x589E;&#x91CF;&#x8BA1;&#x7B97;&#x8017;&#x65F6;&#x589E;&#x52A0;&#xFF0C;Build Service &#x9047;&#x5230;&#x4E86;&#x8BA1;&#x7B97;&#x80FD;&#x529B;&#x7684;&#x74F6;&#x9888;&#x3002;&#x6211;&#x4EEC;&#x53D1;&#x73B0;3s&#x8D85;&#x65F6;&#x65F6;&#x95F4;&#x6761;&#x4EF6;&#x4E0B;&#xFF0C;&#x5408;&#x5E76;&#x8BF7;&#x6C42;&#x7684;&#x5931;&#x8D25;&#x7387;&#x8D85;&#x8FC7;50%&#xFF0C;&#x4E8E;&#x662F;&#x7740;&#x624B;&#x5F00;&#x59CB;&#x4F18;&#x5316;&#x3002;</p>\n<h2 id=\"build-service-\">Build Service &#x4F18;&#x5316;&#x7B56;&#x7565;</h2> <p>Build Service &#x6700;&#x521D;&#x76F4;&#x63A5;&#x901A;&#x8FC7;&#x516C;&#x5171;&#x96C6;&#x7FA4;&#x63D0;&#x4F9B;&#x6587;&#x672C;&#x589E;&#x91CF;&#x8BA1;&#x7B97;&#x670D;&#x52A1;&#x3002;&#x516C;&#x5171;&#x96C6;&#x7FA4;&#x540C;&#x65F6;&#x8FD8;&#x627F;&#x8F7D;&#x7740;&#x5176;&#x4ED6;&#x8BA1;&#x7B97;&#x4EFB;&#x52A1;&#xFF0C;&#x5982;&#x6587;&#x4EF6;&#x538B;&#x7F29;&#x3001;&#x5F15;&#x7528;&#x8BA1;&#x7B97;&#x7B49;&#x3002;&#x589E;&#x91CF;&#x8BA1;&#x7B97;&#x4E0E;&#x5176;&#x4ED6;&#x4EFB;&#x52A1;&#x76F8;&#x6BD4;&#xFF0C;&#x8BA1;&#x7B97;&#x89C4;&#x6A21;&#x5DEE;&#x5F02;&#x5DE8;&#x5927;&#xFF0C;&#x6D88;&#x8017;&#x4E86;&#x96C6;&#x7FA4;&#x5927;&#x591A;&#x6570;&#x7B97;&#x529B;&#xFF0C;&#x5BFC;&#x81F4;&#x5176;&#x4ED6;&#x8BA1;&#x7B97;&#x4EFB;&#x52A1;&#x5EF6;&#x8FDF;&#x5927;&#x5E45;&#x5347;&#x9AD8;&#x3002;&#x4E3A;&#x4E86;&#x907F;&#x514D;&#x516C;&#x5171;&#x96C6;&#x7FA4;&#x4E0D;&#x53EF;&#x7528;&#x5BF9;&#x516C;&#x53F8;&#x5176;&#x4ED6;&#x4E1A;&#x52A1;&#x4EA7;&#x751F;&#x5F71;&#x54CD;&#xFF0C;Build Service &#x7D27;&#x6025;&#x62C6;&#x5206;&#x4E0A;&#x7EBF; Build Service Mixer &#x670D;&#x52A1;&#xFF08;&#x4EE5;&#x4E0B;&#x7B80;&#x79F0; Mixer &#x670D;&#x52A1;&#xFF09;&#xFF0C;&#x5C06;&#x8BF7;&#x6C42;&#x5408;&#x5E76;&#x548C;&#x589E;&#x91CF;&#x8BA1;&#x7B97;&#x72EC;&#x7ACB;&#x51FA;&#x6765;&#x5355;&#x72EC;&#x642D;&#x8BBE;&#x96C6;&#x7FA4;&#xFF0C;&#x5B9E;&#x73B0;&#x4E1A;&#x52A1;&#x9694;&#x79BB;&#x3002;</p>\n<p><img src=\"https://tech.meituan.com/img/&#x7F8E;&#x56E2;&#x91D1;&#x878D;-&#x5B59;&#x8F89;/5.png\" alt=\"Build Service Mixer\"></p>\n<p>Mixer &#x670D;&#x52A1;&#x4E0A;&#x7EBF;&#x540E;&#xFF0C;&#x9694;&#x79BB;&#x4E86;&#x589E;&#x91CF;&#x8BA1;&#x7B97;&#x5BF9;&#x5176;&#x4ED6;&#x4E1A;&#x52A1;&#x7684;&#x5F71;&#x54CD;&#xFF0C;&#x4E89;&#x53D6;&#x4E86;&#x4E00;&#x4E9B;&#x65F6;&#x95F4;&#x4F18;&#x5316;&#x6574;&#x4E2A;&#x65B9;&#x6848;&#x3002;</p>\n<h2 id=\"-\">&#x6301;&#x4E45;&#x5316;&#x8BA1;&#x7B97;&#x7F13;&#x5B58;</h2>\n<p>&#x5408;&#x5E76;&#x8BF7;&#x6C42;&#x7684;&#x5404;&#x4E2A;&#x8D44;&#x6E90;&#x6587;&#x4EF6;&#x662F;&#x4E92;&#x76F8;&#x72EC;&#x7ACB;&#x7684;&#x3002;Mixer &#x6536;&#x5230;&#x4E00;&#x6B21;&#x8BF7;&#x6C42;&#xFF0C;&#x4F1A;&#x5206;&#x522B;&#x7F13;&#x5B58;&#x6BCF;&#x4E2A;&#x8D44;&#x6E90;&#x6587;&#x4EF6;&#x7684;&#x8BA1;&#x7B97;&#x4EFB;&#x52A1;&#x8F93;&#x51FA;&#x3002;&#x4E0D;&#x540C;&#x7684;&#x8D44;&#x6E90;&#x5408;&#x5E76;&#x8BF7;&#x6C42;&#x53EF;&#x4EE5;&#x590D;&#x7528;&#x7ED3;&#x679C;&#x7247;&#x6BB5;&#xFF0C;&#x51CF;&#x5C11;&#x4E0D;&#x5FC5;&#x8981;&#x7684;&#x8BA1;&#x7B97;&#x3002;&#x4E0A;&#x7EBF;&#x540E;&#xFF0C;Mixer &#x670D;&#x52A1;&#x7684;&#x8BA1;&#x7B97;&#x80FD;&#x529B;&#x663E;&#x8457;&#x589E;&#x5F3A;&#xFF0C;&#x65E5;&#x53EF;&#x7528;&#x6027;&#x4E00;&#x5EA6;&#x8FBE;&#x5230;100%&#xFF0C;&#x8BA1;&#x7B97;&#x6210;&#x529F;&#x7684;&#x589E;&#x91CF;&#x7247;&#x6BB5;&#x518D;&#x8F93;&#x51FA;&#x7684;&#x65F6;&#x95F4;&#x6D88;&#x8017;&#x7A33;&#x5B9A;&#x5728;50&#x6BEB;&#x79D2;&#x4EE5;&#x5185;&#x3002;</p>\n<h2 id=\"-\">&#x8D85;&#x65F6;&#x81EA;&#x52A8;&#x91CD;&#x542F;&#x673A;&#x5236;</h2>\n<p>Myers &#x589E;&#x91CF;&#x7B97;&#x6CD5;&#x5927;&#x591A;&#x6570;&#x60C5;&#x51B5;&#x4E0B;&#x6027;&#x80FD;&#x63D0;&#x5347;&#x663E;&#x8457;&#xFF0C;&#x4F46;&#x662F;&#x5F53;&#x6587;&#x672C;&#x5DEE;&#x5F02;&#x8F83;&#x5927;&#x65F6;&#xFF0C;&#x8BA1;&#x7B97;&#x8017;&#x65F6;&#x4F1A;&#x663E;&#x8457;&#x589E;&#x52A0;&#x3002;&#x6700;&#x4E0D;&#x7406;&#x60F3;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x4F1A;&#x9000;&#x5316;&#x5230;O(N^2)&#x3002;Mixer &#x670D;&#x52A1;&#x4F7F;&#x7528; Node &#x5F00;&#x53D1;&#xFF0C;&#x8BA1;&#x7B97;&#x589E;&#x91CF;&#x4E0E;&#x8F93;&#x51FA;&#x8D44;&#x6E90;&#x5728;&#x4E00;&#x4E2A;&#x8FDB;&#x7A0B;&#xFF0C;&#x4E3A;&#x4E86;&#x907F;&#x514D;&#x8BA1;&#x7B97;&#x4EFB;&#x52A1;&#x963B;&#x585E;&#x8BF7;&#x6C42;&#x54CD;&#x5E94;&#xFF0C;&#x6211;&#x4EEC;&#x5C06;&#x8BA1;&#x7B97;&#x6539;&#x4E3A;&#x4E86;&#x8FDB;&#x7A0B;&#x5185;&#x5F02;&#x6B65;&#x3002;</p>\n<p>&#x6709;&#x65F6;&#x4E1A;&#x52A1;&#x4F1A;&#x4E0A;&#x7EBF;&#x5DEE;&#x5F02;&#x8F83;&#x5927;&#x7684;&#x589E;&#x91CF;&#x7247;&#x6BB5;&#xFF0C;&#x5728;&#x4E00;&#x4E2A;&#x5F88;&#x77ED;&#x7684;&#x65F6;&#x95F4;&#x7A97;&#x53E3;&#x5185;&#xFF0C;&#x8BB8;&#x591A;&#x76F8;&#x4F3C;&#x7684;&#x7528;&#x6237;&#x8BF7;&#x6C42;&#x4F1A;&#x540C;&#x65F6;&#x5206;&#x644A;&#x7ED9;&#x6240;&#x6709; Mixer &#x8FDB;&#x7A0B;&#xFF0C;&#x5BBF;&#x4E3B;&#x673A;&#x7684;&#x6240;&#x6709; CPU &#x6838;&#x5FC3;&#x88AB;&#x5360;&#x7528;&#x5904;&#x7406;&#x540C;&#x4E00;&#x4E2A;&#x6162;&#x7684;&#x589E;&#x91CF;&#x8BA1;&#x7B97;&#xFF0C;&#x5BFC;&#x81F4; Mixer &#x670D;&#x52A1;&#x8F93;&#x51FA;&#x80FD;&#x529B;&#x4E0B;&#x964D;&#xFF0C;&#x8BF7;&#x6C42;&#x79EF;&#x538B;&#x3002;&#x4E3A;&#x4E86;&#x4E34;&#x65F6;&#x89E3;&#x51B3;&#x8FD9;&#x4E2A;&#x73B0;&#x8C61;&#xFF0C;&#x6211;&#x4EEC;&#x91C7;&#x7528;&#x4E86;&#x7B80;&#x5355;&#x7C97;&#x66B4;&#x7684;&#x81EA;&#x52A8;&#x91CD;&#x542F;&#xFF0C;&#x5982;&#x679C;&#x8BA1;&#x7B97;&#x8D85;&#x65F6;&#x5224;&#x5B9A;&#x4E3A;&#x6162;&#x8BA1;&#x7B97;&#xFF0C;&#x670D;&#x52A1;&#x81EA;&#x6740;&#x7531; PM2 &#x91CD;&#x65B0;&#x62C9;&#x8D77;&#x3002;&#x670D;&#x52A1;&#x91CD;&#x542F;&#x540E;&#x6162;&#x8BA1;&#x7B97;&#x7ACB;&#x5373;&#x5931;&#x8D25;&#xFF0C;&#x7528;&#x6237;&#x4FA7;&#x964D;&#x7EA7;&#x5230;&#x5355;&#x8D44;&#x6E90;&#x8BF7;&#x6C42;&#xFF0C;Mixer &#x6709;&#x6982;&#x7387;&#x53EF;&#x4EE5;&#x5206;&#x914D;&#x5230;&#x5FEB;&#x8BA1;&#x7B97;&#x3002;&#x65F6;&#x95F4;&#x7A97;&#x53E3;&#x901A;&#x8FC7;&#x540E;&#x4E0D;&#x518D;&#x51FA;&#x73B0;&#x6162;&#x8BA1;&#x7B97;&#x65F6;&#xFF0C;Mixer &#x670D;&#x52A1;&#x7B97;&#x529B;&#x6062;&#x590D;&#x3002;</p>\n<p>&#x8FD9;&#x4E2A;&#x673A;&#x5236;&#x4E00;&#x5B9A;&#x7A0B;&#x5EA6;&#x4E0A;&#x7F13;&#x89E3;&#x4E86;&#x6211;&#x4EEC;&#x7684;&#x8BA1;&#x7B97;&#x74F6;&#x9888;&#xFF0C;&#x4F46;&#x662F;&#x6CA1;&#x6709;&#x5B8C;&#x5168;&#x89E3;&#x51B3;&#x95EE;&#x9898;&#x3002;</p>\n<h2 id=\"thunderjs-\">ThunderJS &#x4F18;&#x5316;&#x7B56;&#x7565;</h2> <p>&#x5B9E;&#x9645;&#x4E1A;&#x52A1;&#x4F7F;&#x7528;&#x4E2D;&#xFF0C;&#x6211;&#x4EEC;&#x53D1;&#x73B0;&#x7531;&#x4E8E;&#x6CA1;&#x6709;&#x5BF9;&#x5408;&#x5E76;&#x8BF7;&#x6C42;&#x7684;&#x6587;&#x4EF6;&#x6570;&#x505A;&#x9650;&#x5236;&#xFF0C;&#x4E00;&#x6B21;&#x5408;&#x5E76;&#x8BF7;&#x6C42;&#x4F1A;&#x5408;&#x5E76;&#x8FC7;&#x591A;&#x7684;&#x8BF7;&#x6C42;&#xFF0C;&#x7279;&#x522B;&#x662F;&#x5728;&#x626B;&#x7801;&#x4ED8;&#x8FD9;&#x4E2A;&#x9879;&#x76EE;&#x4E2D;&#xFF0C;&#x5BFC;&#x81F4;&#x4E00;&#x6B21;&#x8BF7;&#x6C42;&#x7684;&#x8BA1;&#x7B97;&#x91CF;&#x8FC7;&#x5927;&#xFF0C;&#x9020;&#x6210;&#x6BD4;&#x8F83;&#x4E25;&#x91CD;&#x7684;&#x8D85;&#x65F6;&#x95EE;&#x9898;&#x3002;</p>\n<p>&#x6B63;&#x9022; Mixer &#x74F6;&#x9888;&#x9636;&#x6BB5;&#xFF0C;&#x4E3A;&#x4E86;&#x964D;&#x4F4E; Mixer &#x7684;&#x8F93;&#x51FA;&#x538B;&#x529B;&#xFF0C;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x4F7F;&#x4E00;&#x6B21;&#x5408;&#x5E76;&#x8BF7;&#x6C42;&#x80FD;&#x591F;&#x4F7F;&#x7528;&#x66F4;&#x5C11;&#x5185;&#x5B58;&#x66F4;&#x5FEB;&#x5730;&#x5B8C;&#x6210;&#x3002;&#x7EFC;&#x5408;&#x8003;&#x8651;&#x540E;&#xFF0C;&#x6211;&#x4EEC;&#x964D;&#x4F4E;&#x4E86;&#x5355;&#x6B21;&#x8BF7;&#x6C42;&#x5408;&#x5E76;&#x7684;&#x8D44;&#x6E90;&#x6570;&#x91CF;&#x4E0A;&#x9650;&#xFF0C;&#x4ECE;&#x6700;&#x521D;&#x7684;&#x4E0D;&#x8BBE;&#x9650;&#x6539;&#x4E3A;&#x9650;&#x5236;&#x6700;&#x591A; 10&#x4E2A;&#x8D44;&#x6E90;&#xFF0C;&#x8FD9;&#x6837;&#x7531;&#x539F;&#x672C;&#x4E00;&#x6B21;&#x8BF7;&#x6C42;30&#x4E2A;&#x6587;&#x4EF6;&#x7684;&#x589E;&#x91CF;&#x7ED3;&#x679C;&#xFF0C;&#x6539;&#x6210;&#x5E76;&#x53D1;3&#x4E2A;&#x8BF7;&#x6C42;&#xFF0C;&#x6BCF;&#x6B21;&#x8BF7;&#x6C42;10&#x4E2A;&#x6587;&#x4EF6;&#xFF0C;&#x540C;&#x65F6; Mixer &#x914D;&#x5408;&#x53C2;&#x6570;&#x8C03;&#x4F18;&#xFF0C;&#x4E00;&#x5B9A;&#x7A0B;&#x5EA6;&#x4E0A;&#x7F13;&#x89E3;&#x4E86;&#x8D85;&#x65F6;&#x95EE;&#x9898;&#x3002;</p>\n<h2 id=\"-\">&#x4E1A;&#x52A1;&#x964D;&#x7EA7;&#x673A;&#x5236;</h2>\n<h3 id=\"-\">&#x5408;&#x5E76;&#x8BF7;&#x6C42;&#x5931;&#x8D25;&#x540E;&#x7684;&#x5355;&#x6587;&#x4EF6;&#x52A0;&#x8F7D;&#x7F13;&#x5B58;</h3>\n<p>&#x6B63;&#x5982;&#x524D;&#x6587;&#x6240;&#x8BF4;&#xFF0C;&#x5728;&#x5B9E;&#x9645;&#x60C5;&#x51B5;&#x4E2D;&#xFF0C;Mixer &#x8BA1;&#x7B97;&#x670D;&#x52A1;&#x4F1A;&#x4E0D;&#x53EF;&#x907F;&#x514D;&#x7684;&#x9047;&#x5230;&#x8D85;&#x65F6;&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x4E3A;&#x4E86;&#x907F;&#x514D;&#x8D85;&#x65F6;&#x540E;&#x5BFC;&#x81F4;&#x65E0;&#x6CD5;&#x52A0;&#x8F7D;&#x76F8;&#x5E94;&#x7684;&#x9759;&#x6001;&#x8D44;&#x6E90;&#xFF0C;&#x6211;&#x4EEC;&#x6709;&#x9488;&#x5BF9;&#x6027;&#x7684;&#x8BBE;&#x8BA1;&#x4E86;&#x964D;&#x7EA7;&#x673A;&#x5236;&#x3002;</p>\n<p>&#x5728;&#x6700;&#x521D;&#x7684; ThunderJS &#x4E2D;&#xFF0C;&#x5982;&#x679C;&#x9047;&#x5230;&#x8D85;&#x65F6;&#xFF0C;&#x4F1A;&#x91CD;&#x65B0;&#x4F7F;&#x7528; <code>createElement</code> &#x65B9;&#x5F0F;&#x5C06;&#x5408;&#x5E76;&#x8BF7;&#x6C42;&#x4E2D;&#x7684;&#x8D44;&#x6E90;&#x5355;&#x72EC;&#x52A0;&#x8F7D;&#xFF08;&#x76F4;&#x63A5;&#x8BF7;&#x6C42;&#x6587;&#x4EF6;&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x8BF7;&#x6C42;&#x6587;&#x4EF6;&#x4E24;&#x4E2A;&#x7248;&#x672C;&#x7684;&#x589E;&#x91CF;&#x7ED3;&#x679C;&#xFF09;&#x3002;&#x4F46;&#x662F;&#x5728;&#x5B9E;&#x9645;&#x4E1A;&#x52A1;&#x4E2D;&#xFF0C;&#x6211;&#x4EEC;&#x6CE8;&#x610F;&#x5230;&#xFF0C;&#x5982;&#x679C;&#x80FD;&#x5C06;&#x5355;&#x72EC;&#x52A0;&#x8F7D;&#x7684;&#x6587;&#x4EF6;&#x4E5F;&#x505A;&#x7F13;&#x5B58;&#xFF0C;&#x90A3;&#x5728;&#x8D85;&#x65F6;&#x6BD4;&#x8F83;&#x4E25;&#x91CD;&#x7684;&#x65F6;&#x6BB5;&#xFF0C;&#x80FD;&#x6709;&#x6548;&#x907F;&#x514D;&#x8001;&#x7528;&#x6237;&#x91CD;&#x590D;&#x8FDB;&#x884C;&#x8BF7;&#x6C42;&#xFF0C;&#x56E0;&#x6B64;&#x6211;&#x4EEC;&#x5C06; <code>createElement</code> &#x65B9;&#x5F0F;&#x6362;&#x6210; XHR &#xFF0C;&#x5C06;&#x8BF7;&#x6C42;&#x54CD;&#x5E94;&#x7684;&#x6587;&#x4EF6;&#x5185;&#x5BB9;&#x5B58;&#x5165; LocalStorage&#xFF0C;&#x5B9E;&#x73B0;&#x4E86;&#x5728;&#x964D;&#x7EA7;&#x673A;&#x5236;&#x4E0B;&#x589E;&#x5F3A;&#x7F13;&#x5B58;&#x7684;&#x6548;&#x679C;&#x3002;</p>\n<h3 id=\"-\">&#x5F31;&#x7F51;&#x4F18;&#x5148;&#x4F7F;&#x7528;&#x7F13;&#x5B58;&#x6587;&#x4EF6;</h3>\n<p>&#x4E0D;&#x7BA1;&#x8BF7;&#x6C42;&#x6709;&#x591A;&#x5FEB;&#xFF0C;&#x7EC8;&#x7A76;&#x8FD8;&#x662F;&#x9700;&#x8981;&#x53D1;&#x8D77;&#x7F51;&#x7EDC;&#x8BF7;&#x6C42;&#xFF0C;&#x6700;&#x597D;&#x7684;&#x65B9;&#x5F0F;&#x5C31;&#x662F;&#x4E0D;&#x9700;&#x8981;&#x7F51;&#x7EDC;&#x8BF7;&#x6C42;&#x5373;&#x53EF;&#x4F7F;&#x7528;&#xFF0C;&#x6211;&#x4EEC;&#x5C06;&#x7F51;&#x7EDC;&#x72B6;&#x51B5;&#x5206;&#x4E3A; <strong>WiFi&#x3001;4G&#x3001;3G&#x3001;2G&#x3001;unknown</strong> &#xFF0C;&#x5176;&#x4E2D; 2G&#x548C;unknown &#x88AB;&#x6211;&#x4EEC;&#x8BA4;&#x4E3A;&#x662F; <strong>&#x5F31;&#x7F51;</strong>&#xFF0C;&#x5927;&#x6982;&#x5360;&#x6BD4;&#x5728;10.35%&#xFF0C;&#x5BF9;&#x4E8E;&#x8FD9;&#x90E8;&#x5206;&#x7528;&#x6237;&#xFF0C;&#x6211;&#x4EEC;&#x9009;&#x62E9;&#x4F18;&#x5148;&#x6267;&#x884C;&#x7F13;&#x5B58;&#x4E2D;&#x6587;&#x4EF6;&#xFF0C;&#x6CA1;&#x6709;&#x76F8;&#x5173;&#x6587;&#x4EF6;&#x5219;&#x8FDB;&#x884C;&#x5355;&#x6587;&#x4EF6;&#x8BF7;&#x6C42;&#x3002;</p>\n<p>&#x4F18;&#x5148;&#x6267;&#x884C;&#x7F13;&#x5B58;&#x7684;&#x51FA;&#x53D1;&#x70B9;&#x5728;&#x4E8E;&#x5F31;&#x7F51;&#x4E0B;&#x52A0;&#x8F7D;&#x6587;&#x4EF6;&#x6210;&#x672C;&#x8F83;&#x9AD8;&#xFF0C;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x4F18;&#x5148;&#x4FDD;&#x8BC1;&#x652F;&#x4ED8;&#x6D41;&#x7A0B;&#x7684;&#x5B8C;&#x5584;&#xFF0C;&#x5373;&#x4F7F;&#x8FD9;&#x6837;&#x65E0;&#x6CD5;&#x7ED9;&#x7528;&#x6237;&#x5E26;&#x6765;&#x6700;&#x65B0;&#x7684;&#x7528;&#x6237;&#x4F53;&#x9A8C;&#x3002;</p>\n<p>&#x5B8C;&#x5584;&#x964D;&#x7EA7;&#x673A;&#x5236;&#x540E;&#x7684;&#x6D41;&#x7A0B;&#x56FE;&#x5982;&#x4E0B;&#x6240;&#x793A;&#xFF1A;</p>\n<p><img src=\"https://tech.meituan.com/img/&#x7F8E;&#x56E2;&#x91D1;&#x878D;-&#x5B59;&#x8F89;/6.png\" alt=\"&#x5B8C;&#x5584;&#x964D;&#x7EA7;&#x670D;&#x52A1;\"></p>\n<p>&#x5B9E;&#x8DF5;&#x8BC1;&#x660E;&#xFF0C;&#x964D;&#x7EA7;&#x673A;&#x5236;&#x8D77;&#x5230;&#x4E86;&#x975E;&#x5E38;&#x5927;&#x7684;&#x4F5C;&#x7528;&#xFF0C;&#x5728;&#x524D;&#x671F;&#x8D85;&#x65F6;&#x95EE;&#x9898;&#x6BD4;&#x8F83;&#x4E25;&#x91CD;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF08;&#x8D85;&#x65F6;&#x7387;50%+&#xFF09;&#xFF0C;&#x964D;&#x7EA7;&#x673A;&#x5236;&#x751A;&#x81F3;&#x627F;&#x62C5;&#x4E86;&#x4E3B;&#x8981;&#x89D2;&#x8272;&#xFF0C;&#x5728;&#x540E;&#x671F;&#xFF0C;&#x964D;&#x7EA7;&#x673A;&#x5236;&#x7684;&#x5B58;&#x5728;&#x4E5F;&#x662F;&#x6839;&#x672C;&#x89E3;&#x51B3;&#x8BA1;&#x7B97;&#x74F6;&#x9888;&#x7684;&#x65B9;&#x6848;&#x4E4B;&#x6240;&#x4EE5;&#x80FD;&#x5B9E;&#x65BD;&#x7684;&#x524D;&#x63D0;&#x3002;</p>\n<h2 id=\"-\">&#x8BA1;&#x7B97;&#x74F6;&#x9888;&#x7684;&#x6839;&#x672C;&#x89E3;&#x51B3;&#x65B9;&#x6848;</h2>\n<p>&#x626B;&#x7801;&#x4ED8;&#x4E1A;&#x52A1;&#x6301;&#x7EED;&#x589E;&#x957F;&#xFF0C;&#x589E;&#x91CF;&#x8BA1;&#x7B97;&#x670D;&#x52A1;&#x7684;&#x74F6;&#x9888;&#x4F9D;&#x7136;&#x5B58;&#x5728;&#x3002;&#x6839;&#x636E;&#x516C;&#x53F8;&#x7684;&#x57FA;&#x7840;&#x76D1;&#x63A7;&#x670D;&#x52A1;&#x7684;&#x6570;&#x636E;&#xFF0C;Mixer &#x670D;&#x52A1;&#x5468;&#x671F;&#x51FA;&#x73B0;&#x7684;&#x8BF7;&#x6C42;&#x79EF;&#x538B;&#x8D8A;&#x6765;&#x8D8A;&#x9891;&#x7E41;&#xFF0C;<code>CLOSE_WAIT</code> &#x6570;&#x4F1A;&#x5FEB;&#x901F;&#x589E;&#x957F;&#x3002;<code>CLOSE_WAIT</code> &#x662F;&#x4E00;&#x79CD;&#x8FDE;&#x63A5;&#x72B6;&#x6001;&#xFF0C;&#x5728;&#x670D;&#x52A1;&#x7AEF;&#x54CD;&#x5E94;&#x672A;&#x5B8C;&#x6210;&#x7684;&#x8BF7;&#x6C42;&#x524D;&#xFF0C;&#x8FDE;&#x63A5;&#x88AB;&#x8BF7;&#x6C42;&#x65B9;&#x5173;&#x95ED;&#x65F6;&#x53EF;&#x80FD;&#x51FA;&#x73B0;&#x3002;&#x8FD9;&#x4E2A;&#x6307;&#x6807;&#x7684;&#x5FEB;&#x901F;&#x589E;&#x957F;&#x610F;&#x5473;&#x7740;&#x5927;&#x91CF;&#x7684;&#x8BF7;&#x6C42;&#x4E0D;&#x80FD;&#x5728;&#x8D85;&#x65F6;&#x533A;&#x95F4;&#x5185;&#x5904;&#x7406;&#xFF0C;&#x76F4;&#x63A5;&#x8868;&#x5F81; Mixer &#x670D;&#x52A1;&#x7B97;&#x529B;&#x4E0D;&#x8DB3;&#x3002;</p>\n<p>&#x524D;&#x6587;&#x4E2D;&#x6211;&#x4EEC;&#x8BA8;&#x8BBA;&#x8FC7;&#x589E;&#x91CF;&#x8BA1;&#x7B97;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x9AD8;&#xFF0C;&#x5373;&#x4FBF;&#x4F7F;&#x7528; Myers &#x589E;&#x91CF;&#x7B97;&#x6CD5;&#xFF0C;&#x4E5F;&#x4E0D;&#x4F1A;&#x5FEB;&#x5230;&#x6CA1;&#x6709;&#x8017;&#x65F6;&#x3002;&#x9664;&#x975E;&#x6587;&#x672C;&#x589E;&#x91CF;&#x8BA1;&#x7B97;&#x6709;&#x91CD;&#x5927;&#x7406;&#x8BBA;&#x7A81;&#x7834;&#xFF0C;&#x5426;&#x5219;&#x9759;&#x6001;&#x8D44;&#x6E90;&#x7684;&#x6587;&#x672C;&#x589E;&#x91CF;&#x8BA1;&#x7B97;&#x7684;&#x56FA;&#x6709;&#x8017;&#x65F6;&#x662F;&#x4E0D;&#x53EF;&#x80FD;&#x964D;&#x4F4E;&#x7684;&#x3002;</p>\n<p>Mixer &#x589E;&#x52A0;&#x8D85;&#x65F6;&#x91CD;&#x542F;&#x673A;&#x5236;&#x540E;&#xFF0C;&#x63D0;&#x9AD8;&#x5FEB;&#x8BA1;&#x7B97;&#x88AB;&#x5206;&#x914D;&#x5230;&#x7684;&#x6982;&#x7387;&#xFF0C;&#x4F46;&#x5E76;&#x672A;&#x8FBE;&#x5230; 100%&#x3002;&#x66F4;&#x7CDF;&#x7CD5;&#x7684;&#x662F;&#xFF0C;&#x8BA1;&#x7B97;&#x5B8C;&#x6210;&#x540E;&#x5199;&#x5165;&#x672C;&#x5730;&#x6301;&#x4E45;&#x5316;&#x7F13;&#x5B58;&#x7684;&#x8FC7;&#x7A0B;&#x662F;&#x5F02;&#x6B65;&#x7684;&#xFF0C;&#x670D;&#x52A1;&#x9047;&#x5230;&#x6162;&#x8BA1;&#x7B97;&#x540E;&#x91CD;&#x542F;&#xFF0C;&#x4E0A;&#x4E00;&#x4E2A;&#x5199;&#x5165;&#x53EF;&#x80FD;&#x5E76;&#x672A;&#x5B8C;&#x6210;&#x3002;&#x8FD9;&#x6837;&#x4E0B;&#x6B21;&#x8BF7;&#x6C42;&#x5230;&#x8FBE;&#x540E;&#xFF0C;&#x7F13;&#x5B58;&#x4E0D;&#x53EF;&#x7528;&#xFF0C;&#x5FEB;&#x8BA1;&#x7B97;&#x4E5F;&#x9700;&#x8981;&#x91CD;&#x65B0;&#x8BA1;&#x7B97;&#x3002;&#x7531;&#x4E8E; Mixer &#x670D;&#x52A1;&#x8BBE;&#x8BA1;&#x4E3A;&#x5404;&#x8282;&#x70B9;&#x5B8C;&#x5168;&#x7B49;&#x4EF7;&#xFF0C;&#x65E0;&#x8BBA;&#x6269;&#x5BB9;&#x591A;&#x5C11;&#x4E2A;&#x8282;&#x70B9;&#xFF0C;&#x5F53;&#x4E1A;&#x52A1;&#x8BF7;&#x6C42;&#x7A97;&#x53E3;&#x5230;&#x8FBE;&#x65F6;&#xFF0C;&#x6162;&#x8BA1;&#x7B97;&#x90FD;&#x4F1A;&#x51FA;&#x73B0;&#x5728;&#x6240;&#x6709;&#x8282;&#x70B9;&#x3002;</p>\n<p>&#x8BA1;&#x7B97;&#x7ED3;&#x679C;&#x4E0D;&#x53EF;&#x5728;&#x8282;&#x70B9;&#x95F4;&#x590D;&#x7528;&#x3001;&#x6162;&#x8BA1;&#x7B97;&#x5BFC;&#x81F4;&#x670D;&#x52A1;&#x53CD;&#x590D;&#x91CD;&#x542F;&#x3001;&#x8BA1;&#x7B97;&#x7ED3;&#x679C;&#x4E0D;&#x80FD;&#x786E;&#x4FDD;&#x6301;&#x4E45;&#x5316;&#x7F13;&#x5B58;&#xFF0C;&#x6D6A;&#x8D39;&#x4E86;&#x6574;&#x4E2A;&#x670D;&#x52A1;&#x7684;&#x7B97;&#x529B;&#x3002;</p>\n<h2 id=\"build-serivce-\">Build Serivce &#x5F02;&#x6B65;&#x8BA1;&#x7B97;&#x670D;&#x52A1;</h2>\n<p>&#x6211;&#x4EEC;&#x91CD;&#x65B0;&#x8BBE;&#x8BA1;&#x4E86;&#x9759;&#x6001;&#x8D44;&#x6E90;&#x670D;&#x52A1;&#x7684;&#x67B6;&#x6784;&#xFF0C;&#x5C06;&#x8BA1;&#x7B97;&#x670D;&#x52A1;&#xFF08;Build Service Brain&#xFF0C;&#x4EE5;&#x4E0B;&#x7B80;&#x79F0; Brain &#x670D;&#x52A1;&#xFF09;&#x548C;&#x5206;&#x53D1;&#x670D;&#x52A1;&#x5206;&#x79BB;&#x5F00;&#x6765;&#x3002;</p>\n<p><img src=\"https://tech.meituan.com/img/&#x7F8E;&#x56E2;&#x91D1;&#x878D;-&#x5B59;&#x8F89;/7.png\" alt=\"Build Service Brain\"></p>\n<p>Brain &#x670D;&#x52A1;&#x4F7F;&#x7528; MySQL &#x5B58;&#x50A8;&#x8BA1;&#x7B97;&#x7684;&#x552F;&#x4E00;&#x6807;&#x8BC6;&#xFF08;&#x6211;&#x4EEC;&#x79F0;&#x4E3A; trace &#x4FE1;&#x606F;&#xFF09;&#x3002;&#x6BCF;&#x4E2A; trace &#x53EF;&#x4EE5;&#x552F;&#x4E00;&#x6307;&#x4EE3;&#x4E00;&#x4E2A;&#x8BA1;&#x7B97;&#xFF0C;&#x6BCF;&#x4E2A;&#x8BA1;&#x7B97;&#x4EC5;&#x5141;&#x8BB8;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#x6267;&#x884C;&#x3002;&#x5F53;&#x8BA1;&#x7B97;&#x4EFB;&#x52A1;&#x5230;&#x8FBE; Brain &#x670D;&#x52A1;&#x7684;&#x968F;&#x673A;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#x540E;&#xFF0C;Brain &#x670D;&#x52A1;&#x9996;&#x5148;&#x68C0;&#x67E5;&#x662F;&#x5426;&#x5DF2;&#x7ECF;&#x88AB;&#x5206;&#x914D;&#xFF0C;&#x5982;&#x679C;&#x5DF2;&#x7ECF;&#x5206;&#x914D;&#x7ACB;&#x5373;&#x8FD4;&#x56DE;&#x72B6;&#x6001;&#x4FE1;&#x606F;&#xFF1B;&#x5982;&#x679C;&#x8BA1;&#x7B97;&#x4EFB;&#x52A1;&#x5B8C;&#x6210;&#x76F4;&#x63A5;&#x8DEF;&#x7531;&#x5230;&#x5BF9;&#x5E94;&#x8282;&#x70B9;&#x8F93;&#x51FA;&#x7ED3;&#x679C;&#x3002;&#x8FD9;&#x4E2A;&#x8BBE;&#x8BA1;&#x4F7F; Brain &#x670D;&#x52A1;&#x6210;&#x4E3A;&#x53EF;&#x6C34;&#x5E73;&#x6269;&#x5C55;&#x7B97;&#x529B;&#x7684;&#x5206;&#x5E03;&#x5F0F;&#x8BA1;&#x7B97;&#x548C;&#x5B58;&#x50A8;&#x670D;&#x52A1;&#x3002;&#x8BA1;&#x7B97;&#x4EFB;&#x52A1;&#x672C;&#x8EAB;&#x6539;&#x4E3A;&#x53E6;&#x8D77;&#x8FDB;&#x7A0B;&#xFF0C;&#x5B8C;&#x5168;&#x907F;&#x514D;&#x8BA1;&#x7B97;&#x4EFB;&#x52A1;&#x548C;&#x7F51;&#x7EDC;&#x670D;&#x52A1;&#x8FDB;&#x7A0B;&#x62A2;&#x5360;&#x8D44;&#x6E90;&#x7684;&#x95EE;&#x9898;&#x3002;&#x53EA;&#x8981;&#x90E8;&#x7F72;&#x8282;&#x70B9;&#x6570;&#x8FBE;&#x5230;&#x4E00;&#x5B9A;&#x6570;&#x91CF;&#xFF0C;&#x96C6;&#x7FA4;&#x5C31;&#x53EF;&#x4EE5;&#x907F;&#x514D;&#x6574;&#x4F53;&#x88AB;&#x67D0;&#x4E2A;&#x6162;&#x8BA1;&#x7B97;&#x6302;&#x8D77;&#x3002;</p>\n<p>Brain &#x670D;&#x52A1;&#x4E0A;&#x7EBF;&#x540E;&#xFF0C;Mixer &#x670D;&#x52A1;&#x4E0D;&#x518D;&#x8D1F;&#x8D23;&#x8BA1;&#x7B97;&#xFF0C;&#x53EF;&#x7528;&#x6027;&#x63D0;&#x5347;&#x81F3;&#x7A33;&#x5B9A; 99.99%&#x3002;&#x6574;&#x4F53;&#x540E;&#x7AEF;&#x54CD;&#x5E94;&#x65F6;&#x95F4;&#xFF08;TP90&#xFF09;&#x4ECE; 5800 ms &#x63D0;&#x5347;&#x81F3; 90 ms&#x3002;Brain &#x670D;&#x52A1;&#x5728;&#x4E00;&#x4E2A;&#x6708;&#x65F6;&#x95F4;&#x5185;&#x5B8C;&#x6210;&#x4E86; 10W+ &#x8BA1;&#x7B97;&#x3002;&#x6839;&#x636E;&#x4E1A;&#x52A1;&#x7684;&#x7EDF;&#x8BA1;&#x6570;&#x636E;&#xFF0C;Diff &#x5408;&#x5E76;&#x8BF7;&#x6C42;&#x6210;&#x529F;&#x7387;&#x63D0;&#x5347;&#x81F3;&#x5C11; 50%&#x3002;</p>\n<h2 id=\"-\">&#x7EBF;&#x4E0A;&#x53D1;&#x7248;&#x524D;&#x7684;&#x9884;&#x70ED;&#x65B9;&#x6848;</h2>\n<p>&#x7ECF;&#x8FC7;&#x4EE5;&#x4E0A; ThunderJS &#x548C; BuildService &#x7684;&#x4F18;&#x5316; &#xFF0C;&#x6211;&#x4EEC;&#x7684;&#x8D85;&#x65F6;&#x7387;&#x964D;&#x5230; 3%&#xFF0C;&#x6536;&#x76CA;&#x975E;&#x5E38;&#x663E;&#x8457;&#x3002;&#x6B64;&#x65F6;&#x7684;&#x6D41;&#x7A0B;&#x662F;&#xFF1A;</p>\n<p><img src=\"https://tech.meituan.com/img/&#x7F8E;&#x56E2;&#x91D1;&#x878D;-&#x5B59;&#x8F89;/8.png\" alt=\"&#x89E3;&#x51B3;&#x8D85;&#x65F6;\"></p>\n<p>&#x5F53;&#x4E00;&#x4E2A;&#x8BA1;&#x7B97;&#x4EFB;&#x52A1;&#x7684;&#x56FA;&#x6709;&#x8017;&#x65F6;&#x65E0;&#x6CD5;&#x51CF;&#x5C11;&#x65F6;&#xFF0C;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x63D0;&#x524D;&#x8BA1;&#x7B97;&#x6765;&#x907F;&#x514D;&#x7528;&#x65F6;&#x538B;&#x529B;&#x3002;&#x4EE5;&#x524D;&#x7684; Build Service &#x67B6;&#x6784;&#x4E0D;&#x80FD;&#x652F;&#x6301;&#x6211;&#x4EEC;&#x4EFB;&#x610F;&#x9884;&#x70ED;&#xFF0C;&#x4F46;&#x662F;&#x65B0;&#x67B6;&#x6784;&#x7684;&#x8BBE;&#x8BA1;&#x662F;&#x5141;&#x8BB8;&#x9884;&#x70ED;&#x7684;&#x3002;&#x6240;&#x4EE5;&#x6211;&#x4EEC;&#x8FDB;&#x4E00;&#x6B65;&#x5B9E;&#x65BD;&#x4E86;&#x9884;&#x70ED;&#x65B9;&#x6848;&#x3002;</p>\n<p>&#x5B9E;&#x65BD;&#x9884;&#x70ED;&#x9996;&#x5148;&#x8981;&#x8003;&#x8651;&#x7684;&#x70B9;&#x5C31;&#x662F;&#x54EA;&#x4E24;&#x4E2A;&#x7248;&#x672C;&#x4E4B;&#x95F4;&#x7684;&#x9884;&#x70ED;&#xFF0C;&#x5728; ThunderJS &#x7684;&#x8BBE;&#x8BA1;&#x4E2D;&#xFF0C;&#x6587;&#x4EF6;&#x7248;&#x672C;&#x53F7;&#x53D6;&#x81EA; Git &#x7684; CommitId&#xFF0C;&#x6BCF;&#x6B21;&#x63D0;&#x4EA4;&#x540E;&#xFF0C;&#x5373;&#x4F7F;&#x6587;&#x4EF6;&#x5185;&#x5BB9;&#x6CA1;&#x6709;&#x53D8;&#x5316;&#x7248;&#x672C;&#x53F7;&#x4E5F;&#x4F1A;&#x9012;&#x8FDB;&#xFF0C;&#x5BFC;&#x81F4;&#x9700;&#x8981;&#x8FDB;&#x884C;&#x4E0D;&#x5FC5;&#x8981;&#x7684;&#x5408;&#x5E76;&#x8BF7;&#x6C42;&#x3002;&#x8FD9;&#x4E00;&#x70B9;&#x5728;&#x4E4B;&#x524D;&#x6211;&#x4EEC;&#x4F18;&#x5316;&#x8D85;&#x65F6;&#x95EE;&#x9898;&#x65F6;&#xFF0C;&#x88AB;&#x8BA4;&#x4E3A;&#x662F; ThunderJS &#x7684;&#x4E00;&#x4E2A;&#x5F85;&#x4F18;&#x5316;&#x70B9;&#xFF0C;&#x800C;&#x5728;&#x9884;&#x70ED;&#x9636;&#x6BB5;&#xFF0C;CommitId &#x6BD4;&#x6587;&#x4EF6;&#x5185;&#x5BB9;&#x7684; Hash &#x503C;&#x66F4;&#x6709;&#x4EF7;&#x503C;&#xFF0C;&#x901A;&#x8FC7;&#x8FFD;&#x8E2A; Git &#x63D0;&#x4EA4;&#x5386;&#x53F2;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5F88;&#x5BB9;&#x6613;&#x7684;&#x627E;&#x5230;&#x6240;&#x6709;&#x6587;&#x4EF6;&#x7684;&#x7EBF;&#x4E0A;&#x7248;&#x672C;&#xFF1B;&#x5982;&#x679C;&#x4F7F;&#x7528;&#x6587;&#x4EF6;&#x5185;&#x5BB9;&#x7684; Hash &#x503C;&#x4F5C;&#x4E3A;&#x7248;&#x672C;&#xFF0C;&#x4E0D;&#x80FD;&#x63CF;&#x8FF0;&#x7248;&#x672C;&#x5148;&#x540E;&#x5173;&#x7CFB;&#xFF0C;&#x65E0;&#x6CD5;&#x660E;&#x786E;&#x627E;&#x5230;&#x6587;&#x4EF6;&#x589E;&#x91CF;&#x8BA1;&#x7B97;&#x7684;&#x524D;&#x540E;&#x7248;&#x672C;&#xFF0C;&#x9884;&#x70ED;&#x4E5F;&#x5C31;&#x65E0;&#x4ECE;&#x8C08;&#x8D77;&#x4E86;&#x3002;</p>\n<p>&#x901A;&#x8FC7;&#x6211;&#x4EEC;&#x57CB;&#x70B9;&#x8BA1;&#x7B97;&#xFF0C;&#x7EBF;&#x4E0A;&#x53D1;&#x7248;&#x4E4B;&#x524D;&#x9884;&#x70ED; 5 &#x4E2A;&#x7248;&#x672C;&#xFF08;&#x5206;&#x522B;&#x8BA1;&#x7B97;&#x6700;&#x8FD1; 5 &#x4E2A;&#x7248;&#x672C;&#x5230;&#x6700;&#x65B0;&#x7248;&#x672C;&#x7684;&#x589E;&#x91CF;&#xFF09;&#x80FD;&#x5C06;&#x8D85;&#x65F6;&#x7387;&#x964D;&#x5230;1.5%&#xFF0C;&#x9884;&#x70ED; 10 &#x4E2A;&#x7248;&#x672C;&#x80FD;&#x5C06;&#x8D85;&#x65F6;&#x7387;&#x964D;&#x81F3; 1.1%&#x3002;</p>\n<p>&#x7406;&#x8BBA;&#x4E0A;&#xFF0C;&#x9884;&#x70ED;&#x66F4;&#x591A;&#x7248;&#x672C;&#x53EF;&#x4EE5;&#x8FDB;&#x4E00;&#x6B65;&#x964D;&#x4F4E;&#x8D85;&#x65F6;&#x7387;&#xFF0C;&#x9884;&#x70ED;&#x6240;&#x6709;&#x7248;&#x672C;&#x53EF;&#x4EE5;&#x4F7F;&#x8D85;&#x65F6;&#x6D88;&#x5931;&#xFF0C;&#x4F46;&#x662F;&#x9884;&#x70ED;&#x6240;&#x9700;&#x65F6;&#x95F4;&#x4E5F;&#x4F1A;&#x5927;&#x5E45;&#x589E;&#x52A0;&#x3002;&#x5728;&#x5B9E;&#x9645;&#x60C5;&#x51B5;&#x4E2D;&#xFF0C;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x5728;&#x9884;&#x70ED;&#x6548;&#x679C;&#x548C;&#x9884;&#x70ED;&#x6210;&#x672C;&#x4E4B;&#x95F4;&#x6298;&#x8877;&#x9009;&#x62E9;&#x3002;</p>\n<h2 id=\"-\">&#x603B;&#x7ED3;</h2>\n<p>&#x9879;&#x76EE;&#x53D1;&#x5C55;&#x81F3;&#x4ECA;&#xFF0C;ThunderJS &#x589E;&#x91CF;&#x66F4;&#x65B0;&#x65B9;&#x6848;&#x5728;&#x626B;&#x7801;&#x4ED8;&#x9879;&#x76EE;&#x4E2D;&#x53D6;&#x5F97;&#x4E86;&#x975E;&#x5E38;&#x597D;&#x7684;&#x6536;&#x76CA;&#x3002;</p>\n<p><img src=\"https://tech.meituan.com/img/&#x7F8E;&#x56E2;&#x91D1;&#x878D;-&#x5B59;&#x8F89;/9.png\" alt=\"ThunderJS&#x6536;&#x76CA;\"></p>\n<p>&#x626B;&#x7801;&#x4ED8;&#x9879;&#x76EE;&#x7684;&#x6240;&#x6709;&#x8BF7;&#x6C42;&#x4E2D;&#xFF0C;&#x6709;90%&#x6765;&#x81EA;&#x4E8E;&#x79FB;&#x52A8;&#x7F51;&#x7EDC;&#xFF0C;10%&#x6765;&#x81EA;&#x4E8E; WiFi&#xFF0C;&#x901A;&#x8FC7;&#x7F13;&#x5B58;&#x5E73;&#x5747;&#x6BCF;&#x5929;&#x8282;&#x7EA6;&#x6D41;&#x91CF; 49.37GB&#xFF0C;&#x901A;&#x8FC7;&#x589E;&#x91CF;&#x66F4;&#x65B0;&#x5E73;&#x5747;&#x6BCF;&#x5929;&#x8282;&#x7EA6;&#x6D41;&#x91CF; 33.41GB&#x3002;&#x5BF9;&#x8BBF;&#x95EE;&#x91CF;&#x5927;&#xFF0C;&#x7F51;&#x7EDC;&#x73AF;&#x5883;&#x8981;&#x6C42;&#x4E25;&#x82DB;&#x7684; C &#x7AEF;&#x4EA7;&#x54C1;&#x6765;&#x8BF4;&#xFF0C;&#x8282;&#x7EA6;&#x7684;&#x6D41;&#x91CF;&#x548C;&#x7F51;&#x7EDC;&#x8BF7;&#x6C42;&#x65F6;&#x95F4;&#x6D88;&#x8017;&#x90FD;&#x662F;&#x6211;&#x4EEC;&#x4E3A;&#x7528;&#x6237;&#x5E26;&#x6765;&#x7684;&#x4EF7;&#x503C;&#x3002;</p>\n<h2 id=\"-\">&#x62DB;&#x8058;</h2>\n<p>&#x7F8E;&#x56E2;&#x91D1;&#x878D;&#x667A;&#x80FD;&#x652F;&#x4ED8;&#x5927;&#x524D;&#x7AEF;&#x7814;&#x53D1;&#x56E2;&#x961F;&#x6B63;&#x5728;&#x62DB;&#x8058;&#x8D44;&#x6DF1;&#x524D;&#x7AEF;&#x5DE5;&#x7A0B;&#x5E08;&#xFF0C;&#x524D;&#x7AEF;&#x6280;&#x672F;&#x4E13;&#x5BB6;&#xFF0C;&#x96C6;&#x56E2;&#x91CD;&#x70B9;&#x4E1A;&#x52A1;&#xFF08;&#x771F;&#x5FC3;&#x91CD;&#x70B9;&#xFF0C;&#x4E0D;&#x5439;&#xFF09;&#xFF0C;&#x673A;&#x4F1A;&#x591A;&#xFF0C;&#x6311;&#x6218;&#x5927;&#xFF0C;&#x6765;&#x6765;&#x6765;&#xFF0C;&#x6211;&#x4EEC;&#x597D;&#x597D;&#x804A;&#x804A;&#xFF0C;&#x5373;&#x4F7F;&#x6682;&#x65F6;&#x4E0D;&#x8003;&#x8651;&#x673A;&#x4F1A;&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x548C;&#x6211;&#x4EEC;&#x804A;&#x804A;&#x59B9;&#x5B50;&#xFF0C;&#x804A;&#x804A;&#x6BD4;&#x7279;&#x5E01;&#xFF0C;&#x4E07;&#x4E00;&#x54EA;&#x5929;&#x4F60;&#x770B;&#x673A;&#x4F1A;&#x4E86;&#x5462;&#xFF1F;</p>\n<p>&#x56E2;&#x961F;&#x516C;&#x4F17;&#x53F7;&#xFF1A;meituanfsp</p>\n<p>wechat: yoyo779269</p>\n<p>Email: sunhui04@meituan.com</p>\n<p>&#x8BF7;&#x5907;&#x6CE8;&#x6765;&#x81EA;&#x4E8E;&#x7F8E;&#x56E2;&#x70B9;&#x8BC4;&#x6280;&#x672F;&#x535A;&#x5BA2;</p>\n</div></div>', '孙辉 李罡 ·2017-12-23 18:24\n\n扫码付项目是美团金融智能支付团队面向 C 端消费者推出的一款 H5 融合支付类的产品，消费者在商家消费之后，可使用多种 App 进行扫码支付，同时可对商家进行评价，支持美团、大众点评、微信、支付宝、美团钱包等多种 App，目前业务日均 PV 千万级。如下图所示：\n\n![扫码付页面](https://tech.meituan.com/img/美团金融-孙辉/1.png)\n\n接入扫码付的商家大多数位于购物中心、写字楼等人口密集的室内空间。网络链路复杂、相对开阔的地区网络质量较差，为了减轻网络条件的影响，我们使用团队之前实现的模块加载器 ThunderJS。通过 **字符级增量更新** 减少文件传输大小，节省流量、提高页面成功率和加载速度。其中增量计算能力由美团平台的静态资源托管方案 Build Service 支持。\n\n我们曾经在 《[美团智能支付背后的前端工程师](https://juejin.im/post/58be3fac2f301e006c784733)》介绍过我们的前端服务架构，如下图：\n\n![架构图](http://p0.meituan.net/codeman/5bc29587258df22d9646d0962de796dd53632.png)\n\nThunderJS（团队内部实现的一款 CMD 模块加载器） 属于其中非常重要的一环，集成在脚手架中为井喷的业务发展提供了基础。相比业界其它模块加载器，ThunderJS 定制加强了与静态资源托管（公司自研的Build Service）结合的能力，能够让我们对静态资源的加载进行针对性的优化，而在 C 端项目中，静态资源的加载优化是我们尤为重视的。\n\n扫码付项目中也使用了ThunderJS，随着业务规模的持续增长，ThunderJS 的方案也在不断优化，本文主要介绍基于 ThunderJS 和 Build Service 的产品优化方案，希望为大家优化项目的静态资源加载提供更多思路。\n\n最初的方案\n-----\n\n![ThunderJS流程图](https://tech.meituan.com/img/美团金融-孙辉/2.png)\n\nThunderJS 将页面的 JS 资源及版本信息存储在 LocalStorage 中。页面加载时通过线上版本和本地版本来判断是否需要更新，如果需要则会尝试进行 Diff 合并请求并 Patch 到本地资源。不需要更新则直接执行 LocalStorage 中缓存的数据，并且在合并请求失败的情况下会逐一加载单文件。\n\n### 是否需要更新\n\n判断**是否需要更新**的具体原则如下：\n\n1.  该文件名在线上版本和本地版本中都存在。\n2.  该文件的版本在线上和本地中一致。\n3.  该文件存在于LocalStorage中。\n\n### Diff 合并请求 与 Patch Diff 结果\n\n流程图中的 **Diff 合并请求** 是指在一次请求中输出多个文件的增量计算结果，请求合并是一种常用的 Web 资源优化策略，拼接多个相同媒体类型的资源经由单个请求输出，可减少页面实际发起的网络请求数。请求合并需要 Web 资源加载器配合。\n\n增量计算的输出是一个固定格式的 JSON，描述了 Patch Diff 结果时所遵循的规则，如下图：\n\n![patch规则](https://tech.meituan.com/img/美团金融-孙辉/3.png)\n\n例如：\n\n    [ \'cmp/util.js\', [0, 33], \'mn\', [34, 10] ]\n    \n\n以上数据结构表示原文件从第 0 个位置开始保留 33 个字符，连接 `mn` ，从第 34 个位置开始保留10个字符。\n\n**Patch Diff 结果**就是利用增量更新的结果，结合原文件，将文件恢复至最新文件的过程。\n\nBuild Service 工作流程\n------------------\n\nBuild Service 是美团平台的静态资源托管方案，提供静态资源部署、处理和分发能力，对接 CDN。\n\n![Build Service 基本链路](https://tech.meituan.com/img/美团金融-孙辉/4.png)\n\n如图，用户请求达到 CDN 如果没有命中缓存，会一路回源至源站，源站检索并处理资源，经网关输出给 CDN。本文中提到的增量计算属于资源处理任务，由源站执行。\n\n文本增量计算的工程选择\n-----------\n\n文本增量计算最初基于编辑距离原理实现，时间复杂度 O(N^2)，与文本长度正相关，实际应用时性能较差。Build Service 选择 [Myers 增量算法](http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.4.6927)，有效降低单次增量计算的时间消耗。其时间复杂度由 O(N^2) 改变为 O(ND)，与文本长度、差异长度正相关。Web 业务迭代频率高、单次迭代差异小、D 接近常数，使用 Myers 增量算法时间复杂度可接近 O(N)。\n\n初步效果\n----\n\n根据扫码付的统计结果，增量更新相比全量请求，传输数据可减少多至99%，合并请求平均可减少请求数95%。\n\n业务增长与计算瓶颈\n---------\n\n随着业务的增长，PV 很快就在2017年4月份达到了百万级。扫码付业务采用细粒度模块化的设计，业务不断迭代，文件数越来越多，单次合并请求的文件数超过 30个。需要进行增量计算的版本组合也越来越多，跨越多个版本的增量计算开始出现，增量计算耗时增加，Build Service 遇到了计算能力的瓶颈。我们发现3s超时时间条件下，合并请求的失败率超过50%，于是着手开始优化。\n\nBuild Service 优化策略\n------------------\n\nBuild Service 最初直接通过公共集群提供文本增量计算服务。公共集群同时还承载着其他计算任务，如文件压缩、引用计算等。增量计算与其他任务相比，计算规模差异巨大，消耗了集群大多数算力，导致其他计算任务延迟大幅升高。为了避免公共集群不可用对公司其他业务产生影响，Build Service 紧急拆分上线 Build Service Mixer 服务（以下简称 Mixer 服务），将请求合并和增量计算独立出来单独搭设集群，实现业务隔离。\n\n![Build Service Mixer](https://tech.meituan.com/img/美团金融-孙辉/5.png)\n\nMixer 服务上线后，隔离了增量计算对其他业务的影响，争取了一些时间优化整个方案。\n\n持久化计算缓存\n-------\n\n合并请求的各个资源文件是互相独立的。Mixer 收到一次请求，会分别缓存每个资源文件的计算任务输出。不同的资源合并请求可以复用结果片段，减少不必要的计算。上线后，Mixer 服务的计算能力显著增强，日可用性一度达到100%，计算成功的增量片段再输出的时间消耗稳定在50毫秒以内。\n\n超时自动重启机制\n--------\n\nMyers 增量算法大多数情况下性能提升显著，但是当文本差异较大时，计算耗时会显著增加。最不理想的情况下时间复杂度会退化到O(N^2)。Mixer 服务使用 Node 开发，计算增量与输出资源在一个进程，为了避免计算任务阻塞请求响应，我们将计算改为了进程内异步。\n\n有时业务会上线差异较大的增量片段，在一个很短的时间窗口内，许多相似的用户请求会同时分摊给所有 Mixer 进程，宿主机的所有 CPU 核心被占用处理同一个慢的增量计算，导致 Mixer 服务输出能力下降，请求积压。为了临时解决这个现象，我们采用了简单粗暴的自动重启，如果计算超时判定为慢计算，服务自杀由 PM2 重新拉起。服务重启后慢计算立即失败，用户侧降级到单资源请求，Mixer 有概率可以分配到快计算。时间窗口通过后不再出现慢计算时，Mixer 服务算力恢复。\n\n这个机制一定程度上缓解了我们的计算瓶颈，但是没有完全解决问题。\n\nThunderJS 优化策略\n--------------\n\n实际业务使用中，我们发现由于没有对合并请求的文件数做限制，一次合并请求会合并过多的请求，特别是在扫码付这个项目中，导致一次请求的计算量过大，造成比较严重的超时问题。\n\n正逢 Mixer 瓶颈阶段，为了降低 Mixer 的输出压力，我们需要使一次合并请求能够使用更少内存更快地完成。综合考虑后，我们降低了单次请求合并的资源数量上限，从最初的不设限改为限制最多 10个资源，这样由原本一次请求30个文件的增量结果，改成并发3个请求，每次请求10个文件，同时 Mixer 配合参数调优，一定程度上缓解了超时问题。\n\n业务降级机制\n------\n\n### 合并请求失败后的单文件加载缓存\n\n正如前文所说，在实际情况中，Mixer 计算服务会不可避免的遇到超时的问题，为了避免超时后导致无法加载相应的静态资源，我们有针对性的设计了降级机制。\n\n在最初的 ThunderJS 中，如果遇到超时，会重新使用 `createElement` 方式将合并请求中的资源单独加载（直接请求文件，而不是请求文件两个版本的增量结果）。但是在实际业务中，我们注意到，如果能将单独加载的文件也做缓存，那在超时比较严重的时段，能有效避免老用户重复进行请求，因此我们将 `createElement` 方式换成 XHR ，将请求响应的文件内容存入 LocalStorage，实现了在降级机制下增强缓存的效果。\n\n### 弱网优先使用缓存文件\n\n不管请求有多快，终究还是需要发起网络请求，最好的方式就是不需要网络请求即可使用，我们将网络状况分为 **WiFi、4G、3G、2G、unknown** ，其中 2G和unknown 被我们认为是 **弱网**，大概占比在10.35%，对于这部分用户，我们选择优先执行缓存中文件，没有相关文件则进行单文件请求。\n\n优先执行缓存的出发点在于弱网下加载文件成本较高，我们需要优先保证支付流程的完善，即使这样无法给用户带来最新的用户体验。\n\n完善降级机制后的流程图如下所示：\n\n![完善降级服务](https://tech.meituan.com/img/美团金融-孙辉/6.png)\n\n实践证明，降级机制起到了非常大的作用，在前期超时问题比较严重的情况下（超时率50%+），降级机制甚至承担了主要角色，在后期，降级机制的存在也是根本解决计算瓶颈的方案之所以能实施的前提。\n\n计算瓶颈的根本解决方案\n-----------\n\n扫码付业务持续增长，增量计算服务的瓶颈依然存在。根据公司的基础监控服务的数据，Mixer 服务周期出现的请求积压越来越频繁，`CLOSE_WAIT` 数会快速增长。`CLOSE_WAIT` 是一种连接状态，在服务端响应未完成的请求前，连接被请求方关闭时可能出现。这个指标的快速增长意味着大量的请求不能在超时区间内处理，直接表征 Mixer 服务算力不足。\n\n前文中我们讨论过增量计算时间复杂度高，即便使用 Myers 增量算法，也不会快到没有耗时。除非文本增量计算有重大理论突破，否则静态资源的文本增量计算的固有耗时是不可能降低的。\n\nMixer 增加超时重启机制后，提高快计算被分配到的概率，但并未达到 100%。更糟糕的是，计算完成后写入本地持久化缓存的过程是异步的，服务遇到慢计算后重启，上一个写入可能并未完成。这样下次请求到达后，缓存不可用，快计算也需要重新计算。由于 Mixer 服务设计为各节点完全等价，无论扩容多少个节点，当业务请求窗口到达时，慢计算都会出现在所有节点。\n\n计算结果不可在节点间复用、慢计算导致服务反复重启、计算结果不能确保持久化缓存，浪费了整个服务的算力。\n\nBuild Serivce 异步计算服务\n--------------------\n\n我们重新设计了静态资源服务的架构，将计算服务（Build Service Brain，以下简称 Brain 服务）和分发服务分离开来。\n\n![Build Service Brain](https://tech.meituan.com/img/美团金融-孙辉/7.png)\n\nBrain 服务使用 MySQL 存储计算的唯一标识（我们称为 trace 信息）。每个 trace 可以唯一指代一个计算，每个计算仅允许一个节点执行。当计算任务到达 Brain 服务的随机一个节点后，Brain 服务首先检查是否已经被分配，如果已经分配立即返回状态信息；如果计算任务完成直接路由到对应节点输出结果。这个设计使 Brain 服务成为可水平扩展算力的分布式计算和存储服务。计算任务本身改为另起进程，完全避免计算任务和网络服务进程抢占资源的问题。只要部署节点数达到一定数量，集群就可以避免整体被某个慢计算挂起。\n\nBrain 服务上线后，Mixer 服务不再负责计算，可用性提升至稳定 99.99%。整体后端响应时间（TP90）从 5800 ms 提升至 90 ms。Brain 服务在一个月时间内完成了 10W+ 计算。根据业务的统计数据，Diff 合并请求成功率提升至少 50%。\n\n线上发版前的预热方案\n----------\n\n经过以上 ThunderJS 和 BuildService 的优化 ，我们的超时率降到 3%，收益非常显著。此时的流程是：\n\n![解决超时](https://tech.meituan.com/img/美团金融-孙辉/8.png)\n\n当一个计算任务的固有耗时无法减少时，可以通过提前计算来避免用时压力。以前的 Build Service 架构不能支持我们任意预热，但是新架构的设计是允许预热的。所以我们进一步实施了预热方案。\n\n实施预热首先要考虑的点就是哪两个版本之间的预热，在 ThunderJS 的设计中，文件版本号取自 Git 的 CommitId，每次提交后，即使文件内容没有变化版本号也会递进，导致需要进行不必要的合并请求。这一点在之前我们优化超时问题时，被认为是 ThunderJS 的一个待优化点，而在预热阶段，CommitId 比文件内容的 Hash 值更有价值，通过追踪 Git 提交历史，我们可以很容易的找到所有文件的线上版本；如果使用文件内容的 Hash 值作为版本，不能描述版本先后关系，无法明确找到文件增量计算的前后版本，预热也就无从谈起了。\n\n通过我们埋点计算，线上发版之前预热 5 个版本（分别计算最近 5 个版本到最新版本的增量）能将超时率降到1.5%，预热 10 个版本能将超时率降至 1.1%。\n\n理论上，预热更多版本可以进一步降低超时率，预热所有版本可以使超时消失，但是预热所需时间也会大幅增加。在实际情况中，我们需要在预热效果和预热成本之间折衷选择。\n\n总结\n--\n\n项目发展至今，ThunderJS 增量更新方案在扫码付项目中取得了非常好的收益。\n\n![ThunderJS收益](https://tech.meituan.com/img/美团金融-孙辉/9.png)\n\n扫码付项目的所有请求中，有90%来自于移动网络，10%来自于 WiFi，通过缓存平均每天节约流量 49.37GB，通过增量更新平均每天节约流量 33.41GB。对访问量大，网络环境要求严苛的 C 端产品来说，节约的流量和网络请求时间消耗都是我们为用户带来的价值。\n\n招聘\n--\n\n美团金融智能支付大前端研发团队正在招聘资深前端工程师，前端技术专家，集团重点业务（真心重点，不吹），机会多，挑战大，来来来，我们好好聊聊，即使暂时不考虑机会，也可以和我们聊聊妹子，聊聊比特币，万一哪天你看机会了呢？\n\n团队公众号：meituanfsp\n\nwechat: yoyo779269\n\nEmail: sunhui04@meituan.com\n\n请备注来自于美团点评技术博客', 0, 1, 0);
INSERT INTO `post` (`id`, `createAt`, `updateAt`, `title`, `description`, `thumb`, `url`, `html`, `markdown`, `views`, `status`, `push`) VALUES
(46, '2018-04-23 11:01:44.572083', '2018-04-23 11:01:44.572083', '用CSS Houdini画一片星空', '要问2018最让人兴奋的CSS技术是什么，CSSHoudini当之无愧，甚至可以去掉2018这个限定。其实这个技术在2016年就出来了，但是在今年3月发布的Chrome65才正式支持。CSSHoudini可以做些什么？谷歌开发者文档列了几个demo，我们先来看一下这几个demo：（1）给textarea加一个方格背景（demo）使用以下CSS代码：textarea{background-image:paint(checkerboard);}（2）给div添加一个钻石形状背景（demo）使用以下CSS：di', 'https://user-gold-cdn.xitu.io/2018/4/22/162eb877a0913c0a', 'https://juejin.im/post/5adc091b51882567105f5586?utm_source=gold_browser_extension', '<p>要问2018最让人兴奋的CSS技术是什么，CSS Houdini当之无愧，甚至可以去掉2018这个限定。其实这个技术在2016年就出来了，但是在今年3月发布的Chrome 65才正式支持。</p><p>CSS Houdini可以做些什么？<a href=\"https://link.juejin.im/?target=https%3A%2F%2Fdevelopers.google.com%2Fweb%2Fupdates%2F2016%2F05%2Fhoudini\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">谷歌开发者文档</a>列了几个demo，我们先来看一下这几个demo：</p><p>（1）给textarea加一个方格背景（<a href=\"https://link.juejin.im/?target=https%3A%2F%2Ffed.renren.com%2Fhtml%2Fhoudini%2Fhoudini-samples%2Fpaint-worklet%2Fcheckerboard%2Findex.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">demo</a>）</p><p><img alt=\"\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2018/4/22/162eb83af559da91?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"480\" data-height=\"298\" src=\"https://user-gold-cdn.xitu.io/2018/4/22/162eb83af559da91?imageView2/0/w/1280/h/960/ignore-error/1\"></p><p>使用以下CSS代码：</p><pre code-lang=\"css\" class=\"hljs css\"><code class=\"hljs css\" lang=\"css\"><span class=\"hljs-selector-tag\">textarea</span> {\n    <span class=\"hljs-attribute\">background-image</span>: <span class=\"hljs-built_in\">paint</span>(checkerboard);\n}</code></pre><p>（2）给div添加一个钻石形状背景（<a href=\"https://link.juejin.im/?target=https%3A%2F%2Ffed.renren.com%2Fhtml%2Fhoudini%2Fhoudini-samples%2Fpaint-worklet%2Fdiamond-shape%2Findex.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">demo</a>）</p><p><img alt=\"\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2018/4/22/162eb83af578676b?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"820\" data-height=\"648\" src=\"https://user-gold-cdn.xitu.io/2018/4/22/162eb83af578676b?imageView2/0/w/1280/h/960/ignore-error/1\"></p><p>使用以下CSS：</p><pre code-lang=\"css\" class=\"hljs css\"><code class=\"hljs css\" lang=\"css\"><span class=\"hljs-selector-tag\">div</span> {\n    <span class=\"hljs-attribute\">--top-width</span>: <span class=\"hljs-number\">80</span>;\n    <span class=\"hljs-attribute\">--top-height</span>: <span class=\"hljs-number\">20</span>;\n    <span class=\"hljs-attribute\">-webkit-mask-image</span>: <span class=\"hljs-built_in\">paint</span>(demo);\n}</code></pre><p>（3）点击圆圈扩散动画（<a href=\"https://link.juejin.im/?target=https%3A%2F%2Ffed.renren.com%2Fhtml%2Fhoudini%2Fhoudini-samples%2Fpaint-worklet%2Fripple%2Findex.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">demo</a>）</p><p><img alt=\"\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2018/4/22/162eb83af6011574?imageslim\" data-width=\"316\" data-height=\"310\" src=\"https://user-gold-cdn.xitu.io/2018/4/22/162eb83af6011574?imageslim\"></p><p>这3个例子都是用了Houdini里面的CSS Paint API。</p><p>第1个例子如果使用传统的CSS属性，我们最多可能就是使用渐变来做颜色的变化，但是做不到这种一个格子一个格子的颜色变化的，而第2个例子也是没有办法直接用CSS画个钻石的形状。这个时候你可能会想到会SVG/Canvas的方法，SVG和Canvas的特色是矢量路径，可以画出各种各样的矢量图形，而Canvas还能控制任意像素点，所以用这两种方式也是可以画出来的。</p><p>但是Canvas和html相结合的时候就会显得有点笨拙，就像第2个例子画一个钻石的形状，用Canvas你需要利用类似于BFC定位的方式，把Cavans调到合适的定位，还要注意z-index的覆盖关系，而使用SVG可能会更简单一点，可以设置background-image为一张钻石的svg图片，但是无法像Canavas一样很方便地做一些变量控制，例如随时改一下钻石边框的颜色粗细等。</p><p>而第1个例子给textarea加格子背景，只能使用background-image + svg的方式，但是你不知道这个textarea有多大，svg的格子需要准备多少个呢？当然你可能会说谁会给textarea加一个这样的背景呢。但这只是一个示例，其它的场景可能也会遇到类似的问题。</p><p>第3个例子点击圆圈扩散动画，这个也可以在div里面absolute定位一个canvas元素，但是我们又遇到另外一个问题：无法很方便复用，假设这种圈圈扩散效果在其它地方也要用到，那就得在每个地方都写一个canvas元素并初始化。</p><p>所以传统的方式存在以下问题：</p><p>（1）需要调好和其它html元素的定位和z-index关系等</p><p>（2）编辑框等不能方便地改背景，不能方便地做变量控制</p><p>（3）不能方便地进行复用</p><p>其实还有另外一个更重要的问题就是性能问题，用Cavans画这种效果时需要自己控制好帧率，一不小心电脑CPU风扇可能就要呼啸起来，特别是不能把握重绘的时机，如果元素大小没有变化是不需要重绘，如果元素被拉大了，那么需要进行重绘，或者当鼠标hover的时候做动画才需要重绘。</p><p>CSS Houdini在解决这种自定义图形图像绘制的问题提供了很好的解决方案，可以<b>用Canvas画一个你想要的图形，然后注册到CSS系统里面，就能在CSS属性里面使用这个图形了</b>。以画一个星空为例，一步步说明这个过程。</p><h3 data-id=\"heading-0\">1.  画一个黑夜的夜空</h3><p>CSS Houdini只能工作在localhost域名或者是https的环境，否则的话相关API是不可见（undefined）的。如果没有https环境的话，可以装一个http-server的npm包，然后在本地启动，访问localhost:8080就可以了，新建一个index.html，写入：</p><pre code-lang=\"htmlbars\" class=\"hljs htmlbars\"><code class=\"hljs htmlbars\" lang=\"htmlbars\"><span class=\"xml\"><span class=\"hljs-meta\"><!DOCType></span>\n<span class=\"hljs-tag\"><<span class=\"hljs-name\">html</span>></span>\n<span class=\"hljs-tag\"><<span class=\"hljs-name\">head</span>></span>\n    <span class=\"hljs-tag\"><<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"utf-8\"</span>></span>\n<span class=\"hljs-tag\"><<span class=\"hljs-name\">style</span>></span><span class=\"css\">\n<span class=\"hljs-selector-tag\">body</span> {\n    <span class=\"hljs-attribute\">background-image</span>: <span class=\"hljs-built_in\">paint</span>(starry-sky);\n}\n</span><span class=\"hljs-tag\"></<span class=\"hljs-name\">style</span>></span>    \n<span class=\"hljs-tag\"></<span class=\"hljs-name\">head</span>></span>\n<span class=\"hljs-tag\"><<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\"><<span class=\"hljs-name\">script</span>></span><span class=\"actionscript\">\n    CSS.paintWorklet.addModule(<span class=\"hljs-string\">\'starry-sky.js\'</span>);\n</span><span class=\"hljs-tag\"></<span class=\"hljs-name\">script</span>></span>\n<span class=\"hljs-tag\"></<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\"></<span class=\"hljs-name\">html</span>></span></span></code></pre><p>通过在JS调用CSS.paintWorklet.addModule注册一个CSS图形starry-sky，然后在CSS里面就可以使用这个图形，写在background-image、border-image或者mask-image等属性里面。如上面代码的：</p><pre code-lang=\"css\" class=\"hljs css\"><code class=\"hljs css\" lang=\"css\"><span class=\"hljs-selector-tag\">body</span> {\n    <span class=\"hljs-attribute\">background-image</span>: <span class=\"hljs-built_in\">paint</span>(starry-sky);\n}</code></pre><p>注册paint worket的时候需要给它一个独立的js，作为这个worklet的工作环境，这个环境里面是没有window/document等对象的和web worker一样。如果你不想写管理太多js文件，可以借助blob，blob是可以存放任何类型的数据的，包括JS文件。</p><p>Worklet需要的starry-sky.js的代码如下所示：</p><pre code-lang=\"javascript\" class=\"hljs javascript\"><code class=\"hljs javascript\" lang=\"javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">StarrySky</span> </span>{\n    paint (ctx, paintSize, properties) {\n        <span class=\"hljs-comment\">// 使用Canvas的API进行绘制</span>\n        ctx.fillRect(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, paintSize.width, paintSize.height);\n    }\n}\n<span class=\"hljs-comment\">// 注册这个属性</span>\nregisterPaint(<span class=\"hljs-string\">\'starry-sky\'</span>, StarrySky);</code></pre><p>写一个类，实现paint接口，这个接口会传一个canvas的context变量、当前画布的大小即当前dom元素的大小，以及当前dom元素的css属性properties.</p><p>在paint函数里面调用canvas的绘制函数fillRect进行填充，默认填充色为黑色。访问index.html，就会看到整个页面变成黑色了。我们的Hello World的CSS Houdini Painter就跑起来了，没错，就是这么简单。</p><p>但是有一点需要强调的是，浏览器实现并不是给那个dom元素添加一个Canvas然后隐藏起来，这个Paint Worket实际上是直接影响了当前dom元素重绘过程，相当于我们给它添加了一个重绘的步骤，下文会继续提及。</p><p>如果不想独立写一个js，用blob可以这样：</p><pre code-lang=\"javascript\" class=\"hljs javascript\"><code class=\"hljs javascript\" lang=\"javascript\"><span class=\"hljs-keyword\">let</span> blobURL = URL.createObjectURL( <span class=\"hljs-keyword\">new</span> Blob([ <span class=\"hljs-string\">\'(\'</span>,\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n        \n        <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">StarrySky</span> </span>{\n            paint (ctx, paintSize, properties) {\n                ctx.fillRect(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, paintSize.width, paintSize.height);\n            }\n        }\n        registerPaint(<span class=\"hljs-string\">\'starry-sky\'</span>, StarrySky);\n\n    }.toString(),\n \n    <span class=\"hljs-string\">\')()\'</span> ], { <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\'application/javascript\'</span> } ) \n);\n\nCSS.paintWorklet.addModule(blobURL);</code></pre><h3 data-id=\"heading-1\">2. 画星星</h3><p>Cavans星星效果网上找一个就好了，例如这个<a href=\"https://link.juejin.im/?target=https%3A%2F%2Fcodepen.io%2FAlienPiglet%2Fpen%2FhvekG\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Codepen</a>，代码如下：</p><pre code-lang=\"javascript\" class=\"hljs javascript\"><code class=\"hljs javascript\" lang=\"javascript\">paint (ctx, paintSize, poperties) {\n    <span class=\"hljs-keyword\">let</span> xMax= paintSize.width;\n    <span class=\"hljs-keyword\">let</span> yMax = paintSize.height;\n\n    <span class=\"hljs-comment\">// 黑色夜空</span>\n    ctx.fillRect(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, xMax, yMax);\n    \n    <span class=\"hljs-comment\">// 星星的数量</span>\n    <span class=\"hljs-keyword\">let</span> hmTimes = xMax + yMax;  \n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i <= hmTimes; i++) {\n        <span class=\"hljs-comment\">// 星星的xy坐标，随机</span>\n        <span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-built_in\">Math</span>.floor((<span class=\"hljs-built_in\">Math</span>.random() * xMax) + <span class=\"hljs-number\">1</span>); \n        <span class=\"hljs-keyword\">let</span> y = <span class=\"hljs-built_in\">Math</span>.floor((<span class=\"hljs-built_in\">Math</span>.random() * yMax) + <span class=\"hljs-number\">1</span>); \n        <span class=\"hljs-comment\">// 星星的大小</span>\n        <span class=\"hljs-keyword\">let</span> size = <span class=\"hljs-built_in\">Math</span>.floor((<span class=\"hljs-built_in\">Math</span>.random() * <span class=\"hljs-number\">2</span>) + <span class=\"hljs-number\">1</span>); \n        <span class=\"hljs-comment\">// 星星的亮暗</span>\n        <span class=\"hljs-keyword\">let</span> opacityOne = <span class=\"hljs-built_in\">Math</span>.floor((<span class=\"hljs-built_in\">Math</span>.random() * <span class=\"hljs-number\">9</span>) + <span class=\"hljs-number\">1</span>); \n        <span class=\"hljs-keyword\">let</span> opacityTwo = <span class=\"hljs-built_in\">Math</span>.floor((<span class=\"hljs-built_in\">Math</span>.random() * <span class=\"hljs-number\">9</span>) + <span class=\"hljs-number\">1</span>); \n        <span class=\"hljs-keyword\">let</span> hue = <span class=\"hljs-built_in\">Math</span>.floor((<span class=\"hljs-built_in\">Math</span>.random() * <span class=\"hljs-number\">360</span>) + <span class=\"hljs-number\">1</span>); \n        ctx.fillStyle = <span class=\"hljs-string\">`hsla(<span class=\"hljs-subst\">${hue}</span>, 30%, 80%, .<span class=\"hljs-subst\">${opacityOne + opacityTwo}</span>)`</span>; ctx.fillRect(x, y, size, size); } }</code></pre><p>效果如下：</p><p><img alt=\"\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2018/4/22/162eb83af610dda9?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"794\" data-height=\"414\" src=\"https://user-gold-cdn.xitu.io/2018/4/22/162eb83af610dda9?imageView2/0/w/1280/h/960/ignore-error/1\"></p><p>为什么它要用fillRect来画星星呢，星星不应该是圆的么？因为如果用arc的话性能会明显降低。由于星星比较小，所以使用了这种方式，当然改成arc也是可以的，因为我们只是画一次就好了。</p><h3 data-id=\"heading-2\">3. 控制星星的密度</h3><p>现在要做一个可配参数控制星星的密度，就好像border-radius可以控制一样。借助CSS变量，给body添加一个自定义属性--star-density：</p><pre code-lang=\"css\" class=\"hljs css\"><code class=\"hljs css\" lang=\"css\"><span class=\"hljs-selector-tag\">body</span> {\n    <span class=\"hljs-attribute\">--star-density</span>: <span class=\"hljs-number\">0.8</span>;\n    <span class=\"hljs-attribute\">background-image</span>: <span class=\"hljs-built_in\">paint</span>(starry-sky); \n}</code></pre><p>规定密度系数从0到1变化，通过paint函数的propertis参数获取到属性。但是我们发现body/html的自定义属性无法获取，可以继承给body的子元素，但无法在body上获取，所以改成画在body:before上面：</p><pre code-lang=\"css\" class=\"hljs css\"><code class=\"hljs css\" lang=\"css\"><span class=\"hljs-selector-tag\">body</span><span class=\"hljs-selector-pseudo\">:before</span> {\n    <span class=\"hljs-attribute\">content</span>: <span class=\"hljs-string\">\"\"</span>;\n    <span class=\"hljs-attribute\">position</span>: absolute;\n    <span class=\"hljs-attribute\">left</span>: <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">top</span>: <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100%</span>;\n    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100%</span>;\n    <span class=\"hljs-attribute\">--star-density</span>: <span class=\"hljs-number\">0.5</span>;\n    <span class=\"hljs-attribute\">background-image</span>: <span class=\"hljs-built_in\">paint</span>(starry-sky); \n}</code></pre><p>然后给class StarrySky添加一个静态方法：</p><pre code-lang=\"javascript\" class=\"hljs javascript\"><code class=\"hljs javascript\" lang=\"javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">StarrySky</span> </span>{\n    <span class=\"hljs-keyword\">static</span> get inputProperties() {\n        <span class=\"hljs-keyword\">return</span> [<span class=\"hljs-string\">\'--star-density\'</span>];\n    }\n}</code></pre><p>告知我们需要获取哪些CSS属性，可以是自定义的，也可以是常规的CSS属性。然后在paint方法的properties里面就可以拿到属性值：</p><pre code-lang=\"javascript\" class=\"hljs javascript\"><code class=\"hljs javascript\" lang=\"javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">StarrySky</span> </span>{\n    paint (ctx, paintSize, properties) {\n        <span class=\"hljs-comment\">// 获取自定义属性值</span>\n        <span class=\"hljs-keyword\">let</span> starDensity = +properties.get(<span class=\"hljs-string\">\'--star-density\'</span>).toString() || <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-comment\">// 最大只能为1</span>\n        starDensity > <span class=\"hljs-number\">1</span> && (starDensity = <span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-comment\">// 星星的数量剩以这个系数</span>\n        <span class=\"hljs-keyword\">let</span> hmTimes = <span class=\"hljs-built_in\">Math</span>.round((xMax + yMax) * starDensity);\n    }\n}</code></pre><p>让星星的数量剩以传进来的系数进而达控制密度的目的。上面设置星星的数量为最大值的一半，效果如下：</p><p><img alt=\"\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2018/4/22/162eb83af545429d?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"1068\" data-height=\"416\" src=\"https://user-gold-cdn.xitu.io/2018/4/22/162eb83af545429d?imageView2/0/w/1280/h/960/ignore-error/1\"></p><h3 data-id=\"heading-3\">3. 重绘</h3><p>当拉页面的时候会发现所有星星的位置都发生了变化，这是因为触发了重绘。</p><p>在paint函数里面添加一个console.log，拉动页面的时候就可以观察到浏览器在不断地执行paint函数。因为这个CSS属性是写在body:befoer上面的，占满了body，body大小改变就会触发重绘。而如果写在一个宽度固定的div里面，拉动页面不会触发重绘，观察到paint函数没有执行。如果改了div或者body的任何一个CSS属性也会触发重绘。所以这个很方便，不需要我们自己去监听resize之类的DOM变化。</p><p>页面拉大时，右边新拉出来的空间星星没有画大，所以本身需要重绘。而重绘给我们造成的问题是星星的位置发生变化，正常情况下应该是页面拉大拉小，星星的位置应该是要不变的。所以需要记录一下星星的一些相关信息。</p><h3 data-id=\"heading-4\">4. 记录星星的数据</h3><p>可以在SkyStarry这个类里面添加一个成员变量stars，保存所有star的信息，包括位置和透明度等，在paint的时候判断一下stars的长度，如果为0则进行初始化，否则使用直接上一次初始化过的星星，这样就能保证每次重绘都是用的同样的星星了。但是在实际的操作过程中，发现一个问题，它会初始化两次starry-sky.js，在paint的时候也会随机切换，如下图所示：</p><p><img alt=\"\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2018/4/22/162eb83af5676890?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"846\" data-height=\"156\" src=\"https://user-gold-cdn.xitu.io/2018/4/22/162eb83af5676890?imageView2/0/w/1280/h/960/ignore-error/1\"></p><p>这样就造成了有两个stars的数据，在重绘过程中来回切换。原因可能是因为CSS Houdini的本意并不想让你保存实例数据，但是既然它设计成一个类，使用类的实例数据应该也是合情合理的。这个问题我想到的一个解决方法是把random函数变成可控的，只要随机化种子一样，那么生成的random系列就是一样的，而这个随机化种子由CSS变量传进来。所以就不能用Math.random了，自己实现一个random，<a href=\"https://link.juejin.im/?target=https%3A%2F%2Fstackoverflow.com%2Fquestions%2F521295%2Fseeding-the-random-number-generator-in-javascript\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">如下代码</a>所示：</p><pre code-lang=\"javascript\" class=\"hljs javascript\"><code class=\"hljs javascript\" lang=\"javascript\">    random () {\n        <span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-built_in\">Math</span>.sin(<span class=\"hljs-keyword\">this</span>.seed++) * <span class=\"hljs-number\">10000</span>;\n        <span class=\"hljs-keyword\">return</span> x - <span class=\"hljs-built_in\">Math</span>.floor(x);\n    }</code></pre><p>只要初始化seed一样，那么就会生成一样的random系列。seed和星星密度类似，由CSS变量控制：</p><pre code-lang=\"css\" class=\"hljs css\"><code class=\"hljs css\" lang=\"css\"><span class=\"hljs-selector-tag\">body</span><span class=\"hljs-selector-pseudo\">:before</span> {\n    <span class=\"hljs-attribute\">--starry-sky-seed</span>: <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-attribute\">--star-density</span>: <span class=\"hljs-number\">0.5</span>;\n    <span class=\"hljs-attribute\">background-image</span>: <span class=\"hljs-built_in\">paint</span>(starry-sky);\n}</code></pre><p>然后在paint函数里面通过properties拿到seed：</p><pre code-lang=\"javascript\" class=\"hljs javascript\"><code class=\"hljs javascript\" lang=\"javascript\">paint (ctx, paintSize, properties) {\n    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-keyword\">this</span>.stars) {\n        <span class=\"hljs-keyword\">let</span> starOpacity = +properties.get(<span class=\"hljs-string\">\'--star-opacity\'</span>).toString();\n        <span class=\"hljs-comment\">// 得到随机化种子，可以不传，默认为0</span>\n        <span class=\"hljs-keyword\">this</span>.seed = +(properties.get(<span class=\"hljs-string\">\'--starry-sky-seed\'</span>).toString() || <span class=\"hljs-number\">0</span>);\n        <span class=\"hljs-keyword\">this</span>.addStars(paintSize.width, paintSize.height, starDensity);\n    }\n}</code></pre><p>通过addStars函数添加星星，这个函数调用上面自定义的random函数：</p><pre code-lang=\"javascript\" class=\"hljs javascript\"><code class=\"hljs javascript\" lang=\"javascript\">random () {\n    <span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-built_in\">Math</span>.sin(<span class=\"hljs-keyword\">this</span>.seed++) * <span class=\"hljs-number\">10000</span>;\n    <span class=\"hljs-keyword\">return</span> x - <span class=\"hljs-built_in\">Math</span>.floor(x);\n}\n\naddStars (xMax, yMax, starDensity = <span class=\"hljs-number\">1</span>) {\n    starDensity > <span class=\"hljs-number\">1</span> && (starDensity = <span class=\"hljs-number\">1</span>); \n    <span class=\"hljs-comment\">// 星星的数量</span>\n    <span class=\"hljs-keyword\">let</span> hmTimes = <span class=\"hljs-built_in\">Math</span>.round((xMax + yMax) * starDensity);  \n    <span class=\"hljs-keyword\">this</span>.stars = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Array</span>(hmTimes);\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i < hmTimes; i++) {\n        <span class=\"hljs-keyword\">this</span>.stars[i] = { \n            <span class=\"hljs-attr\">x</span>: <span class=\"hljs-built_in\">Math</span>.floor((<span class=\"hljs-keyword\">this</span>.random() * xMax) + <span class=\"hljs-number\">1</span>), \n            <span class=\"hljs-attr\">y</span>: <span class=\"hljs-built_in\">Math</span>.floor((<span class=\"hljs-keyword\">this</span>.random() * yMax) + <span class=\"hljs-number\">1</span>), \n            <span class=\"hljs-attr\">size</span>: <span class=\"hljs-built_in\">Math</span>.floor((<span class=\"hljs-keyword\">this</span>.random() * <span class=\"hljs-number\">2</span>) + <span class=\"hljs-number\">1</span>), \n            <span class=\"hljs-comment\">// 星星的亮暗</span>\n            opacityOne: <span class=\"hljs-built_in\">Math</span>.floor((<span class=\"hljs-keyword\">this</span>.random() * <span class=\"hljs-number\">9</span>) + <span class=\"hljs-number\">1</span>), \n            <span class=\"hljs-attr\">opacityTwo</span>: <span class=\"hljs-built_in\">Math</span>.floor((<span class=\"hljs-keyword\">this</span>.random() * <span class=\"hljs-number\">9</span>) + <span class=\"hljs-number\">1</span>), \n            <span class=\"hljs-attr\">hue</span>: <span class=\"hljs-built_in\">Math</span>.floor((<span class=\"hljs-keyword\">this</span>.random() * <span class=\"hljs-number\">360</span>) + <span class=\"hljs-number\">1</span>)\n        };  \n    }\n}</code></pre><p>这段代码由Math.random改成this.random保证只要随机化种子一样，生成的所有数据也都是一样的。这样就能解决上面提到的初始化两次数据的问题，因为种子是一样的，所以两次的数据也是一样的。</p><p>但是这样有点单调，每次刷新页面星星都是固定的，少了点灵气。可以给这个随机化种子做下优化，例如实现单个小时内是一样的，过了一个小时后刷新页面就会变。通过以下代码可以实现：</p><pre code-lang=\"javascript\" class=\"hljs javascript\"><code class=\"hljs javascript\" lang=\"javascript\"><span class=\"hljs-keyword\">const</span> ONE_HOUR = <span class=\"hljs-number\">36000</span> * <span class=\"hljs-number\">1000</span>;\n<span class=\"hljs-keyword\">this</span>.seed = +(properties.get(<span class=\"hljs-string\">\'--starry-sky-seed\'</span>).toString() || <span class=\"hljs-number\">0</span>)\n                    + <span class=\"hljs-built_in\">Date</span>.now() / ONE_HOUR >> <span class=\"hljs-number\">0</span>;</code></pre><p>这样拉动页面的时候星星就不会变了。</p><p>但是在从小拉大的时候，右边会没有星星：</p><p><img alt=\"\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2018/4/22/162eb83b21bc167c?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"850\" data-height=\"464\" src=\"https://user-gold-cdn.xitu.io/2018/4/22/162eb83b21bc167c?imageView2/0/w/1280/h/960/ignore-error/1\"></p><p>因为第一次的画布没那么大，以后又没有更新星星的数据，所以右边就空了。</p><h3 data-id=\"heading-5\">5. 增量更新星星数据</h3><p>不能全部更新星星的数据，不然第4步就白做了。只能把右边没有的给它补上。所以需要记录一下两次画布的大小，如果第二次的画布大了，则增加星星，否则删掉边界外的星星。</p><p>所以需要有一个变量记录上一次画布的大小：</p><pre code-lang=\"javascript\" class=\"hljs javascript\"><code class=\"hljs javascript\" lang=\"javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">StarrySky</span> </span>{\n    <span class=\"hljs-keyword\">constructor</span> () {\n        <span class=\"hljs-comment\">// 初始化</span>\n        <span class=\"hljs-keyword\">this</span>.lastPaintSize = <span class=\"hljs-keyword\">this</span>.paintSize = {\n            <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">0</span>,\n            <span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">0</span>\n        };\n        <span class=\"hljs-keyword\">this</span>.stars = [];\n    }\n}</code></pre><p>把相关的操作抽成一个函数，包括从CSS变量获取设置，增量更新星星等，这样可以让主逻辑变得清晰一点：</p><pre code-lang=\"javascript\" class=\"hljs javascript\"><code class=\"hljs javascript\" lang=\"javascript\">paint (ctx, paintSize, properties) {\n    <span class=\"hljs-comment\">// 更新当前paintSize</span>\n    <span class=\"hljs-keyword\">this</span>.paintSize = paintSize;\n    <span class=\"hljs-comment\">// 获取CSS变量设置，把密度、seed等存放到类的实例数据</span>\n    <span class=\"hljs-keyword\">this</span>.updateControl(properties);\n    <span class=\"hljs-comment\">// 增量更新星星</span>\n    <span class=\"hljs-keyword\">this</span>.updateStars();\n    <span class=\"hljs-comment\">// 黑色夜空</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> star <span class=\"hljs-keyword\">of</span> <span class=\"hljs-keyword\">this</span>.stars) {\n        <span class=\"hljs-comment\">// 画星星，略</span>\n    }   \n}</code></pre><p>增量更新星星需要做两个判断，一个为是否需要删除掉一些星星，另一个为是否需要添加，根据画布的变化：</p><pre code-lang=\"javascript\" class=\"hljs javascript\"><code class=\"hljs javascript\" lang=\"javascript\">updateStars () {\n    <span class=\"hljs-comment\">// 如果当前的画布比上一次的要小，则删掉一些星星</span>\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.lastPaintSize.width > <span class=\"hljs-keyword\">this</span>.paintSize.width ||\n            <span class=\"hljs-keyword\">this</span>.lastPaintSize.height > <span class=\"hljs-keyword\">this</span>.paintSize.height) {\n        <span class=\"hljs-keyword\">this</span>.removeStars();\n    }   \n    <span class=\"hljs-comment\">// 如果当前画布变大了，则增加一些星星</span>\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.lastPaintSize.width < <span class=\"hljs-keyword\">this</span>.paintSize.width ||  \n            <span class=\"hljs-keyword\">this</span>.lastPaintSize.height < <span class=\"hljs-keyword\">this</span>.paintSize.height) {\n        <span class=\"hljs-keyword\">this</span>.addStars();\n    }   \n    <span class=\"hljs-keyword\">this</span>.lastPaintSize = <span class=\"hljs-keyword\">this</span>.paintSize;\n}</code></pre><p>删除星星removeStar的实现很简单，只要判断x, y坐标是否在当前画布内，如果是的话则保留：</p><pre code-lang=\"javascript\" class=\"hljs javascript\"><code class=\"hljs javascript\" lang=\"javascript\">removeStars () {\n    <span class=\"hljs-keyword\">let</span> stars = []\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> star <span class=\"hljs-keyword\">of</span> stars) {\n        <span class=\"hljs-keyword\">if</span> (star.x <= <span class=\"hljs-keyword\">this</span>.paintSize.width &&  \n                star.y <= <span class=\"hljs-keyword\">this</span>.paintSize.height) {\n            stars.push(star);\n        }   \n    }   \n    <span class=\"hljs-keyword\">this</span>.stars = stars;\n}</code></pre><p>添加星星的实现也是类似的道理，判断x, y坐标是否在上一次的画布内，如果是的话则不添加：</p><pre code-lang=\"javascript\" class=\"hljs javascript\"><code class=\"hljs javascript\" lang=\"javascript\">addStars () {\n    <span class=\"hljs-keyword\">let</span> xMax = <span class=\"hljs-keyword\">this</span>.paintSize.width,\n        yMax = <span class=\"hljs-keyword\">this</span>.paintSize.height;\n    <span class=\"hljs-comment\">// 星星的数量</span>\n    <span class=\"hljs-keyword\">let</span> hmTimes = <span class=\"hljs-built_in\">Math</span>.round((xMax + yMax) * <span class=\"hljs-keyword\">this</span>.starDensity); \n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i < hmTimes; i++) {\n        <span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-built_in\">Math</span>.floor((<span class=\"hljs-keyword\">this</span>.random() * xMax) + <span class=\"hljs-number\">1</span>), \n            y = <span class=\"hljs-built_in\">Math</span>.floor((<span class=\"hljs-keyword\">this</span>.random() * yMax) + <span class=\"hljs-number\">1</span>); \n        <span class=\"hljs-comment\">// 如果星星落在上一次的画布内，则跳过</span>\n        <span class=\"hljs-keyword\">if</span> (x < <span class=\"hljs-keyword\">this</span>.lastPaintSize.width && y < <span class=\"hljs-keyword\">this</span>.lastPaintSize.height) {\n            <span class=\"hljs-keyword\">continue</span>;\n        }   \n\n        <span class=\"hljs-keyword\">this</span>.stars.push({\n            <span class=\"hljs-attr\">x</span>: x,\n            <span class=\"hljs-attr\">y</span>: y,\n            <span class=\"hljs-attr\">size</span>: <span class=\"hljs-built_in\">Math</span>.floor((<span class=\"hljs-keyword\">this</span>.random() * <span class=\"hljs-number\">2</span>) + <span class=\"hljs-number\">1</span>), \n            <span class=\"hljs-comment\">// 星星的亮暗</span>\n        }); \n    }   \n}</code></pre><p>这样当拖动页面的时候就会触发重绘，重绘的时候就会调paint更新星星。</p><h3 data-id=\"heading-6\">6. 让星星闪起来</h3><p>通过做星星透明度的动画，可以让星星闪起来。如果用Cavans标签，可以借助window.requestAnimationFrame注册一个函数，然后用当前时间减掉开始的时间模以一个值就得到当前的透明度系数。使用Houdini也可以使用这种方式，区别是我们可以把动态变化透明度系数当作当前元素的CSS变量或者叫自定义属性，然后用JS动态改变这个自定义属性，就能够触发重绘，这个已在第3点重绘部分提到。</p><p>给元素添加一个--star-opacity的属性：</p><pre code-lang=\"css\" class=\"hljs css\"><code class=\"hljs css\" lang=\"css\"><span class=\"hljs-selector-tag\">body</span><span class=\"hljs-selector-pseudo\">:before</span> {\n    <span class=\"hljs-attribute\">--star-opacity</span>: <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-attribute\">--star-density</span>: <span class=\"hljs-number\">0.5</span>;\n    <span class=\"hljs-attribute\">--starry-sky-seed</span>: <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-attribute\">background-image</span>: <span class=\"hljs-built_in\">paint</span>(starry-sky);\n}</code></pre><p>在星星的时候，每个星星的透明度再乘以这个系数：</p><pre code-lang=\"javascript\" class=\"hljs javascript\"><code class=\"hljs javascript\" lang=\"javascript\"><span class=\"hljs-comment\">// 获取透明度系数</span>\n<span class=\"hljs-keyword\">this</span>.starOpacity = +properties.get(<span class=\"hljs-string\">\'--star-opacity\'</span>).toString();\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> star <span class=\"hljs-keyword\">of</span> <span class=\"hljs-keyword\">this</span>.stars) {\n    <span class=\"hljs-comment\">// 每个星星的透明度都乘以这个系数</span>\n    <span class=\"hljs-keyword\">let</span> opacity = +(<span class=\"hljs-string\">\'.\'</span> + (star.opacityOne + star.opacityTwo)) * <span class=\"hljs-keyword\">this</span>.starOpacity;\n    ctx.fillStyle = <span class=\"hljs-string\">`hsla(<span class=\"hljs-subst\">${star.hue}</span>, 30%, 80%, <span class=\"hljs-subst\">${opacity}</span>)`</span>;\n    ctx.fillRect(star.x, star.y, star.size, star.size);\n}</code></pre><p>然后在requestAnimationFrame动态改变这个CSS属性：</p><pre code-lang=\"javascript\" class=\"hljs javascript\"><code class=\"hljs javascript\" lang=\"javascript\"><span class=\"hljs-keyword\">let</span> start = <span class=\"hljs-built_in\">Date</span>.now();\n<span class=\"hljs-comment\">// before无法获取，所以需要改成正常元素</span>\n<span class=\"hljs-keyword\">let</span> node = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">\'.starry-sky\'</span>);\n<span class=\"hljs-built_in\">window</span>.requestAnimationFrame(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">changeOpacity</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">let</span> now = <span class=\"hljs-built_in\">Date</span>.now();\n    <span class=\"hljs-comment\">// 每隔一1s，透明度从0.5变到1</span>\n    node.style.setProperty(<span class=\"hljs-string\">\'--star-opacity\'</span>, (now - start) % <span class=\"hljs-number\">1000</span> / <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">0.5</span>);\n    <span class=\"hljs-built_in\">window</span>.requestAnimationFrame(changeOpacity);\n});</code></pre><p>这样就能重新触发paint函数重新渲染了，但是这个效果其实是有问题的，因为得有一个alternate轮流交替的效果，即0.5变到1，再从1变到0.5，而不是每次都是0.5到1. 模拟CSS animation的alternate这个也好解决，可以规定奇数秒就是变大，而偶数秒就是变小，这个好实现，略。</p><p>但实际上可以不用这么麻烦，因为改变CSS属性直接用animation就可以了，如下代码所示：</p><pre code-lang=\"css\" class=\"hljs css\"><code class=\"hljs css\" lang=\"css\"><span class=\"hljs-selector-tag\">body</span><span class=\"hljs-selector-pseudo\">:before</span> {\n    <span class=\"hljs-attribute\">--star-opacity</span>: <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-attribute\">--star-density</span>: <span class=\"hljs-number\">0.5</span>;\n    <span class=\"hljs-attribute\">--starry-sky-seed</span>: <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-attribute\">background-image</span>: <span class=\"hljs-built_in\">paint</span>(starry-sky);\n    <span class=\"hljs-attribute\">animation</span>: shine <span class=\"hljs-number\">1s</span> linear alternate infinite;\n}\n\n@<span class=\"hljs-keyword\">keyframes</span> shine {\n    <span class=\"hljs-selector-tag\">from</span> {\n        <span class=\"hljs-attribute\">--star-opacity</span>: <span class=\"hljs-number\">1</span>;\n    }\n    <span class=\"hljs-selector-tag\">to</span> {\n        <span class=\"hljs-attribute\">--star-opacity</span>: <span class=\"hljs-number\">0.6</span>;\n    }\n}</code></pre><p>这样也能触发重绘，但是我们发现它只有在from和to这两个点触发了重绘，没有中间过渡的过程。可以推测因为它认为--star-opacity的属性值不是一个数字，而是一个字符串，所以这两关键帧就没有中间的过渡效果了。因此我们得告诉它这是一个整型，不是一个字符串。类型化CSS对象模型（Typed CSSOM）提供了这个API。</p><p><b>类型化CSS对象模型</b>一个很大的作用就是把所有的CSS单位都用一个相应的对象来表示，提供加减乘除等运算，如：</p><pre code-lang=\"javascript\" class=\"hljs javascript\"><code class=\"hljs javascript\" lang=\"javascript\"><span class=\"hljs-comment\">// 10 px</span>\n<span class=\"hljs-keyword\">let</span> length = CSS.px(<span class=\"hljs-number\">10</span>);\n<span class=\"hljs-comment\">// 在循环里面改length的值，不用自己去拼字符串</span>\ndiv.attributeStyleMap.set(<span class=\"hljs-string\">\'width\'</span>, length.add(CSS.px(<span class=\"hljs-number\">1</span>)))</code></pre><p>这样的好处是不用自己去拼字符串，另外还提供了转换，如transform的值转成matrix，度数转成rad的形式等等。</p><p>它还提供了注册自定义类型属性的能力，使用以下API：</p><pre code-lang=\"css\" class=\"hljs css\"><code class=\"hljs css\" lang=\"css\"><span class=\"hljs-selector-tag\">CSS</span><span class=\"hljs-selector-class\">.registerProperty</span>({\n    <span class=\"hljs-attribute\">name</span>: <span class=\"hljs-string\">\'--star-opacity\'</span>,\n    // 指明它是一个数字类型\n    syntax: <span class=\"hljs-string\">\'<number>\'</span>,\n    inherits: false,\n    initialValue: <span class=\"hljs-number\">1</span>\n});</code></pre><p>这样注册之后，CSS系统就知道--star-opacity是一个number类型，在关键帧动画里面就会有一个渐变的过渡效果。</p><p>类型CSS对象模型在Chrome 66已经正式支持，但是registerProperty API仍然没有开放，需要打开chrome://flags，搜索web platform，从disabled改成enabled就可以使用。</p><p>这个给我们提供了<b>做动画新思路</b>，CSS animation + Canvas的模式，CSS animation负责改变属性数据并触发重绘，而Canvas去获取动态变化的数据更新视图。所以它是一个<b>数据驱动的动画模式</b>，这也是当前做动画的一个流行方式。</p><p>在我们这个例子里面，由于星星数太多，1s有60帧，每帧都要计算和绘制1000个星星，CPU使用率达到90%多，所以这个性能有问题，如果用Cavans标签可以使用双缓冲技术，CSS Houdini好像没有这个东西。但是可以换一个思路，改成做整体的透明度动画，不用每个星星都算一下。</p><p>如下代码所示：</p><pre code-lang=\"css\" class=\"hljs css\"><code class=\"hljs css\" lang=\"css\"><span class=\"hljs-selector-tag\">body</span> {\n    <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#000</span>; \n}\n<span class=\"hljs-selector-tag\">body</span><span class=\"hljs-selector-pseudo\">:before</span> {\n    <span class=\"hljs-attribute\">background-image</span>: <span class=\"hljs-built_in\">paint</span>(starry-sky);\n    <span class=\"hljs-attribute\">animation</span>: shine <span class=\"hljs-number\">1s</span> linear alternate infinite;\n}\n\n@<span class=\"hljs-keyword\">keyframes</span> shine {\n    <span class=\"hljs-selector-tag\">from</span> {\n        <span class=\"hljs-attribute\">opacity</span>: <span class=\"hljs-number\">1</span>;\n    }\n    <span class=\"hljs-selector-tag\">to</span> {\n        <span class=\"hljs-attribute\">opacity</span>: <span class=\"hljs-number\">0.6</span>;\n    }\n}</code></pre><p>这个的效果和每个星星都单独算是一样的，CPU消耗12%左右，这个应该还是可以接受的。</p><p>效果如下图所示：</p><p><img alt=\"\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2018/4/22/162eb83b2219ed05?imageslim\" data-width=\"477\" data-height=\"214\" src=\"https://user-gold-cdn.xitu.io/2018/4/22/162eb83b2219ed05?imageslim\"></p><p>如果用Canvas标签，可以设置globalAlpha全局透明度属性，而使用CSS Houdini我们直接使用opacity就行了。</p><p>一个完整的Demo：<a href=\"https://link.juejin.im/?target=https%3A%2F%2Ffed.renren.com%2Fhtml%2Fhoudini%2Fstarry-sky%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CSS Houdini Starry Sky</a>，需要使用Chrome，因为目前只有Chrome支持。</p><p><br></p><p>总的来说，CSS Houdini的Paint Worket提供了CSS和Canvas的粘合，让我们可以用Canvas画出想要的CSS效果，并借助CSS自定义属性进行控制，通过使用JS或者CSS的animation/transition改变自定义属性的值触发重绘，从而产生动画效果，这也是数据驱动的开发思想。并讨论了在画这个星空的过程中遇到的一些问题，以及相关的解决方案。</p><p>本文只是介绍了CSS Houdini里面的Paint Worket和Typed CSSOM，它还有另外一个Layout Worklet，利用它可以自行实现一个flex布局或者其它自定义布局，这样的好处是：一方面当有新的布局出现的时候可以借助这个API进行polyfill就不用担心没有实现的浏览器不兼容，另一方面可以发挥想象力实现自己想要的布局，这样在布局上可能会百花齐放了，而不仅仅使用W3C给的那几种布局。</p><p>【再一次强推书】高效前端已上市，京东、亚马逊、淘宝等均有售</p><p><img alt=\"\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2018/4/22/162eb83b21c45472?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"768\" data-height=\"768\" src=\"https://user-gold-cdn.xitu.io/2018/4/22/162eb83b21c45472?imageView2/0/w/1280/h/960/ignore-error/1\"></p><p>【<a href=\"https://link.juejin.im/?target=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FNe-kp2FPKa4l78qm2t3_DQ\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">人人网招聘高级前端</a>】</p><p><br></p>', '要问2018最让人兴奋的CSS技术是什么，CSS Houdini当之无愧，甚至可以去掉2018这个限定。其实这个技术在2016年就出来了，但是在今年3月发布的Chrome 65才正式支持。\n\nCSS Houdini可以做些什么？[谷歌开发者文档](https://link.juejin.im/?target=https%3A%2F%2Fdevelopers.google.com%2Fweb%2Fupdates%2F2016%2F05%2Fhoudini)列了几个demo，我们先来看一下这几个demo：\n\n（1）给textarea加一个方格背景（[demo](https://link.juejin.im/?target=https%3A%2F%2Ffed.renren.com%2Fhtml%2Fhoudini%2Fhoudini-samples%2Fpaint-worklet%2Fcheckerboard%2Findex.html)）\n\n![](https://user-gold-cdn.xitu.io/2018/4/22/162eb83af559da91?imageView2/0/w/1280/h/960/ignore-error/1)\n\n使用以下CSS代码：\n\n    textarea {\n        background-image: paint(checkerboard);\n    }\n\n（2）给div添加一个钻石形状背景（[demo](https://link.juejin.im/?target=https%3A%2F%2Ffed.renren.com%2Fhtml%2Fhoudini%2Fhoudini-samples%2Fpaint-worklet%2Fdiamond-shape%2Findex.html)）\n\n![](https://user-gold-cdn.xitu.io/2018/4/22/162eb83af578676b?imageView2/0/w/1280/h/960/ignore-error/1)\n\n使用以下CSS：\n\n    div {\n        --top-width: 80;\n        --top-height: 20;\n        -webkit-mask-image: paint(demo);\n    }\n\n（3）点击圆圈扩散动画（[demo](https://link.juejin.im/?target=https%3A%2F%2Ffed.renren.com%2Fhtml%2Fhoudini%2Fhoudini-samples%2Fpaint-worklet%2Fripple%2Findex.html)）\n\n![](https://user-gold-cdn.xitu.io/2018/4/22/162eb83af6011574?imageslim)\n\n这3个例子都是用了Houdini里面的CSS Paint API。\n\n第1个例子如果使用传统的CSS属性，我们最多可能就是使用渐变来做颜色的变化，但是做不到这种一个格子一个格子的颜色变化的，而第2个例子也是没有办法直接用CSS画个钻石的形状。这个时候你可能会想到会SVG/Canvas的方法，SVG和Canvas的特色是矢量路径，可以画出各种各样的矢量图形，而Canvas还能控制任意像素点，所以用这两种方式也是可以画出来的。\n\n但是Canvas和html相结合的时候就会显得有点笨拙，就像第2个例子画一个钻石的形状，用Canvas你需要利用类似于BFC定位的方式，把Cavans调到合适的定位，还要注意z-index的覆盖关系，而使用SVG可能会更简单一点，可以设置background-image为一张钻石的svg图片，但是无法像Canavas一样很方便地做一些变量控制，例如随时改一下钻石边框的颜色粗细等。\n\n而第1个例子给textarea加格子背景，只能使用background-image + svg的方式，但是你不知道这个textarea有多大，svg的格子需要准备多少个呢？当然你可能会说谁会给textarea加一个这样的背景呢。但这只是一个示例，其它的场景可能也会遇到类似的问题。\n\n第3个例子点击圆圈扩散动画，这个也可以在div里面absolute定位一个canvas元素，但是我们又遇到另外一个问题：无法很方便复用，假设这种圈圈扩散效果在其它地方也要用到，那就得在每个地方都写一个canvas元素并初始化。\n\n所以传统的方式存在以下问题：\n\n（1）需要调好和其它html元素的定位和z-index关系等\n\n（2）编辑框等不能方便地改背景，不能方便地做变量控制\n\n（3）不能方便地进行复用\n\n其实还有另外一个更重要的问题就是性能问题，用Cavans画这种效果时需要自己控制好帧率，一不小心电脑CPU风扇可能就要呼啸起来，特别是不能把握重绘的时机，如果元素大小没有变化是不需要重绘，如果元素被拉大了，那么需要进行重绘，或者当鼠标hover的时候做动画才需要重绘。\n\nCSS Houdini在解决这种自定义图形图像绘制的问题提供了很好的解决方案，可以**用Canvas画一个你想要的图形，然后注册到CSS系统里面，就能在CSS属性里面使用这个图形了**。以画一个星空为例，一步步说明这个过程。\n\n### 1\\. 画一个黑夜的夜空\n\nCSS Houdini只能工作在localhost域名或者是https的环境，否则的话相关API是不可见（undefined）的。如果没有https环境的话，可以装一个http-server的npm包，然后在本地启动，访问localhost:8080就可以了，新建一个index.html，写入：\n\n    \n    <html>\n    <head>\n        <meta charset=\"utf-8\">\n    <style>\n    body {\n        background-image: paint(starry-sky);\n    }\n    style>    \n    head>\n    <body>\n    <script>\n        CSS.paintWorklet.addModule(\'starry-sky.js\');\n    script>\n    body>\n    html>\n\n通过在JS调用CSS.paintWorklet.addModule注册一个CSS图形starry-sky，然后在CSS里面就可以使用这个图形，写在background-image、border-image或者mask-image等属性里面。如上面代码的：\n\n    body {\n        background-image: paint(starry-sky);\n    }\n\n注册paint worket的时候需要给它一个独立的js，作为这个worklet的工作环境，这个环境里面是没有window/document等对象的和web worker一样。如果你不想写管理太多js文件，可以借助blob，blob是可以存放任何类型的数据的，包括JS文件。\n\nWorklet需要的starry-sky.js的代码如下所示：\n\n    class StarrySky {\n        paint (ctx, paintSize, properties) {\n            // 使用Canvas的API进行绘制\n            ctx.fillRect(0, 0, paintSize.width, paintSize.height);\n        }\n    }\n    // 注册这个属性\n    registerPaint(\'starry-sky\', StarrySky);\n\n写一个类，实现paint接口，这个接口会传一个canvas的context变量、当前画布的大小即当前dom元素的大小，以及当前dom元素的css属性properties.\n\n在paint函数里面调用canvas的绘制函数fillRect进行填充，默认填充色为黑色。访问index.html，就会看到整个页面变成黑色了。我们的Hello World的CSS Houdini Painter就跑起来了，没错，就是这么简单。\n\n但是有一点需要强调的是，浏览器实现并不是给那个dom元素添加一个Canvas然后隐藏起来，这个Paint Worket实际上是直接影响了当前dom元素重绘过程，相当于我们给它添加了一个重绘的步骤，下文会继续提及。\n\n如果不想独立写一个js，用blob可以这样：\n\n    let blobURL = URL.createObjectURL( new Blob([ \'(\',\n        function(){\n            \n            class StarrySky {\n                paint (ctx, paintSize, properties) {\n                    ctx.fillRect(0, 0, paintSize.width, paintSize.height);\n                }\n            }\n            registerPaint(\'starry-sky\', StarrySky);\n    \n        }.toString(),\n     \n        \')()\' ], { type: \'application/javascript\' } ) \n    );\n    \n    CSS.paintWorklet.addModule(blobURL);\n\n### 2\\. 画星星\n\nCavans星星效果网上找一个就好了，例如这个[Codepen](https://link.juejin.im/?target=https%3A%2F%2Fcodepen.io%2FAlienPiglet%2Fpen%2FhvekG)，代码如下：\n\n    paint (ctx, paintSize, poperties) {\n        let xMax= paintSize.width;\n        let yMax = paintSize.height;\n    \n        // 黑色夜空\n        ctx.fillRect(0, 0, xMax, yMax);\n        \n        // 星星的数量\n        let hmTimes = xMax + yMax;  \n        for (let i = 0; i <= hmTimes; i++) {\n            // 星星的xy坐标，随机\n            let x = Math.floor((Math.random() * xMax) + 1); \n            let y = Math.floor((Math.random() * yMax) + 1); \n            // 星星的大小\n            let size = Math.floor((Math.random() * 2) + 1); \n            // 星星的亮暗\n            let opacityOne = Math.floor((Math.random() * 9) + 1); \n            let opacityTwo = Math.floor((Math.random() * 9) + 1); \n            let hue = Math.floor((Math.random() * 360) + 1); \n            ctx.fillStyle = `hsla(${hue}, 30%, 80%, .${opacityOne + opacityTwo})`; ctx.fillRect(x, y, size, size); } }\n\n效果如下：\n\n![](https://user-gold-cdn.xitu.io/2018/4/22/162eb83af610dda9?imageView2/0/w/1280/h/960/ignore-error/1)\n\n为什么它要用fillRect来画星星呢，星星不应该是圆的么？因为如果用arc的话性能会明显降低。由于星星比较小，所以使用了这种方式，当然改成arc也是可以的，因为我们只是画一次就好了。\n\n### 3\\. 控制星星的密度\n\n现在要做一个可配参数控制星星的密度，就好像border-radius可以控制一样。借助CSS变量，给body添加一个自定义属性--star-density：\n\n    body {\n        --star-density: 0.8;\n        background-image: paint(starry-sky); \n    }\n\n规定密度系数从0到1变化，通过paint函数的propertis参数获取到属性。但是我们发现body/html的自定义属性无法获取，可以继承给body的子元素，但无法在body上获取，所以改成画在body:before上面：\n\n    body:before {\n        content: \"\";\n        position: absolute;\n        left: 0;\n        top: 0;\n        width: 100%;\n        height: 100%;\n        --star-density: 0.5;\n        background-image: paint(starry-sky); \n    }\n\n然后给class StarrySky添加一个静态方法：\n\n    class StarrySky {\n        static get inputProperties() {\n            return [\'--star-density\'];\n        }\n    }\n\n告知我们需要获取哪些CSS属性，可以是自定义的，也可以是常规的CSS属性。然后在paint方法的properties里面就可以拿到属性值：\n\n    class StarrySky {\n        paint (ctx, paintSize, properties) {\n            // 获取自定义属性值\n            let starDensity = +properties.get(\'--star-density\').toString() || 1;\n            // 最大只能为1\n            starDensity > 1 && (starDensity = 1);\n            // 星星的数量剩以这个系数\n            let hmTimes = Math.round((xMax + yMax) * starDensity);\n        }\n    }\n\n让星星的数量剩以传进来的系数进而达控制密度的目的。上面设置星星的数量为最大值的一半，效果如下：\n\n![](https://user-gold-cdn.xitu.io/2018/4/22/162eb83af545429d?imageView2/0/w/1280/h/960/ignore-error/1)\n\n### 3\\. 重绘\n\n当拉页面的时候会发现所有星星的位置都发生了变化，这是因为触发了重绘。\n\n在paint函数里面添加一个console.log，拉动页面的时候就可以观察到浏览器在不断地执行paint函数。因为这个CSS属性是写在body:befoer上面的，占满了body，body大小改变就会触发重绘。而如果写在一个宽度固定的div里面，拉动页面不会触发重绘，观察到paint函数没有执行。如果改了div或者body的任何一个CSS属性也会触发重绘。所以这个很方便，不需要我们自己去监听resize之类的DOM变化。\n\n页面拉大时，右边新拉出来的空间星星没有画大，所以本身需要重绘。而重绘给我们造成的问题是星星的位置发生变化，正常情况下应该是页面拉大拉小，星星的位置应该是要不变的。所以需要记录一下星星的一些相关信息。\n\n### 4\\. 记录星星的数据\n\n可以在SkyStarry这个类里面添加一个成员变量stars，保存所有star的信息，包括位置和透明度等，在paint的时候判断一下stars的长度，如果为0则进行初始化，否则使用直接上一次初始化过的星星，这样就能保证每次重绘都是用的同样的星星了。但是在实际的操作过程中，发现一个问题，它会初始化两次starry-sky.js，在paint的时候也会随机切换，如下图所示：\n\n![](https://user-gold-cdn.xitu.io/2018/4/22/162eb83af5676890?imageView2/0/w/1280/h/960/ignore-error/1)\n\n这样就造成了有两个stars的数据，在重绘过程中来回切换。原因可能是因为CSS Houdini的本意并不想让你保存实例数据，但是既然它设计成一个类，使用类的实例数据应该也是合情合理的。这个问题我想到的一个解决方法是把random函数变成可控的，只要随机化种子一样，那么生成的random系列就是一样的，而这个随机化种子由CSS变量传进来。所以就不能用Math.random了，自己实现一个random，[如下代码](https://link.juejin.im/?target=https%3A%2F%2Fstackoverflow.com%2Fquestions%2F521295%2Fseeding-the-random-number-generator-in-javascript)所示：\n\n        random () {\n            let x = Math.sin(this.seed++) * 10000;\n            return x - Math.floor(x);\n        }\n\n只要初始化seed一样，那么就会生成一样的random系列。seed和星星密度类似，由CSS变量控制：\n\n    body:before {\n        --starry-sky-seed: 1;\n        --star-density: 0.5;\n        background-image: paint(starry-sky);\n    }\n\n然后在paint函数里面通过properties拿到seed：\n\n    paint (ctx, paintSize, properties) {\n        if (!this.stars) {\n            let starOpacity = +properties.get(\'--star-opacity\').toString();\n            // 得到随机化种子，可以不传，默认为0\n            this.seed = +(properties.get(\'--starry-sky-seed\').toString() || 0);\n            this.addStars(paintSize.width, paintSize.height, starDensity);\n        }\n    }\n\n通过addStars函数添加星星，这个函数调用上面自定义的random函数：\n\n    random () {\n        let x = Math.sin(this.seed++) * 10000;\n        return x - Math.floor(x);\n    }\n    \n    addStars (xMax, yMax, starDensity = 1) {\n        starDensity > 1 && (starDensity = 1); \n        // 星星的数量\n        let hmTimes = Math.round((xMax + yMax) * starDensity);  \n        this.stars = new Array(hmTimes);\n        for (let i = 0; i < hmTimes; i++) {\n            this.stars[i] = { \n                x: Math.floor((this.random() * xMax) + 1), \n                y: Math.floor((this.random() * yMax) + 1), \n                size: Math.floor((this.random() * 2) + 1), \n                // 星星的亮暗\n                opacityOne: Math.floor((this.random() * 9) + 1), \n                opacityTwo: Math.floor((this.random() * 9) + 1), \n                hue: Math.floor((this.random() * 360) + 1)\n            };  \n        }\n    }\n\n这段代码由Math.random改成this.random保证只要随机化种子一样，生成的所有数据也都是一样的。这样就能解决上面提到的初始化两次数据的问题，因为种子是一样的，所以两次的数据也是一样的。\n\n但是这样有点单调，每次刷新页面星星都是固定的，少了点灵气。可以给这个随机化种子做下优化，例如实现单个小时内是一样的，过了一个小时后刷新页面就会变。通过以下代码可以实现：\n\n    const ONE_HOUR = 36000 * 1000;\n    this.seed = +(properties.get(\'--starry-sky-seed\').toString() || 0)\n                        + Date.now() / ONE_HOUR >> 0;\n\n这样拉动页面的时候星星就不会变了。\n\n但是在从小拉大的时候，右边会没有星星：\n\n![](https://user-gold-cdn.xitu.io/2018/4/22/162eb83b21bc167c?imageView2/0/w/1280/h/960/ignore-error/1)\n\n因为第一次的画布没那么大，以后又没有更新星星的数据，所以右边就空了。\n\n### 5\\. 增量更新星星数据\n\n不能全部更新星星的数据，不然第4步就白做了。只能把右边没有的给它补上。所以需要记录一下两次画布的大小，如果第二次的画布大了，则增加星星，否则删掉边界外的星星。\n\n所以需要有一个变量记录上一次画布的大小：\n\n    class StarrySky {\n        constructor () {\n            // 初始化\n            this.lastPaintSize = this.paintSize = {\n                width: 0,\n                height: 0\n            };\n            this.stars = [];\n        }\n    }\n\n把相关的操作抽成一个函数，包括从CSS变量获取设置，增量更新星星等，这样可以让主逻辑变得清晰一点：\n\n    paint (ctx, paintSize, properties) {\n        // 更新当前paintSize\n        this.paintSize = paintSize;\n        // 获取CSS变量设置，把密度、seed等存放到类的实例数据\n        this.updateControl(properties);\n        // 增量更新星星\n        this.updateStars();\n        // 黑色夜空\n        for (let star of this.stars) {\n            // 画星星，略\n        }   \n    }\n\n增量更新星星需要做两个判断，一个为是否需要删除掉一些星星，另一个为是否需要添加，根据画布的变化：\n\n    updateStars () {\n        // 如果当前的画布比上一次的要小，则删掉一些星星\n        if (this.lastPaintSize.width > this.paintSize.width ||\n                this.lastPaintSize.height > this.paintSize.height) {\n            this.removeStars();\n        }   \n        // 如果当前画布变大了，则增加一些星星\n        if (this.lastPaintSize.width < this.paintSize.width ||  \n                this.lastPaintSize.height < this.paintSize.height) {\n            this.addStars();\n        }   \n        this.lastPaintSize = this.paintSize;\n    }\n\n删除星星removeStar的实现很简单，只要判断x, y坐标是否在当前画布内，如果是的话则保留：\n\n    removeStars () {\n        let stars = []\n        for (let star of stars) {\n            if (star.x <= this.paintSize.width &&  \n                    star.y <= this.paintSize.height) {\n                stars.push(star);\n            }   \n        }   \n        this.stars = stars;\n    }\n\n添加星星的实现也是类似的道理，判断x, y坐标是否在上一次的画布内，如果是的话则不添加：\n\n    addStars () {\n        let xMax = this.paintSize.width,\n            yMax = this.paintSize.height;\n        // 星星的数量\n        let hmTimes = Math.round((xMax + yMax) * this.starDensity); \n        for (let i = 0; i < hmTimes; i++) {\n            let x = Math.floor((this.random() * xMax) + 1), \n                y = Math.floor((this.random() * yMax) + 1); \n            // 如果星星落在上一次的画布内，则跳过\n            if (x < this.lastPaintSize.width && y < this.lastPaintSize.height) {\n                continue;\n            }   \n    \n            this.stars.push({\n                x: x,\n                y: y,\n                size: Math.floor((this.random() * 2) + 1), \n                // 星星的亮暗\n            }); \n        }   \n    }\n\n这样当拖动页面的时候就会触发重绘，重绘的时候就会调paint更新星星。\n\n### 6\\. 让星星闪起来\n\n通过做星星透明度的动画，可以让星星闪起来。如果用Cavans标签，可以借助window.requestAnimationFrame注册一个函数，然后用当前时间减掉开始的时间模以一个值就得到当前的透明度系数。使用Houdini也可以使用这种方式，区别是我们可以把动态变化透明度系数当作当前元素的CSS变量或者叫自定义属性，然后用JS动态改变这个自定义属性，就能够触发重绘，这个已在第3点重绘部分提到。\n\n给元素添加一个--star-opacity的属性：\n\n    body:before {\n        --star-opacity: 1;\n        --star-density: 0.5;\n        --starry-sky-seed: 1;\n        background-image: paint(starry-sky);\n    }\n\n在星星的时候，每个星星的透明度再乘以这个系数：\n\n    // 获取透明度系数\n    this.starOpacity = +properties.get(\'--star-opacity\').toString();\n    for (let star of this.stars) {\n        // 每个星星的透明度都乘以这个系数\n        let opacity = +(\'.\' + (star.opacityOne + star.opacityTwo)) * this.starOpacity;\n        ctx.fillStyle = `hsla(${star.hue}, 30%, 80%, ${opacity})`;\n        ctx.fillRect(star.x, star.y, star.size, star.size);\n    }\n\n然后在requestAnimationFrame动态改变这个CSS属性：\n\n    let start = Date.now();\n    // before无法获取，所以需要改成正常元素\n    let node = document.querySelector(\'.starry-sky\');\n    window.requestAnimationFrame(function changeOpacity () {\n        let now = Date.now();\n        // 每隔一1s，透明度从0.5变到1\n        node.style.setProperty(\'--star-opacity\', (now - start) % 1000 / 2 + 0.5);\n        window.requestAnimationFrame(changeOpacity);\n    });\n\n这样就能重新触发paint函数重新渲染了，但是这个效果其实是有问题的，因为得有一个alternate轮流交替的效果，即0.5变到1，再从1变到0.5，而不是每次都是0.5到1. 模拟CSS animation的alternate这个也好解决，可以规定奇数秒就是变大，而偶数秒就是变小，这个好实现，略。\n\n但实际上可以不用这么麻烦，因为改变CSS属性直接用animation就可以了，如下代码所示：\n\n    body:before {\n        --star-opacity: 1;\n        --star-density: 0.5;\n        --starry-sky-seed: 1;\n        background-image: paint(starry-sky);\n        animation: shine 1s linear alternate infinite;\n    }\n    \n    @keyframes shine {\n        from {\n            --star-opacity: 1;\n        }\n        to {\n            --star-opacity: 0.6;\n        }\n    }\n\n这样也能触发重绘，但是我们发现它只有在from和to这两个点触发了重绘，没有中间过渡的过程。可以推测因为它认为--star-opacity的属性值不是一个数字，而是一个字符串，所以这两关键帧就没有中间的过渡效果了。因此我们得告诉它这是一个整型，不是一个字符串。类型化CSS对象模型（Typed CSSOM）提供了这个API。\n\n**类型化CSS对象模型**一个很大的作用就是把所有的CSS单位都用一个相应的对象来表示，提供加减乘除等运算，如：\n\n    // 10 px\n    let length = CSS.px(10);\n    // 在循环里面改length的值，不用自己去拼字符串\n    div.attributeStyleMap.set(\'width\', length.add(CSS.px(1)))\n\n这样的好处是不用自己去拼字符串，另外还提供了转换，如transform的值转成matrix，度数转成rad的形式等等。\n\n它还提供了注册自定义类型属性的能力，使用以下API：\n\n    CSS.registerProperty({\n        name: \'--star-opacity\',\n        // 指明它是一个数字类型\n        syntax: \'\',\n        inherits: false,\n        initialValue: 1\n    });\n\n这样注册之后，CSS系统就知道--star-opacity是一个number类型，在关键帧动画里面就会有一个渐变的过渡效果。\n\n类型CSS对象模型在Chrome 66已经正式支持，但是registerProperty API仍然没有开放，需要打开chrome://flags，搜索web platform，从disabled改成enabled就可以使用。\n\n这个给我们提供了**做动画新思路**，CSS animation + Canvas的模式，CSS animation负责改变属性数据并触发重绘，而Canvas去获取动态变化的数据更新视图。所以它是一个**数据驱动的动画模式**，这也是当前做动画的一个流行方式。\n\n在我们这个例子里面，由于星星数太多，1s有60帧，每帧都要计算和绘制1000个星星，CPU使用率达到90%多，所以这个性能有问题，如果用Cavans标签可以使用双缓冲技术，CSS Houdini好像没有这个东西。但是可以换一个思路，改成做整体的透明度动画，不用每个星星都算一下。\n\n如下代码所示：\n\n    body {\n        background-color: #000; \n    }\n    body:before {\n        background-image: paint(starry-sky);\n        animation: shine 1s linear alternate infinite;\n    }\n    \n    @keyframes shine {\n        from {\n            opacity: 1;\n        }\n        to {\n            opacity: 0.6;\n        }\n    }\n\n这个的效果和每个星星都单独算是一样的，CPU消耗12%左右，这个应该还是可以接受的。\n\n效果如下图所示：\n\n![](https://user-gold-cdn.xitu.io/2018/4/22/162eb83b2219ed05?imageslim)\n\n如果用Canvas标签，可以设置globalAlpha全局透明度属性，而使用CSS Houdini我们直接使用opacity就行了。\n\n一个完整的Demo：[CSS Houdini Starry Sky](https://link.juejin.im/?target=https%3A%2F%2Ffed.renren.com%2Fhtml%2Fhoudini%2Fstarry-sky%2F)，需要使用Chrome，因为目前只有Chrome支持。\n\n  \n\n总的来说，CSS Houdini的Paint Worket提供了CSS和Canvas的粘合，让我们可以用Canvas画出想要的CSS效果，并借助CSS自定义属性进行控制，通过使用JS或者CSS的animation/transition改变自定义属性的值触发重绘，从而产生动画效果，这也是数据驱动的开发思想。并讨论了在画这个星空的过程中遇到的一些问题，以及相关的解决方案。\n\n本文只是介绍了CSS Houdini里面的Paint Worket和Typed CSSOM，它还有另外一个Layout Worklet，利用它可以自行实现一个flex布局或者其它自定义布局，这样的好处是：一方面当有新的布局出现的时候可以借助这个API进行polyfill就不用担心没有实现的浏览器不兼容，另一方面可以发挥想象力实现自己想要的布局，这样在布局上可能会百花齐放了，而不仅仅使用W3C给的那几种布局。\n\n【再一次强推书】高效前端已上市，京东、亚马逊、淘宝等均有售\n\n![](https://user-gold-cdn.xitu.io/2018/4/22/162eb83b21c45472?imageView2/0/w/1280/h/960/ignore-error/1)\n\n【[人人网招聘高级前端](https://link.juejin.im/?target=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FNe-kp2FPKa4l78qm2t3_DQ)】', 0, 1, 0);
INSERT INTO `post` (`id`, `createAt`, `updateAt`, `title`, `description`, `thumb`, `url`, `html`, `markdown`, `views`, `status`, `push`) VALUES
(47, '2018-04-23 11:01:44.596977', '2018-04-23 11:01:44.596977', 'Say Hello to Houdini and the CSS Paint API', 'I haven’t been this excited about a new browser tech in a long time. Houdini is an ambitious project to give developers more power over CSS than we’ve ever had before. The first piece of...', 'https://codersblock.com/blog/wp-content/uploads/2018/03/houdini-polka-dots.png', 'https://codersblock.com/blog/say-hello-to-houdini-and-the-css-paint-api/', '<div class=\"writing-content\"> <p>I haven&#x2019;t been this excited about a new browser tech in a long time.</p>\n<p><strong>Houdini</strong> is an ambitious project to give developers more power over CSS than we&#x2019;ve ever had before. The first piece of this project to emerge is the <strong>CSS Paint API</strong>. This article will explain why Houdini is so exciting, then show you how to get started with the Paint API.</p>\n<h2>The Classic Disappointment</h2>\n<p>How many times have you heard about a killer new CSS feature and thought:</p>\n<blockquote><p><em>&#x201C;Wow, that&#x2019;s awesome! Can&#x2019;t wait to use it&#x2026; in 2 years, when browsers actually support it.&#x201D;</em></p></blockquote>\n<p>Sometimes we don&#x2019;t want to wait, so we turn to CSS polyfills. But these are often complex beasts behind the scenes, trying to emulate every nuance of the feature being polyfilled. This leads to a lot of potential for edge case bugs. There are also performance implications, as a polyfill&#x2019;s JavaScript is unable to compete with the efficiency of a browser&#x2019;s native implementation.</p>\n<p>If you need more convincing, check out <a href=\"https://philipwalton.com/articles/the-dark-side-of-polyfilling-css/\">the dark side of polyfilling CSS</a>.</p>\n<h2>A New Hope</h2>\n<p>So that&#x2019;s mildly depressing, but what if I told you that one day, you&#x2019;ll hear about a new CSS feature and think:</p>\n<blockquote><p><em>&#x201C;Wow, that&#x2019;s awesome! Can&#x2019;t wait to use it&#x2026; right now!&#x201D;</em></p></blockquote>\n<p>This is what Houdini is striving to deliver. Houdini, in the spirit of the <a href=\"https://extensiblewebmanifesto.org/\">Extensible Web Manifesto</a>, gives developers direct access to the browser&#x2019;s CSS engine. This gives developers the power to create their own custom CSS features that run efficiently within the browser&#x2019;s native rendering pipeline.</p>\n<p>These custom CSS features are defined in <strong>worklets</strong>, which are just JavaScript files that you deploy to your website like any other JavaScript file (they execute differently, but we&#x2019;ll talk more about that later). Then anyone that visits your site will be able to see the custom CSS feature, just as if it was built into their browser.</p>\n<p>This means that new CSS features can be implemented via Houdini long before browser vendors implement them. Or you can scratch your own itches by making CSS features that you want, but browser vendors would never implement.</p>\n<h2>Browser Support</h2>\n<p>The good news is that Houdini is backed by Apple, Google, Microsoft, Mozilla, and Opera. The bad news is that only Google&#x2019;s Chrome has implemented anything so far. Here&#x2019;s the browser support chart at the time of writing.</p>\n<div class=\"writing-insert\"><a href=\"https://ishoudinireadyyet.com/\"><img src=\"https://codersblock.com/blog/images/houdini-support-grid.png\" alt=\"Browser support for Houdini\"></a></div>\n<p>That chart throws a lot at you, so let me explain.</p>\n<p>Houdini is a collection of APIs that are different pieces of the puzzle, so to speak. The <strong>Layout API</strong> lets you control how elements are laid out with CSS, the <strong>Parser API</strong> lets you augment how CSS expressions are parsed, and so forth. As you can see, Houdini is very much a work in progress.</p>\n<p>But there&#x2019;s one Houdini API that you can start playing with today: the CSS Paint API. This API lets you draw images for use with CSS properties that expect them &#x2014; for example, <code>background-image</code> and <code>list-style-image</code>.</p>\n<p>For now, you&#x2019;ll need Chrome to play with the Paint API. It&#x2019;s enabled by default in the latest version of Chrome. If you&#x2019;re using a version earlier than Chrome 65 (Android phone perhaps?) then the Paint API is still behind a flag &#x2014; go to <strong>chrome://flags</strong> and enable <strong>Experimental Web Platform features</strong>.</p>\n<p>To check for Paint API support via JavaScript, use this.</p> <p>And to check via CSS, use this.</p> <p>The demo below uses both methods to check if your browser supports the Paint API. If you see double checkmarks, then you&#x2019;re good to go!</p>\n<p class=\"codepen\">See the Pen <a href=\"https://codepen.io/lonekorean/pen/jzNBwp/\">CSS Paint API Detection</a> by Will Boyd (<a href=\"https://codepen.io/lonekorean\">@lonekorean</a>) on <a href=\"https://codepen.io/\">CodePen</a>.</p> <h2>Technical Notes</h2>\n<p>An important caveat is that the Paint API only works over <code>https</code> or on <code>localhost</code>. If you&#x2019;re developing locally, <a href=\"https://www.npmjs.com/package/http-server\">http-server</a> makes it super easy to view your pages on <code>localhost</code>.</p>\n<p>Worklets (which we&#x2019;ll talk more about in a minute) are cached by your browser, so be sure to disable the cache to see code updates take effect. </p>\n<p>Also know that you can&#x2019;t set breakpoints or use the <code>debugger</code> statement with code inside of a worklet (yet). Thankfully, you can still use <code>console.log()</code>.</p>\n<h2>A Simple Paint Worklet</h2>\n<p>Let&#x2019;s make something with the Paint API! We&#x2019;ll start with something simple that draws an X across an element. We can use this to make placeholder boxes, commonly seen in mockups/wireframes to represent where images will go. Here&#x2019;s the demo.</p>\n<p class=\"codepen\">See the Pen <a href=\"https://codepen.io/lonekorean/pen/wmwJQX/\">Hello Houdini: Placeholder Box</a> by Will Boyd (<a href=\"https://codepen.io/lonekorean\">@lonekorean</a>) on <a href=\"https://codepen.io/\">CodePen</a>.</p> <p>The drawing code goes into a <strong>paint worklet</strong>, which lives in its own JavaScript file. Paint worklets have limited scope and functionality. They can&#x2019;t access the DOM and many global functions (like <code>setInterval</code>) are not available. This helps keep them efficient and potentially multi-threadable (not done yet, but it&#x2019;s on the wishlist).</p> <p>The <code>paint()</code> function is called whenever the element needs to be (re)painted. It gives us a couple incoming parameters to work with. <code>ctx</code> is the object we draw on, just like a <code>CanvasRenderingContext2D</code> object (<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">documentation here</a>) but with some limitations (like no text drawing). <code>size</code> gives us the width and height of the element being painted.</p>\n<p>Next, we tell the page about our paint worklet. Let&#x2019;s also add a <code>&lt;div&gt;</code> with a class of <code>placeholder</code> while we&#x2019;re here.</p> <p>Finally, we connect the paint worklet to the <code>&lt;div&gt;</code> with some modest CSS.</p> <p>And that&#x2019;s it. Congratulations, you&#x2019;re using the Paint API!</p>\n<h2>Using Input Properties</h2>\n<p>As it stands now, our little paint worklet hardcodes the thickness and color of the X. Wouldn&#x2019;t it be nice if it automatically used the thickness and color of the element&#x2019;s border?</p>\n<p>We can accomplish this with <strong>input properties</strong>, provided by the <strong>Typed Object Model</strong> (or <strong>Typed OM</strong>). It&#x2019;s another part of Houdini, but unlike the Paint API, it&#x2019;s still behind a flag. Enable it by going to <strong>chrome://flags</strong> and enabling <strong>Experimental Web Platform features</strong>.</p>\n<p>You can check for Typed OM support in code with this.</p> <p>Now let&#x2019;s update the code for our paint worklet.</p> <p>We&#x2019;ve added <code>inputProperties</code> to tell the paint worklet which CSS properties to look for. After that, the <code>paint()</code> function can use a third incoming parameter, <code>props</code>, to access the values for these properties. And now our placeholder boxes are a little smarter.</p>\n<p class=\"codepen\">See the Pen <a href=\"https://codepen.io/lonekorean/pen/QmLpJJ/\">Hello Houdini: Placeholder Box with Input Properties</a> by Will Boyd (<a href=\"https://codepen.io/lonekorean\">@lonekorean</a>) on <a href=\"https://codepen.io/\">CodePen</a>.</p> <p>It&#x2019;s fine to use <code>border</code> in our CSS, but keep in mind that it&#x2019;s actually shorthand for 12 different CSS properties.</p> <p>The paint worklet needs us to be specific, so for the purposes of this demo, we use <code>border-top-width</code> and <code>border-top-color</code>.</p>\n<p>Something cool to note is that <code>border-top-width</code> is converted to pixels as it&#x2019;s passed into the paint worklet. This is perfect, since that&#x2019;s the unit of measurement that <code>ctx.lineWidth</code> expects. As proof, the third placeholder box in the demo above has a <code>border-top-width</code> of <code>1rem</code>, but the paint worklet is given <code>16px</code>.</p>\n<h2>Crafting a Jagged Edge</h2>\n<p>For our next trick, we&#x2019;ll make a paint worklet that draws a jagged edge. Here&#x2019;s the demo.</p>\n<p class=\"codepen\">See the Pen <a href=\"https://codepen.io/lonekorean/pen/MVgpzd/\">Hello Houdini: Jagged Edge</a> by Will Boyd (<a href=\"https://codepen.io/lonekorean\">@lonekorean</a>) on <a href=\"https://codepen.io/\">CodePen</a>.</p> <p>And here&#x2019;s the code for the paint worklet.</p> <p>We&#x2019;re using <code>inputProperties</code> again, this time to control the width and height of each &#x201C;tooth&#x201D;. But notice that <code>--tooth-width</code> and <code>--tooth-height</code> are <strong>custom properties</strong> (also known as <strong>CSS variables</strong>). This often makes more sense than hijacking an existing CSS property, but it does require another step.</p>\n<p>You see, the browser knows that certain built-in CSS properties are length values (like with <code>border-top-width</code> from earlier). But a custom property can be used for all sorts of stuff. Your browser can&#x2019;t assume a custom property is being used for length, so we have to tell it.</p>\n<p>The <strong>Properties and Values API</strong> lets us do just that. It&#x2019;s yet another piece of Houdini and also requires the <strong>Experimental Web Platform features</strong> flag be enabled at <strong>chrome://flags</strong>.</p>\n<p>You can check for Properties and Values API support in code with this.</p> <p>Once enabled, we can add the following JavaScript (outside of the paint worklet file).</p> <p>Now we can use all sorts of length values with <code>--tooth-width</code> and <code>--tooth-height</code> and your browser will understand them and convert them to pixel values for our paint worklet. We can even use <code>calc()</code> expressions. Crazy! And if we forget to set them or give them invalid length values, they&#x2019;ll just fall back to <code>initialValue</code>.</p> <p><code>&lt;length&gt;</code> isn&#x2019;t the only syntax allowed, as you can <a href=\"https://drafts.css-houdini.org/css-properties-values-api/#supported-syntax-strings\">see here</a>. So we could also register a <code>--tooth-color</code> property of syntax <code>&lt;color&gt;</code>, but I have something better in mind. By using <code>-webkit-mask-image</code> with our paint worklet, we can &#x201C;knockout&#x201D; the jagged edge shape with whatever background we want. The CSS looks like this.</p> <p>The paint worklet code is exactly the same. Now check out our new fancy jagged edges.</p>\n<p class=\"codepen\">See the Pen <a href=\"https://codepen.io/lonekorean/pen/zWOZyx/\">Hello Houdini: Jagged Edge with Mask</a> by Will Boyd (<a href=\"https://codepen.io/lonekorean\">@lonekorean</a>) on <a href=\"https://codepen.io/\">CodePen</a>.</p> <h2>Input Arguments</h2>\n<p>You can also pass values into your paint worklet by using <strong>input arguments</strong>. These allow you to specify arguments in CSS like so.</p> <p>The paint worklet declares what it expects via <code>inputArguments</code>. Then the <code>paint()</code> function can grab those arguments from a fourth incoming parameter, an array named <code>args</code> as seen below.</p> <p>I&#x2019;m honestly not a fan of input arguments. Custom properties are a lot more versatile. They also help create better self-documenting CSS, since you can use descriptive property names.</p>\n<h2>New Ways to Animate</h2>\n<p>Let&#x2019;s do one last project. Using familiar concepts we&#x2019;ve already covered, we can create this nifty fading polka dot pattern.</p>\n<p class=\"codepen\">See the Pen <a href=\"https://codepen.io/lonekorean/pen/aYoJPv/\">Hello Houdini: Polka Dot Fade</a> by Will Boyd (<a href=\"https://codepen.io/lonekorean\">@lonekorean</a>) on <a href=\"https://codepen.io/\">CodePen</a>.</p> <p>We start by registering some custom properties to control the polka dots.</p> <p>Then our paint worklet can use these custom properties, along with a bunch of math, to draw the polka dot pattern.</p> <p>Lastly, here&#x2019;s the CSS that sets the custom properties and references the paint worklet.</p> <p>Now for a twist. We can animate the values of registered custom properties in CSS. As the values change, the paint worklet using them will be called upon to repaint with the updated values.</p>\n<p>Let&#x2019;s animate <code>--dot-fade-offset</code> and <code>--dot-color</code> via a <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/animation\">keyframes animation</a> (<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/transition\">transition</a> would work, too).</p> <p>Hover/tap the demo below to see the animation in action.</p>\n<p class=\"codepen\">See the Pen <a href=\"https://codepen.io/lonekorean/pen/xWKqmZ/\">Hello Houdini: Animated Polka Dot Fade</a> by Will Boyd (<a href=\"https://codepen.io/lonekorean\">@lonekorean</a>) on <a href=\"https://codepen.io/\">CodePen</a>.</p> <p>The potential here is really exciting! We can use paint worklets with custom properties to create completely new types of animation.</p>\n<h2>Pros and Cons</h2>\n<p>Let&#x2019;s review some of the good things about Houdini (and the CSS Paint API in particular).</p>\n<ul>\n<li>Gives you the freedom to create your own visual effects.</li>\n<li>Doesn&#x2019;t rely on adding extra elements or pseudo-elements to the DOM.</li>\n<li>Executes as part of your browsers rendering pipeline for greater efficiency.</li>\n<li>More efficient and less buggy than polyfills.</li>\n<li>Provides an alternative to using complex/hacky CSS to achieve certain results.</li>\n<li>Serves as a method of abstraction and modularization by containing visual logic within a paint worklet.</li>\n<li>Lets you create completely new types of animation.</li>\n<li>Solves future browser support issues by allowing developers to use new features before browsers implement them.</li>\n<li>All five major browser vendors intend to support Houdini.</li>\n</ul>\n<p>Of course, there are shortcomings as well.</p>\n<ul>\n<li>Large pieces of Houdini are still in development.</li>\n<li>Houdini itself requires good browser support before it can start alleviating future browser support issues.</li>\n<li>Browsers have to load a paint worklet file before being able to use it, which can cause style pop-in.</li>\n<li>Current dev tools do not support setting breakpoints or using the <code>debugger</code> statement in a paint worklet (although you can still use <code>console.log()</code>).</li>\n</ul>\n<h2>Conclusion</h2>\n<p>Houdini has the potential to radically change how we approach CSS. It&#x2019;s still a work in progress, but even just the few working parts we have so far are incredibly interesting. Keep an eye on Houdini.</p>\n<p>All the demos from this article are available in <a href=\"https://github.com/lonekorean/hello-houdini\">this GitHub repo</a>. For more demos, check out <a href=\"https://lab.iamvdo.me/houdini/\">this awesome collection</a> by <a href=\"https://twitter.com/iamvdo\">@iamvdo</a>.</p>\n<p>Thanks for reading!</p> </div>', 'I haven’t been this excited about a new browser tech in a long time.\n\n**Houdini** is an ambitious project to give developers more power over CSS than we’ve ever had before. The first piece of this project to emerge is the **CSS Paint API**. This article will explain why Houdini is so exciting, then show you how to get started with the Paint API.\n\nThe Classic Disappointment\n--------------------------\n\nHow many times have you heard about a killer new CSS feature and thought:\n\n> _“Wow, that’s awesome! Can’t wait to use it… in 2 years, when browsers actually support it.”_\n\nSometimes we don’t want to wait, so we turn to CSS polyfills. But these are often complex beasts behind the scenes, trying to emulate every nuance of the feature being polyfilled. This leads to a lot of potential for edge case bugs. There are also performance implications, as a polyfill’s JavaScript is unable to compete with the efficiency of a browser’s native implementation.\n\nIf you need more convincing, check out [the dark side of polyfilling CSS](https://philipwalton.com/articles/the-dark-side-of-polyfilling-css/).\n\nA New Hope\n----------\n\nSo that’s mildly depressing, but what if I told you that one day, you’ll hear about a new CSS feature and think:\n\n> _“Wow, that’s awesome! Can’t wait to use it… right now!”_\n\nThis is what Houdini is striving to deliver. Houdini, in the spirit of the [Extensible Web Manifesto](https://extensiblewebmanifesto.org/), gives developers direct access to the browser’s CSS engine. This gives developers the power to create their own custom CSS features that run efficiently within the browser’s native rendering pipeline.\n\nThese custom CSS features are defined in **worklets**, which are just JavaScript files that you deploy to your website like any other JavaScript file (they execute differently, but we’ll talk more about that later). Then anyone that visits your site will be able to see the custom CSS feature, just as if it was built into their browser.\n\nThis means that new CSS features can be implemented via Houdini long before browser vendors implement them. Or you can scratch your own itches by making CSS features that you want, but browser vendors would never implement.\n\nBrowser Support\n---------------\n\nThe good news is that Houdini is backed by Apple, Google, Microsoft, Mozilla, and Opera. The bad news is that only Google’s Chrome has implemented anything so far. Here’s the browser support chart at the time of writing.\n\n[![Browser support for Houdini](https://codersblock.com/blog/images/houdini-support-grid.png)](https://ishoudinireadyyet.com/)\n\nThat chart throws a lot at you, so let me explain.\n\nHoudini is a collection of APIs that are different pieces of the puzzle, so to speak. The **Layout API** lets you control how elements are laid out with CSS, the **Parser API** lets you augment how CSS expressions are parsed, and so forth. As you can see, Houdini is very much a work in progress.\n\nBut there’s one Houdini API that you can start playing with today: the CSS Paint API. This API lets you draw images for use with CSS properties that expect them — for example, `background-image` and `list-style-image`.\n\nFor now, you’ll need Chrome to play with the Paint API. It’s enabled by default in the latest version of Chrome. If you’re using a version earlier than Chrome 65 (Android phone perhaps?) then the Paint API is still behind a flag — go to **chrome://flags** and enable **Experimental Web Platform features**.\n\nTo check for Paint API support via JavaScript, use this.\n\nAnd to check via CSS, use this.\n\nThe demo below uses both methods to check if your browser supports the Paint API. If you see double checkmarks, then you’re good to go!\n\nSee the Pen [CSS Paint API Detection](https://codepen.io/lonekorean/pen/jzNBwp/) by Will Boyd ([@lonekorean](https://codepen.io/lonekorean)) on [CodePen](https://codepen.io/).\n\nTechnical Notes\n---------------\n\nAn important caveat is that the Paint API only works over `https` or on `localhost`. If you’re developing locally, [http-server](https://www.npmjs.com/package/http-server) makes it super easy to view your pages on `localhost`.\n\nWorklets (which we’ll talk more about in a minute) are cached by your browser, so be sure to disable the cache to see code updates take effect.\n\nAlso know that you can’t set breakpoints or use the `debugger` statement with code inside of a worklet (yet). Thankfully, you can still use `console.log()`.\n\nA Simple Paint Worklet\n----------------------\n\nLet’s make something with the Paint API! We’ll start with something simple that draws an X across an element. We can use this to make placeholder boxes, commonly seen in mockups/wireframes to represent where images will go. Here’s the demo.\n\nSee the Pen [Hello Houdini: Placeholder Box](https://codepen.io/lonekorean/pen/wmwJQX/) by Will Boyd ([@lonekorean](https://codepen.io/lonekorean)) on [CodePen](https://codepen.io/).\n\nThe drawing code goes into a **paint worklet**, which lives in its own JavaScript file. Paint worklets have limited scope and functionality. They can’t access the DOM and many global functions (like `setInterval`) are not available. This helps keep them efficient and potentially multi-threadable (not done yet, but it’s on the wishlist).\n\nThe `paint()` function is called whenever the element needs to be (re)painted. It gives us a couple incoming parameters to work with. `ctx` is the object we draw on, just like a `CanvasRenderingContext2D` object ([documentation here](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D)) but with some limitations (like no text drawing). `size` gives us the width and height of the element being painted.\n\nNext, we tell the page about our paint worklet. Let’s also add a `<div>` with a class of `placeholder` while we’re here.\n\nFinally, we connect the paint worklet to the `<div>` with some modest CSS.\n\nAnd that’s it. Congratulations, you’re using the Paint API!\n\nUsing Input Properties\n----------------------\n\nAs it stands now, our little paint worklet hardcodes the thickness and color of the X. Wouldn’t it be nice if it automatically used the thickness and color of the element’s border?\n\nWe can accomplish this with **input properties**, provided by the **Typed Object Model** (or **Typed OM**). It’s another part of Houdini, but unlike the Paint API, it’s still behind a flag. Enable it by going to **chrome://flags** and enabling **Experimental Web Platform features**.\n\nYou can check for Typed OM support in code with this.\n\nNow let’s update the code for our paint worklet.\n\nWe’ve added `inputProperties` to tell the paint worklet which CSS properties to look for. After that, the `paint()` function can use a third incoming parameter, `props`, to access the values for these properties. And now our placeholder boxes are a little smarter.\n\nSee the Pen [Hello Houdini: Placeholder Box with Input Properties](https://codepen.io/lonekorean/pen/QmLpJJ/) by Will Boyd ([@lonekorean](https://codepen.io/lonekorean)) on [CodePen](https://codepen.io/).\n\nIt’s fine to use `border` in our CSS, but keep in mind that it’s actually shorthand for 12 different CSS properties.\n\nThe paint worklet needs us to be specific, so for the purposes of this demo, we use `border-top-width` and `border-top-color`.\n\nSomething cool to note is that `border-top-width` is converted to pixels as it’s passed into the paint worklet. This is perfect, since that’s the unit of measurement that `ctx.lineWidth` expects. As proof, the third placeholder box in the demo above has a `border-top-width` of `1rem`, but the paint worklet is given `16px`.\n\nCrafting a Jagged Edge\n----------------------\n\nFor our next trick, we’ll make a paint worklet that draws a jagged edge. Here’s the demo.\n\nSee the Pen [Hello Houdini: Jagged Edge](https://codepen.io/lonekorean/pen/MVgpzd/) by Will Boyd ([@lonekorean](https://codepen.io/lonekorean)) on [CodePen](https://codepen.io/).\n\nAnd here’s the code for the paint worklet.\n\nWe’re using `inputProperties` again, this time to control the width and height of each “tooth”. But notice that `--tooth-width` and `--tooth-height` are **custom properties** (also known as **CSS variables**). This often makes more sense than hijacking an existing CSS property, but it does require another step.\n\nYou see, the browser knows that certain built-in CSS properties are length values (like with `border-top-width` from earlier). But a custom property can be used for all sorts of stuff. Your browser can’t assume a custom property is being used for length, so we have to tell it.\n\nThe **Properties and Values API** lets us do just that. It’s yet another piece of Houdini and also requires the **Experimental Web Platform features** flag be enabled at **chrome://flags**.\n\nYou can check for Properties and Values API support in code with this.\n\nOnce enabled, we can add the following JavaScript (outside of the paint worklet file).\n\nNow we can use all sorts of length values with `--tooth-width` and `--tooth-height` and your browser will understand them and convert them to pixel values for our paint worklet. We can even use `calc()` expressions. Crazy! And if we forget to set them or give them invalid length values, they’ll just fall back to `initialValue`.\n\n`<length>` isn’t the only syntax allowed, as you can [see here](https://drafts.css-houdini.org/css-properties-values-api/#supported-syntax-strings). So we could also register a `--tooth-color` property of syntax `<color>`, but I have something better in mind. By using `-webkit-mask-image` with our paint worklet, we can “knockout” the jagged edge shape with whatever background we want. The CSS looks like this.\n\nThe paint worklet code is exactly the same. Now check out our new fancy jagged edges.\n\nSee the Pen [Hello Houdini: Jagged Edge with Mask](https://codepen.io/lonekorean/pen/zWOZyx/) by Will Boyd ([@lonekorean](https://codepen.io/lonekorean)) on [CodePen](https://codepen.io/).\n\nInput Arguments\n---------------\n\nYou can also pass values into your paint worklet by using **input arguments**. These allow you to specify arguments in CSS like so.\n\nThe paint worklet declares what it expects via `inputArguments`. Then the `paint()` function can grab those arguments from a fourth incoming parameter, an array named `args` as seen below.\n\nI’m honestly not a fan of input arguments. Custom properties are a lot more versatile. They also help create better self-documenting CSS, since you can use descriptive property names.\n\nNew Ways to Animate\n-------------------\n\nLet’s do one last project. Using familiar concepts we’ve already covered, we can create this nifty fading polka dot pattern.\n\nSee the Pen [Hello Houdini: Polka Dot Fade](https://codepen.io/lonekorean/pen/aYoJPv/) by Will Boyd ([@lonekorean](https://codepen.io/lonekorean)) on [CodePen](https://codepen.io/).\n\nWe start by registering some custom properties to control the polka dots.\n\nThen our paint worklet can use these custom properties, along with a bunch of math, to draw the polka dot pattern.\n\nLastly, here’s the CSS that sets the custom properties and references the paint worklet.\n\nNow for a twist. We can animate the values of registered custom properties in CSS. As the values change, the paint worklet using them will be called upon to repaint with the updated values.\n\nLet’s animate `--dot-fade-offset` and `--dot-color` via a [keyframes animation](https://developer.mozilla.org/en-US/docs/Web/CSS/animation) ([transition](https://developer.mozilla.org/en-US/docs/Web/CSS/transition) would work, too).\n\nHover/tap the demo below to see the animation in action.\n\nSee the Pen [Hello Houdini: Animated Polka Dot Fade](https://codepen.io/lonekorean/pen/xWKqmZ/) by Will Boyd ([@lonekorean](https://codepen.io/lonekorean)) on [CodePen](https://codepen.io/).\n\nThe potential here is really exciting! We can use paint worklets with custom properties to create completely new types of animation.\n\nPros and Cons\n-------------\n\nLet’s review some of the good things about Houdini (and the CSS Paint API in particular).\n\n*   Gives you the freedom to create your own visual effects.\n*   Doesn’t rely on adding extra elements or pseudo-elements to the DOM.\n*   Executes as part of your browsers rendering pipeline for greater efficiency.\n*   More efficient and less buggy than polyfills.\n*   Provides an alternative to using complex/hacky CSS to achieve certain results.\n*   Serves as a method of abstraction and modularization by containing visual logic within a paint worklet.\n*   Lets you create completely new types of animation.\n*   Solves future browser support issues by allowing developers to use new features before browsers implement them.\n*   All five major browser vendors intend to support Houdini.\n\nOf course, there are shortcomings as well.\n\n*   Large pieces of Houdini are still in development.\n*   Houdini itself requires good browser support before it can start alleviating future browser support issues.\n*   Browsers have to load a paint worklet file before being able to use it, which can cause style pop-in.\n*   Current dev tools do not support setting breakpoints or using the `debugger` statement in a paint worklet (although you can still use `console.log()`).\n\nConclusion\n----------\n\nHoudini has the potential to radically change how we approach CSS. It’s still a work in progress, but even just the few working parts we have so far are incredibly interesting. Keep an eye on Houdini.\n\nAll the demos from this article are available in [this GitHub repo](https://github.com/lonekorean/hello-houdini). For more demos, check out [this awesome collection](https://lab.iamvdo.me/houdini/) by [@iamvdo](https://twitter.com/iamvdo).\n\nThanks for reading!', 0, 1, 0);
INSERT INTO `post` (`id`, `createAt`, `updateAt`, `title`, `description`, `thumb`, `url`, `html`, `markdown`, `views`, `status`, `push`) VALUES
(48, '2018-04-23 11:01:44.740354', '2018-04-23 11:01:44.740354', '七行JSON代码将你的网站变成移动应用', '作者｜Ethan译者｜大愚若智编辑｜覃云本文介绍了借助Jasonette将Web视图和原生组件融合构建真正“混合”应用的做法。如果我告诉你，只需要上述7行橙色的JSON代码就可以将一个网站变成移动应用，你相信吗？完全不需要使用某种框架API重写网站，就可以获得与移动应用相同的行为。如果你已经有一个现成的网站，只需要简单地引用URL就可以将其“打包”为原生应用。而如果在此基础上，只需要略微调整JSON代码内容，就可以直接访问所有原生API、原生UI组件以及原生视图切换（ViewTransition）。最简化', 'https://mmbiz.qpic.cn/mmbiz_jpg/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbNGQJhAg8FP4rMYBVpSUKcr3EXW1ZV50A1TPmCibNKqXwXxibrK0AXtXw/640?wx_fmt=jpeg', 'https://mp.weixin.qq.com/s/e0YqiCLvn4gfXCnWj_fd7g', '<section class=\"firstImage\" style=\"box-sizing: border-box;color: rgb(63, 63, 63);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;font-size: 14px;white-space: normal;background-color: rgb(255, 255, 255);\"><img class=\"\" data-ratio=\"0.6675938803894298\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbNGQJhAg8FP4rMYBVpSUKcr3EXW1ZV50A1TPmCibNKqXwXxibrK0AXtXw/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"719\" style=\"box-sizing: border-box;border-width: 0px;border-style: initial;border-color: initial;vertical-align: middle;width: 733px;border-radius: 4px;margin-bottom: 25px;\" src=\"https://mmbiz.qpic.cn/mmbiz_jpg/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbNGQJhAg8FP4rMYBVpSUKcr3EXW1ZV50A1TPmCibNKqXwXxibrK0AXtXw/640?wx_fmt=jpeg\"></section><section class=\"h1\" style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;line-height: 1em;color: rgb(145, 145, 145);margin-top: 13px;font-size: 14px;white-space: normal;background-color: rgb(255, 255, 255);padding-left: 14px;\">作者｜Ethan</section><section class=\"h1\" style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;line-height: 1em;color: rgb(145, 145, 145);margin-top: 13px;font-size: 14px;white-space: normal;background-color: rgb(255, 255, 255);padding-left: 14px;\">译者｜大愚若智</section><section class=\"h1\" style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;line-height: 1em;color: rgb(145, 145, 145);margin-top: 13px;font-size: 14px;white-space: normal;background-color: rgb(255, 255, 255);padding-left: 14px;\">编辑｜覃云</section><section class=\"preface\" style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;white-space: normal;font-size: 15px;text-align: justify;line-height: 27px;color: rgb(89, 89, 89);background-color: rgb(239, 239, 239);padding: 19px;margin-top: 40px;margin-right: 8px;margin-left: 8px;\">本文介绍了借助 Jasonette 将 Web 视图和原生组件融合构建真正“混合”应用的做法。</section><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><img class=\"\" data-ratio=\"0.59\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbiaG6r89V1lSXBUQe7B0mia6iaOo1owRZvMXqXviclnSr4LU32qHBe6SDIQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"2000\" style=\"box-sizing: border-box;border-width: 0px;border-style: initial;border-color: initial;vertical-align: middle;width: 717px;\" src=\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbiaG6r89V1lSXBUQe7B0mia6iaOo1owRZvMXqXviclnSr4LU32qHBe6SDIQ/640?wx_fmt=png\"></p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">如果我告诉你，只需要 <strong style=\"box-sizing: border-box;text-align: left;\">上述 7 行橙色的 JSON 代码</strong> 就可以将一个网站变成移动应用，你相信吗？完全不需要使用某种框架 API 重写网站，就可以获得与移动应用相同的行为。如果你已经有一个现成的网站，只需要简单地引用 URL 就可以将其“打包”为原生应用。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">而如果在此基础上，只需要略微调整 JSON 代码内容，就可以直接访问所有原生 API、原生 UI 组件以及原生视图切换（View Transition）。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">最简化的范例效果如下图所示：</p><p><br></p><p style=\"text-align: center;\"><img class=\"\" data-backh=\"385\" data-backw=\"217\" data-copyright=\"0\" data-ratio=\"1.7741935483870968\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbneAETeJ2J9gB0P7B4a4QBGkUXBqzicz55tFEVDq6k3tKa9ibd3a1lltg/640?wx_fmt=gif\" data-type=\"gif\" data-w=\"217\" style=\"width: 304px;height: 539px;\" src=\"https://mmbiz.qpic.cn/mmbiz_gif/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbneAETeJ2J9gB0P7B4a4QBGkUXBqzicz55tFEVDq6k3tKa9ibd3a1lltg/640?wx_fmt=gif\"></p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">从中可以看出，我嵌入了一个 GitHub.com 的 Web 页面，但界面上其余布局均为原生 UI 组件，例如 导航条 以及 底部的标签栏。而我们并不需要使用任何 API 重写网站，就可以自动获得原生的切换效果。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">在介绍具体做法前你可能会问：“看着挺酷，但除了在原生应用框架内展示 Web 页面之外，这种技术还有什么意义？”</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">问得好！这也是本文要讲的重点。我们只需要创建一个无缝的 <strong style=\"box-sizing: border-box;text-align: left;\">Web 视图与应用间双向通信</strong>，借此，父应用就可以触发 Web 视图内的任何 JavaScript 函数，随后 Web 视图即可从外部调用原生 API。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">例如：</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: center;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><img class=\"\" data-ratio=\"1.780373831775701\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVb3aKGQ72nibV6dviaW27cWg9lyLXLaIOqYBDgMSeuNicnckPUOibfepWaXQ/640?wx_fmt=gif\" data-type=\"gif\" data-w=\"428\" style=\"box-sizing: border-box;border-width: 0px;border-style: initial;border-color: initial;vertical-align: middle;width: 341px;height: 607px;\" src=\"https://mmbiz.qpic.cn/mmbiz_gif/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVb3aKGQ72nibV6dviaW27cWg9lyLXLaIOqYBDgMSeuNicnckPUOibfepWaXQ/640?wx_fmt=gif\"></p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">请注意，这个视图包含：</p><ol style=\"\" class=\" list-paddingleft-2\"><li><p style=\"box-sizing: border-box;font-size: 16px;text-align: justify;white-space: pre-line;color: rgb(74, 74, 74);line-height: 1.75em;\">原生导航条，以及内置的切换功能</p></li><li><p style=\"box-sizing: border-box;font-size: 16px;text-align: justify;white-space: pre-line;color: rgb(74, 74, 74);line-height: 1.75em;\">一个 Web 视图，其中嵌入了一个可以生成二维码的 Web 应用</p></li><li><p style=\"box-sizing: border-box;font-size: 16px;text-align: justify;white-space: pre-line;color: rgb(74, 74, 74);line-height: 1.75em;\">在底部包含一个原生的文字输入组件</p></li></ol><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">上述所有这一切只需要略微调整 JSON 代码的属性即可实现。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">最后请注意，随着在文字输入区输入不同内容，二维码也会产生相应变化。输入的文字可触发二维码生成器 Web 应用内部的 JavaScript 函数重新生成二维码图像。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">目前还没有任何一个开发框架曾试图从根本上解决“<strong style=\"box-sizing: border-box;text-align: left;\">Web 视图与原生应用无缝集成</strong>”的问题，因为这些框架都专注于完全原生，或完全 HTML5 的做法。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">无论什么时候当我们听到有人讨论移动应用的未来时，很可能会听到类似“<strong style=\"box-sizing: border-box;text-align: left;\">到底是 HTML5 还是原生方法会最终胜出呢？</strong>”这样的说法。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">似乎没人觉得<code style=\"box-sizing: border-box;\">native</code>和<code style=\"box-sizing: border-box;\">html</code>可以共存，而且二者的协同和最终实现似乎也并不容易。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">本文我将要介绍：</p><ul style=\"\" class=\" list-paddingleft-2\"><li><p style=\"box-sizing: border-box;font-size: 16px;text-align: justify;white-space: pre-line;color: rgb(74, 74, 74);line-height: 1.75em;\">为何 Web 引擎与原生组件的融合通常是一种更好的做法。</p></li><li><p style=\"box-sizing: border-box;font-size: 16px;text-align: justify;white-space: pre-line;color: rgb(74, 74, 74);line-height: 1.75em;\">为何 HTML 与原生的无缝集成那么难，具体又该如何实现。</p></li><li><p style=\"box-sizing: border-box;font-size: 16px;text-align: justify;white-space: pre-line;color: rgb(74, 74, 74);line-height: 1.75em;\">更重要的是，该如何使用这样的技术快速构建自己的应用。</p></li></ul><section class=\"h2\" style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;line-height: 1.1;color: rgb(63, 63, 63);font-size: 20px;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box;height: 65px;line-height: 95px;color: rgb(60, 112, 198);border-bottom: 2px solid rgb(27, 95, 160);background: url(\"https://mmbiz.qpic.cn/mmbiz_jpg/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbz2PLh5DL8iauUibbmxbH5DHibsicYBM2PqvaLmN5ZtmwHbJ0hejxclSHHw/640?wx_fmt=jpeg\") 50% 50% / 92px no-repeat;margin-top: 38px;margin-bottom: 10px;padding-bottom: 7px;display: inline-block;font-size: 18px;\">为何要在原生应用中使用 HTML？</span></section><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">在进一步介绍前，首先一起看看这样做是好是坏，以及什么时候适合使用这种方法。这种做法的一些潜在用例如下：</p><section class=\"h4\" style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;line-height: 1.1;color: rgb(60, 112, 198);margin-top: 30px;margin-left: 8px;font-size: 16px;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box;display: inline-block;width: 15px;height: 15px;margin-right: 10px;background: url(\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbI9OSD9K2SGscgFT6jWhtzlDFh443y85rMSMca1CulA2CbQibODEFHkw/640?wx_fmt=png\") center center / 100% 100% no-repeat;\"></span> <span style=\"box-sizing: border-box;\"><strong style=\"box-sizing: border-box;\">1. 使用 Web 原生功能</strong></span></section><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">应用中的部分内容使用 Web 引擎来实现也许是一种更适合的做法。例如 WebSocket 是一种原生的 Web 功能，主要面向 Web 环境而设计。这种情况下就更适合使用内建的 Web 引擎（<strong style=\"box-sizing: border-box;text-align: left;\">iOS 的 WKWebView</strong> 以及 <strong style=\"box-sizing: border-box;text-align: left;\">Android 的 WebView</strong>），而非安装某些只能“<strong style=\"box-sizing: border-box;text-align: left;\">模拟</strong>”WebSocket 的第三方库。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">无需额外安装任何代码，使用免费工具即可实现目标，这样岂不是更好。同时这也催生了下一个原因。</p><section class=\"h4\" style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;line-height: 1.1;color: rgb(60, 112, 198);margin-top: 30px;margin-left: 8px;font-size: 16px;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box;display: inline-block;width: 15px;height: 15px;margin-right: 10px;background: url(\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbI9OSD9K2SGscgFT6jWhtzlDFh443y85rMSMca1CulA2CbQibODEFHkw/640?wx_fmt=png\") center center / 100% 100% no-repeat;\"></span> <span style=\"box-sizing: border-box;\"><strong style=\"box-sizing: border-box;\">2. 避免二进制文件体积过大</strong></span></section><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">有些功能也许需要借助庞大的第三方库，而你可能希望能快速用上这样的功能。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">例如，为了以原生方式包含二维码图像生成器，可能需要安装某些第三方库，这会导致二进制文件体积增大。但如果使用 Web 视图引擎并通过一个简单的<code style=\"box-sizing: border-box;\"><script src></code>调用 JavaScript 库，就可以免费实现这一切，并且避免了使用第三方原生库。</p><section class=\"h4\" style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;line-height: 1.1;color: rgb(60, 112, 198);margin-top: 30px;margin-left: 8px;font-size: 16px;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box;display: inline-block;width: 15px;height: 15px;margin-right: 10px;background: url(\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbI9OSD9K2SGscgFT6jWhtzlDFh443y85rMSMca1CulA2CbQibODEFHkw/640?wx_fmt=png\") center center / 100% 100% no-repeat;\"></span> <span style=\"box-sizing: border-box;\"><strong style=\"box-sizing: border-box;\">3. 缺乏可靠的移动库</strong></span></section><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">对于一些前沿技术，可能暂时并不具备稳定可靠的移动端实现。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">好在大部分此类技术都具备 Web 实现，因此最高效的集成方法就是使用 JavaScript 库。</p><section class=\"h4\" style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;line-height: 1.1;color: rgb(60, 112, 198);margin-top: 30px;margin-left: 8px;font-size: 16px;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box;display: inline-block;width: 15px;height: 15px;margin-right: 10px;background: url(\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbI9OSD9K2SGscgFT6jWhtzlDFh443y85rMSMca1CulA2CbQibODEFHkw/640?wx_fmt=png\") center center / 100% 100% no-repeat;\"></span> <span style=\"box-sizing: border-box;\"><strong style=\"box-sizing: border-box;\">4. 构建部分原生，部分基于 Web 的应用</strong></span></section><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">很多新手开发者想要将自己的网站移植为移动应用，但在发现自己现有网站的部分功能过于复杂，无法面向每种移动平台快速重写时，往往会感到沮丧或受挫。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">例如你可能有一个非常复杂的 Web 页面无法快速转换为移动应用，但网站的其他内容可以很容易地转换。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">面对这种情况，如果通过某种方法将应用的大部分内容以原生方式构建，对于特别复杂的页面直接将其以 HTML 的形式无缝集成到应用中，是不是很棒啊。</p><section class=\"h2\" style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;line-height: 1.1;color: rgb(63, 63, 63);font-size: 20px;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box;height: 65px;line-height: 95px;color: rgb(60, 112, 198);border-bottom: 2px solid rgb(27, 95, 160);background: url(\"https://mmbiz.qpic.cn/mmbiz_jpg/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbz2PLh5DL8iauUibbmxbH5DHibsicYBM2PqvaLmN5ZtmwHbJ0hejxclSHHw/640?wx_fmt=jpeg\") 50% 50% / 92px no-repeat;margin-top: 38px;margin-bottom: 10px;padding-bottom: 7px;display: inline-block;\">这是如何实现的？</span></section><section class=\"h4\" style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;line-height: 1.1;color: rgb(60, 112, 198);margin-top: 30px;margin-left: 8px;font-size: 16px;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box;display: inline-block;width: 15px;height: 15px;margin-right: 10px;background: url(\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbI9OSD9K2SGscgFT6jWhtzlDFh443y85rMSMca1CulA2CbQibODEFHkw/640?wx_fmt=png\") center center / 100% 100% no-repeat;\"></span> <span style=\"box-sizing: border-box;\">A. Jasonette</span></section><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">Jasonette 是一种基于标记语言，构建跨平台原生应用的开源方法。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">该技术看似 Web 浏览器，但并不会将 HTML 标记语言解释为 Web 页面，而是会将 JSON 标记解释为 iOS 和 Android 上的原生应用。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">正如所有 Web 浏览器都有完全相同的代码，但只要按需解释不同类型的 HTML 标记，即可为用户提供所有不同类型的 Web 应用，所有 Jasonette 应用也有着完全相同的库，可按需解释不同类型的 JSON 标记并创建出你的应用。开发者完全无需触及代码本身，只需要编写标记，将代码实时“翻译”为原生应用，即可开发出自己的应用来。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">虽然 Jasonette 的核心作用在于构建原生应用，但本文的重点在于介绍如何将 HTML 集成到核心原生引擎中，接下来就一起了解一下吧。</p><section class=\"h4\" style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;line-height: 1.1;color: rgb(60, 112, 198);margin-top: 30px;margin-left: 8px;font-size: 16px;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box;display: inline-block;width: 15px;height: 15px;margin-right: 10px;background: url(\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbI9OSD9K2SGscgFT6jWhtzlDFh443y85rMSMca1CulA2CbQibODEFHkw/640?wx_fmt=png\") center center / 100% 100% no-repeat;\"></span> <span style=\"box-sizing: border-box;\">B. Jasonette Web 容器</span></section><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">原生应用很棒，但有时候我们依然需要使用 Web 功能。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">但 Web 视图与原生应用的集成是个麻烦的过程。无缝的集成要求：</p><ol style=\"\" class=\" list-paddingleft-2\"><li><p style=\"box-sizing: border-box;font-size: 16px;text-align: justify;white-space: pre-line;color: rgb(74, 74, 74);line-height: 1.75em;\"><strong style=\"box-sizing: border-box;text-align: left;\">Web 视图应作为原生布局的一部分进行集成</strong>：Web 视图应作为原生布局的一部分纳入应用中，并且操作方式应与其他任何原生 UI 组件保持一致。否则会让用户感觉很笨拙，并且感觉上就像自己实际上是在访问网站那样。</p></li><li><p style=\"box-sizing: border-box;font-size: 16px;text-align: justify;white-space: pre-line;color: rgb(74, 74, 74);line-height: 1.75em;\"><strong style=\"box-sizing: border-box;text-align: left;\">父应用可以控制子 Web 容器</strong>：父应用应能随意控制子 Web 视图。</p></li><li><p style=\"box-sizing: border-box;font-size: 16px;text-align: justify;white-space: pre-line;color: rgb(74, 74, 74);line-height: 1.75em;\"><strong style=\"box-sizing: border-box;text-align: left;\">子 Web 容器可触发父应用的原生事件</strong>：子应用应该能触发父应用的事件以运行原生 API。</p></li></ol><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">这是一个非常繁重的工作，因此先从第一个环节着手介绍：<strong style=\"box-sizing: border-box;text-align: left;\">直接将 Web 容器嵌入原生布局</strong> —并将其作为第 1 版发布：</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">JSON Web 容器，JSON 中的 HTML 将变为原生应用组件。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">仅这一点就已经很实用了，但由于无法交互，依然存在一定的局限。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">父应用无法控制子 Web 容器，子容器无法向父应用发送任何事件通知，这 <strong style=\"box-sizing: border-box;text-align: left;\">导致 Web 容器与外界完全隔离</strong>。</p><section class=\"h4\" style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;line-height: 1.1;color: rgb(60, 112, 198);margin-top: 30px;margin-left: 8px;font-size: 16px;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box;display: inline-block;width: 15px;height: 15px;margin-right: 10px;background: url(\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbI9OSD9K2SGscgFT6jWhtzlDFh443y85rMSMca1CulA2CbQibODEFHkw/640?wx_fmt=png\") center center / 100% 100% no-repeat;\"></span> <span style=\"box-sizing: border-box;\">C. Jasonette Web 容器 2.0：使其可交互</span></section><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">发布第 1 版之后，我们开始处理第二个问题：<strong style=\"box-sizing: border-box;text-align: left;\">为 Web 容器添加交互能力</strong>。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">下文将介绍如何为之前创建的静态 Web 容器添加交互能力，让它变得更强大。</p><section class=\"h2\" style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;line-height: 1.1;color: rgb(63, 63, 63);font-size: 20px;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box;height: 65px;line-height: 95px;color: rgb(60, 112, 198);border-bottom: 2px solid rgb(27, 95, 160);background: url(\"https://mmbiz.qpic.cn/mmbiz_jpg/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbz2PLh5DL8iauUibbmxbH5DHibsicYBM2PqvaLmN5ZtmwHbJ0hejxclSHHw/640?wx_fmt=jpeg\") 50% 50% / 92px no-repeat;margin-top: 38px;margin-bottom: 10px;padding-bottom: 7px;display: inline-block;\">实现：交互式 Web 容器</span></section><section class=\"h3\" style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;line-height: 1.1;color: rgb(63, 63, 63);font-size: 16px;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box;display: inline-block;height: 38px;line-height: 42px;color: rgb(60, 112, 198);background: url(\"https://mmbiz.qpic.cn/mmbiz_jpg/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbz2PLh5DL8iauUibbmxbH5DHibsicYBM2PqvaLmN5ZtmwHbJ0hejxclSHHw/640?wx_fmt=jpeg\") left center / 63px no-repeat;padding-left: 35px;margin-top: 38px;margin-bottom: 10px;\">1. 通过 URL 加载</span></section><section class=\"h4\" style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;line-height: 1.1;color: rgb(60, 112, 198);margin-top: 30px;margin-left: 8px;font-size: 16px;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box;display: inline-block;width: 15px;height: 15px;margin-right: 10px;background: url(\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbI9OSD9K2SGscgFT6jWhtzlDFh443y85rMSMca1CulA2CbQibODEFHkw/640?wx_fmt=png\") center center / 100% 100% no-repeat;\"></span> <span style=\"box-sizing: border-box;\">问题</span></section><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: left;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">之前在第 1 版中，为了使用 Web 容器作为后台视图组件，我们首先需要将<code style=\"box-sizing: border-box;\">$jason.body.background.type</code>设置为<code style=\"box-sizing: border-box;\">\"html\"</code>，随后在<code style=\"box-sizing: border-box;\">$jason.body.background.text</code>属性下添加硬编码的 HTML 文本，例如这样：</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: left;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><img class=\"\" data-ratio=\"0.46996699669966996\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbUE8tAjN8S9zSL2lqbticB5HcCNqPxMkoSKHnpJhZUdQw4V7KFiadDOuQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"1515\" style=\"box-sizing: border-box;border-width: 0px;border-style: initial;border-color: initial;vertical-align: middle;width: 717px;\" src=\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbUE8tAjN8S9zSL2lqbticB5HcCNqPxMkoSKHnpJhZUdQw4V7KFiadDOuQ/640?wx_fmt=png\"></p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">一般来说，人们往往更希望直接使用 Web URL 对容器进行实例化，而不希望将整个 HTML 代码以硬编码的方式作为一行代码加入。</p><section class=\"h4\" style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;line-height: 1.1;color: rgb(60, 112, 198);margin-top: 30px;margin-left: 8px;font-size: 16px;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box;display: inline-block;width: 15px;height: 15px;margin-right: 10px;background: url(\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbI9OSD9K2SGscgFT6jWhtzlDFh443y85rMSMca1CulA2CbQibODEFHkw/640?wx_fmt=png\") center center / 100% 100% no-repeat;\"></span> <span style=\"box-sizing: border-box;\">解决方案</span></section><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">Web 容器 2.0 增加了<code style=\"box-sizing: border-box;\">url</code>属性，我们可以嵌入<code style=\"box-sizing: border-box;\">file://</code>形式的本地 HTML，例如这样（可以从伴随应用发布的本地 HTML 文件加载）：</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><img class=\"\" data-ratio=\"0.4713249835201055\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbMwibh1j5SjNCxEcXhbVpf2y6YrmKAIgyha4z0YEohufbo1LIUNJDsfg/640?wx_fmt=png\" data-type=\"png\" data-w=\"1517\" style=\"box-sizing: border-box;border-width: 0px;border-style: initial;border-color: initial;vertical-align: middle;width: 717px;\" src=\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbMwibh1j5SjNCxEcXhbVpf2y6YrmKAIgyha4z0YEohufbo1LIUNJDsfg/640?wx_fmt=png\"></p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">或者也可以嵌入远程的<code style=\"box-sizing: border-box;\">http[s]://</code> URL，例如这样（可以从远程 HTML 加载）：</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><img class=\"\" data-ratio=\"0.47465437788018433\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbia4G0peiabtpCriarACHXRC7bl4Am8dlHSU6wmNmsLf5k681OicjlwrtGQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"1519\" style=\"box-sizing: border-box;border-width: 0px;border-style: initial;border-color: initial;vertical-align: middle;width: 717px;\" src=\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbia4G0peiabtpCriarACHXRC7bl4Am8dlHSU6wmNmsLf5k681OicjlwrtGQ/640?wx_fmt=png\"></p><section class=\"h3\" style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;line-height: 1.1;color: rgb(63, 63, 63);font-size: 16px;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box;display: inline-block;height: 38px;line-height: 42px;color: rgb(60, 112, 198);background: url(\"https://mmbiz.qpic.cn/mmbiz_jpg/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbz2PLh5DL8iauUibbmxbH5DHibsicYBM2PqvaLmN5ZtmwHbJ0hejxclSHHw/640?wx_fmt=jpeg\") left center / 63px no-repeat;padding-left: 35px;margin-top: 38px;margin-bottom: 10px;\">2. 父应用与 Web 容器的双向通信</span></section><section class=\"h4\" style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;line-height: 1.1;color: rgb(60, 112, 198);margin-top: 30px;margin-left: 8px;font-size: 16px;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box;display: inline-block;width: 15px;height: 15px;margin-right: 10px;background: url(\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbI9OSD9K2SGscgFT6jWhtzlDFh443y85rMSMca1CulA2CbQibODEFHkw/640?wx_fmt=png\") center center / 100% 100% no-repeat;\"></span> <span style=\"box-sizing: border-box;\">问题</span></section><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">之前，Web 容器只能用于展示内容，无法交互。这意味着 <strong style=\"box-sizing: border-box;text-align: left;\">下列做法全部无法实现</strong>：</p><ol style=\"\" class=\" list-paddingleft-2\"><li><p style=\"box-sizing: border-box;font-size: 16px;text-align: justify;white-space: pre-line;color: rgb(74, 74, 74);line-height: 1.75em;\"><strong style=\"box-sizing: border-box;text-align: left;\">Jasonette 到 Web 容器的通信</strong>：从 Jasonette 中调用 Web 容器内部的 JavaScript 函数。</p></li><li><p style=\"box-sizing: border-box;font-size: 16px;text-align: justify;white-space: pre-line;color: rgb(74, 74, 74);line-height: 1.75em;\"><strong style=\"box-sizing: border-box;text-align: left;\">Web 容器到 Jasonette 的通信</strong>：从 Web 容器代码中调用原生 API。</p></li></ol><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">此时我们只能展示 Web 容器的内容。这就像网页中嵌入的 iframe 框架，主页面完全无法访问 iframe 框架中的内容。</p><section class=\"h4\" style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;line-height: 1.1;color: rgb(60, 112, 198);margin-top: 30px;margin-left: 8px;font-size: 16px;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box;display: inline-block;width: 15px;height: 15px;margin-right: 10px;background: url(\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbI9OSD9K2SGscgFT6jWhtzlDFh443y85rMSMca1CulA2CbQibODEFHkw/640?wx_fmt=png\") center center / 100% 100% no-repeat;\"></span> <span style=\"box-sizing: border-box;\">解决方案</span></section><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">Jasonette 最大的目标在于设计一种可以描述跨平台移动应用的标准化标记语言。因此我们需要这个标记语言能够全面地描述父应用和子 Web 容器之间的双向通信。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">为此我在父应用和子 Web 容器之间使用了一种基于 JSON-RPC 的通信管道。由于 Jasonette 中的一切都是通过 JSON 对象表达的，因此使用 JSON-RPC 标准格式作为通信协议就成了一种非常自然合理的方式。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><img class=\"\" data-ratio=\"0.767\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbcTgOEldKK8OjuYvAWVeiaA3UhialaVBeln601HrG1mRwBV2xAvQOzL9Q/640?wx_fmt=png\" data-type=\"png\" data-w=\"2000\" style=\"box-sizing: border-box;border-width: 0px;border-style: initial;border-color: initial;vertical-align: middle;width: 717px;\" src=\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbcTgOEldKK8OjuYvAWVeiaA3UhialaVBeln601HrG1mRwBV2xAvQOzL9Q/640?wx_fmt=png\"></p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">为了让 JavaScript 函数能够调用 Web 容器，需要声明一个名为<code style=\"box-sizing: border-box;\">$agent.request</code>的操作：</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><img class=\"\" data-ratio=\"0.31097961867192636\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVba46hJjkG3WXic84NHTiaTULfV2CqsoH9MFXor7OCicTaqqx2pQ2EXlibVA/640?wx_fmt=png\" data-type=\"png\" data-w=\"1521\" style=\"box-sizing: border-box;border-width: 0px;border-style: initial;border-color: initial;vertical-align: middle;width: 717px;\" src=\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVba46hJjkG3WXic84NHTiaTULfV2CqsoH9MFXor7OCicTaqqx2pQ2EXlibVA/640?wx_fmt=png\"></p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">$agent.request 是一种原生 API，可触发 JSON-RPC 请求并发送给 Web 容器。为了使用该 API，必须将<code style=\"box-sizing: border-box;\">options</code>对象作为参数传递。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><code style=\"box-sizing: border-box;\">options</code>对象实际上是发送给 Web 容器的 JSON-RPC 请求。每个属性的含义如下：</p><ul style=\"\" class=\" list-paddingleft-2\"><li><p style=\"box-sizing: border-box;font-size: 16px;text-align: justify;white-space: pre-line;color: rgb(74, 74, 74);line-height: 1.75em;\"><code style=\"box-sizing: border-box;\">id</code>：Web 容器构建在一种名为 Agent 的底层架构基础上，通常来说，我们可以为一个视图使用多个 Agent，每个 Agent 可以有自己的唯一 ID。但 Web 容器是一种特殊类型的 Agent，只能使用 $webcontainer 作为 ID，因此这里需要使用 ID。</p></li><li><p style=\"box-sizing: border-box;font-size: 16px;text-align: justify;white-space: pre-line;color: rgb(74, 74, 74);line-height: 1.75em;\"><code style=\"box-sizing: border-box;\">method</code>：要调用的 JavaScript 函数名称。</p></li><li><p style=\"box-sizing: border-box;font-size: 16px;text-align: justify;white-space: pre-line;color: rgb(74, 74, 74);line-height: 1.75em;\"><code style=\"box-sizing: border-box;\">params</code>：传递给 JavaScript 函数的参数数组。</p></li></ul><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">因此完整来看，所用的标记应该是类似这样的：</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><img class=\"\" data-ratio=\"0.8562953197099539\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbPIwstlQODr6IaECLMn6SuyJPv7yUH4n1YeR3Y9Aa4QibERDlR2TrYvQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"1517\" style=\"box-sizing: border-box;border-width: 0px;border-style: initial;border-color: initial;vertical-align: middle;width: 717px;\" src=\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbPIwstlQODr6IaECLMn6SuyJPv7yUH4n1YeR3Y9Aa4QibERDlR2TrYvQ/640?wx_fmt=png\"></p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">这串标记实际上是在说：</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: left;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">当视图加载（$jason.head.actions.$load）时，向 Web 容器 Agent 发送一个 JSON-RPC 请求（$agent.request），而具体的请求是通过<code style=\"box-sizing: border-box;\">options</code>指定的。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: left;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">Web 容器在 $jason.body.background 下定义，本例中将会加载一个名为<code style=\"box-sizing: border-box;\">file://index.html</code>的本地文件。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: left;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">随后会查找一个名为 login 的 JavaScript 函数并传递<code style=\"box-sizing: border-box;\">params</code>下的两个参数（<code style=\"box-sizing: border-box;\">\"alice\"</code>和<code style=\"box-sizing: border-box;\">\"1234\"</code>）。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><img class=\"\" data-ratio=\"0.08273145108338804\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbQtBe8wG1bqvtwCztibBsybagUIiapqXGibZLhxFsIlNnJ4ianROqJqyw6A/640?wx_fmt=png\" data-type=\"png\" data-w=\"1523\" style=\"box-sizing: border-box;border-width: 0px;border-style: initial;border-color: initial;vertical-align: middle;width: 717px;\" src=\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbQtBe8wG1bqvtwCztibBsybagUIiapqXGibZLhxFsIlNnJ4ianROqJqyw6A/640?wx_fmt=png\"></p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">上文介绍了父应用如何触发子 Web 容器的 JavaScript 函数调用，我们还可以反着来，让 Web 容器触发父应用的原生 API。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">详情请参阅 Agent 文档。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: left;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">Agent 文档: <span style=\"color: rgb(120, 172, 254);\">https://docs.jasonette.com/agents/</span></p><section class=\"h2\" style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;line-height: 1.1;color: rgb(63, 63, 63);font-size: 20px;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box;height: 65px;line-height: 95px;color: rgb(60, 112, 198);border-bottom: 2px solid rgb(27, 95, 160);background: url(\"https://mmbiz.qpic.cn/mmbiz_jpg/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbz2PLh5DL8iauUibbmxbH5DHibsicYBM2PqvaLmN5ZtmwHbJ0hejxclSHHw/640?wx_fmt=jpeg\") 50% 50% / 92px no-repeat;margin-top: 38px;margin-bottom: 10px;padding-bottom: 7px;display: inline-block;\">  范 例   </span></section><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">继续回到上文介绍的二维码生成器范例：</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: center;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><img class=\"\" data-ratio=\"1.780373831775701\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVb3aKGQ72nibV6dviaW27cWg9lyLXLaIOqYBDgMSeuNicnckPUOibfepWaXQ/640?wx_fmt=gif\" data-type=\"gif\" data-w=\"428\" style=\"box-sizing: border-box;border-width: 0px;border-style: initial;border-color: initial;vertical-align: middle;width: 347px;height: 618px;\" src=\"https://mmbiz.qpic.cn/mmbiz_gif/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVb3aKGQ72nibV6dviaW27cWg9lyLXLaIOqYBDgMSeuNicnckPUOibfepWaXQ/640?wx_fmt=gif\"></p><p><br></p><ol style=\"\" class=\" list-paddingleft-2\"><li><p style=\"box-sizing: border-box;font-size: 16px;text-align: justify;white-space: pre-line;color: rgb(74, 74, 74);line-height: 1.75em;\">其中 底部的文字输入组件是 100% 原生的。</p></li><li><p style=\"box-sizing: border-box;font-size: 16px;text-align: justify;white-space: pre-line;color: rgb(74, 74, 74);line-height: 1.75em;\">二维码由 作为 Web 应用运行 的 Web 容器生成。</p></li><li><p style=\"box-sizing: border-box;font-size: 16px;text-align: justify;white-space: pre-line;color: rgb(74, 74, 74);line-height: 1.75em;\">当用户输入内容并按下“生成”，将调用 Web 容器 Agent 中的<code style=\"box-sizing: border-box;\">$agent.request</code>操作，进而调用 JavaScript 函数“qr”。</p></li></ol><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">具体示例可以参阅:</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><span style=\"color: rgb(120, 172, 254);\">https://github.com/Jasonette/Jasonpedia/blob/gh-pages/webcontainer/agent/fn/index.json</span></p><section class=\"h3\" style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;line-height: 1.1;color: rgb(63, 63, 63);font-size: 16px;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box;display: inline-block;height: 38px;line-height: 42px;color: rgb(60, 112, 198);background: url(\"https://mmbiz.qpic.cn/mmbiz_jpg/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbz2PLh5DL8iauUibbmxbH5DHibsicYBM2PqvaLmN5ZtmwHbJ0hejxclSHHw/640?wx_fmt=jpeg\") left center / 63px no-repeat;padding-left: 35px;margin-top: 38px;margin-bottom: 10px;\">3. 脚本注入</span></section><section class=\"h4\" style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;line-height: 1.1;color: rgb(60, 112, 198);margin-top: 30px;margin-left: 8px;font-size: 16px;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box;display: inline-block;width: 15px;height: 15px;margin-right: 10px;background: url(\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbI9OSD9K2SGscgFT6jWhtzlDFh443y85rMSMca1CulA2CbQibODEFHkw/640?wx_fmt=png\") center center / 100% 100% no-repeat;\"></span> <span style=\"box-sizing: border-box;\">问题</span></section><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">有时候我们可能需要在 Web 容器完成初始 HTML 加载后，动态地将 JavaScript 代码注入 Web 容器。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">假设要构建一个自定义的 Web 浏览器应用，我们可能希望将自己的自定义 JavaScript 注入到每个 Web 视图，借此定制 Web 视图的行为，这有点类似于 Web 浏览器的扩展。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">就算不需要构建 Web 浏览器，当希望为所包含的内容不由我们控制的 URL 实现自定义行为时，同样需要使用脚本注入的方法。原生应用和 Web 容器只能通过<code style=\"box-sizing: border-box;\">$agent</code> API 通信，但如果无法更改 HTML 内容，只能通过动态注入的方式将<code style=\"box-sizing: border-box;\">$agent</code>接口加入 Web 容器。</p><section class=\"h4\" style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;line-height: 1.1;color: rgb(60, 112, 198);margin-top: 30px;margin-left: 8px;font-size: 16px;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box;display: inline-block;width: 15px;height: 15px;margin-right: 10px;background: url(\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbI9OSD9K2SGscgFT6jWhtzlDFh443y85rMSMca1CulA2CbQibODEFHkw/640?wx_fmt=png\") center center / 100% 100% no-repeat;\"></span> <span style=\"box-sizing: border-box;\">解决方案</span></section><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">正如上文所述，<code style=\"box-sizing: border-box;\">$jason.body.background</code>这个 Web 容器也是一个<code style=\"box-sizing: border-box;\">agent</code>，这意味着我们可以使用与普通 Agent 完全相同的 $agent.inject 方法。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><img class=\"\" data-ratio=\"0.845\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbNuLeSKicEVChujXicfK9b14UEvVwBicNUZl5G5TKd4g3bFRh6FhCl6bRQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"2000\" style=\"box-sizing: border-box;border-width: 0px;border-style: initial;border-color: initial;vertical-align: middle;width: 717px;\" src=\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbNuLeSKicEVChujXicfK9b14UEvVwBicNUZl5G5TKd4g3bFRh6FhCl6bRQ/640?wx_fmt=png\"></p><section class=\"h3\" style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;line-height: 1.1;color: rgb(63, 63, 63);font-size: 16px;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box;display: inline-block;height: 38px;line-height: 42px;color: rgb(60, 112, 198);background: url(\"https://mmbiz.qpic.cn/mmbiz_jpg/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbz2PLh5DL8iauUibbmxbH5DHibsicYBM2PqvaLmN5ZtmwHbJ0hejxclSHHw/640?wx_fmt=jpeg\") left center / 63px no-repeat;padding-left: 35px;margin-top: 38px;margin-bottom: 10px;\">4. 对 URL 点击的处理</span></section><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">以往，Web 容器只能通过两种方式处理链接点击操作：</p><ol style=\"\" class=\" list-paddingleft-2\"><li><p style=\"box-sizing: border-box;font-size: 16px;text-align: justify;white-space: pre-line;color: rgb(74, 74, 74);line-height: 1.75em;\"><strong style=\"box-sizing: border-box;text-align: left;\">只读</strong>：将 Web 容器视作只读的，忽略所有诸如触控或滚动等事件。此时所有 Web 容器都是只读的，除非明确令其表现得像是普通浏览器，具体做法见下文。</p></li><li><p style=\"box-sizing: border-box;font-size: 16px;text-align: left;white-space: pre-line;color: rgb(74, 74, 74);line-height: 1.75em;\"><strong style=\"box-sizing: border-box;text-align: left;\">普通浏览器行为</strong>：像是普通浏览器那样，允许用户与页面交互。为此需要进行声明，将<code style=\"box-sizing: border-box;\">\"type\": \"$default\"</code>设置为<code style=\"box-sizing: border-box;\">action</code>属性。</p></li></ol><section class=\"h4\" style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;line-height: 1.1;color: rgb(60, 112, 198);margin-top: 30px;margin-left: 8px;font-size: 16px;white-space: normal;background-color: rgb(255, 255, 255);text-align: left;\"><span style=\"box-sizing: border-box;display: inline-block;width: 15px;height: 15px;margin-right: 10px;background: url(\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbI9OSD9K2SGscgFT6jWhtzlDFh443y85rMSMca1CulA2CbQibODEFHkw/640?wx_fmt=png\") center center / 100% 100% no-repeat;\"></span> <span style=\"box-sizing: border-box;\">问题</span></section><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">两者均为 <strong style=\"box-sizing: border-box;text-align: left;\">“全无或全有（All or nothing）”解决方案</strong>。</p><ul style=\"\" class=\" list-paddingleft-2\"><li><p style=\"box-sizing: border-box;font-size: 16px;text-align: justify;white-space: pre-line;color: rgb(74, 74, 74);line-height: 1.75em;\">对于“只读”，Web 容器会忽略用户的所有交互操作。</p></li><li><p style=\"box-sizing: border-box;font-size: 16px;text-align: justify;white-space: pre-line;color: rgb(74, 74, 74);line-height: 1.75em;\">对于“普通浏览器行为”，Web 容器的表现将与浏览器一致。点击链接后，将像普通网页那样刷新页面展示链接内容，但无法劫持该点击并调用其他原生 API。</p></li></ul><section class=\"h4\" style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;line-height: 1.1;color: rgb(60, 112, 198);margin-top: 30px;margin-left: 8px;font-size: 16px;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box;display: inline-block;width: 15px;height: 15px;margin-right: 10px;background: url(\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbI9OSD9K2SGscgFT6jWhtzlDFh443y85rMSMca1CulA2CbQibODEFHkw/640?wx_fmt=png\") center center / 100% 100% no-repeat;\"></span> <span style=\"box-sizing: border-box;\">解决方案</span></section><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: left;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">通过使用新的 Web 容器，可以将任何<code style=\"box-sizing: border-box;\">action</code>附加到<code style=\"box-sizing: border-box;\">$jason.body.background</code>这个 Web 容器，进而处理链接点击之类的事件。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><img class=\"\" data-ratio=\"0.7965\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbOibKqmIu3MXLs0HnDb37icianqNP09csHVQ657LKYvGeyHTNpMiaoYD7GA/640?wx_fmt=png\" data-type=\"png\" data-w=\"2000\" style=\"box-sizing: border-box;border-width: 0px;border-style: initial;border-color: initial;vertical-align: middle;width: 717px;\" src=\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbOibKqmIu3MXLs0HnDb37icianqNP09csHVQ657LKYvGeyHTNpMiaoYD7GA/640?wx_fmt=png\"></p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">一起看一个例子：</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><img class=\"\" data-ratio=\"0.8264299802761341\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVblO8xiaD31O03MYS7pfqQMgtDUWt04EYjM0Cr61w0ibZWxuA5dN99IvSA/640?wx_fmt=png\" data-type=\"png\" data-w=\"1521\" style=\"box-sizing: border-box;border-width: 0px;border-style: initial;border-color: initial;vertical-align: middle;width: 717px;\" src=\"https://mmbiz.', '![](https://mmbiz.qpic.cn/mmbiz_jpg/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbNGQJhAg8FP4rMYBVpSUKcr3EXW1ZV50A1TPmCibNKqXwXxibrK0AXtXw/640?wx_fmt=jpeg)\n\n作者｜Ethan\n\n译者｜大愚若智\n\n编辑｜覃云\n\n本文介绍了借助 Jasonette 将 Web 视图和原生组件融合构建真正“混合”应用的做法。\n\n![](https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbiaG6r89V1lSXBUQe7B0mia6iaOo1owRZvMXqXviclnSr4LU32qHBe6SDIQ/640?wx_fmt=png)\n\n如果我告诉你，只需要 **上述 7 行橙色的 JSON 代码** 就可以将一个网站变成移动应用，你相信吗？完全不需要使用某种框架 API 重写网站，就可以获得与移动应用相同的行为。如果你已经有一个现成的网站，只需要简单地引用 URL 就可以将其“打包”为原生应用。\n\n而如果在此基础上，只需要略微调整 JSON 代码内容，就可以直接访问所有原生 API、原生 UI 组件以及原生视图切换（View Transition）。\n\n最简化的范例效果如下图所示：\n\n  \n\n![](https://mmbiz.qpic.cn/mmbiz_gif/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbneAETeJ2J9gB0P7B4a4QBGkUXBqzicz55tFEVDq6k3tKa9ibd3a1lltg/640?wx_fmt=gif)\n\n从中可以看出，我嵌入了一个 GitHub.com 的 Web 页面，但界面上其余布局均为原生 UI 组件，例如 导航条 以及 底部的标签栏。而我们并不需要使用任何 API 重写网站，就可以自动获得原生的切换效果。\n\n在介绍具体做法前你可能会问：“看着挺酷，但除了在原生应用框架内展示 Web 页面之外，这种技术还有什么意义？”\n\n问得好！这也是本文要讲的重点。我们只需要创建一个无缝的 **Web 视图与应用间双向通信**，借此，父应用就可以触发 Web 视图内的任何 JavaScript 函数，随后 Web 视图即可从外部调用原生 API。\n\n例如：\n\n![](https://mmbiz.qpic.cn/mmbiz_gif/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVb3aKGQ72nibV6dviaW27cWg9lyLXLaIOqYBDgMSeuNicnckPUOibfepWaXQ/640?wx_fmt=gif)\n\n请注意，这个视图包含：\n\n1.  原生导航条，以及内置的切换功能\n    \n2.  一个 Web 视图，其中嵌入了一个可以生成二维码的 Web 应用\n    \n3.  在底部包含一个原生的文字输入组件\n    \n\n上述所有这一切只需要略微调整 JSON 代码的属性即可实现。\n\n最后请注意，随着在文字输入区输入不同内容，二维码也会产生相应变化。输入的文字可触发二维码生成器 Web 应用内部的 JavaScript 函数重新生成二维码图像。\n\n目前还没有任何一个开发框架曾试图从根本上解决“**Web 视图与原生应用无缝集成**”的问题，因为这些框架都专注于完全原生，或完全 HTML5 的做法。\n\n无论什么时候当我们听到有人讨论移动应用的未来时，很可能会听到类似“**到底是 HTML5 还是原生方法会最终胜出呢？**”这样的说法。\n\n似乎没人觉得`native`和`html`可以共存，而且二者的协同和最终实现似乎也并不容易。\n\n本文我将要介绍：\n\n*   为何 Web 引擎与原生组件的融合通常是一种更好的做法。\n    \n*   为何 HTML 与原生的无缝集成那么难，具体又该如何实现。\n    \n*   更重要的是，该如何使用这样的技术快速构建自己的应用。\n    \n\n为何要在原生应用中使用 HTML？\n\n在进一步介绍前，首先一起看看这样做是好是坏，以及什么时候适合使用这种方法。这种做法的一些潜在用例如下：\n\n **1\\. 使用 Web 原生功能**\n\n应用中的部分内容使用 Web 引擎来实现也许是一种更适合的做法。例如 WebSocket 是一种原生的 Web 功能，主要面向 Web 环境而设计。这种情况下就更适合使用内建的 Web 引擎（**iOS 的 WKWebView** 以及 **Android 的 WebView**），而非安装某些只能“**模拟**”WebSocket 的第三方库。\n\n无需额外安装任何代码，使用免费工具即可实现目标，这样岂不是更好。同时这也催生了下一个原因。\n\n **2\\. 避免二进制文件体积过大**\n\n有些功能也许需要借助庞大的第三方库，而你可能希望能快速用上这样的功能。\n\n例如，为了以原生方式包含二维码图像生成器，可能需要安装某些第三方库，这会导致二进制文件体积增大。但如果使用 Web 视图引擎并通过一个简单的`</code>调用 JavaScript 库，就可以免费实现这一切，并且避免了使用第三方原生库。</p><section class=\"h4\" style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;line-height: 1.1;color: rgb(60, 112, 198);margin-top: 30px;margin-left: 8px;font-size: 16px;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box;display: inline-block;width: 15px;height: 15px;margin-right: 10px;background: url(\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbI9OSD9K2SGscgFT6jWhtzlDFh443y85rMSMca1CulA2CbQibODEFHkw/640?wx_fmt=png\") center center / 100% 100% no-repeat;\"></span> <span style=\"box-sizing: border-box;\"><strong style=\"box-sizing: border-box;\">3. 缺乏可靠的移动库</strong></span></section><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">对于一些前沿技术，可能暂时并不具备稳定可靠的移动端实现。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">好在大部分此类技术都具备 Web 实现，因此最高效的集成方法就是使用 JavaScript 库。</p><section class=\"h4\" style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;line-height: 1.1;color: rgb(60, 112, 198);margin-top: 30px;margin-left: 8px;font-size: 16px;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box;display: inline-block;width: 15px;height: 15px;margin-right: 10px;background: url(\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbI9OSD9K2SGscgFT6jWhtzlDFh443y85rMSMca1CulA2CbQibODEFHkw/640?wx_fmt=png\") center center / 100% 100% no-repeat;\"></span> <span style=\"box-sizing: border-box;\"><strong style=\"box-sizing: border-box;\">4. 构建部分原生，部分基于 Web 的应用</strong></span></section><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">很多新手开发者想要将自己的网站移植为移动应用，但在发现自己现有网站的部分功能过于复杂，无法面向每种移动平台快速重写时，往往会感到沮丧或受挫。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">例如你可能有一个非常复杂的 Web 页面无法快速转换为移动应用，但网站的其他内容可以很容易地转换。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">面对这种情况，如果通过某种方法将应用的大部分内容以原生方式构建，对于特别复杂的页面直接将其以 HTML 的形式无缝集成到应用中，是不是很棒啊。</p><section class=\"h2\" style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;line-height: 1.1;color: rgb(63, 63, 63);font-size: 20px;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box;height: 65px;line-height: 95px;color: rgb(60, 112, 198);border-bottom: 2px solid rgb(27, 95, 160);background: url(\"https://mmbiz.qpic.cn/mmbiz_jpg/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbz2PLh5DL8iauUibbmxbH5DHibsicYBM2PqvaLmN5ZtmwHbJ0hejxclSHHw/640?wx_fmt=jpeg\") 50% 50% / 92px no-repeat;margin-top: 38px;margin-bottom: 10px;padding-bottom: 7px;display: inline-block;\">这是如何实现的？</span></section><section class=\"h4\" style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;line-height: 1.1;color: rgb(60, 112, 198);margin-top: 30px;margin-left: 8px;font-size: 16px;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box;display: inline-block;width: 15px;height: 15px;margin-right: 10px;background: url(\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbI9OSD9K2SGscgFT6jWhtzlDFh443y85rMSMca1CulA2CbQibODEFHkw/640?wx_fmt=png\") center center / 100% 100% no-repeat;\"></span> <span style=\"box-sizing: border-box;\">A. Jasonette</span></section><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">Jasonette 是一种基于标记语言，构建跨平台原生应用的开源方法。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">该技术看似 Web 浏览器，但并不会将 HTML 标记语言解释为 Web 页面，而是会将 JSON 标记解释为 iOS 和 Android 上的原生应用。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">正如所有 Web 浏览器都有完全相同的代码，但只要按需解释不同类型的 HTML 标记，即可为用户提供所有不同类型的 Web 应用，所有 Jasonette 应用也有着完全相同的库，可按需解释不同类型的 JSON 标记并创建出你的应用。开发者完全无需触及代码本身，只需要编写标记，将代码实时“翻译”为原生应用，即可开发出自己的应用来。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">虽然 Jasonette 的核心作用在于构建原生应用，但本文的重点在于介绍如何将 HTML 集成到核心原生引擎中，接下来就一起了解一下吧。</p><section class=\"h4\" style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;line-height: 1.1;color: rgb(60, 112, 198);margin-top: 30px;margin-left: 8px;font-size: 16px;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box;display: inline-block;width: 15px;height: 15px;margin-right: 10px;background: url(\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbI9OSD9K2SGscgFT6jWhtzlDFh443y85rMSMca1CulA2CbQibODEFHkw/640?wx_fmt=png\") center center / 100% 100% no-repeat;\"></span> <span style=\"box-sizing: border-box;\">B. Jasonette Web 容器</span></section><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">原生应用很棒，但有时候我们依然需要使用 Web 功能。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">但 Web 视图与原生应用的集成是个麻烦的过程。无缝的集成要求：</p><ol style=\"\" class=\" list-paddingleft-2\"><li><p style=\"box-sizing: border-box;font-size: 16px;text-align: justify;white-space: pre-line;color: rgb(74, 74, 74);line-height: 1.75em;\"><strong style=\"box-sizing: border-box;text-align: left;\">Web 视图应作为原生布局的一部分进行集成</strong>：Web 视图应作为原生布局的一部分纳入应用中，并且操作方式应与其他任何原生 UI 组件保持一致。否则会让用户感觉很笨拙，并且感觉上就像自己实际上是在访问网站那样。</p></li><li><p style=\"box-sizing: border-box;font-size: 16px;text-align: justify;white-space: pre-line;color: rgb(74, 74, 74);line-height: 1.75em;\"><strong style=\"box-sizing: border-box;text-align: left;\">父应用可以控制子 Web 容器</strong>：父应用应能随意控制子 Web 视图。</p></li><li><p style=\"box-sizing: border-box;font-size: 16px;text-align: justify;white-space: pre-line;color: rgb(74, 74, 74);line-height: 1.75em;\"><strong style=\"box-sizing: border-box;text-align: left;\">子 Web 容器可触发父应用的原生事件</strong>：子应用应该能触发父应用的事件以运行原生 API。</p></li></ol><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">这是一个非常繁重的工作，因此先从第一个环节着手介绍：<strong style=\"box-sizing: border-box;text-align: left;\">直接将 Web 容器嵌入原生布局</strong> —并将其作为第 1 版发布：</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">JSON Web 容器，JSON 中的 HTML 将变为原生应用组件。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">仅这一点就已经很实用了，但由于无法交互，依然存在一定的局限。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">父应用无法控制子 Web 容器，子容器无法向父应用发送任何事件通知，这 <strong style=\"box-sizing: border-box;text-align: left;\">导致 Web 容器与外界完全隔离</strong>。</p><section class=\"h4\" style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;line-height: 1.1;color: rgb(60, 112, 198);margin-top: 30px;margin-left: 8px;font-size: 16px;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box;display: inline-block;width: 15px;height: 15px;margin-right: 10px;background: url(\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbI9OSD9K2SGscgFT6jWhtzlDFh443y85rMSMca1CulA2CbQibODEFHkw/640?wx_fmt=png\") center center / 100% 100% no-repeat;\"></span> <span style=\"box-sizing: border-box;\">C. Jasonette Web 容器 2.0：使其可交互</span></section><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">发布第 1 版之后，我们开始处理第二个问题：<strong style=\"box-sizing: border-box;text-align: left;\">为 Web 容器添加交互能力</strong>。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">下文将介绍如何为之前创建的静态 Web 容器添加交互能力，让它变得更强大。</p><section class=\"h2\" style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;line-height: 1.1;color: rgb(63, 63, 63);font-size: 20px;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box;height: 65px;line-height: 95px;color: rgb(60, 112, 198);border-bottom: 2px solid rgb(27, 95, 160);background: url(\"https://mmbiz.qpic.cn/mmbiz_jpg/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbz2PLh5DL8iauUibbmxbH5DHibsicYBM2PqvaLmN5ZtmwHbJ0hejxclSHHw/640?wx_fmt=jpeg\") 50% 50% / 92px no-repeat;margin-top: 38px;margin-bottom: 10px;padding-bottom: 7px;display: inline-block;\">实现：交互式 Web 容器</span></section><section class=\"h3\" style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;line-height: 1.1;color: rgb(63, 63, 63);font-size: 16px;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box;display: inline-block;height: 38px;line-height: 42px;color: rgb(60, 112, 198);background: url(\"https://mmbiz.qpic.cn/mmbiz_jpg/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbz2PLh5DL8iauUibbmxbH5DHibsicYBM2PqvaLmN5ZtmwHbJ0hejxclSHHw/640?wx_fmt=jpeg\") left center / 63px no-repeat;padding-left: 35px;margin-top: 38px;margin-bottom: 10px;\">1. 通过 URL 加载</span></section><section class=\"h4\" style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;line-height: 1.1;color: rgb(60, 112, 198);margin-top: 30px;margin-left: 8px;font-size: 16px;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box;display: inline-block;width: 15px;height: 15px;margin-right: 10px;background: url(\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbI9OSD9K2SGscgFT6jWhtzlDFh443y85rMSMca1CulA2CbQibODEFHkw/640?wx_fmt=png\") center center / 100% 100% no-repeat;\"></span> <span style=\"box-sizing: border-box;\">问题</span></section><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: left;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">之前在第 1 版中，为了使用 Web 容器作为后台视图组件，我们首先需要将<code style=\"box-sizing: border-box;\">$jason.body.background.type</code>设置为<code style=\"box-sizing: border-box;\">\"html\"</code>，随后在<code style=\"box-sizing: border-box;\">$jason.body.background.text</code>属性下添加硬编码的 HTML 文本，例如这样：</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: left;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><img class=\"\" data-ratio=\"0.46996699669966996\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbUE8tAjN8S9zSL2lqbticB5HcCNqPxMkoSKHnpJhZUdQw4V7KFiadDOuQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"1515\" style=\"box-sizing: border-box;border-width: 0px;border-style: initial;border-color: initial;vertical-align: middle;width: 717px;\" src=\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbUE8tAjN8S9zSL2lqbticB5HcCNqPxMkoSKHnpJhZUdQw4V7KFiadDOuQ/640?wx_fmt=png\"></p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">一般来说，人们往往更希望直接使用 Web URL 对容器进行实例化，而不希望将整个 HTML 代码以硬编码的方式作为一行代码加入。</p><section class=\"h4\" style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;line-height: 1.1;color: rgb(60, 112, 198);margin-top: 30px;margin-left: 8px;font-size: 16px;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box;display: inline-block;width: 15px;height: 15px;margin-right: 10px;background: url(\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbI9OSD9K2SGscgFT6jWhtzlDFh443y85rMSMca1CulA2CbQibODEFHkw/640?wx_fmt=png\") center center / 100% 100% no-repeat;\"></span> <span style=\"box-sizing: border-box;\">解决方案</span></section><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">Web 容器 2.0 增加了<code style=\"box-sizing: border-box;\">url</code>属性，我们可以嵌入<code style=\"box-sizing: border-box;\">file://</code>形式的本地 HTML，例如这样（可以从伴随应用发布的本地 HTML 文件加载）：</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><img class=\"\" data-ratio=\"0.4713249835201055\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbMwibh1j5SjNCxEcXhbVpf2y6YrmKAIgyha4z0YEohufbo1LIUNJDsfg/640?wx_fmt=png\" data-type=\"png\" data-w=\"1517\" style=\"box-sizing: border-box;border-width: 0px;border-style: initial;border-color: initial;vertical-align: middle;width: 717px;\" src=\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbMwibh1j5SjNCxEcXhbVpf2y6YrmKAIgyha4z0YEohufbo1LIUNJDsfg/640?wx_fmt=png\"></p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">或者也可以嵌入远程的<code style=\"box-sizing: border-box;\">http[s]://</code> URL，例如这样（可以从远程 HTML 加载）：</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><img class=\"\" data-ratio=\"0.47465437788018433\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbia4G0peiabtpCriarACHXRC7bl4Am8dlHSU6wmNmsLf5k681OicjlwrtGQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"1519\" style=\"box-sizing: border-box;border-width: 0px;border-style: initial;border-color: initial;vertical-align: middle;width: 717px;\" src=\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbia4G0peiabtpCriarACHXRC7bl4Am8dlHSU6wmNmsLf5k681OicjlwrtGQ/640?wx_fmt=png\"></p><section class=\"h3\" style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;line-height: 1.1;color: rgb(63, 63, 63);font-size: 16px;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box;display: inline-block;height: 38px;line-height: 42px;color: rgb(60, 112, 198);background: url(\"https://mmbiz.qpic.cn/mmbiz_jpg/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbz2PLh5DL8iauUibbmxbH5DHibsicYBM2PqvaLmN5ZtmwHbJ0hejxclSHHw/640?wx_fmt=jpeg\") left center / 63px no-repeat;padding-left: 35px;margin-top: 38px;margin-bottom: 10px;\">2. 父应用与 Web 容器的双向通信</span></section><section class=\"h4\" style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;line-height: 1.1;color: rgb(60, 112, 198);margin-top: 30px;margin-left: 8px;font-size: 16px;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box;display: inline-block;width: 15px;height: 15px;margin-right: 10px;background: url(\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbI9OSD9K2SGscgFT6jWhtzlDFh443y85rMSMca1CulA2CbQibODEFHkw/640?wx_fmt=png\") center center / 100% 100% no-repeat;\"></span> <span style=\"box-sizing: border-box;\">问题</span></section><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">之前，Web 容器只能用于展示内容，无法交互。这意味着 <strong style=\"box-sizing: border-box;text-align: left;\">下列做法全部无法实现</strong>：</p><ol style=\"\" class=\" list-paddingleft-2\"><li><p style=\"box-sizing: border-box;font-size: 16px;text-align: justify;white-space: pre-line;color: rgb(74, 74, 74);line-height: 1.75em;\"><strong style=\"box-sizing: border-box;text-align: left;\">Jasonette 到 Web 容器的通信</strong>：从 Jasonette 中调用 Web 容器内部的 JavaScript 函数。</p></li><li><p style=\"box-sizing: border-box;font-size: 16px;text-align: justify;white-space: pre-line;color: rgb(74, 74, 74);line-height: 1.75em;\"><strong style=\"box-sizing: border-box;text-align: left;\">Web 容器到 Jasonette 的通信</strong>：从 Web 容器代码中调用原生 API。</p></li></ol><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">此时我们只能展示 Web 容器的内容。这就像网页中嵌入的 iframe 框架，主页面完全无法访问 iframe 框架中的内容。</p><section class=\"h4\" style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;line-height: 1.1;color: rgb(60, 112, 198);margin-top: 30px;margin-left: 8px;font-size: 16px;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box;display: inline-block;width: 15px;height: 15px;margin-right: 10px;background: url(\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbI9OSD9K2SGscgFT6jWhtzlDFh443y85rMSMca1CulA2CbQibODEFHkw/640?wx_fmt=png\") center center / 100% 100% no-repeat;\"></span> <span style=\"box-sizing: border-box;\">解决方案</span></section><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">Jasonette 最大的目标在于设计一种可以描述跨平台移动应用的标准化标记语言。因此我们需要这个标记语言能够全面地描述父应用和子 Web 容器之间的双向通信。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">为此我在父应用和子 Web 容器之间使用了一种基于 JSON-RPC 的通信管道。由于 Jasonette 中的一切都是通过 JSON 对象表达的，因此使用 JSON-RPC 标准格式作为通信协议就成了一种非常自然合理的方式。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><img class=\"\" data-ratio=\"0.767\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbcTgOEldKK8OjuYvAWVeiaA3UhialaVBeln601HrG1mRwBV2xAvQOzL9Q/640?wx_fmt=png\" data-type=\"png\" data-w=\"2000\" style=\"box-sizing: border-box;border-width: 0px;border-style: initial;border-color: initial;vertical-align: middle;width: 717px;\" src=\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbcTgOEldKK8OjuYvAWVeiaA3UhialaVBeln601HrG1mRwBV2xAvQOzL9Q/640?wx_fmt=png\"></p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">为了让 JavaScript 函数能够调用 Web 容器，需要声明一个名为<code style=\"box-sizing: border-box;\">$agent.request</code>的操作：</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><img class=\"\" data-ratio=\"0.31097961867192636\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVba46hJjkG3WXic84NHTiaTULfV2CqsoH9MFXor7OCicTaqqx2pQ2EXlibVA/640?wx_fmt=png\" data-type=\"png\" data-w=\"1521\" style=\"box-sizing: border-box;border-width: 0px;border-style: initial;border-color: initial;vertical-align: middle;width: 717px;\" src=\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVba46hJjkG3WXic84NHTiaTULfV2CqsoH9MFXor7OCicTaqqx2pQ2EXlibVA/640?wx_fmt=png\"></p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">$agent.request 是一种原生 API，可触发 JSON-RPC 请求并发送给 Web 容器。为了使用该 API，必须将<code style=\"box-sizing: border-box;\">options</code>对象作为参数传递。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><code style=\"box-sizing: border-box;\">options</code>对象实际上是发送给 Web 容器的 JSON-RPC 请求。每个属性的含义如下：</p><ul style=\"\" class=\" list-paddingleft-2\"><li><p style=\"box-sizing: border-box;font-size: 16px;text-align: justify;white-space: pre-line;color: rgb(74, 74, 74);line-height: 1.75em;\"><code style=\"box-sizing: border-box;\">id</code>：Web 容器构建在一种名为 Agent 的底层架构基础上，通常来说，我们可以为一个视图使用多个 Agent，每个 Agent 可以有自己的唯一 ID。但 Web 容器是一种特殊类型的 Agent，只能使用 $webcontainer 作为 ID，因此这里需要使用 ID。</p></li><li><p style=\"box-sizing: border-box;font-size: 16px;text-align: justify;white-space: pre-line;color: rgb(74, 74, 74);line-height: 1.75em;\"><code style=\"box-sizing: border-box;\">method</code>：要调用的 JavaScript 函数名称。</p></li><li><p style=\"box-sizing: border-box;font-size: 16px;text-align: justify;white-space: pre-line;color: rgb(74, 74, 74);line-height: 1.75em;\"><code style=\"box-sizing: border-box;\">params</code>：传递给 JavaScript 函数的参数数组。</p></li></ul><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">因此完整来看，所用的标记应该是类似这样的：</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><img class=\"\" data-ratio=\"0.8562953197099539\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbPIwstlQODr6IaECLMn6SuyJPv7yUH4n1YeR3Y9Aa4QibERDlR2TrYvQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"1517\" style=\"box-sizing: border-box;border-width: 0px;border-style: initial;border-color: initial;vertical-align: middle;width: 717px;\" src=\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbPIwstlQODr6IaECLMn6SuyJPv7yUH4n1YeR3Y9Aa4QibERDlR2TrYvQ/640?wx_fmt=png\"></p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">这串标记实际上是在说：</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: left;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">当视图加载（$jason.head.actions.$load）时，向 Web 容器 Agent 发送一个 JSON-RPC 请求（$agent.request），而具体的请求是通过<code style=\"box-sizing: border-box;\">options</code>指定的。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: left;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">Web 容器在 $jason.body.background 下定义，本例中将会加载一个名为<code style=\"box-sizing: border-box;\">file://index.html</code>的本地文件。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: left;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">随后会查找一个名为 login 的 JavaScript 函数并传递<code style=\"box-sizing: border-box;\">params</code>下的两个参数（<code style=\"box-sizing: border-box;\">\"alice\"</code>和<code style=\"box-sizing: border-box;\">\"1234\"</code>）。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><img class=\"\" data-ratio=\"0.08273145108338804\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbQtBe8wG1bqvtwCztibBsybagUIiapqXGibZLhxFsIlNnJ4ianROqJqyw6A/640?wx_fmt=png\" data-type=\"png\" data-w=\"1523\" style=\"box-sizing: border-box;border-width: 0px;border-style: initial;border-color: initial;vertical-align: middle;width: 717px;\" src=\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbQtBe8wG1bqvtwCztibBsybagUIiapqXGibZLhxFsIlNnJ4ianROqJqyw6A/640?wx_fmt=png\"></p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">上文介绍了父应用如何触发子 Web 容器的 JavaScript 函数调用，我们还可以反着来，让 Web 容器触发父应用的原生 API。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">详情请参阅 Agent 文档。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: left;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">Agent 文档: <span style=\"color: rgb(120, 172, 254);\">https://docs.jasonette.com/agents/</span></p><section class=\"h2\" style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;line-height: 1.1;color: rgb(63, 63, 63);font-size: 20px;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box;height: 65px;line-height: 95px;color: rgb(60, 112, 198);border-bottom: 2px solid rgb(27, 95, 160);background: url(\"https://mmbiz.qpic.cn/mmbiz_jpg/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbz2PLh5DL8iauUibbmxbH5DHibsicYBM2PqvaLmN5ZtmwHbJ0hejxclSHHw/640?wx_fmt=jpeg\") 50% 50% / 92px no-repeat;margin-top: 38px;margin-bottom: 10px;padding-bottom: 7px;display: inline-block;\">  范 例   </span></section><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">继续回到上文介绍的二维码生成器范例：</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: center;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><img class=\"\" data-ratio=\"1.780373831775701\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVb3aKGQ72nibV6dviaW27cWg9lyLXLaIOqYBDgMSeuNicnckPUOibfepWaXQ/640?wx_fmt=gif\" data-type=\"gif\" data-w=\"428\" style=\"box-sizing: border-box;border-width: 0px;border-style: initial;border-color: initial;vertical-align: middle;width: 347px;height: 618px;\" src=\"https://mmbiz.qpic.cn/mmbiz_gif/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVb3aKGQ72nibV6dviaW27cWg9lyLXLaIOqYBDgMSeuNicnckPUOibfepWaXQ/640?wx_fmt=gif\"></p><p><br></p><ol style=\"\" class=\" list-paddingleft-2\"><li><p style=\"box-sizing: border-box;font-size: 16px;text-align: justify;white-space: pre-line;color: rgb(74, 74, 74);line-height: 1.75em;\">其中 底部的文字输入组件是 100% 原生的。</p></li><li><p style=\"box-sizing: border-box;font-size: 16px;text-align: justify;white-space: pre-line;color: rgb(74, 74, 74);line-height: 1.75em;\">二维码由 作为 Web 应用运行 的 Web 容器生成。</p></li><li><p style=\"box-sizing: border-box;font-size: 16px;text-align: justify;white-space: pre-line;color: rgb(74, 74, 74);line-height: 1.75em;\">当用户输入内容并按下“生成”，将调用 Web 容器 Agent 中的<code style=\"box-sizing: border-box;\">$agent.request</code>操作，进而调用 JavaScript 函数“qr”。</p></li></ol><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">具体示例可以参阅:</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><span style=\"color: rgb(120, 172, 254);\">https://github.com/Jasonette/Jasonpedia/blob/gh-pages/webcontainer/agent/fn/index.json</span></p><section class=\"h3\" style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;line-height: 1.1;color: rgb(63, 63, 63);font-size: 16px;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box;display: inline-block;height: 38px;line-height: 42px;color: rgb(60, 112, 198);background: url(\"https://mmbiz.qpic.cn/mmbiz_jpg/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbz2PLh5DL8iauUibbmxbH5DHibsicYBM2PqvaLmN5ZtmwHbJ0hejxclSHHw/640?wx_fmt=jpeg\") left center / 63px no-repeat;padding-left: 35px;margin-top: 38px;margin-bottom: 10px;\">3. 脚本注入</span></section><section class=\"h4\" style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;line-height: 1.1;color: rgb(60, 112, 198);margin-top: 30px;margin-left: 8px;font-size: 16px;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box;display: inline-block;width: 15px;height: 15px;margin-right: 10px;background: url(\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbI9OSD9K2SGscgFT6jWhtzlDFh443y85rMSMca1CulA2CbQibODEFHkw/640?wx_fmt=png\") center center / 100% 100% no-repeat;\"></span> <span style=\"box-sizing: border-box;\">问题</span></section><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">有时候我们可能需要在 Web 容器完成初始 HTML 加载后，动态地将 JavaScript 代码注入 Web 容器。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">假设要构建一个自定义的 Web 浏览器应用，我们可能希望将自己的自定义 JavaScript 注入到每个 Web 视图，借此定制 Web 视图的行为，这有点类似于 Web 浏览器的扩展。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">就算不需要构建 Web 浏览器，当希望为所包含的内容不由我们控制的 URL 实现自定义行为时，同样需要使用脚本注入的方法。原生应用和 Web 容器只能通过<code style=\"box-sizing: border-box;\">$agent</code> API 通信，但如果无法更改 HTML 内容，只能通过动态注入的方式将<code style=\"box-sizing: border-box;\">$agent</code>接口加入 Web 容器。</p><section class=\"h4\" style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;line-height: 1.1;color: rgb(60, 112, 198);margin-top: 30px;margin-left: 8px;font-size: 16px;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box;display: inline-block;width: 15px;height: 15px;margin-right: 10px;background: url(\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbI9OSD9K2SGscgFT6jWhtzlDFh443y85rMSMca1CulA2CbQibODEFHkw/640?wx_fmt=png\") center center / 100% 100% no-repeat;\"></span> <span style=\"box-sizing: border-box;\">解决方案</span></section><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">正如上文所述，<code style=\"box-sizing: border-box;\">$jason.body.background</code>这个 Web 容器也是一个<code style=\"box-sizing: border-box;\">agent</code>，这意味着我们可以使用与普通 Agent 完全相同的 $agent.inject 方法。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><img class=\"\" data-ratio=\"0.845\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbNuLeSKicEVChujXicfK9b14UEvVwBicNUZl5G5TKd4g3bFRh6FhCl6bRQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"2000\" style=\"box-sizing: border-box;border-width: 0px;border-style: initial;border-color: initial;vertical-align: middle;width: 717px;\" src=\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbNuLeSKicEVChujXicfK9b14UEvVwBicNUZl5G5TKd4g3bFRh6FhCl6bRQ/640?wx_fmt=png\"></p><section class=\"h3\" style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;line-height: 1.1;color: rgb(63, 63, 63);font-size: 16px;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box;display: inline-block;height: 38px;line-height: 42px;color: rgb(60, 112, 198);background: url(\"https://mmbiz.qpic.cn/mmbiz_jpg/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbz2PLh5DL8iauUibbmxbH5DHibsicYBM2PqvaLmN5ZtmwHbJ0hejxclSHHw/640?wx_fmt=jpeg\") left center / 63px no-repeat;padding-left: 35px;margin-top: 38px;margin-bottom: 10px;\">4. 对 URL 点击的处理</span></section><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">以往，Web 容器只能通过两种方式处理链接点击操作：</p><ol style=\"\" class=\" list-paddingleft-2\"><li><p style=\"box-sizing: border-box;font-size: 16px;text-align: justify;white-space: pre-line;color: rgb(74, 74, 74);line-height: 1.75em;\"><strong style=\"box-sizing: border-box;text-align: left;\">只读</strong>：将 Web 容器视作只读的，忽略所有诸如触控或滚动等事件。此时所有 Web 容器都是只读的，除非明确令其表现得像是普通浏览器，具体做法见下文。</p></li><li><p style=\"box-sizing: border-box;font-size: 16px;text-align: left;white-space: pre-line;color: rgb(74, 74, 74);line-height: 1.75em;\"><strong style=\"box-sizing: border-box;text-align: left;\">普通浏览器行为</strong>：像是普通浏览器那样，允许用户与页面交互。为此需要进行声明，将<code style=\"box-sizing: border-box;\">\"type\": \"$default\"</code>设置为<code style=\"box-sizing: border-box;\">action</code>属性。</p></li></ol><section class=\"h4\" style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;line-height: 1.1;color: rgb(60, 112, 198);margin-top: 30px;margin-left: 8px;font-size: 16px;white-space: normal;background-color: rgb(255, 255, 255);text-align: left;\"><span style=\"box-sizing: border-box;display: inline-block;width: 15px;height: 15px;margin-right: 10px;background: url(\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbI9OSD9K2SGscgFT6jWhtzlDFh443y85rMSMca1CulA2CbQibODEFHkw/640?wx_fmt=png\") center center / 100% 100% no-repeat;\"></span> <span style=\"box-sizing: border-box;\">问题</span></section><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">两者均为 <strong style=\"box-sizing: border-box;text-align: left;\">“全无或全有（All or nothing）”解决方案</strong>。</p><ul style=\"\" class=\" list-paddingleft-2\"><li><p style=\"box-sizing: border-box;font-size: 16px;text-align: justify;white-space: pre-line;color: rgb(74, 74, 74);line-height: 1.75em;\">对于“只读”，Web 容器会忽略用户的所有交互操作。</p></li><li><p style=\"box-sizing: border-box;font-size: 16px;text-align: justify;white-space: pre-line;color: rgb(74, 74, 74);line-height: 1.75em;\">对于“普通浏览器行为”，Web 容器的表现将与浏览器一致。点击链接后，将像普通网页那样刷新页面展示链接内容，但无法劫持该点击并调用其他原生 API。</p></li></ul><section class=\"h4\" style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;line-height: 1.1;color: rgb(60, 112, 198);margin-top: 30px;margin-left: 8px;font-size: 16px;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box;display: inline-block;width: 15px;height: 15px;margin-right: 10px;background: url(\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbI9OSD9K2SGscgFT6jWhtzlDFh443y85rMSMca1CulA2CbQibODEFHkw/640?wx_fmt=png\") center center / 100% 100% no-repeat;\"></span> <span style=\"box-sizing: border-box;\">解决方案</span></section><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: left;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">通过使用新的 Web 容器，可以将任何<code style=\"box-sizing: border-box;\">action</code>附加到<code style=\"box-sizing: border-box;\">$jason.body.background</code>这个 Web 容器，进而处理链接点击之类的事件。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><img class=\"\" data-ratio=\"0.7965\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbOibKqmIu3MXLs0HnDb37icianqNP09csHVQ657LKYvGeyHTNpMiaoYD7GA/640?wx_fmt=png\" data-type=\"png\" data-w=\"2000\" style=\"box-sizing: border-box;border-width: 0px;border-style: initial;border-color: initial;vertical-align: middle;width: 717px;\" src=\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbOibKqmIu3MXLs0HnDb37icianqNP09csHVQ657LKYvGeyHTNpMiaoYD7GA/640?wx_fmt=png\"></p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">一起看一个例子：</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><img class=\"\" data-ratio=\"0.8264299802761341\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVblO8xiaD31O03MYS7pfqQMgtDUWt04EYjM0Cr61w0ibZWxuA5dN99IvSA/640?wx_fmt=png\" data-type=\"png\" data-w=\"1521\" style=\"box-sizing: border-box;border-width: 0px;border-style: initial;border-color: initial;vertical-align: middle;width: 717px;\" src=\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVblO8xiaD31O03MYS7pfqQMgtDUWt04EYjM0Cr61w0ibZWxuA5dN99IvSA/640?wx_fmt=png\"></p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: left;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">在这里我们为 Web 容器附加了<code style=\"box-sizing: border-box;\">\"trigger\": \"displayBanner\"</code>，这意味着当用户点击 Web 容器内的任何链接后，将触发<code style=\"box-sizing: border-box;\">displayBanner</code>操作，而非直接交由 Web 视图处理。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: left;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">此外如果查看<code style=\"box-sizing: border-box;\">displayBanner</code>操作会发现，这里出现了变量<code style=\"box-sizing: border-box;\">$jason</code>。在本例中，点击的链接将通过<code style=\"box-sizing: border-box;\">$jason</code>变量传递。例如，如果点击一个名为<code style=\"box-sizing: border-box;\">\"https://google.com\"</code>的 URL，<code style=\"box-sizing: border-box;\">$jason</code>将获得下列值：</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><img class=\"\" data-ratio=\"0.15243101182654403\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbibgpFKxHLMbmkibRNDRoZOmJD5ew10PTbTnx9SGcG5hZmg35p86IXPnA/640?wx_fmt=png\" data-type=\"png\" data-w=\"1522\" style=\"box-sizing: border-box;border-width: 0px;border-style: initial;border-color: initial;vertical-align: middle;width: 717px;\" src=\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbibgpFKxHLMbmkibRNDRoZOmJD5ew10PTbTnx9SGcG5hZmg35p86IXPnA/640?wx_fmt=png\"></p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">这意味着我们可以 检查 $jason.url 的值 进而选择性地触发不同操作。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">用自定义 Web 浏览器的实现作为另一个例子一起来看看：</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><img class=\"\" data-ratio=\"0.9815789473684211\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbE9JCvL6ia4ZtdOHO5fMpYvoAUVHccOaBQ96CGlQzMMCicJ1bBknVicic1w/640?wx_fmt=png\" data-type=\"png\" data-w=\"1520\" style=\"box-sizing: border-box;border-width: 0px;border-style: initial;border-color: initial;vertical-align: middle;width: 717px;\" src=\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbE9JCvL6ia4ZtdOHO5fMpYvoAUVHccOaBQ96CGlQzMMCicJ1bBknVicic1w/640?wx_fmt=png\"></p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">我们会检查 URL 是否包含字符串<code style=\"box-sizing: border-box;\">signin</code>，并根据结果执行两个不同操作。</p><ol style=\"\" class=\" list-paddingleft-2\"><li><p style=\"box-sizing: border-box;font-size: 16px;text-align: justify;white-space: pre-line;color: rgb(74, 74, 74);line-height: 1.75em;\">如果包含<code style=\"box-sizing: border-box;\">signin</code>，打开一个新视图并以原生方式完成登录操作。</p></li><li><p style=\"box-sizing: border-box;font-size: 16px;text-align: justify;white-space: pre-line;color: rgb(74, 74, 74);line-height: 1.75em;\">如果不包含<code style=\"box-sizing: border-box;\">signin</code>，则直接运行<code style=\"box-sizing: border-box;\">\"type\": \"$default\"</code>操作，实现类似普通浏览器的行为。</p></li></ol><section class=\"h2\" style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;line-height: 1.1;color: rgb(63, 63, 63);font-size: 20px;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box;height: 65px;line-height: 95px;color: rgb(60, 112, 198);border-bottom: 2px solid rgb(27, 95, 160);background: url(\"https://mmbiz.qpic.cn/mmbiz_jpg/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbz2PLh5DL8iauUibbmxbH5DHibsicYBM2PqvaLmN5ZtmwHbJ0hejxclSHHw/640?wx_fmt=jpeg\") 50% 50% / 92px no-repeat;margin-top: 38px;margin-bottom: 10px;padding-bottom: 7px;display: inline-block;\">用法示范</span></section><section class=\"h4\" style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;line-height: 1.1;color: rgb(60, 112, 198);margin-top: 30px;margin-left: 8px;font-size: 16px;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"box-sizing: border-box;display: inline-block;width: 15px;height: 15px;margin-right: 10px;background: url(\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbI9OSD9K2SGscgFT6jWhtzlDFh443y85rMSMca1CulA2CbQibODEFHkw/640?wx_fmt=png\") center center / 100% 100% no-repeat;\"></span> <span style=\"box-sizing: border-box;\">构建自定义 Web 浏览器</span></section><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">利用新版 Web 容器的下列特性，可以实现很多有趣的操作：</p><ol style=\"\" class=\" list-paddingleft-2\"><li><p style=\"box-sizing: border-box;font-size: 16px;text-align: justify;white-space: pre-line;color: rgb(74, 74, 74);line-height: 1.75em;\">通过<code style=\"box-sizing: border-box;\">url</code>属性实现自我加载，并充当一个功能齐备的浏览器。</p></li><li><p style=\"box-sizing: border-box;font-size: 16px;text-align: justify;white-space: pre-line;color: rgb(74, 74, 74);line-height: 1.75em;\">根据 URL 的不同，选择性地处理链接点击操作。</p></li></ol><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">我们甚至可以通过几十行 JSON 代码构建一个自定义的 Web 浏览器。由于现在可以劫持每个链接点击，因此可以检查<code style=\"box-sizing: border-box;\">$jason.url</code>，并根据结果运行我们需要的任何操作。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">例如下面的例子：</p><p style=\"text-align: center;\"><img class=\"\" data-copyright=\"0\" data-ratio=\"1.7801724137931034\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbB0LUXGB5A9icZRmxzIvibwVwSpQiaTCMfqEKWhMVYZf1ibQPKBkNsDazjA/640?wx_fmt=gif\" data-type=\"gif\" data-w=\"232\" style=\"width: 328px;height: 584px;\" src=\"https://mmbiz.qpic.cn/mmbiz_gif/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbB0LUXGB5A9icZRmxzIvibwVwSpQiaTCMfqEKWhMVYZf1ibQPKBkNsDazjA/640?wx_fmt=gif\"></p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: center;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><img class=\"\" data-ratio=\"1.780373831775701\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbh1kj95oNic2LgHZxiahRKN0213NB7KZa0AvQYXMRNd6FOIgkvC5S386w/640?wx_fmt=gif\" data-type=\"gif\" data-w=\"428\" style=\"box-sizing: border-box;border-width: 0px;border-style: initial;border-color: initial;vertical-align: middle;width: 368px;height: 655px;\" src=\"https://mmbiz.qpic.cn/mmbiz_gif/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVbh1kj95oNic2LgHZxiahRKN0213NB7KZa0AvQYXMRNd6FOIgkvC5S386w/640?wx_fmt=gif\"><br></p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">从上图可以看到，点击链接后的行为与普通浏览器无异（<code style=\"box-sizing: border-box;\">\"type\": \"$default\"</code>）。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">从下图可以看到，点击链接后可以用原生方式转换至另一个 JASON 视图。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">这一切都可以根据<code style=\"box-sizing: border-box;\">$jason.url</code>的值选择性地触发实现。</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><strong style=\"box-sizing: border-box;text-align: left;\">第 1 步：向 Web 容器附加一个名为<code style=\"box-sizing: border-box;\">visit</code>的操作</strong>：</p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><img class=\"\" data-ratio=\"0.4351245085190039\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVb6qnzM1qYewzof6z4WkZSiaZeicg0w7vL3budcdFqdaqjnFo91A4kbmKA/640?wx_fmt=png\" data-type=\"png\" data-w=\"1526\" style=\"box-sizing: border-box;border-width: 0px;border-style: initial;border-color: initial;vertical-align: middle;width: 717px;\" src=\"https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUpV3eUQBTpadNoMZ5RYZVb6qnzM1qYewzof6z4WkZSiaZeicg0w7vL3budcdFqdaqjnFo91A4kbmKA/640?wx_fmt=png\"></p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: justify;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><strong style=\"box-sizing: border-box;text-align: left;\">第 2 步：根据<code style=\"box-sizing: border-box;\">$jason.url</code>的值运行<code style=\"box-sizing: border-box;\">visit</code>内部的相关操作</strong></p><p style=\"box-sizing: border-box;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;background-color: rgb(255, 255, 255);font-size: 16px;text-align: left;white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8', 0, 1, 0);
INSERT INTO `post` (`id`, `createAt`, `updateAt`, `title`, `description`, `thumb`, `url`, `html`, `markdown`, `views`, `status`, `push`) VALUES
(49, '2018-04-23 11:01:44.786977', '2018-04-23 11:01:44.786977', '美团点评金融平台Web前端技术体系 - 知乎专栏·「美团点评技术博客」 - 前端 - 掘金', '背景随着美团点评金融业务的高速发展，前端研发数量从2015年的1个人，扩张到了现在横跨北上两地8个事业部的将近150人。业务新，团队新，前端领域框架技术又层出不穷，各个业务的研发团队在技术选择上没有明确的指导意见，致使业务与业务之间的技术差异越来越大，在技术工具研发上无法共建，在资源调度上成本也很高。2017年下半年，金融平台发起了技术栈统一行动，行动分为后端、iOS、Android及前端等四个方向，在前端方向我作为组织者和参与者与金融平台8个事业部的前端技术代表进行讨论。通过对各方意见进行归纳整理，结合', 'https://user-gold-cdn.xitu.io/2018/4/18/162d61588fca4083', 'https://juejin.im/entry/5ad68ca8518825558b3e71d3', '<figure><img data-src=\"https://user-gold-cdn.xitu.io/2018/4/18/162d61588fe59c95?imageView2/0/w/1280/h/960/ignore-error/1\" class=\"lazyload\" data-width=\"720\" data-height=\"77\" src=\"https://user-gold-cdn.xitu.io/2018/4/18/162d61588fe59c95?imageView2/0/w/1280/h/960/ignore-error/1\"> </figure>\n    <p><b>背景</b></p>\n    <p>随着美团点评金融业务的高速发展，前端研发数量从2015 年的 1 个人，扩张到了现在横跨北上两地 8 个事业部的将近 150 人。业务新，团队新，前端领域框架技术又层出不穷，各个业务的研发团队在技术选择上没有明确的指导意见，致使业务与业务之间的技术差异越来越大，在技术工具研发上无法共建，在资源调度上成本也很高。 </p>\n    <p>2017年下半年，金融平台发起了技术栈统一行动，行动分为后端、iOS、Android及前端等四个方向，在前端方向我作为组织者和参与者与金融平台8 个事业部的前端技术代表进行讨论。 通过对各方意见进行归纳整理，结合各团队的情况，金融平台对于技术栈的选型达成了共识。本文将介绍美团点评金融平台前端的技术选型以及背后的思考。先从一些基本原则讲起。</p>\n    <p><b>招构建技术体系的基本原则</b></p><b><figure><img data-src=\"https://user-gold-cdn.xitu.io/2018/4/18/162d61588fca4083?imageView2/0/w/1280/h/960/ignore-error/1\" class=\"lazyload\" data-width=\"720\" data-height=\"367\" src=\"https://user-gold-cdn.xitu.io/2018/4/18/162d61588fca4083?imageView2/0/w/1280/h/960/ignore-error/1\"></figure></b>\n    <h2 data-id=\"heading-0\"><b>业务出发</b></h2>\n    <ol>\n        <li>选型要针对业务形态特点，注重业务场景匹配度</li>\n        <li>具有一定业务前瞻性（中期或中短期以避免过度设计，短期、中期、长期与迭代速度强相关）</li>\n    </ol>\n    <p>金融业务的移动端项目占比超过 70%，尤其是 Hybrid 项目，团队在整个移动端生态的设计上投入了大量的精力，例如 Vue 的选择、EH 的设计、组件库 Vix 的设计等。</p>\n    <p>同时由于业务的金融属性，对于可用性的要求非常高。在可用性保障上我们还会有一些侧重，例如 TypeScript 的使用，自动化流程测试框架 Freekite 的使用等。</p>\n    <h2 data-id=\"heading-1\"><b>团队出发</b></h2>\n    <ol>\n        <li>考虑团队规模，成员技术特点和偏好</li>\n        <li>考虑现有项目和技术迁移成本</li>\n    </ol>\n    <p>金融大多数团队都处于初创时期，因此团队历史包袱相对较少，接受新鲜事物的能力强，但快速搭建团队中也会对技术栈有上手成本的要求。在整个技术体系的搭建当中，我们会优先考虑那些新的、上手成本低的技术。</p>\n    <h2 data-id=\"heading-2\"><b>以简驭繁</b></h2>\n    <p>我们主张使用简单的技术手段解决复杂的问题，而不是用复杂的技术手段解决简单的问题，例如<br> Hybrid 体验问题的解决，常规的有 RN、Weex 等方案，在业界有丰富的实践，但我们也会设计实现更简单的解决方案 <br>EH，让问题的解决变得更聚焦于问题的本质。在首屏渲染速度优化方案上的选择也是一样，业界有很好的 SSR 技术，但我们也会实践研发<b>构建时预渲染</b>技术，让 TTFB（首字节时间）更快，让系统流量负载更高，同时减少关键环节，让整个系统可用性更强。</p>\n    <h2 data-id=\"heading-3\"><b>标准化</b></h2>\n    <p>标准化指的就是尽可能让上下游衔接形成标准，并在标准下构建效率和质量工具。</p>\n    <p>例如在组件库 Vix 的研发上，我们与 UED 形成一致的、强同步的标准，从而大大减少界面搭建的时间消耗。后面会详细介绍。</p>\n    <h2 data-id=\"heading-4\"><b>自动化</b></h2>\n    <p>用技术去连接技术，用技术去简化步骤，解决某个工具到使用者的“最后一公里”问题。</p>\n    <p>例如我们使用的自动化流程测试工具 <b>Freekite</b>，不用一行代码即可以完成复杂的分支逻辑自动化测试与持续集成。我们使用的联调平台 <b>Portm</b> 可以将接口设计和前端 Mock 、后端单测、接口文档有机的结合起来，将前后端的研发进度解耦，从而大大提升研发效率。</p>\n    <h2 data-id=\"heading-5\"><b>现有复用</b></h2>\n    <p>顾名思义就是选型上尽量使用公司已有的系统和工具，从而更好的与团队、业务结合。</p>\n    <p>例如全平台监控工具 <b>CAT</b>，业务埋点工具<b>灵犀</b>等等。</p>\n    <p>下面来看看我们技术体系的细节。</p>\n    <p><b>金融平台Web前端技术体系</b></p>\n    <figure><img data-src=\"https://user-gold-cdn.xitu.io/2018/4/18/162d61588fe2fd76?imageView2/0/w/1280/h/960/ignore-error/1\" class=\"lazyload\" data-width=\"720\" data-height=\"331\" src=\"https://user-gold-cdn.xitu.io/2018/4/18/162d61588fe2fd76?imageView2/0/w/1280/h/960/ignore-error/1\"> </figure>\n    <p>我们将从开发阶段开始介绍，从视图层、语言层、协作层，再到质量保障工具、体验优化工具、安全技术等。接下来过渡到编译部署阶段，讲一讲编译部署和上线工具。然后是线上监控和埋点工具。最后介绍一些各个团队正在探索和实践当中的技术。</p>\n    <h2 data-id=\"heading-6\"><b>视图&组件框架</b></h2>\n    <p>在移动端使用 Vue 生态，在桌面版上我们使用 React 生态 或者 Vue 生态。</p>\n    <p>Vue 的使用主要考虑以下几点：</p>\n    <ul>\n        <li>体积小，复杂度低</li>\n        <li>业务上移动端项目占比 70% 以上，Vue 的体积小，网络性能角度相比 React 更适合移动端</li>\n        <li>移动端一般巨型项目很少，从代码结构上来讲，使用 Vue 实现更符合我们的场景复杂度，React 更适合大型相对更复杂的 SPA</li>\n        <li>上手成本和迁移成本低</li>\n        <li>Vue 的学习和上手成本相对更低，团队成员对于 Vue 的认可度和热情也比较高</li>\n        <li>组件内双向绑定、数据依赖收集</li>\n        <li>组件内支持双向绑定，更方便的去进行组件内的数据响应与交互</li>\n        <li>独有的数据依赖收集模式使其默认的数据响应和渲染效率都要比 React 高一些</li>\n    </ul>\n    <p>React 的使用主要考虑以下原因：</p>\n    <ul>\n        <li>有一部分现有后台项目采用 React 技术栈，迭代和维护较少，老的项目如果没有足够的迁移价值则不额外投入资源</li>\n        <li>保留很小的一部分 React 技术生态也可以一定程度上保持一些技术多样性</li>\n    </ul>\n    <h2 data-id=\"heading-7\"><b>组件库</b></h2>\n    <p>组件库是前端领域一个重要的技术单元，为效率、质量、体验服务。</p>\n    <p>效率是为了能够抽象业务研发中业务组件的共同点去避免重复劳动；质量是如果一个组件经过了测试和质量迭代，那么正确的使用不应该出现质量问题；体验方面组件库可以去统一交互的体验，让组件的表现更一致。</p>\n    <p>上述三点中，组件库贡献最大的是效率。</p>\n    <p>谈到组件库如何对效率做贡献，首先想到的是什么样的组件库才能够尽可能的提升我们的研发效率，我认为这里我们需要注意的一点是<b>“控制变量”</b>，因为变化产生了额外的工作量和时间成本，如果这个产品和上个产品完全一样，我们直接复制一份就好了，没必要开发。在我们的前端业务研发当中，变量是什么？是交互和视觉设计，每个产品之间有不同，也有相同。我们控制变量就应该去控制设计。因此我们与金融<br> UED（设计部门） 沟通制定了一个视觉组件<b>标准</b>，共同创建了视觉组件库：Vix。</p>\n    <p>Vix 是一个移动端组件库，其特点是完全遵守与金融 UED 制定的视觉组件标准并保持同步，在 UED 侧有完善的新组件设计提审及审核流程，在业务前端研发侧有强同步的约束。</p>\n    <p>Vix 的结构分为基础组件、复杂组件和业务组件三层，基础组件例如输入框、按钮等；复杂组件包括组合搜索、日期选择等；业务组件例如支付密码输入框、账单、账单详情等。</p>\n    <p>再上升一层则是一些包含后端服务的前后端组件，我们称为“微服务”，是一种更高层次的业务服务抽象，在更高的维度优化效率和服务体验一致性，例如支付密码验证服务，找回支付密码服务等。Vix 包含的是前三层，其结构如下图：</p>\n    <figure><img data-src=\"https://user-gold-cdn.xitu.io/2018/4/18/162d61588fd505d6?imageView2/0/w/1280/h/960/ignore-error/1\" class=\"lazyload\" data-width=\"720\" data-height=\"460\" src=\"https://user-gold-cdn.xitu.io/2018/4/18/162d61588fd505d6?imageView2/0/w/1280/h/960/ignore-error/1\"> </figure>\n    <p>在以往的实践过程当中，C端业务使用开源组件库会和设计有很大差异，需要做大量的改造工作才能使用，然而可能还要为各种各样改造过程中所产生的问题负责，同时开源组件库的业务不相关性限制了业务产品的设计或实现。在Vix 中，由于标准统一，我们的研发效率大大提升，同时质量也更加可控。</p>\n    <p>大多数移动端产品研发过程中至少 40% 以上的精力是在做界面的绘制。有了 Vix 后我们达到了：</p>\n    <ul>\n        <li>效率大大提升：在界面绘制上相比没有组件库至少能够减少 90% 的工作量</li>\n        <li>直接组装无需改动：一个新产品没有新组件出现的情况下，我们甚至可以使用交互稿直接开发而不需要等待视觉稿，因为视觉稿即使画出来也是使用视觉组件库去实现的样子，极大的减少了项目研发的时间成本</li>\n        <li>标准更新仅需升级版本：当视觉标准更新的时候例如列表页两边的边距减小了，各个业务线的产品只需要重新发布一下就能够展示成最新的标准，极大的减少了标准更新时所需的时间成本</li>\n    </ul>\n    <figure><img data-src=\"https://user-gold-cdn.xitu.io/2018/4/18/162d6158abe1a856?imageView2/0/w/1280/h/960/ignore-error/1\" class=\"lazyload\" data-width=\"720\" data-height=\"471\" src=\"https://user-gold-cdn.xitu.io/2018/4/18/162d6158abe1a856?imageView2/0/w/1280/h/960/ignore-error/1\"> </figure>\n    <p>PC 端面向用户和商户的大多都是较为独立的产品，标准化的意义并不大，前端在 PC 端的研发精力主要投入在内部系统上，在内部系统前端研发上有四个特点：</p>\n    <ul>\n        <li>无产品，要求高：几乎没有产品经理跟进，以完成功能需求为主，但功能流程一定要完善，最好能支持手机端使用</li>\n        <li>无设计：几乎没有设计跟进，面对内部用户设计收益不高</li>\n        <li>无测试：几乎没有测试跟进，收益不高，功能验证通过即可</li>\n        <li>要快：大多数是配合用户端产品的管理系统迭代，也可能是新系统的搭建，对研发速度都有要求，往往这方面的估时较短</li>\n    </ul>\n    <p>因此在内部系统的研发上有四点要求：</p>\n    <ul>\n        <li>组件设计合理，组件数量大而全，最好支持移动端使用</li>\n        <li>组件库本身要有不错的设计，用户量虽少，但活跃度超高，界面体验需要保障</li>\n        <li>组件库本身的质量要高，要从工具层面保障质量减少出错</li>\n        <li>组件库要能够快速拼装出功能</li>\n    </ul>\n    <p>PC 端组件库由于设计没有要求，不存在来自设计的“变量”，所以选择很多。</p>\n    <p>React Cells 也是美团点评内部的一个组件库，金融在使用 React 生态的后台系统研发中使用 React Cells 作为组件库，其具有如下几个特点可以满足我们的需求：</p>\n    <ul>\n        <li>无状态化的组件设计</li>\n        <li>主题可定制</li>\n        <li>跨平台（PC、Mobile）</li>\n        <li>搭积木式的使用方式</li>\n        <li>内部组件库专人快速支持</li>\n    </ul>\n    <p>在 Vue 生态实现的 PC 端内部系统中，我们使用 Element-UI 作为组件库，组件数量很多，质量也很高，在 Vue 生态中是排名靠前的开源组件库，这里不多赘述。</p>\n    <h2 data-id=\"heading-8\"><b>语言</b></h2>\n    <p>针对ES6，本文不再进行过多阐述。对于 <b>TypeScript</b> 的使用是从2015年底开始，当时我们的移动端 Web 版收银台要做质量和可用性保障（详情参考之前的文章<u><a href=\"https://link.juejin.im/?target=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Ftech.meituan.com%2F%252520checkout_counter_front_end.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">《前端可用性保障实践》</a></u>），在<br> JS 层面我们遇到的最多的运行时问题就是 something\n        is <br>undefined，也就是空指针问题。另外就是由于银行卡支付过程的业务逻辑非常复杂，代码层面可控性差，扩展性也很差。这时候想到的就是使用强类型语言来管理我们的项目，强类型语言可以帮助我们做两个事情：</p>\n    <ul>\n        <li>在开发期间或编译期间进行强类型检查</li>\n        <li>使用类型系统让代码可控性、扩展性更强，协作更方便</li>\n    </ul>\n    <p>当时我们面临两个选择，一个是微软的 TypeScript ，一个是 Facebook 的 Flow。选择 TypeScript 是因为以下几点：</p>\n    <ul>\n        <li>RoadMap 清晰，方向以贴合 ECMAScript 为核心，在其之上构建类型系统，传言 ES8 也会增加类型系统</li>\n        <li>TypeScript 是 JavaScript 的超集，其作用只在开发阶段发挥，其生成的代码不包含任何类型代码，但由类型系统保障</li>\n        <li>IDE 支持极好，除了自家的 VSCode 集成度超高，用户增长飞速，TypeScript 还支持市面上几乎所有主流 IDE</li>\n        <li>社区庞大，周边工具丰富</li>\n        <li>当时已经有几个大型的开源项目在使用，例如 Angular 和 Express</li>\n        <li>研发团队活力和积极性都很高，很多开源生态均快速推进集成</li>\n    </ul>\n    <p>而不选择 Flow 的原因主要包括以下几点：</p>\n    <ul>\n        <li>当时 Flow 还是以注释为主，单文件非强制型编码，导致其类型检查系统无法发挥最大效用，也无法全面保障质量。<b>后来 Flow 也改成了 TypeScript 类似的方式，但个人认为为时已晚</b></li>\n        <li>集成度不高，IDE 支持落后</li>\n        <li>当时社区很小，除了 Facebook 自家的项目在使用，大型的开源项目用户很少</li>\n    </ul>\n    <p>TypeScript 包括 类型守护、联合类型、类型推导、严格非空检查等功能。</p>\n    <p>举个例子如图所示：</p>\n    <figure><img data-src=\"https://user-gold-cdn.xitu.io/2018/4/18/162d6158ae10dba2?imageView2/0/w/1280/h/960/ignore-error/1\" class=\"lazyload\" data-width=\"720\" data-height=\"591\" src=\"https://user-gold-cdn.xitu.io/2018/4/18/162d6158ae10dba2?imageView2/0/w/1280/h/960/ignore-error/1\"> </figure>\n    <p>参数 s 是可能为空的，在 TypeScript 里，如果不做非空检查就会报错，做了非空检查通过 TypeScript 的类型推导就能够通过。</p>\n    <p>通过使用 TypeScript 我们可以找出前端项目中 99% 的引用问题，由于我们的整个前端框架全部支持 TypeScript，有效的避免了空指针这种运行时低级错误的存在。</p>\n    <p>在 TypeScript 的使用上金融支付也是公司第一个在线上使用 TypeScript 的业务线，2015年底我们还制定了 TypeScript 代码规范。</p>\n    <h2 data-id=\"heading-9\"><b>协作解耦</b></h2>\n    <p>在日常开发当中，前后端联调经常遇到一些环境问题或者接口设计的问题，导致前后端当中一方等待另外一方，这种情况在效率上影响非常大。<b>协作解耦指的就是让前后端的研发工作不互相依赖，从而优化研发效率</b>。</p>\n    <figure><img data-src=\"https://user-gold-cdn.xitu.io/2018/4/18/162d6158c3f2fbae?imageView2/0/w/1280/h/960/ignore-error/1\" class=\"lazyload\" data-width=\"720\" data-height=\"105\" src=\"https://user-gold-cdn.xitu.io/2018/4/18/162d6158c3f2fbae?imageView2/0/w/1280/h/960/ignore-error/1\"> </figure>\n    <p>上图表示的就是协作耦合所造成的效率问题，字母 A 代表项目 A，在前后端研发过程中，前端可能因为后端问题而无法继续开发，反之亦然。</p>\n    <p>2015年的时候我还在技术工程部，那个时候组内同学一起想到了一个方法去解决这个问题。最初的想法就是<b>“我们能不能通过接口设计一方面生成提供给前端研发使用的假数据，另一方面生成后端的单测。”</b></p>\n    <p>这个想法最终落地就是 <b>Vane</b> 这个工具，现在叫 <b>Portm</b>。</p>\n    <p>它可以在一个项目的接口设计时切入，前后端使用这个平台进行接口设计，同时写入各种逻辑 Case 的输入输出，它可以直接生成三个东西：</p>\n    <ul>\n        <li>标准化的接口文档</li>\n        <li>提供给前端使用的标准化假数据</li>\n        <li>提供给后端使用的单测</li>\n    </ul>\n    <p>在项目研发过程中，前端面向假数据开发不必担心遇到后端环境问题；后端面向单测开发不必担心自己跑通了前端跑不通。当双方都能跑通的时候进行集成联调，这个时候前后端集成度会非常高，先完成的一方可以直接进入下一个项目，从部门角度来讲，大大优化了产品迭代研发的效率。</p>\n    <p>下图表示的是优化后的效果，可以看到前后端已经无需互相等待了。</p>\n    <figure><img data-src=\"https://user-gold-cdn.xitu.io/2018/4/18/162d6158c70e18bd?imageView2/0/w/1280/h/960/ignore-error/1\" class=\"lazyload\" data-width=\"720\" data-height=\"112\" src=\"https://user-gold-cdn.xitu.io/2018/4/18/162d6158c70e18bd?imageView2/0/w/1280/h/960/ignore-error/1\"> </figure>\n    <h2 data-id=\"heading-10\"><b>自动化测试</b></h2>\n    <p>针对自动化测试，美团点评开发了一款工具叫 <b>Freekite</b> ，它的作用是从用户使用角度验证界面业务流程的正确性，解决了为实现模拟用户点击而带来的诸多问题及 Case 管理的复杂度问题。</p>\n    <p>Web自动化流程测试除了可以验证 Case 的正确性以外，最重要的功能就是要有一个异常强大的 Case 管理模块。业界目前并没有理想的工具能够支撑我们的场景。“<b>Freekite</b>”<br> 在 Case 验证功能的基础上，有一个强大的可视化 Case 管理模块，支持复杂的 Case 细分。除了界面操作的细分外，可以全量 Mock <br>或部分 Mock 后端的数据响应，根据响应拆分出不同的 Case 分支。除此之外，还包含智能自动化断言功能，断言基本不需要人工参与。</p>\n    <p>Case<br> 录完以后遇到界面改版的情况不好处理，Freekite 还支持单独节点的重新录制，也就完美的解决了 Case <br>的维护问题，大幅度减少工作量优化效率。紧接着我们会在项目中增加 Freekite <br>的持续集成，在项目的每一个阶段进行流程上的自动化回归验证，业务逻辑覆盖率的问题就基本解决了。下图为 Freekite 可视化 Case <br>管理的一个应用示例。</p>\n    <figure><img data-src=\"https://user-gold-cdn.xitu.io/2018/4/18/162d6158cb830cca?imageView2/0/w/1280/h/960/ignore-error/1\" class=\"lazyload\" data-width=\"720\" data-height=\"508\" src=\"https://user-gold-cdn.xitu.io/2018/4/18/162d6158cb830cca?imageView2/0/w/1280/h/960/ignore-error/1\"> </figure>\n    <h2 data-id=\"heading-11\"><b>Hybird 体验技术</b></h2>\n    <p><b>不同的角度对用户体验有不同的分拆方法</b>，从前端角度讲，我把用户体验分为以下两个方向：</p>\n    <figure><img data-src=\"https://user-gold-cdn.xitu.io/2018/4/18/162d6158d0868319?imageView2/0/w/1280/h/960/ignore-error/1\" class=\"lazyload\" data-width=\"720\" data-height=\"579\" src=\"https://user-gold-cdn.xitu.io/2018/4/18/162d6158d0868319?imageView2/0/w/1280/h/960/ignore-error/1\"> </figure>\n    <p>前端主要在“<b>交互体验</b>” 中的<b>功能体验</b>和<b>界面体验</b>上寻求优化。</p>\n    <p><b>Titans</b> 是美团点评解决 Hybrid 功能体验的一个集团范围的解决方案，它为 Hybrid 模式的产品封装 Native 的能力供 Web 调用，其能力包括几个大的方向：</p>\n    <ul>\n        <li>基础API：版本判断、配置与环境判断、获取权限、订阅与广播等</li>\n        <li>用户信息：获取用户设备信息、风控信息、网络信息、登录及推出登录等</li>\n        <li>地理位置：获取经纬度、城市信息、定位城市信息等</li>\n        <li>基础业务功能：打开一个新的 WebView、关闭当前 WebView 打开一个新的 WebView 、关闭 WebView 等</li>\n        <li>分享：弹出分享、分享设置、分享渠道等</li>\n        <li>本地存储：存储信息到 Native ，读取信息等</li>\n        <li>多媒体：选择图片、预览、上传图片、扫描二维码等</li>\n        <li>系统提示：发送短信、获取联系人、震动、锁屏等</li>\n    </ul>\n    <p>业务可以在 Titans 的基础上构建丰富的 Hybrid 应用，既能享受无需发版即可更新迭代的优势，又可以使用 Native 的大多数功能。</p>\n    <p>在解决了功能体验后，接下来我们再说界面体验的问题。</p>\n    <p>谈到界面体验我们不得不重新讲起 Hybrid，个人认为<b>在解决功能体验的前提下</b> Hybrid 存在以下主要的优势和劣势：</p>\n    <ul>\n        <li>优势</li>\n        <li>迭代速度快，随时发版</li>\n        <li>资源节省，减少重复开发（Android & iOS）</li>\n        <li>跨平台，可浏览器运行</li>\n        <li>劣势</li>\n        <li>加载速度慢、白屏</li>\n        <li>界面体验差，交互不一致</li>\n    </ul>\n    <p>针对 Hybrid 的劣势，行业内现有的解决方案有很多，典型的有 Facebook 的 React Native 和阿里的 Weex，除去其它因素，只讲技术本身，它们有几个共同点：</p>\n    <ul>\n        <li>JS/CSS 编码或类 JS/CSS 编码</li>\n        <li>Virtual DOM</li>\n        <li>JavaScriptCore / jsc.so 解析</li>\n        <li>Native 呈现</li>\n    </ul>\n    <p>由此可见行业内解决此类问题的关键套路就是使用 Native 来呈现。</p>\n    <p>那么回到问题本身，为什么 Native 不存在此类问题而网页存在，经过研究我们发现有以下两个主要区别：</p>\n    <ol>\n        <li>Apple、Google<br> 这类大厂在界面体验上有深厚的研究，他们把界面体验所需要注意的那些点做成了开发模式的约束，放到了开发过程中，使用 IDE <br>和框架等工具去限制和引导，从而帮助开发者把界面体验做好。Web 是一种开放标准，它更为灵活，对界面体验没有严苛的限制，由开发者自由发挥</li>\n        <li>资源存放在本地和在远端的加载速度区别</li>\n    </ol>\n    <p>关于第一个区别大家可能存在一些困惑，这里我们举个例子，下图就是 Native 为什么没有白屏的根本原因：</p>\n    <figure><img data-src=\"https://user-gold-cdn.xitu.io/2018/4/18/162d6158d695e15d?imageView2/0/w/1280/h/960/ignore-error/1\" class=\"lazyload\" data-width=\"720\" data-height=\"281\" src=\"https://user-gold-cdn.xitu.io/2018/4/18/162d6158d695e15d?imageView2/0/w/1280/h/960/ignore-error/1\"> </figure>\n    <p>如图所示，Native 从视图 A 跳转到视图 B，当用户点击 A 中的按钮触发跳转到 B 的动作时，B 的代码会开始执行，只有当 B 已经加载完成后，系统才会让 A跳转到 B，在 iOS 中的生命周期是 viewWillAppear，在此之前 viewDidLoad 已经执行完毕，Android 也是相似的生命周期。再加上 Native APP 的资源是本地化的，Native APP 有更多的运算资源和系统级别优化，它可以把这个加载过程时间缩短到接近瞬间。而把界面绘制和加载代码写到 viewWillAppear\n        之前是这些厂商指导我们去这样做的，并且提供了相应的系统级别支持。这时候我们思考一个问题，如果 Native 代码将界面绘制的代码写到 viewDidAppear 中会发生什么？答案是也会出现白屏。</p>\n    <p>由此可见，并不是纯 Native 一定体验好，如果你不按照厂商的指导要求做，体验一样不好。</p>\n    <p>当我们想清楚原因后我们就开始做了一个界面体验技术，名字叫 <b>Enhanced Hybrid (增强混合)，简称 EH</b>。</p>\n    <figure><img data-src=\"https://user-gold-cdn.xitu.io/2018/4/18/162d6158d928d122?imageView2/0/w/1280/h/960/ignore-error/1\" class=\"lazyload\" data-width=\"720\" data-height=\"413\" src=\"https://user-gold-cdn.xitu.io/2018/4/18/162d6158d928d122?imageView2/0/w/1280/h/960/ignore-error/1\"> </figure>\n    <p>EH 的核心是“<b>解决 Hybrid 与 Native 体验差异的技术瓶颈</b>”。它包括两个部分，第一个部分是一个 Native SDK，有目前我们积累的所有解决体验差异技术瓶颈的功能，第二个部分是界面体验指南，也就是如何让我们的 Web 页面变的界面体验更好。</p>\n    <p>举个例子，在刚刚的白屏例子中，我们可以看到一个重要的信息，A跳转到 B 的时候，当 A 中点击执行跳转动作时第二个界面就已经开始执行了，在 B 执行完渲染部分之前系统不会执行 A 到 B 的实际界面跳转动作。这个操作在 Web 中是不可行的，我们无法在 Web 中让 B 在跳转前执行完渲染部分的代码。</p>\n    <p>那么无白屏的前提条件是什么？</p>\n    <figure><img data-src=\"https://user-gold-cdn.xitu.io/2018/4/18/162d6158e6df69fd?imageView2/0/w/1280/h/960/ignore-error/1\" class=\"lazyload\" data-width=\"384\" data-height=\"456\" src=\"https://user-gold-cdn.xitu.io/2018/4/18/162d6158e6df69fd?imageView2/0/w/1280/h/960/ignore-error/1\"> </figure>\n    <p>无白屏的前提条件是渲染完成，或者至少渲染到一个用户跳转过来有东西，不会给人突兀的感觉。</p>\n    <p>我们思考这个里面的技术瓶颈是什么？</p>\n    <ol>\n        <li>无法在跳转到 B 之前执行 B 的加载和渲染</li>\n        <li>无法获取 B 的渲染完成进度</li>\n    </ol>\n    <p>当我们想清楚这个技术瓶颈以后动手解决了这两个问题。首先，B<br> <br>的渲染完成并不是一个绝对的状态，而是由研发自己知道自己控制的，研发可以在到达这个状态的时候把状态主动通知出去。第二我们费了一些周折，在两个平台中可以通过一些技术去控制<br> A 等待一个通知，再让 B 展示出来，最终结合起来的方案如下图所示：</p>\n    <figure><img data-src=\"https://user-gold-cdn.xitu.io/2018/4/18/162d6158eef3ae87?imageView2/0/w/1280/h/960/ignore-error/1\" class=\"lazyload\" data-width=\"720\" data-height=\"693\" src=\"https://user-gold-cdn.xitu.io/2018/4/18/162d6158eef3ae87?imageView2/0/w/1280/h/960/ignore-error/1\"> </figure>\n    <p>单独使用此技术会遇到在 A 等待时间长的问题，再辅以<b>“离线化技术”</b>便可以完美解决。（离线化技术会在后面详细讲）</p>\n    <p>EH 目前所有的功能包含：</p>\n    <ul>\n        <li>Open：打开无白屏 WebView</li>\n        <li>TransPage：SPA 使用 Native 导航，让 SPA 的视图切换在不做任何特殊开发的情况下，具有和 Native 一样的交互表现，例如 iOS 中的左滑后退</li>\n        <li>TabsEntry：让 App 底部 Tab 可以动态配置，Hybrid Tab 表现效果可以和 Native 一样</li>\n        <li>Modal WebView：让 Hybrid 应用可以在当前页打开一个弹出式的 WebView ，从而在短暂操作后可以回到原来的流程当中</li>\n        <li>Config：让 Hybrid 界面高度可定制化，例如分开的上下 Bounce 设置，ScrollView 的设置，导航的设置等</li>\n        <li>ActionSheet：弹出一个 Native 的 ActionSheet 从而使其蒙层可以盖住导航</li>\n    </ul>\n    <p>目前还有更多黑科技功能在逐渐增加中，上述技术当中前三个已经成功申请专利。</p>\n    <p>很多人会存有疑问，为什么我们不使用 React Native 或者 Weex，而是自己做一个体验技术？</p>\n    <p>使用此类技术存在这么几个问题：</p>\n    <ul>\n        <li>平台化而非插件化：使用此类技术后，你的整体前端业务代码就要全部构建在这个平台之上，如果平台出现问题或者架构更新，转型成本是完全重写一套业务代码。而采用插件化方案，加了体验会更好，没有也可以降级，这样转型的成本会少很多</li>\n        <li>技术栈捆绑：每一个技术都有捆绑的一个生态，在用 RN 的时候你必须使用 React ，在用 Weex 的时候必修使用 Vue，转型成本同样高，且限制了业务选型</li>\n        <li>解决问题被动：当系统更新或技术本身出现质量问题的时候，业务的研发团队几乎没有能力去解决，只能等待技术官方研发团队或开源社区去解决，这会使我们的业务很被动</li>\n    </ul>\n    <p>EH 本身不捆绑任何技术，即使你不使用任何的框架也可以完整使用 EH 的功能。</p>\n    <p>体验 EH 功能可以在应用商店中下载 “<b>美团钱包</b>”，在首页中点击手机充值、生活缴费或“优惠” Tab 中的内容。</p>\n    <h2 data-id=\"heading-12\"><b>SSR / 构建时预渲染技术</b></h2>\n    <p><u><a href=\"https://link.juejin.im/?target=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fssr.vuejs.org%2Fzh%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">SSR(Server Side Rendering)</a></u> 这里就不多赘述了，大家都了解。构建时预渲染技术是我们特殊研发的一个技术。它的特点是从首帧速度优化角度来讲，理论上比 SSR 更快更稳定。</p>\n    <p>构建时预渲染技术主要实现方式是：在编译完成后，启动一个<br> Web Server 来运行整个网站，再开启多个无头浏览器（Headless Chrome，PhantomJS <br>等无头浏览器技术）去请求所有项目的路由，当被请求的网页渲染到第一个有意义的渲染时（FMP <u><a href=\"https://link.juejin.im/?target=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fdevelopers.google.com%2Fweb%2Fupdates%2F2017%2F06%2Fuser-centric-performance-metrics\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">参考 Google 的衡量体系</a></u>）主动抛出一个事件，该事件由无头浏览器截获，无头浏览器截获后将此时的页面\n        HTML 内容保存下来生成一个 HTML。最终发布这个 HTML。此 HTML 中包含 FMP 所需要的所有 CSS 及 DOM 结构。</p>\n    <p>事实上 SSR 和构建时预渲染技术都是为首帧速度优化服务的，首帧速度优化的核心有两点：</p>\n    <ol>\n        <li>TTFB（time to first byte) 首字节时间</li>\n        <li>在首个请求的响应当中返回首帧绘制所需要的 CSS 及 DOM 结构。</li>\n    </ol>\n    <p>为什么说构建时预渲染会比 SSR 快呢？</p>\n    <p>SSR<br> 目前前端领域主流实现方式是使用 Node 作为中间层，负责数据的获取和界面的拼装，其 Node <br>层可能后面对接着一个或多个数据来源（业务系统），它的响应速度受限于最慢的那个数据来源。而构建时预渲染劣势是不包含数据，但优势是其首帧事件完全不依赖任何数据来源，从<br> Nginx 层直接返回，响应速度更快，同时流量负载更高。</p>\n    <p>为什么说构建时预渲染会比 SSR 更稳定？</p>\n    <p>SSR 在 Nginx 层后面还需要一层 Node（典型架构）做支撑 ，而构建时预渲染从 Nginx 层直接返回，其关键链路上少了一环需要保障稳定性的服务，所以稳定性更强。</p>\n    <p>金融服务平台在 SSR 和构建时预渲染上都有很多项目在运行，在 SSR 的优化上也有丰富的经验去保障速度和稳定性，在选型上的考量主要是首帧对数据的依赖程度。</p>\n    <h2 data-id=\"heading-13\"><b>离线化技术</b></h2>\n    <p>离线化技术可以将网页的网络加载时间变为 0，在离线化的选型上美团点评内部有很多选择，我们也在不同的方向进行尝试。其中我们的选择包括：</p>\n    <ul>\n        <li>标准技术：</li>\n        <li>Application Cache：实现上各个平台各个浏览器有一些差异，即使把“无法更新的坑”踩过还是会有很多“无法离线”的坑，PASS</li>\n        <li>Service Workers：Service Workers 是团队一直跟进的技术，目前在测试已经接近正式发布，只是在 iOS 上还无法大范围使用，长期看好，暂时 PASS</li>\n        <li>借助 Native 能力的自有技术：</li>\n        <li>美团平台技术团队的类 Service Workers 的被动离线化技术</li>\n        <li>美团旅行技术团队的离线包技术</li>\n    </ul>\n    <p>留下来的只剩下两个自有技术，这两个技术的最大区别是，是否解决了首次加载问题？离线化方案的首次加载问题是一个很难的技术领域，我认为其最核心的问题是<b>何时加载</b>，提前加载会不会用户在很长一段时间内都不会用到导致浪费流量？使用包含首次加载优化的离线化技术的项目多了会不会造成加载拥塞？是不是需要分析用户行为数据去更精准的进行离线包的提前加载？这当中存在太多不确定性，不过我相信我们的技术团队一定能够想出优美的解决方案去解决这个问题。</p>\n    <p>另外基于 Native 能力的离线化技术还存在一些来自平台的限制，如 iOS 的 WKWebView 不支持请求拦截，而请求拦截是离线化的关键技术，这个原因导致在 WKWebView 上无法实现离线化。</p>\n    <p>WKWebView 的优势是：运行和渲染速度更快，与 Safari 内核一致 Apple 重点迭代跟进问题；劣势是：启动速度慢，无法拦截请求进而使用自有的离线化技术。</p>\n    <p>权衡离线化所带来的巨大优势和 WKWebView 的速度优势，我们选择继续使用 UIWebView。（曾经在 iOS 11 发布前业界一度认为 Apple 会在 iOS 11 中支持 WKWebView 的请求拦截）</p>\n    <h2 data-id=\"heading-14\"><b>字符级增量更新方案</b></h2>\n    <p>字符级增量更新方案是一个前端领域研究了很久的课题，智能支付团队近期在这一领域有了突破性进展，这个技术方案可以通过字符级增量更新减少文件传输大小，节省流量、提高页面成功率和加载速度。其中增量计算能力由美团平台的静态资源托管方案 <b>Build Service</b> 支持。主要应用在扫码付项目上。</p>\n    <p>扫码付项目是美团金融智能支付团队面向 C 端消费者推出的一款 H5 融合支付类的产品，消费者在商家消费之后，可使用多种 App 进行扫码支付，同时可对商家进行评价，支持美团、大众点评、微信、支付宝、美团钱包等多种 App，目前业务日均 PV 千万级。</p>\n    <p>字符级增量更新方案的详细介绍，请参考之前的文章<u><a href=\"https://link.juejin.im/?target=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Ftech.meituan.com%2Fqrcodepayment-static-optimize.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">美团金融扫码付静态资源加载优化实践</a></u>。</p>\n    <h2 data-id=\"heading-15\"><b>监控系统</b></h2>\n    <p>美团点评内部前端监控系统包括：</p>\n    <ul>\n        <li>Sentry：异常监控</li>\n        <li>Performance：性能监控</li>\n        <li>CAT：网络监控</li>\n    </ul>\n    <p>在技术栈统一前，我们团队这三个监控工具在同时使用，然而监控系统上前端和后端不同的是前端对代码尺寸有要求，接入的监控系统多会对项目的加载速度有影响。综合多方面因素，我们在本次技术栈统一中选择了CAT来作为我们主要的监控系统。主要是它包含前两者的功能。</p>\n    <p>CAT（详情可以参考<u><a href=\"https://link.juejin.im/?target=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Ftech.meituan.com%2FCAT_in_Depth_Java_Application_Monitoring.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">《深度剖析开源分布式监控CAT》</a></u><br> <br>一文）是一个美团点评的全端基础监控组件，在后端为各业务线提供全面的监控服务和决策支持，提供系统的性能指标、健康状况、基础告警等功能。在前端覆盖美团点评所有APP，提供近实时的多维数据分析、立体式监控、告警等功能。提供了近实时的多维数据分析，立体式监控功能。</p>\n    <p>CAT很大的优势是它是一个实时系统，从数据生成到服务端处理结束是秒级别，秒级定义是 48 分钟 40 秒时基本上能看到 48 分钟 38 秒的数据，整体报表的统计粒度是分钟级；第二个优势，数据是接近全量统计，目前大约5%的高QPS 项目是采样统计。</p>\n    <h2 data-id=\"heading-16\"><b>协议</b></h2>\n    <p>目前我们使用的协议均为 HTTP/2，支付是金融最早使用 HTTP/2 的部门，由于支付业务的特殊性，在一开始我们就是使用的 HTTPS ，进而很早就使用上了 SPDY。</p>\n    <p>在15年<br> HTTP/2 标准化的时候我们直接更新集群使用上了 HTTP/2，在 SPDY 和 HTTP/2 <br>这种具有多路复用功能的协议上我们的前端架构全部做的都是按需加载的方式，大大减小了由“减少请求数” 所带来的流量冗余。最大化利用了 HTTP <br>本身的缓存机制，通过减小客户端大小的方式大大提升了网络加载性能。</p>\n    <h2 data-id=\"heading-17\"><b>安全方面</b></h2>\n    <p>安全方面在前端我们使用：</p>\n    <ul>\n        <li>HSTS： 防 SSLStrip 攻击的标准解决方案</li>\n        <li>CSP： 防跨站脚本攻击的标准解决方案</li>\n    </ul>\n    <p>同时在核心接口上我们有一个自研的网页请求签名方案，来在一定程度上保障请求是从我们的客户端中正常发出的。</p>\n    <p><b>总结</b></p>\n    <p>以上是对金融平台前端技术体系的介绍和个人的一些思考，最后说一下采用此技术体系所达到的一些效果。</p>\n    <h2 data-id=\"heading-18\"><b>效率</b></h2>\n    <ul>\n        <li>由于 Vix 和设计部门统一标准，在界面构建过程中可以减少至少 <b>80%</b> 的时间，而这部分恰巧占整体研发时间的 <b>60%</b> 以上</li>\n        <li>联调部分我们有 Portm 进行协作解耦，可以减少联调时间一半以上，一般一个项目联调部分占整体研发时间的 20% 左右</li>\n        <li>另外我们还有非常强大的脚手架 <u><a href=\"https://link.juejin.im/?target=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fgithub.com%2Fysmood%2Ffebone\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">fe-bone</a></u> ，它可以帮我们快速创建项目，节省创建项目时间 95% 以上。由于这个部分业务属性较强，未在统一技术体系中提及</li>\n    </ul>\n    <p>使用这几项技术的一个直接感受是人效大幅提升，一个前端同学可以并行 2～4 个项目，同时对接 4～10 个后端研发。</p>\n    <h2 data-id=\"heading-19\"><b>体验</b></h2>\n    <p>在使用 Titans 解决功能体验，使用 EH 解决界面体验的情况下，加上构建时预渲染和离线化技术的加持，我们可以做出<b>专业前端都看不出来是 Hybrid 的高体验 Hybrid 应用</b>。</p>\n    <h2 data-id=\"heading-20\"><b>质量</b></h2>\n    <p>在质量方面我们有：</p>\n    <ul>\n        <li>Lint 工具保障代码风格和质量</li>\n        <li>TypeScript 做类型检查及类型推导</li>\n        <li>Mocha 保障基础工具可用性</li>\n        <li>Freekite 保障业务流程可用性</li>\n        <li>CAT 做异常监控</li>\n    </ul>\n    <p>在整个质量体系架构的演进过程中，其实不只是这些工具来保障质量和可用性，还会有很多流程规范去保障，在可用性保障上感兴趣可以参考这篇文章：<u><a href=\"https://link.juejin.im/?target=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Ftech.meituan.com%2F%252520checkout_counter_front_end.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">《前端可用性保障实践》</a></u>。</p>\n    <p>在这些实践中我们很好的保障了产品的稳定运行。同时也欢迎大家在前端可用性保障上多探讨。</p>\n    <p><b>作者简介</b></p>\n    <p>禹霖，美团点评技术专家，目前负责金融平台钱包、支付、闪付前端团队。</p>\n    <p><b>招聘信息</b></p>\n    <p>金融平台的技术体系还是在不断快速演进中，而前端领域也是一个快速演进的领域，我们需要更多的优秀人才加入，感兴趣的小伙伴可以将简历发送到我所在的钱包团队，邮箱：chenyulin02[at]<a href=\"https://link.juejin.im/?target=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttp%253A%2F%2Fmeituan.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">meituan.com</a>，或将简历投送到金融平台（详见：<u><a href=\"https://link.juejin.im/?target=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fjob.meituan.com%2Fjob-list%253Fcity%253D001001%2526department%253D7%2526jobFamily%253D26%2526jobFamilyGroup%253D201%2526pageNo%253D1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">美团点评招聘官网</a></u>）。同时团队提供大量\n        Web 前端、Android、iOS、Java 实习机会，寻找实习机会的同学也可以将简历发到我的邮箱中。</p>\n    <p><b>也许你还想看：</b></p>\n    <p><u><a href=\"https://link.juejin.im/?target=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttp%253A%2F%2Fmp.weixin.qq.com%2Fs%253F__biz%253DMjM5NjQ5MTI5OA%253D%253D%2526mid%253D2651747630%2526idx%253D1%2526sn%253Ddfb85acb20fbfcb4a8908917357be662%2526chksm%253Dbd12ac638a652575eb5e542e8159b903b8061ceeb32434ae50e2631a039eddc01e01b2837b95%2526scene%253D21%2523wechat_redirect\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">用Vue.js开发微信小程序：开源框架mpvue解析</a></u>        </p>\n    <p><u><a href=\"https://link.juejin.im/?target=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttp%253A%2F%2Fmp.weixin.qq.com%2Fs%253F__biz%253DMjM5NjQ5MTI5OA%253D%253D%2526mid%253D2651746979%2526idx%253D1%2526sn%253Dfd8e5b29cdb35a795c9a93c16e905d83%2526chksm%253Dbd12abee8a6522f82e5eee510e57a48839aabfe6f4cc46f7cece72bdedc81cfaa036f8a63039%2526scene%253D21%2523wechat_redirect\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">美团点评境外度假团队前端项目开发实践总结</a></u>        </p>\n    <p><u><a href=\"https://link.juejin.im/?target=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttp%253A%2F%2Fmp.weixin.qq.com%2Fs%253F__biz%253DMjM5NjQ5MTI5OA%253D%253D%2526mid%253D2651747596%2526idx%253D2%2526sn%253D6e08a25d203c3e05461b3c1c5f238e82%2526chksm%253Dbd12ac418a65255743ac6e7758b65f8d5369fde0bb902cee62bbe627f6a4bb307edf76287477%2526scene%253D21%2523wechat_redirect\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Android动态日志系统Holmes</a></u>        </p>\n    <p><u><a href=\"https://link.juejin.im/?target=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttp%253A%2F%2Fmp.weixin.qq.com%2Fs%253F__biz%253DMjM5NjQ5MTI5OA%253D%253D%2526mid%253D2651747236%2526idx%253D2%2526sn%253D38bfcea02e0e1818c58362636b417e09%2526chksm%253Dbd12aae98a6523ff5e34ee5e073e0a35e08e0295dffb4062142570ca4045154b0d14284cc9ff%2526scene%253D21%2523wechat_redirect\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Shield：支撑美团点评品类最丰富业务的移动端模块化框架开源了</a></u>        </p>\n    <p><a href=\"https://link.juejin.im/?target=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttp%253A%2F%2Fweixin.qq.com%2Fr%2F9HVSSg3EOFBHrUkp9yDm\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">weixin.qq.com/r/9HVSSg3EO…</a> (二维码自动识别)</p>', '![](https://user-gold-cdn.xitu.io/2018/4/18/162d61588fe59c95?imageView2/0/w/1280/h/960/ignore-error/1)\n\n**背景**\n\n随着美团点评金融业务的高速发展，前端研发数量从2015 年的 1 个人，扩张到了现在横跨北上两地 8 个事业部的将近 150 人。业务新，团队新，前端领域框架技术又层出不穷，各个业务的研发团队在技术选择上没有明确的指导意见，致使业务与业务之间的技术差异越来越大，在技术工具研发上无法共建，在资源调度上成本也很高。\n\n2017年下半年，金融平台发起了技术栈统一行动，行动分为后端、iOS、Android及前端等四个方向，在前端方向我作为组织者和参与者与金融平台8 个事业部的前端技术代表进行讨论。 通过对各方意见进行归纳整理，结合各团队的情况，金融平台对于技术栈的选型达成了共识。本文将介绍美团点评金融平台前端的技术选型以及背后的思考。先从一些基本原则讲起。\n\n**招构建技术体系的基本原则**\n\n**\n\n![](https://user-gold-cdn.xitu.io/2018/4/18/162d61588fca4083?imageView2/0/w/1280/h/960/ignore-error/1)\n\n**\n\n**业务出发**\n--------\n\n1.  选型要针对业务形态特点，注重业务场景匹配度\n2.  具有一定业务前瞻性（中期或中短期以避免过度设计，短期、中期、长期与迭代速度强相关）\n\n金融业务的移动端项目占比超过 70%，尤其是 Hybrid 项目，团队在整个移动端生态的设计上投入了大量的精力，例如 Vue 的选择、EH 的设计、组件库 Vix 的设计等。\n\n同时由于业务的金融属性，对于可用性的要求非常高。在可用性保障上我们还会有一些侧重，例如 TypeScript 的使用，自动化流程测试框架 Freekite 的使用等。\n\n**团队出发**\n--------\n\n1.  考虑团队规模，成员技术特点和偏好\n2.  考虑现有项目和技术迁移成本\n\n金融大多数团队都处于初创时期，因此团队历史包袱相对较少，接受新鲜事物的能力强，但快速搭建团队中也会对技术栈有上手成本的要求。在整个技术体系的搭建当中，我们会优先考虑那些新的、上手成本低的技术。\n\n**以简驭繁**\n--------\n\n我们主张使用简单的技术手段解决复杂的问题，而不是用复杂的技术手段解决简单的问题，例如  \nHybrid 体验问题的解决，常规的有 RN、Weex 等方案，在业界有丰富的实践，但我们也会设计实现更简单的解决方案  \nEH，让问题的解决变得更聚焦于问题的本质。在首屏渲染速度优化方案上的选择也是一样，业界有很好的 SSR 技术，但我们也会实践研发**构建时预渲染**技术，让 TTFB（首字节时间）更快，让系统流量负载更高，同时减少关键环节，让整个系统可用性更强。\n\n**标准化**\n-------\n\n标准化指的就是尽可能让上下游衔接形成标准，并在标准下构建效率和质量工具。\n\n例如在组件库 Vix 的研发上，我们与 UED 形成一致的、强同步的标准，从而大大减少界面搭建的时间消耗。后面会详细介绍。\n\n**自动化**\n-------\n\n用技术去连接技术，用技术去简化步骤，解决某个工具到使用者的“最后一公里”问题。\n\n例如我们使用的自动化流程测试工具 **Freekite**，不用一行代码即可以完成复杂的分支逻辑自动化测试与持续集成。我们使用的联调平台 **Portm** 可以将接口设计和前端 Mock 、后端单测、接口文档有机的结合起来，将前后端的研发进度解耦，从而大大提升研发效率。\n\n**现有复用**\n--------\n\n顾名思义就是选型上尽量使用公司已有的系统和工具，从而更好的与团队、业务结合。\n\n例如全平台监控工具 **CAT**，业务埋点工具**灵犀**等等。\n\n下面来看看我们技术体系的细节。\n\n**金融平台Web前端技术体系**\n\n![](https://user-gold-cdn.xitu.io/2018/4/18/162d61588fe2fd76?imageView2/0/w/1280/h/960/ignore-error/1)\n\n我们将从开发阶段开始介绍，从视图层、语言层、协作层，再到质量保障工具、体验优化工具、安全技术等。接下来过渡到编译部署阶段，讲一讲编译部署和上线工具。然后是线上监控和埋点工具。最后介绍一些各个团队正在探索和实践当中的技术。\n\n**视图&组件框架**\n-----------\n\n在移动端使用 Vue 生态，在桌面版上我们使用 React 生态 或者 Vue 生态。\n\nVue 的使用主要考虑以下几点：\n\n*   体积小，复杂度低\n*   业务上移动端项目占比 70% 以上，Vue 的体积小，网络性能角度相比 React 更适合移动端\n*   移动端一般巨型项目很少，从代码结构上来讲，使用 Vue 实现更符合我们的场景复杂度，React 更适合大型相对更复杂的 SPA\n*   上手成本和迁移成本低\n*   Vue 的学习和上手成本相对更低，团队成员对于 Vue 的认可度和热情也比较高\n*   组件内双向绑定、数据依赖收集\n*   组件内支持双向绑定，更方便的去进行组件内的数据响应与交互\n*   独有的数据依赖收集模式使其默认的数据响应和渲染效率都要比 React 高一些\n\nReact 的使用主要考虑以下原因：\n\n*   有一部分现有后台项目采用 React 技术栈，迭代和维护较少，老的项目如果没有足够的迁移价值则不额外投入资源\n*   保留很小的一部分 React 技术生态也可以一定程度上保持一些技术多样性\n\n**组件库**\n-------\n\n组件库是前端领域一个重要的技术单元，为效率、质量、体验服务。\n\n效率是为了能够抽象业务研发中业务组件的共同点去避免重复劳动；质量是如果一个组件经过了测试和质量迭代，那么正确的使用不应该出现质量问题；体验方面组件库可以去统一交互的体验，让组件的表现更一致。\n\n上述三点中，组件库贡献最大的是效率。\n\n谈到组件库如何对效率做贡献，首先想到的是什么样的组件库才能够尽可能的提升我们的研发效率，我认为这里我们需要注意的一点是**“控制变量”**，因为变化产生了额外的工作量和时间成本，如果这个产品和上个产品完全一样，我们直接复制一份就好了，没必要开发。在我们的前端业务研发当中，变量是什么？是交互和视觉设计，每个产品之间有不同，也有相同。我们控制变量就应该去控制设计。因此我们与金融  \nUED（设计部门） 沟通制定了一个视觉组件**标准**，共同创建了视觉组件库：Vix。\n\nVix 是一个移动端组件库，其特点是完全遵守与金融 UED 制定的视觉组件标准并保持同步，在 UED 侧有完善的新组件设计提审及审核流程，在业务前端研发侧有强同步的约束。\n\nVix 的结构分为基础组件、复杂组件和业务组件三层，基础组件例如输入框、按钮等；复杂组件包括组合搜索、日期选择等；业务组件例如支付密码输入框、账单、账单详情等。\n\n再上升一层则是一些包含后端服务的前后端组件，我们称为“微服务”，是一种更高层次的业务服务抽象，在更高的维度优化效率和服务体验一致性，例如支付密码验证服务，找回支付密码服务等。Vix 包含的是前三层，其结构如下图：\n\n![](https://user-gold-cdn.xitu.io/2018/4/18/162d61588fd505d6?imageView2/0/w/1280/h/960/ignore-error/1)\n\n在以往的实践过程当中，C端业务使用开源组件库会和设计有很大差异，需要做大量的改造工作才能使用，然而可能还要为各种各样改造过程中所产生的问题负责，同时开源组件库的业务不相关性限制了业务产品的设计或实现。在Vix 中，由于标准统一，我们的研发效率大大提升，同时质量也更加可控。\n\n大多数移动端产品研发过程中至少 40% 以上的精力是在做界面的绘制。有了 Vix 后我们达到了：\n\n*   效率大大提升：在界面绘制上相比没有组件库至少能够减少 90% 的工作量\n*   直接组装无需改动：一个新产品没有新组件出现的情况下，我们甚至可以使用交互稿直接开发而不需要等待视觉稿，因为视觉稿即使画出来也是使用视觉组件库去实现的样子，极大的减少了项目研发的时间成本\n*   标准更新仅需升级版本：当视觉标准更新的时候例如列表页两边的边距减小了，各个业务线的产品只需要重新发布一下就能够展示成最新的标准，极大的减少了标准更新时所需的时间成本\n\n![](https://user-gold-cdn.xitu.io/2018/4/18/162d6158abe1a856?imageView2/0/w/1280/h/960/ignore-error/1)\n\nPC 端面向用户和商户的大多都是较为独立的产品，标准化的意义并不大，前端在 PC 端的研发精力主要投入在内部系统上，在内部系统前端研发上有四个特点：\n\n*   无产品，要求高：几乎没有产品经理跟进，以完成功能需求为主，但功能流程一定要完善，最好能支持手机端使用\n*   无设计：几乎没有设计跟进，面对内部用户设计收益不高\n*   无测试：几乎没有测试跟进，收益不高，功能验证通过即可\n*   要快：大多数是配合用户端产品的管理系统迭代，也可能是新系统的搭建，对研发速度都有要求，往往这方面的估时较短\n\n因此在内部系统的研发上有四点要求：\n\n*   组件设计合理，组件数量大而全，最好支持移动端使用\n*   组件库本身要有不错的设计，用户量虽少，但活跃度超高，界面体验需要保障\n*   组件库本身的质量要高，要从工具层面保障质量减少出错\n*   组件库要能够快速拼装出功能\n\nPC 端组件库由于设计没有要求，不存在来自设计的“变量”，所以选择很多。\n\nReact Cells 也是美团点评内部的一个组件库，金融在使用 React 生态的后台系统研发中使用 React Cells 作为组件库，其具有如下几个特点可以满足我们的需求：\n\n*   无状态化的组件设计\n*   主题可定制\n*   跨平台（PC、Mobile）\n*   搭积木式的使用方式\n*   内部组件库专人快速支持\n\n在 Vue 生态实现的 PC 端内部系统中，我们使用 Element-UI 作为组件库，组件数量很多，质量也很高，在 Vue 生态中是排名靠前的开源组件库，这里不多赘述。\n\n**语言**\n------\n\n针对ES6，本文不再进行过多阐述。对于 **TypeScript** 的使用是从2015年底开始，当时我们的移动端 Web 版收银台要做质量和可用性保障（详情参考之前的文章[《前端可用性保障实践》](https://link.juejin.im/?target=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Ftech.meituan.com%2F%252520checkout_counter_front_end.html)），在  \nJS 层面我们遇到的最多的运行时问题就是 something is  \nundefined，也就是空指针问题。另外就是由于银行卡支付过程的业务逻辑非常复杂，代码层面可控性差，扩展性也很差。这时候想到的就是使用强类型语言来管理我们的项目，强类型语言可以帮助我们做两个事情：\n\n*   在开发期间或编译期间进行强类型检查\n*   使用类型系统让代码可控性、扩展性更强，协作更方便\n\n当时我们面临两个选择，一个是微软的 TypeScript ，一个是 Facebook 的 Flow。选择 TypeScript 是因为以下几点：\n\n*   RoadMap 清晰，方向以贴合 ECMAScript 为核心，在其之上构建类型系统，传言 ES8 也会增加类型系统\n*   TypeScript 是 JavaScript 的超集，其作用只在开发阶段发挥，其生成的代码不包含任何类型代码，但由类型系统保障\n*   IDE 支持极好，除了自家的 VSCode 集成度超高，用户增长飞速，TypeScript 还支持市面上几乎所有主流 IDE\n*   社区庞大，周边工具丰富\n*   当时已经有几个大型的开源项目在使用，例如 Angular 和 Express\n*   研发团队活力和积极性都很高，很多开源生态均快速推进集成\n\n而不选择 Flow 的原因主要包括以下几点：\n\n*   当时 Flow 还是以注释为主，单文件非强制型编码，导致其类型检查系统无法发挥最大效用，也无法全面保障质量。**后来 Flow 也改成了 TypeScript 类似的方式，但个人认为为时已晚**\n*   集成度不高，IDE 支持落后\n*   当时社区很小，除了 Facebook 自家的项目在使用，大型的开源项目用户很少\n\nTypeScript 包括 类型守护、联合类型、类型推导、严格非空检查等功能。\n\n举个例子如图所示：\n\n![](https://user-gold-cdn.xitu.io/2018/4/18/162d6158ae10dba2?imageView2/0/w/1280/h/960/ignore-error/1)\n\n参数 s 是可能为空的，在 TypeScript 里，如果不做非空检查就会报错，做了非空检查通过 TypeScript 的类型推导就能够通过。\n\n通过使用 TypeScript 我们可以找出前端项目中 99% 的引用问题，由于我们的整个前端框架全部支持 TypeScript，有效的避免了空指针这种运行时低级错误的存在。\n\n在 TypeScript 的使用上金融支付也是公司第一个在线上使用 TypeScript 的业务线，2015年底我们还制定了 TypeScript 代码规范。\n\n**协作解耦**\n--------\n\n在日常开发当中，前后端联调经常遇到一些环境问题或者接口设计的问题，导致前后端当中一方等待另外一方，这种情况在效率上影响非常大。**协作解耦指的就是让前后端的研发工作不互相依赖，从而优化研发效率**。\n\n![](https://user-gold-cdn.xitu.io/2018/4/18/162d6158c3f2fbae?imageView2/0/w/1280/h/960/ignore-error/1)\n\n上图表示的就是协作耦合所造成的效率问题，字母 A 代表项目 A，在前后端研发过程中，前端可能因为后端问题而无法继续开发，反之亦然。\n\n2015年的时候我还在技术工程部，那个时候组内同学一起想到了一个方法去解决这个问题。最初的想法就是**“我们能不能通过接口设计一方面生成提供给前端研发使用的假数据，另一方面生成后端的单测。”**\n\n这个想法最终落地就是 **Vane** 这个工具，现在叫 **Portm**。\n\n它可以在一个项目的接口设计时切入，前后端使用这个平台进行接口设计，同时写入各种逻辑 Case 的输入输出，它可以直接生成三个东西：\n\n*   标准化的接口文档\n*   提供给前端使用的标准化假数据\n*   提供给后端使用的单测\n\n在项目研发过程中，前端面向假数据开发不必担心遇到后端环境问题；后端面向单测开发不必担心自己跑通了前端跑不通。当双方都能跑通的时候进行集成联调，这个时候前后端集成度会非常高，先完成的一方可以直接进入下一个项目，从部门角度来讲，大大优化了产品迭代研发的效率。\n\n下图表示的是优化后的效果，可以看到前后端已经无需互相等待了。\n\n![](https://user-gold-cdn.xitu.io/2018/4/18/162d6158c70e18bd?imageView2/0/w/1280/h/960/ignore-error/1)\n\n**自动化测试**\n---------\n\n针对自动化测试，美团点评开发了一款工具叫 **Freekite** ，它的作用是从用户使用角度验证界面业务流程的正确性，解决了为实现模拟用户点击而带来的诸多问题及 Case 管理的复杂度问题。\n\nWeb自动化流程测试除了可以验证 Case 的正确性以外，最重要的功能就是要有一个异常强大的 Case 管理模块。业界目前并没有理想的工具能够支撑我们的场景。“**Freekite**”  \n在 Case 验证功能的基础上，有一个强大的可视化 Case 管理模块，支持复杂的 Case 细分。除了界面操作的细分外，可以全量 Mock  \n或部分 Mock 后端的数据响应，根据响应拆分出不同的 Case 分支。除此之外，还包含智能自动化断言功能，断言基本不需要人工参与。\n\nCase  \n录完以后遇到界面改版的情况不好处理，Freekite 还支持单独节点的重新录制，也就完美的解决了 Case  \n的维护问题，大幅度减少工作量优化效率。紧接着我们会在项目中增加 Freekite  \n的持续集成，在项目的每一个阶段进行流程上的自动化回归验证，业务逻辑覆盖率的问题就基本解决了。下图为 Freekite 可视化 Case  \n管理的一个应用示例。\n\n![](https://user-gold-cdn.xitu.io/2018/4/18/162d6158cb830cca?imageView2/0/w/1280/h/960/ignore-error/1)\n\n**Hybird 体验技术**\n---------------\n\n**不同的角度对用户体验有不同的分拆方法**，从前端角度讲，我把用户体验分为以下两个方向：\n\n![](https://user-gold-cdn.xitu.io/2018/4/18/162d6158d0868319?imageView2/0/w/1280/h/960/ignore-error/1)\n\n前端主要在“**交互体验**” 中的**功能体验**和**界面体验**上寻求优化。\n\n**Titans** 是美团点评解决 Hybrid 功能体验的一个集团范围的解决方案，它为 Hybrid 模式的产品封装 Native 的能力供 Web 调用，其能力包括几个大的方向：\n\n*   基础API：版本判断、配置与环境判断、获取权限、订阅与广播等\n*   用户信息：获取用户设备信息、风控信息、网络信息、登录及推出登录等\n*   地理位置：获取经纬度、城市信息、定位城市信息等\n*   基础业务功能：打开一个新的 WebView、关闭当前 WebView 打开一个新的 WebView 、关闭 WebView 等\n*   分享：弹出分享、分享设置、分享渠道等\n*   本地存储：存储信息到 Native ，读取信息等\n*   多媒体：选择图片、预览、上传图片、扫描二维码等\n*   系统提示：发送短信、获取联系人、震动、锁屏等\n\n业务可以在 Titans 的基础上构建丰富的 Hybrid 应用，既能享受无需发版即可更新迭代的优势，又可以使用 Native 的大多数功能。\n\n在解决了功能体验后，接下来我们再说界面体验的问题。\n\n谈到界面体验我们不得不重新讲起 Hybrid，个人认为**在解决功能体验的前提下** Hybrid 存在以下主要的优势和劣势：\n\n*   优势\n*   迭代速度快，随时发版\n*   资源节省，减少重复开发（Android & iOS）\n*   跨平台，可浏览器运行\n*   劣势\n*   加载速度慢、白屏\n*   界面体验差，交互不一致\n\n针对 Hybrid 的劣势，行业内现有的解决方案有很多，典型的有 Facebook 的 React Native 和阿里的 Weex，除去其它因素，只讲技术本身，它们有几个共同点：\n\n*   JS/CSS 编码或类 JS/CSS 编码\n*   Virtual DOM\n*   JavaScriptCore / jsc.so 解析\n*   Native 呈现\n\n由此可见行业内解决此类问题的关键套路就是使用 Native 来呈现。\n\n那么回到问题本身，为什么 Native 不存在此类问题而网页存在，经过研究我们发现有以下两个主要区别：\n\n1.  Apple、Google  \n    这类大厂在界面体验上有深厚的研究，他们把界面体验所需要注意的那些点做成了开发模式的约束，放到了开发过程中，使用 IDE  \n    和框架等工具去限制和引导，从而帮助开发者把界面体验做好。Web 是一种开放标准，它更为灵活，对界面体验没有严苛的限制，由开发者自由发挥\n2.  资源存放在本地和在远端的加载速度区别\n\n关于第一个区别大家可能存在一些困惑，这里我们举个例子，下图就是 Native 为什么没有白屏的根本原因：\n\n![](https://user-gold-cdn.xitu.io/2018/4/18/162d6158d695e15d?imageView2/0/w/1280/h/960/ignore-error/1)\n\n如图所示，Native 从视图 A 跳转到视图 B，当用户点击 A 中的按钮触发跳转到 B 的动作时，B 的代码会开始执行，只有当 B 已经加载完成后，系统才会让 A跳转到 B，在 iOS 中的生命周期是 viewWillAppear，在此之前 viewDidLoad 已经执行完毕，Android 也是相似的生命周期。再加上 Native APP 的资源是本地化的，Native APP 有更多的运算资源和系统级别优化，它可以把这个加载过程时间缩短到接近瞬间。而把界面绘制和加载代码写到 viewWillAppear 之前是这些厂商指导我们去这样做的，并且提供了相应的系统级别支持。这时候我们思考一个问题，如果 Native 代码将界面绘制的代码写到 viewDidAppear 中会发生什么？答案是也会出现白屏。\n\n由此可见，并不是纯 Native 一定体验好，如果你不按照厂商的指导要求做，体验一样不好。\n\n当我们想清楚原因后我们就开始做了一个界面体验技术，名字叫 **Enhanced Hybrid (增强混合)，简称 EH**。\n\n![](https://user-gold-cdn.xitu.io/2018/4/18/162d6158d928d122?imageView2/0/w/1280/h/960/ignore-error/1)\n\nEH 的核心是“**解决 Hybrid 与 Native 体验差异的技术瓶颈**”。它包括两个部分，第一个部分是一个 Native SDK，有目前我们积累的所有解决体验差异技术瓶颈的功能，第二个部分是界面体验指南，也就是如何让我们的 Web 页面变的界面体验更好。\n\n举个例子，在刚刚的白屏例子中，我们可以看到一个重要的信息，A跳转到 B 的时候，当 A 中点击执行跳转动作时第二个界面就已经开始执行了，在 B 执行完渲染部分之前系统不会执行 A 到 B 的实际界面跳转动作。这个操作在 Web 中是不可行的，我们无法在 Web 中让 B 在跳转前执行完渲染部分的代码。\n\n那么无白屏的前提条件是什么？\n\n![](https://user-gold-cdn.xitu.io/2018/4/18/162d6158e6df69fd?imageView2/0/w/1280/h/960/ignore-error/1)\n\n无白屏的前提条件是渲染完成，或者至少渲染到一个用户跳转过来有东西，不会给人突兀的感觉。\n\n我们思考这个里面的技术瓶颈是什么？\n\n1.  无法在跳转到 B 之前执行 B 的加载和渲染\n2.  无法获取 B 的渲染完成进度\n\n当我们想清楚这个技术瓶颈以后动手解决了这两个问题。首先，B  \n  \n的渲染完成并不是一个绝对的状态，而是由研发自己知道自己控制的，研发可以在到达这个状态的时候把状态主动通知出去。第二我们费了一些周折，在两个平台中可以通过一些技术去控制  \nA 等待一个通知，再让 B 展示出来，最终结合起来的方案如下图所示：\n\n![](https://user-gold-cdn.xitu.io/2018/4/18/162d6158eef3ae87?imageView2/0/w/1280/h/960/ignore-error/1)\n\n单独使用此技术会遇到在 A 等待时间长的问题，再辅以**“离线化技术”**便可以完美解决。（离线化技术会在后面详细讲）\n\nEH 目前所有的功能包含：\n\n*   Open：打开无白屏 WebView\n*   TransPage：SPA 使用 Native 导航，让 SPA 的视图切换在不做任何特殊开发的情况下，具有和 Native 一样的交互表现，例如 iOS 中的左滑后退\n*   TabsEntry：让 App 底部 Tab 可以动态配置，Hybrid Tab 表现效果可以和 Native 一样\n*   Modal WebView：让 Hybrid 应用可以在当前页打开一个弹出式的 WebView ，从而在短暂操作后可以回到原来的流程当中\n*   Config：让 Hybrid 界面高度可定制化，例如分开的上下 Bounce 设置，ScrollView 的设置，导航的设置等\n*   ActionSheet：弹出一个 Native 的 ActionSheet 从而使其蒙层可以盖住导航\n\n目前还有更多黑科技功能在逐渐增加中，上述技术当中前三个已经成功申请专利。\n\n很多人会存有疑问，为什么我们不使用 React Native 或者 Weex，而是自己做一个体验技术？\n\n使用此类技术存在这么几个问题：\n\n*   平台化而非插件化：使用此类技术后，你的整体前端业务代码就要全部构建在这个平台之上，如果平台出现问题或者架构更新，转型成本是完全重写一套业务代码。而采用插件化方案，加了体验会更好，没有也可以降级，这样转型的成本会少很多\n*   技术栈捆绑：每一个技术都有捆绑的一个生态，在用 RN 的时候你必须使用 React ，在用 Weex 的时候必修使用 Vue，转型成本同样高，且限制了业务选型\n*   解决问题被动：当系统更新或技术本身出现质量问题的时候，业务的研发团队几乎没有能力去解决，只能等待技术官方研发团队或开源社区去解决，这会使我们的业务很被动\n\nEH 本身不捆绑任何技术，即使你不使用任何的框架也可以完整使用 EH 的功能。\n\n体验 EH 功能可以在应用商店中下载 “**美团钱包**”，在首页中点击手机充值、生活缴费或“优惠” Tab 中的内容。\n\n**SSR / 构建时预渲染技术**\n------------------\n\n[SSR(Server Side Rendering)](https://link.juejin.im/?target=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fssr.vuejs.org%2Fzh%2F) 这里就不多赘述了，大家都了解。构建时预渲染技术是我们特殊研发的一个技术。它的特点是从首帧速度优化角度来讲，理论上比 SSR 更快更稳定。\n\n构建时预渲染技术主要实现方式是：在编译完成后，启动一个  \nWeb Server 来运行整个网站，再开启多个无头浏览器（Headless Chrome，PhantomJS  \n等无头浏览器技术）去请求所有项目的路由，当被请求的网页渲染到第一个有意义的渲染时（FMP [参考 Google 的衡量体系](https://link.juejin.im/?target=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fdevelopers.google.com%2Fweb%2Fupdates%2F2017%2F06%2Fuser-centric-performance-metrics)）主动抛出一个事件，该事件由无头浏览器截获，无头浏览器截获后将此时的页面 HTML 内容保存下来生成一个 HTML。最终发布这个 HTML。此 HTML 中包含 FMP 所需要的所有 CSS 及 DOM 结构。\n\n事实上 SSR 和构建时预渲染技术都是为首帧速度优化服务的，首帧速度优化的核心有两点：\n\n1.  TTFB（time to first byte) 首字节时间\n2.  在首个请求的响应当中返回首帧绘制所需要的 CSS 及 DOM 结构。\n\n为什么说构建时预渲染会比 SSR 快呢？\n\nSSR  \n目前前端领域主流实现方式是使用 Node 作为中间层，负责数据的获取和界面的拼装，其 Node  \n层可能后面对接着一个或多个数据来源（业务系统），它的响应速度受限于最慢的那个数据来源。而构建时预渲染劣势是不包含数据，但优势是其首帧事件完全不依赖任何数据来源，从  \nNginx 层直接返回，响应速度更快，同时流量负载更高。\n\n为什么说构建时预渲染会比 SSR 更稳定？\n\nSSR 在 Nginx 层后面还需要一层 Node（典型架构）做支撑 ，而构建时预渲染从 Nginx 层直接返回，其关键链路上少了一环需要保障稳定性的服务，所以稳定性更强。\n\n金融服务平台在 SSR 和构建时预渲染上都有很多项目在运行，在 SSR 的优化上也有丰富的经验去保障速度和稳定性，在选型上的考量主要是首帧对数据的依赖程度。\n\n**离线化技术**\n---------\n\n离线化技术可以将网页的网络加载时间变为 0，在离线化的选型上美团点评内部有很多选择，我们也在不同的方向进行尝试。其中我们的选择包括：\n\n*   标准技术：\n*   Application Cache：实现上各个平台各个浏览器有一些差异，即使把“无法更新的坑”踩过还是会有很多“无法离线”的坑，PASS\n*   Service Workers：Service Workers 是团队一直跟进的技术，目前在测试已经接近正式发布，只是在 iOS 上还无法大范围使用，长期看好，暂时 PASS\n*   借助 Native 能力的自有技术：\n*   美团平台技术团队的类 Service Workers 的被动离线化技术\n*   美团旅行技术团队的离线包技术\n\n留下来的只剩下两个自有技术，这两个技术的最大区别是，是否解决了首次加载问题？离线化方案的首次加载问题是一个很难的技术领域，我认为其最核心的问题是**何时加载**，提前加载会不会用户在很长一段时间内都不会用到导致浪费流量？使用包含首次加载优化的离线化技术的项目多了会不会造成加载拥塞？是不是需要分析用户行为数据去更精准的进行离线包的提前加载？这当中存在太多不确定性，不过我相信我们的技术团队一定能够想出优美的解决方案去解决这个问题。\n\n另外基于 Native 能力的离线化技术还存在一些来自平台的限制，如 iOS 的 WKWebView 不支持请求拦截，而请求拦截是离线化的关键技术，这个原因导致在 WKWebView 上无法实现离线化。\n\nWKWebView 的优势是：运行和渲染速度更快，与 Safari 内核一致 Apple 重点迭代跟进问题；劣势是：启动速度慢，无法拦截请求进而使用自有的离线化技术。\n\n权衡离线化所带来的巨大优势和 WKWebView 的速度优势，我们选择继续使用 UIWebView。（曾经在 iOS 11 发布前业界一度认为 Apple 会在 iOS 11 中支持 WKWebView 的请求拦截）\n\n**字符级增量更新方案**\n-------------\n\n字符级增量更新方案是一个前端领域研究了很久的课题，智能支付团队近期在这一领域有了突破性进展，这个技术方案可以通过字符级增量更新减少文件传输大小，节省流量、提高页面成功率和加载速度。其中增量计算能力由美团平台的静态资源托管方案 **Build Service** 支持。主要应用在扫码付项目上。\n\n扫码付项目是美团金融智能支付团队面向 C 端消费者推出的一款 H5 融合支付类的产品，消费者在商家消费之后，可使用多种 App 进行扫码支付，同时可对商家进行评价，支持美团、大众点评、微信、支付宝、美团钱包等多种 App，目前业务日均 PV 千万级。\n\n字符级增量更新方案的详细介绍，请参考之前的文章[美团金融扫码付静态资源加载优化实践](https://link.juejin.im/?target=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Ftech.meituan.com%2Fqrcodepayment-static-optimize.html)。\n\n**监控系统**\n--------\n\n美团点评内部前端监控系统包括：\n\n*   Sentry：异常监控\n*   Performance：性能监控\n*   CAT：网络监控\n\n在技术栈统一前，我们团队这三个监控工具在同时使用，然而监控系统上前端和后端不同的是前端对代码尺寸有要求，接入的监控系统多会对项目的加载速度有影响。综合多方面因素，我们在本次技术栈统一中选择了CAT来作为我们主要的监控系统。主要是它包含前两者的功能。\n\nCAT（详情可以参考[《深度剖析开源分布式监控CAT》](https://link.juejin.im/?target=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Ftech.meituan.com%2FCAT_in_Depth_Java_Application_Monitoring.html)  \n  \n一文）是一个美团点评的全端基础监控组件，在后端为各业务线提供全面的监控服务和决策支持，提供系统的性能指标、健康状况、基础告警等功能。在前端覆盖美团点评所有APP，提供近实时的多维数据分析、立体式监控、告警等功能。提供了近实时的多维数据分析，立体式监控功能。\n\nCAT很大的优势是它是一个实时系统，从数据生成到服务端处理结束是秒级别，秒级定义是 48 分钟 40 秒时基本上能看到 48 分钟 38 秒的数据，整体报表的统计粒度是分钟级；第二个优势，数据是接近全量统计，目前大约5%的高QPS 项目是采样统计。\n\n**协议**\n------\n\n目前我们使用的协议均为 HTTP/2，支付是金融最早使用 HTTP/2 的部门，由于支付业务的特殊性，在一开始我们就是使用的 HTTPS ，进而很早就使用上了 SPDY。\n\n在15年  \nHTTP/2 标准化的时候我们直接更新集群使用上了 HTTP/2，在 SPDY 和 HTTP/2  \n这种具有多路复用功能的协议上我们的前端架构全部做的都是按需加载的方式，大大减小了由“减少请求数” 所带来的流量冗余。最大化利用了 HTTP  \n本身的缓存机制，通过减小客户端大小的方式大大提升了网络加载性能。\n\n**安全方面**\n--------\n\n安全方面在前端我们使用：\n\n*   HSTS： 防 SSLStrip 攻击的标准解决方案\n*   CSP： 防跨站脚本攻击的标准解决方案\n\n同时在核心接口上我们有一个自研的网页请求签名方案，来在一定程度上保障请求是从我们的客户端中正常发出的。\n\n**总结**\n\n以上是对金融平台前端技术体系的介绍和个人的一些思考，最后说一下采用此技术体系所达到的一些效果。\n\n**效率**\n------\n\n*   由于 Vix 和设计部门统一标准，在界面构建过程中可以减少至少 **80%** 的时间，而这部分恰巧占整体研发时间的 **60%** 以上\n*   联调部分我们有 Portm 进行协作解耦，可以减少联调时间一半以上，一般一个项目联调部分占整体研发时间的 20% 左右\n*   另外我们还有非常强大的脚手架 [fe-bone](https://link.juejin.im/?target=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fgithub.com%2Fysmood%2Ffebone) ，它可以帮我们快速创建项目，节省创建项目时间 95% 以上。由于这个部分业务属性较强，未在统一技术体系中提及\n\n使用这几项技术的一个直接感受是人效大幅提升，一个前端同学可以并行 2～4 个项目，同时对接 4～10 个后端研发。\n\n**体验**\n------\n\n在使用 Titans 解决功能体验，使用 EH 解决界面体验的情况下，加上构建时预渲染和离线化技术的加持，我们可以做出**专业前端都看不出来是 Hybrid 的高体验 Hybrid 应用**。\n\n**质量**\n------\n\n在质量方面我们有：\n\n*   Lint 工具保障代码风格和质量\n*   TypeScript 做类型检查及类型推导\n*   Mocha 保障基础工具可用性\n*   Freekite 保障业务流程可用性\n*   CAT 做异常监控\n\n在整个质量体系架构的演进过程中，其实不只是这些工具来保障质量和可用性，还会有很多流程规范去保障，在可用性保障上感兴趣可以参考这篇文章：[《前端可用性保障实践》](https://link.juejin.im/?target=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Ftech.meituan.com%2F%252520checkout_counter_front_end.html)。\n\n在这些实践中我们很好的保障了产品的稳定运行。同时也欢迎大家在前端可用性保障上多探讨。\n\n**作者简介**\n\n禹霖，美团点评技术专家，目前负责金融平台钱包、支付、闪付前端团队。\n\n**招聘信息**\n\n金融平台的技术体系还是在不断快速演进中，而前端领域也是一个快速演进的领域，我们需要更多的优秀人才加入，感兴趣的小伙伴可以将简历发送到我所在的钱包团队，邮箱：chenyulin02\\[at\\][meituan.com](https://link.juejin.im/?target=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttp%253A%2F%2Fmeituan.com)，或将简历投送到金融平台（详见：[美团点评招聘官网](https://link.juejin.im/?target=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fjob.meituan.com%2Fjob-list%253Fcity%253D001001%2526department%253D7%2526jobFamily%253D26%2526jobFamilyGroup%253D201%2526pageNo%253D1)）。同时团队提供大量 Web 前端、Android、iOS、Java 实习机会，寻找实习机会的同学也可以将简历发到我的邮箱中。\n\n**也许你还想看：**\n\n[用Vue.js开发微信小程序：开源框架mpvue解析](https://link.juejin.im/?target=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttp%253A%2F%2Fmp.weixin.qq.com%2Fs%253F__biz%253DMjM5NjQ5MTI5OA%253D%253D%2526mid%253D2651747630%2526idx%253D1%2526sn%253Ddfb85acb20fbfcb4a8908917357be662%2526chksm%253Dbd12ac638a652575eb5e542e8159b903b8061ceeb32434ae50e2631a039eddc01e01b2837b95%2526scene%253D21%2523wechat_redirect)\n\n[美团点评境外度假团队前端项目开发实践总结](https://link.juejin.im/?target=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttp%253A%2F%2Fmp.weixin.qq.com%2Fs%253F__biz%253DMjM5NjQ5MTI5OA%253D%253D%2526mid%253D2651746979%2526idx%253D1%2526sn%253Dfd8e5b29cdb35a795c9a93c16e905d83%2526chksm%253Dbd12abee8a6522f82e5eee510e57a48839aabfe6f4cc46f7cece72bdedc81cfaa036f8a63039%2526scene%253D21%2523wechat_redirect)\n\n[Android动态日志系统Holmes](https://link.juejin.im/?target=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttp%253A%2F%2Fmp.weixin.qq.com%2Fs%253F__biz%253DMjM5NjQ5MTI5OA%253D%253D%2526mid%253D2651747596%2526idx%253D2%2526sn%253D6e08a25d203c3e05461b3c1c5f238e82%2526chksm%253Dbd12ac418a65255743ac6e7758b65f8d5369fde0bb902cee62bbe627f6a4bb307edf76287477%2526scene%253D21%2523wechat_redirect)\n\n[Shield：支撑美团点评品类最丰富业务的移动端模块化框架开源了](https://link.juejin.im/?target=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttp%253A%2F%2Fmp.weixin.qq.com%2Fs%253F__biz%253DMjM5NjQ5MTI5OA%253D%253D%2526mid%253D2651747236%2526idx%253D2%2526sn%253D38bfcea02e0e1818c58362636b417e09%2526chksm%253Dbd12aae98a6523ff5e34ee5e073e0a35e08e0295dffb4062142570ca4045154b0d14284cc9ff%2526scene%253D21%2523wechat_redirect)\n\n[weixin.qq.com/r/9HVSSg3EO…](https://link.juejin.im/?target=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttp%253A%2F%2Fweixin.qq.com%2Fr%2F9HVSSg3EOFBHrUkp9yDm) (二维码自动识别)', 0, 1, 0);

-- --------------------------------------------------------

--
-- 表的结构 `rule`
--

CREATE TABLE `rule` (
  `id` int(11) NOT NULL,
  `createAt` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  `updateAt` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  `host` varchar(50) NOT NULL,
  `path` varchar(100) NOT NULL,
  `title` varchar(100) NOT NULL,
  `thumb` varchar(100) NOT NULL,
  `description` varchar(100) NOT NULL,
  `html` varchar(100) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- 转存表中的数据 `rule`
--

INSERT INTO `rule` (`id`, `createAt`, `updateAt`, `host`, `path`, `title`, `thumb`, `description`, `html`) VALUES
(1, '2018-04-23 11:01:40.055589', '2018-04-23 11:01:40.055589', 'ruanyifeng.com', '^/blog/', '$(\'#page-title\').text()', '$(\'#main-content img\').eq(0).attr(\'src\')', '', '$(\'#main-content\').html()'),
(2, '2018-04-23 11:01:40.056482', '2018-04-23 11:01:40.056482', 'github.com', '', '$(\'.entry-content h1\').eq(0).text()', '$(\'.entry-content img\').eq(0).attr(\'src\')', '', '$(\'.entry-content\').html()'),
(3, '2018-04-23 11:01:40.057067', '2018-04-23 11:01:40.057067', 'github.com', '/issues/\\d+', '$(\'span.js-issue-title\').text()', '$(\'.js-comment-body img\').eq(0).attr(\'src\')', '', '$(\'.js-comment-body\').eq(0).html()'),
(4, '2018-04-23 11:01:40.063710', '2018-04-23 11:01:40.063710', 'zhuanlan.zhihu.com', '^/p/\\d+', '$(\'h1.Post-Title\').text()', '$(\'img.TitleImage\').eq(0).attr(\'src\')', '', '$(\'.Post-RichText\').eq(0).html()'),
(5, '2018-04-23 11:01:40.064195', '2018-04-23 11:01:40.064195', 'zcfy.cc', '^/article/', '$(\'h1.uk-h1\').text()', '$(\'img.uk-cover\').eq(0).attr(\'src\')', '', '$(\'.markdown-body\').html()'),
(6, '2018-04-23 11:01:40.065095', '2018-04-23 11:01:40.065095', 'juejin.im', '^/post/', '$(\'h1.article-title\').text()', '$(\'.article-hero\').eq(0).attr(\'data-src\')', '', '$(\'.article-content\').html()'),
(7, '2018-04-23 11:01:40.065525', '2018-04-23 11:01:40.065525', 'qianduan.group', '^/posts/', '$(\'.post-heading h1\').text()', '$(\'.post-container img\').eq(0).attr(\'src\')', '', '$(\'.post-container\').html()'),
(8, '2018-04-23 11:01:40.066030', '2018-04-23 11:01:40.066030', 'cnodejs.org', '^/topic/', '$(\'.topic_full_title\').text().replace(/精华|置顶/, \'\')', '$(\'.markdown-text img\').eq(0).attr(\'src\')', '', '$(\'.markdown-text\').html()'),
(9, '2018-04-23 11:01:40.074773', '2018-04-23 11:01:40.074773', 'fex.baidu.com', '^/blog/', '$(\'h1.title\').text()', '$(\'.content img\').eq(0).attr(\'src\')', '', '$(\'.content\').html()'),
(10, '2018-04-23 11:01:40.078631', '2018-04-23 11:01:40.078631', 'mp.weixin.qq.com', '^/s/', '$(\'#activity-name\').text()', '$(\'#js_content img\').eq(0).attr(\'data-src\')', '', '$(\'#js_content\').html()'),
(11, '2018-04-23 11:01:40.083019', '2018-04-23 11:01:40.083019', 'segmentfault.com', '^/a/', '$(\'#articleTitle\').text()', '$(\'.article__content img\').eq(0).attr(\'src\')', '', '$(\'.article__content\').html()'),
(12, '2018-04-23 11:01:40.083442', '2018-04-23 11:01:40.083442', 'aotu.io', '^/notes/', '$(\'h1.post-tit\').text()', '$(\'.post-cover img\').eq(0).attr(\'src\')', '', '$(\'.post-content\').html()'),
(13, '2018-04-23 11:01:40.083879', '2018-04-23 11:01:40.083879', 'w3cplus.com', '', '$(\'#page-title\').text()', '$(\'.body-content .field-item img\').eq(0).attr(\'src\')', '', '$(\'.body-content .field-item\').html()'),
(14, '2018-04-23 11:01:40.087564', '2018-04-23 11:01:40.087564', 'zhangxinxu.com', '^/wordpress/', '$(\'h2\').eq(0).text()', '$(\'.entry img\').eq(0).attr(\'src\')', '', '$(\'.entry\').html()'),
(15, '2018-04-23 11:01:40.088079', '2018-04-23 11:01:40.088079', 'cnblogs.com', '/p/', '$(\'#cb_post_title_url\').text()', '$(\'#cnblogs_post_body img\').eq(0).attr(\'src\')', '', '$(\'#cnblogs_post_body\').html()'),
(16, '2018-04-23 11:01:40.089161', '2018-04-23 11:01:40.089161', 'viget.com', '/articles/', '$(\'h1.hero__title\').text()', '$(\'.hero__thumbnail img\').attr(\'src\')', '$(\'.page-summary\').text()', '$(\'.page-block\').map(function(){return $(this).html()}).get().join()');

-- --------------------------------------------------------

--
-- 表的结构 `tag`
--

CREATE TABLE `tag` (
  `id` int(11) NOT NULL,
  `createAt` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  `updateAt` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  `name` varchar(100) NOT NULL,
  `thumb` varchar(255) NOT NULL,
  `description` varchar(255) NOT NULL,
  `postsId` int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- --------------------------------------------------------

--
-- 表的结构 `user`
--

CREATE TABLE `user` (
  `id` int(11) NOT NULL,
  `createAt` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  `updateAt` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  `avatar` varchar(255) NOT NULL,
  `name` varchar(50) NOT NULL,
  `loginname` varchar(50) NOT NULL,
  `description` varchar(255) NOT NULL,
  `email` varchar(255) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- Indexes for dumped tables
--

--
-- Indexes for table `comment`
--
ALTER TABLE `comment`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `config`
--
ALTER TABLE `config`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `post`
--
ALTER TABLE `post`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `rule`
--
ALTER TABLE `rule`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `tag`
--
ALTER TABLE `tag`
  ADD PRIMARY KEY (`id`),
  ADD KEY `FK_146246e4decdeee7cc88ee1ecd8` (`postsId`);

--
-- Indexes for table `user`
--
ALTER TABLE `user`
  ADD PRIMARY KEY (`id`);

--
-- 在导出的表使用AUTO_INCREMENT
--

--
-- 使用表AUTO_INCREMENT `comment`
--
ALTER TABLE `comment`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;

--
-- 使用表AUTO_INCREMENT `config`
--
ALTER TABLE `config`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=2;

--
-- 使用表AUTO_INCREMENT `post`
--
ALTER TABLE `post`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=50;

--
-- 使用表AUTO_INCREMENT `rule`
--
ALTER TABLE `rule`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=17;

--
-- 使用表AUTO_INCREMENT `tag`
--
ALTER TABLE `tag`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;

--
-- 使用表AUTO_INCREMENT `user`
--
ALTER TABLE `user`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;

--
-- 限制导出的表
--

--
-- 限制表 `tag`
--
ALTER TABLE `tag`
  ADD CONSTRAINT `FK_146246e4decdeee7cc88ee1ecd8` FOREIGN KEY (`postsId`) REFERENCES `post` (`id`);

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
